{"id": "167f341d-af74-4174-9c34-17ecad1f6048", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.484607829667348, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "50209859-43bb-4386-9b06-d416a58b9f75", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "9193e1c0-35aa-445b-92d2-e0473ae9891f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "37627fc1-b06c-456c-bd22-9737cf9e0443", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "80a5d868-508f-4fe2-9450-f41df164dc6c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "6747382f-8048-45de-8b1d-3d22f50e874b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "034453d9-c76e-4322-ac02-a7e673557680", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "9b0f2c21-a204-400b-8550-726a22e316b6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "d7259dd1-705e-437a-93e6-4c8028ec6a58", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "f52ab7d0-6a6e-4da4-bbec-c1ff691057a7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "d797522a-b7c6-4eca-9272-14a11bc80976", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "bee8248b-baf8-45a2-bc9c-f7f6c07743a0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "240de317-cb96-45c5-94c5-a52c9def9904", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "97b8c2fd-8451-400f-b337-1ad943b8b927", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "2ea37072-ed7a-4142-9ef5-c9c8ad907b21", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "fa666717-25e8-4858-bb6c-91e5ebebfa8f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "4fa1c944-be34-4e20-85c9-5628d29d3ac0", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        # Adaptive parameters\n        self.initial_inertia = self.inertia_weight\n        self.final_inertia = 0.4\n        self.c1_max = 2.0\n        self.c1_min = 1.0\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            # Update inertia weight adaptively\n            w = self.initial_inertia - ((self.initial_inertia - self.final_inertia) * eval_count / self.budget)\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                c1 = self.c1_min + ((self.c1_max - self.c1_min) * eval_count / self.budget)\n                velocities[i] = (w * velocities[i] \n                                 + c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "AdaptiveHybridPSODE", "description": "Adaptive Hybrid PSO-DE: An enhanced PSO-DE with adaptive parameters for improved convergence.", "configspace": "", "generation": 16, "fitness": 0.47901337232883806, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.32.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9257469839311812, 0.9239916640425456, 0.92361580984243, 0.9178820389496292, 0.9279128948126882, 0.9247490854554, 0.9250582157583759, 0.9185170405606675, 0.9130955633430636, 0.796071503880634, 0.796268945485268, 0.822639640460177, 0.8295700286219353, 0.7992833048138961, 0.8121149229732361, 0.8052972045775484, 0.8056039044109784, 0.8268189245549753, 0.10954270363374419, 0.12020090004813044, 0.08742872641362642, 0.11265235664420048, 0.13279179107219063, 0.1651529016727784, 0.1344424706377746, 0.11900966375369748, 0.09809117118085853, 0.09750241812419991, 0.09042902626533122, 0.10576368654130996, 0.09759320636635205, 0.09409822608101437, 0.06799788350562597, 0.0980307128746234, 0.11110625714425182, 0.09230927619852669, 0.9769122498275946, 0.9756694075574364, 0.9770021644148623, 0.9735355423753421, 0.9670937167666119, 0.9501618207111214, 0.9623662543517203, 0.9589834006307165, 0.9733410410836151, 0.8482845293444177, 0.8478303076058585, 0.8370961718010453, 0.8323859106798317, 0.8530506070871573, 0.8380629889018695, 0.8471192651870589, 0.8541793130505883, 0.8503564124471248, 0.4022331361760483, 0.22972721088343906, 0.2157879580319274, 0.28364361896518087, 0.38368203881432783, 0.9387598846605657, 0.4068528267063326, 0.23522817536658536, 0.9414062827225408, 0.7924567372808432, 0.7450990881273127, 0.7858373923222415, 0.7466735616928359, 0.801950164692703, 0.13595707303285076, 0.8357228146063677, 0.8573865575017979, 0.13685436092720515, 0.7420466946008437, 0.8344667007037538, 0.13745564881728367, 0.7526416553372254, 0.8069612409145317, 0.7898863060809345, 0.7855183440670865, 0.7777909159461543, 0.7908524627772295, 0.6626541355689066, 0.4595416187541832, 0.4793341063098291, 0.7966596120744678, 0.6630474397334887, 0.7901414684845077, 0.6556699145013163, 0.7268113683261801, 0.5043213014765037, 0.3167524079348151, 0.4648415942443307, 0.37517145756425174, 0.14860970030442533, 0.19405131189739522, 0.1111434714638273, 0.8036855017425152, 0.7534392651542005, 0.5677148906577558, 0.23615338264132146, 0.46066089559681966, 0.29460876604655817, 0.7368388490347528, 0.6740922587635381, 0.722265578201683, 0.5881812968204663, 0.5580184025839929, 0.59341034769149, 0.6317681681281135, 0.6990396417376691, 0.6537912640013499, 0.6638990746701211, 0.7007293474836269, 0.7291317281127074, 0.08441147935950033, 0.5242574001760709, 0.08504558188662381, 0.8709455427385228, 0.8598017790389657, 0.8662170886604486, 0.8034589185285461, 0.8197965133865963, 0.8222947212486195, 0.8251053157924485, 0.8705094841910334, 0.8098377862375301, 0.11012773336979775, 0.14575568137558237, 0.09748963596240412, 0.13373668157303564, 0.07731864531482247, 0.09027849219882356, 0.13428676394336558, 0.14675801005588096, 0.11732292580469206, 0.8454850387811746, 0.3457301122730312, 0.20629648010599277, 0.2985102061928667, 0.4304247262589327, 0.16085462355394597, 0.24301055289073148, 0.29439604701586464, 0.27743549282657953, 0.6192788065411994, 0.4647953029099853, 0.3727430916675416, 0.4142721157011695, 0.4674598529418207, 0.5314011434418642, 0.24988182465491782, 0.25296358112968187, 0.5946035898978196, 0.2834872205968635, 0.35300010322085995, 0.2366259187486095, 0.35793552658316385, 0.4037382060155865, 0.3017860042388033, 0.24244608966362124, 0.33031906644299613, 0.31660255460012177, 0.2934392786130746, 0.28502291070708474, 0.22228835656084245, 0.23811512702990223, 0.23646529382389103, 0.2585516594389935, 0.2319501452230358, 0.2238680870139883, 0.25492432840414636, 0.2097966698431466, 0.22632721605849637, 0.18511977218501607, 0.18758281025623824, 0.2276974992465921, 0.21114400750167495, 0.18774959146415127, 0.21337337628666053, 0.19979180529447582, 0.9530886114961309, 0.16637939648394917, 0.15439999636583157, 0.17356710742825232, 0.20127458369522466, 0.9481662989784061, 0.16737703652299118, 0.9435060868840444, 0.1635986769006289, 0.952780885924663, 0.2130269155735054, 0.9433566559172726, 0.21292705608599483, 0.9039673048418629, 0.1282030154250462, 0.10538621153564087, 0.1694584519596538, 0.9502462080884112, 0.2581758211412809, 0.2542195090183571, 0.24358695774924977, 0.22303643173985088, 0.30231598221629086, 0.23188478247008526, 0.2208709143729114, 0.2643506835997387, 0.2777589313954567, 0.08498919084211631, 0.09426568392173773, 0.10248755304858204, 0.14130606442700477, 0.10833069432082232, 0.13153695518316422, 0.08329646380258326, 0.06487979204740801, 0.0845675390143007]}, "mutation_prompt": null}
{"id": "b9d32a9d-4fb2-4302-b9d2-bcd6ca5b2686", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.9\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        def local_search(particle):\n            perturbation = np.random.uniform(-0.01, 0.01, self.dim)\n            candidate = np.clip(particle + perturbation, self.lower_bound, self.upper_bound)\n            candidate_value = func(candidate)\n            return candidate, candidate_value\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                self.inertia_weight *= 0.99  # Adaptive inertia weight\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.c1 * r1 * (p_best[i] - particles[i])\n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Local search phase\n            for i in range(self.num_particles):\n                candidate, candidate_value = local_search(particles[i])\n                eval_count += 1\n                if candidate_value < p_best_values[i]:\n                    p_best[i] = candidate\n                    p_best_values[i] = candidate_value\n\n                if candidate_value < g_best_value:\n                    g_best = candidate\n                    g_best_value = candidate_value\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with adaptive parameters and local search to improve convergence and solution quality.", "configspace": "", "generation": 17, "fitness": 0.36415345015027256, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9407270920709568, 0.9461005274997394, 0.9367564604262335, 0.9128285113398971, 0.9333935350211272, 0.9431471664233234, 0.942727641538433, 0.9336029538400019, 0.938345556774922, 0.7730158001263698, 0.8318133412990881, 0.7323766525265585, 0.8253035164604602, 0.8023115380367374, 0.8546323768262789, 0.7911081967133984, 0.8035602181956953, 0.8181635362174186, 0.10691248125880826, 0.06820749534838144, 0.07775440904681441, 0.11900605774143658, 0.11182213652206752, 0.11302339987274701, 0.0833922494210958, 0.11867878561912948, 0.036473952003325594, 0.08652924912284632, 0.09123579140859017, 0.08340748723674862, 0.09780973837035778, 0.09701124554523377, 0.05706621954339319, 0.08295391053145196, 0.0727387186838474, 0.11712204708276985, 0.9537894154480968, 0.9515919998294656, 0.9186448176627338, 0.9468182936316942, 0.9267003346764355, 0.9363840944867157, 0.9224922900697556, 0.9313808849212147, 0.9466590652819961, 0.6251871523283552, 0.7364256701024356, 0.7331664323713496, 0.703065561056369, 0.8039454135092199, 0.7533578531660126, 0.778846502791348, 0.8051084024685707, 0.7210428547172365, 0.23016335268323906, 0.11700812423584173, 0.1748623593648474, 0.2818492524238314, 0.2788070136328512, 0.27064413773555285, 0.1567001881423694, 0.14187167518155497, 0.1760573036020927, 0.6453122254711535, 0.7161122268556709, 0.13065856672591836, 0.6383731209506263, 0.5376603386850864, 0.5404764297127549, 0.4300509194925728, 0.5874256994658429, 0.43702443453202033, 0.5365020033974424, 0.48632532028313613, 0.13610947906375948, 0.47804809479423616, 0.7020228190239708, 0.6716542113955009, 0.13679256005722595, 0.37691531548907387, 0.6985412142757957, 0.12109472996635273, 0.10387494257886032, 0.08655777435956247, 0.25498129720065965, 0.08586244450826797, 0.11130006577488982, 0.17168293660726686, 0.19153114388318349, 0.15059319688748352, 0.18830090092680607, 0.29018472197036094, 0.25817588255568913, 0.22602471885465836, 0.10335949195015981, 0.17301999382767974, 0.31319816999336914, 0.20224822750383797, 0.19464128319346607, 0.20132957975143673, 0.053746688772030926, 0.22613112186836304, 0.1221355513711827, 0.11974936358198507, 0.09759746959040294, 0.2508484695820302, 0.1794366324876222, 0.15931554934319703, 0.12079443590867289, 0.29454797628009177, 0.19876634814828997, 0.1402366463900806, 0.25376856940502424, 0.2511702037955964, 0.12461117934061183, 0.2676031900398662, 0.12817352057497355, 0.762881264722787, 0.6306341226791732, 0.819049961790979, 0.5955513726604326, 0.652611385144555, 0.6949081807811257, 0.6275122245541281, 0.7447215203428952, 0.6850468094128612, 0.058466530580292275, 0.11218300085939481, 0.1105329468227183, 0.10600485925878944, 0.05454701014247554, 0.10674819009072656, 0.11067159199475152, 0.11854433722979596, 0.1364735061377902, 0.1966021936533875, 0.20820867907357665, 0.15924378883548584, 0.19242363477031876, 0.18856985996375009, 0.14696157675696264, 0.20376874400230627, 0.21453206816759218, 0.13556428133374865, 0.2878911244797634, 0.27685991438449786, 0.188086245240621, 0.21600482144173971, 0.37449781474405364, 0.26918342122636496, 0.19344793989424136, 0.16077879208786305, 0.14728915276025123, 0.3394888885437669, 0.2725373812499027, 0.21232078541126842, 0.20612006961017892, 0.2894423592509101, 0.3347259761952952, 0.18667655975997355, 0.2499537643235672, 0.2094233755375604, 0.2262799860040443, 0.21727578057780017, 0.2684922764545692, 0.26670372307024215, 0.28460804136791773, 0.23183720873874936, 0.25633312882023873, 0.26633248386687414, 0.2650410141368743, 0.1946569944579628, 0.18552290096830826, 0.20086341576502353, 0.20176274302864727, 0.1813084592511175, 0.16573077020185578, 0.2112846096424983, 0.17324443449134053, 0.18286473221001853, 0.9466675887753906, 0.18875791857830082, 0.15336680675862846, 0.17311296028602408, 0.20041456175424377, 0.9297925471998646, 0.1676817392779223, 0.9354464859812094, 0.1514465488398853, 0.9383013593081674, 0.2128166603667384, 0.9312556945486797, 0.2118415006299632, 0.8468051005890082, 0.873870643839587, 0.10507705580528781, 0.16945782735390824, 0.8714029733812965, 0.2437872131689004, 0.2482817704582705, 0.2506407985725779, 0.20182103052671407, 0.2029022876951685, 0.2402703280451558, 0.23499439775937814, 0.22314954234652795, 0.240263708930621, 0.10043196683663991, 0.09174328241054008, 0.0735848847720636, 0.13478897610602814, 0.09772706613265769, 0.12794767208638136, 0.09835913312274602, 0.07588421565768899, 0.08898641393533913]}, "mutation_prompt": null}
{"id": "fad1601a-1e93-467b-860e-7ae93fb5ee1a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "1c85e85b-3ac4-425c-b653-d67cc62d9d59", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "dc218659-83bb-44cf-8159-7714fe181b21", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.9  # Increased initial inertia weight for exploration\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 1.0  # Decreased social component\n        self.F = 0.5  \n        self.CR = 0.9  \n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            w_decay = 0.99  # Decay factor for inertia weight\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                self.inertia_weight *= w_decay\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE with adaptive parameters to balance exploration and exploitation dynamically.", "configspace": "", "generation": 20, "fitness": 0.31744522619931426, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9598754507955101, 0.948256881295146, 0.9350365078293852, 0.915248861090399, 0.951100158222948, 0.9348209118916684, 0.9453256722085656, 0.9569768837101157, 0.9513755693350261, 0.8050204039515447, 0.8749599871605068, 0.8426028734731106, 0.857172541939157, 0.8535000295950118, 0.7854533600552556, 0.8288347425380904, 0.8589398605434285, 0.8314561946317783, 0.09419355508280658, 0.19323682889562754, 0.052018284939752135, 0.07626061530977968, 0.1349405298196571, 0.11819087066873002, 0.0902711097298119, 0.12551763315766418, 0.08453727163971758, 0.14843956088989418, 0.03407395842987704, 0.06503855479713805, 0.11306735370594745, 0.09796838593172597, 0.060207926737212425, 0.09429474895679779, 0.10726640680031674, 0.0858183601268041, 0.9689399024558448, 0.9692802755475827, 0.9717282777142587, 0.9544252768473998, 0.9533399615545716, 0.9554456962933913, 0.9489191653303969, 0.9423956071067928, 0.9593456186667514, 0.40622854753711857, 0.44109483814779427, 0.859125940563918, 0.6652452503732442, 0.30085834066797956, 0.46120345391301987, 0.476049602290177, 0.6112223484492857, 0.6952473533943779, 0.23253416874840682, 0.17150881744032853, 0.21838221403772118, 0.2797041646781985, 0.19703395113343913, 0.15035670624129616, 0.17896267991987247, 0.17718355071892367, 0.17908335649654095, 0.26867217221380446, 0.20790268584989047, 0.17496754383726565, 0.22734238587959543, 0.28266776133615934, 0.19629328457052841, 0.3177234020213082, 0.22533094820613764, 0.22447544644714057, 0.1473005131548254, 0.17667757125634476, 0.19905666036424785, 0.2488214513414948, 0.13520920253196167, 0.20346457090723336, 0.2741652346052207, 0.2202279181272112, 0.24143826467201224, 0.1299385171203178, 0.009266905290553629, 0.09715702710727214, 0.004772595381944522, 0.05362220511610272, 9.999999999998899e-05, 0.09753818500679756, 0.015717460507954417, 0.09381253528755018, 0.2667345838328461, 0.28531707113691496, 0.35801554957547177, 0.10535203266179993, 0.09619431219370711, 0.18149105848021052, 0.12201355001146152, 0.24164740208786184, 0.1235804510416556, 0.1590736309921683, 0.06216915741817719, 0.16213127005115824, 0.2041464531204772, 0.2508316323885683, 0.1225963578291035, 0.3817127526470001, 0.22200715987693564, 0.08115273903089204, 0.05846412888371555, 0.13395305093297993, 0.18002600373730582, 0.16671774140254947, 0.10777657426525544, 0.04535652618194708, 0.12671033684132182, 0.22169914647858757, 0.0855489848354426, 0.6904654849914031, 0.6259590433123616, 0.5888196567311619, 0.5325088313854381, 0.5671396855269013, 0.528805213574317, 0.5724776827182145, 0.7548690797884183, 0.5733691591069184, 0.1343143407897791, 0.07085804644335225, 0.12609823981808965, 0.11817147975082176, 0.08692302697602261, 0.16393953050018772, 0.1345676102204516, 0.1433411690137968, 0.11873230598396545, 0.2392696662974647, 0.26259901554467224, 0.16745576734299994, 0.22605485903362543, 0.3058867299303003, 0.2182101053780401, 0.19503082660448168, 0.13926050458846206, 0.2636689845646414, 0.1827430146014022, 0.30469836560458197, 0.16775816682974787, 0.3508264135057083, 0.2818480170100277, 0.3770702236258261, 0.2637233952243032, 0.29462232922029485, 0.28029977164503117, 0.24628942554293043, 0.21303966174136313, 0.19741808652187232, 0.1473646674083653, 0.18276828955040614, 0.28373938787795416, 0.19386276492168752, 0.13902230952647754, 0.15546329505378798, 0.29297044947593687, 0.3013609245025003, 0.27748336278549246, 0.28591673816140706, 0.28701047020407433, 0.24451236245639218, 0.24260486825048688, 0.21460121162521262, 0.2575874854791378, 0.18357388638799554, 0.19307850098478097, 0.21426763911265823, 0.1785094472573352, 0.22946078554425675, 0.20149554702181738, 0.19178423577975867, 0.23160966556397122, 0.19578523175761842, 0.94679784673389, 0.18921993306061713, 0.1730238293224291, 0.969207995240309, 0.20047726829612234, 0.9426486417585522, 0.15358551976287493, 0.12431825909274485, 0.17580980072897312, 0.8898776451020749, 0.2128397582021022, 0.07333948169673843, 0.21139204513583487, 0.2123721041715414, 0.42477166064227134, 0.10516179498219913, 0.1694367681155673, 0.1046395751273711, 0.2070014530330343, 0.22372558388340025, 0.23151949850969478, 0.30123924919661094, 0.20865733298959455, 0.2323575935785821, 0.23704624006373765, 0.20932594650530323, 0.2393466961568569, 0.09442554331074093, 0.11238726493588669, 0.08280002515978335, 0.12614561043498018, 0.11433373493399046, 0.08976053924102156, 0.1783554823633946, 0.09396900501148953, 0.1096596706617392]}, "mutation_prompt": null}
{"id": "5ce65abe-6927-4742-96ad-4ada6047d886", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "02a81025-624d-4678-9ba8-fb91585b3100", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20\n        self.inertia_weight = 0.9  # Adaptive inertia weight start\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.6  # DE mutation factor increased\n        self.CR = 0.8  # DE crossover probability decreased\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.2  # Increased velocity limit\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            self.inertia_weight *= 0.99  # Adapt inertia weight\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid Particle Swarm Optimization with Differential Evolution, integrating adaptive parameters and local search to improve convergence.", "configspace": "", "generation": 22, "fitness": 0.4457803953839052, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.28.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.845087291343148, 0.8441937131549796, 0.8418576391077892, 0.8495170401472316, 0.8587594965317065, 0.8557921600114548, 0.8257398192949958, 0.8368789208126309, 0.8470565261751367, 0.6969455333079924, 0.7012879231409327, 0.682507289423594, 0.6945440677147382, 0.7043894043786907, 0.6996359592813437, 0.6761455954060431, 0.7072694878990504, 0.6825752311969082, 0.17272302144934948, 0.14935490027700438, 0.5623182936708468, 0.16644876275121734, 0.12858657995621148, 0.1300764387620238, 0.1377522082756406, 0.17523933283994997, 0.11380954466049154, 0.10718102700259369, 0.1495046303161811, 0.11134151345624999, 0.1252197337898593, 0.11414193058642064, 0.11236863310239897, 0.12167493667333551, 0.1146459286264071, 0.12321523132292733, 0.9758864912600962, 0.9789553343024825, 0.983179294504111, 0.9817091586338083, 0.9832148174374167, 0.982864425229214, 0.982675831252813, 0.983623717641513, 0.9800750176993273, 0.728406556844359, 0.7329714339088305, 0.713564029256258, 0.7363555995187955, 0.7258728018911724, 0.7171828809143047, 0.7186124899830082, 0.7040260077896827, 0.7210934359470138, 0.2292218483306352, 0.8696680474369952, 0.8465662548191996, 0.20761299723140814, 0.20877674262732338, 0.2557747424229164, 0.23388186764743446, 0.858352747717382, 0.23618308951985378, 0.6738080579759806, 0.6851731971176205, 0.6184550776876969, 0.6595430314345054, 0.6688146677910916, 0.6874677601585935, 0.6887357785686739, 0.667866818620487, 0.6627322850562591, 0.6250217236929823, 0.13374467237417553, 0.66235468735405, 0.6879078730446782, 0.6818908696324331, 0.6078629289150007, 0.7144796894761427, 0.6683738541914304, 0.6914232126969123, 0.6352837551982935, 0.6437501014295811, 0.6289985964849963, 0.5034327031598211, 0.5359160109956004, 0.5246605286613544, 0.5959657140987853, 0.5313733549543613, 0.5566200163502965, 0.2575689573376868, 0.2562667154040068, 0.4787843320267804, 0.6043487059878057, 0.18140875858760264, 0.44515366134895995, 0.6665280669380187, 0.6926225617858673, 0.633799054185761, 0.3737547802024266, 0.09906773720129747, 0.04646149268271216, 0.08817836360704545, 0.0713802808719678, 0.06916509421907124, 0.21393268869812632, 0.46830983136130055, 0.31171570557071904, 0.35611260989166527, 0.41398761268329043, 0.33735200811274557, 0.4205088584670671, 0.526974338735765, 0.4632081862133668, 0.4892195828920257, 0.543720862479014, 0.2730797366051744, 0.7888020523875714, 0.8001476803565946, 0.7456288863881821, 0.7990204291806545, 0.8095994718775963, 0.722575440400038, 0.7833221411292963, 0.752052613051365, 0.7691841779132902, 0.1434485709614024, 0.1361417454281898, 0.14120414095593847, 0.1343674419193046, 0.11980845963857223, 0.12842048969912134, 0.14241899955098103, 0.12162362435730845, 0.08992650737204255, 0.2169230413194665, 0.18059544481963274, 0.3632679386570965, 0.48461984272617864, 0.42587045193827977, 0.3133380846239726, 0.43627064427683704, 0.19036526504939566, 0.24835574577466946, 0.5053454635558642, 0.2583146769106418, 0.48578318333907655, 0.45753402797048937, 0.5540371515247864, 0.49503794126300693, 0.5197169852855277, 0.6882763982575033, 0.41775540773689845, 0.31726571573070483, 0.41791466687778067, 0.3990378304352533, 0.38854612884604656, 0.31242494782583274, 0.31199621273636136, 0.3995418515825939, 0.41942301189134845, 0.2288517086425762, 0.2127485490489367, 0.24975227632689612, 0.1978625029096841, 0.23250454611850624, 0.22775817680048482, 0.21682789058341756, 0.22647335859627327, 0.27570358400030814, 0.2683318505290263, 0.18979879042492254, 0.21968813250882857, 0.2353704259202155, 0.1905058513088549, 0.1901023916294109, 0.7070455869419107, 0.2197859450546038, 0.1895135929987276, 0.20942774885256799, 0.8831749260845972, 0.18831288899347098, 0.1537786411071813, 0.8849489367155732, 0.19961684339414976, 0.9079197214735898, 0.12257318649381099, 0.16997257508273922, 0.16472277315851147, 0.8705892410700531, 0.21065483771048243, 0.8896160466472519, 0.21229589912720326, 0.2098265017668558, 0.21063338065812665, 0.8544926336893583, 0.10507199176699666, 0.8700976340827096, 0.20827529618449048, 0.18192146223457006, 0.2179429559333792, 0.18825451817329797, 0.19537746532472255, 0.1969722698154618, 0.21637684183155448, 0.20463647478080305, 0.19589106978726312, 0.09833950841498795, 0.13076605844882938, 0.097645367715395, 0.09609372124809656, 0.0987616056631141, 0.1789754738452377, 0.08653969224267744, 0.0993500791620554, 0.09848208154218296]}, "mutation_prompt": null}
{"id": "a050103d-6d37-4db4-81e6-97ad3e68c7d1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "dcf12069-c39a-4fea-976a-4c45c54305af", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "0b4e7573-1b66-4bed-9205-60df55dd7576", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "32a8c08c-0793-4c7e-a8b6-44b763107170", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "abe06734-d640-4d11-93b5-ebb88fb401aa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "838e5c91-3089-43a1-ab0a-c73163f776a2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "fc044f83-e5ea-454d-a4d1-27204359b448", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "79ba8524-d84f-4ce5-ab71-d2238f024b61", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "ea322e54-ee18-4cda-863f-f2d69130a962", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "7bee8c5d-e973-4f0b-bfda-d08ac8e9d63a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "0b47dc47-cf6b-4302-a759-d27a04540048", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "e13cefe0-fa12-4109-b1bc-c1a35a44d4b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "ccedee92-7883-431f-8f40-dc9846c39ea2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight_max = 0.9  # Changed from fixed to adaptive\n        self.inertia_weight_min = 0.4  # New lower inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            # Adaptive inertia weight\n            inertia_weight = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) *\n                                                       (eval_count / self.budget))\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    # Global crossover with probability adjustment\n                    crossover_prob = np.random.rand()\n                    if crossover_prob < 0.5:\n                        trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    else:\n                        trial = np.where(np.random.rand(self.dim) < self.CR, g_best, particles[i])\n\n                    trial_value = func(trial)\n                    eval_count += 1\n\n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n\n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n\n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with Adaptive Inertia Weight and Global Crossover to improve convergence speed and diversity.", "configspace": "", "generation": 35, "fitness": 0.3565115414683561, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.8571167706588587, 0.8573279430410392, 0.8857074338568768, 0.8567372364936069, 0.8454601490593823, 0.8881616316835337, 0.867249838874419, 0.9016419825778124, 0.8858623658263891, 0.6745818023342158, 0.7026499131611997, 0.7249853343032764, 0.6966901022169911, 0.7066319845313939, 0.7040214271902634, 0.7166028095237291, 0.7295092819258531, 0.7473577452858384, 0.1257607196690531, 0.16279334166069803, 0.09479541748780662, 0.7407001974198592, 0.7696060843353676, 0.12533295496253105, 0.16026088772568803, 0.1901591052526218, 0.09630723545038222, 0.1246898826394559, 0.14061567284386167, 0.16158754357210836, 0.18378656628304557, 0.11929610345339603, 0.10617148185591141, 0.14211005824272127, 0.15725945385346107, 0.12367279233866424, 0.9824184744222793, 0.9659451673194946, 0.9739919395555128, 0.9716871659612333, 0.9765437680880336, 0.9766349123837321, 0.9784469828696716, 0.9777838243688161, 0.9689471775548179, 0.7339356180012759, 0.785205766961799, 0.7642798203206793, 0.7251572334481207, 0.684564949218965, 0.7610354391788777, 0.12822874946563134, 0.7337776872629966, 0.7348366997450568, 0.3561732353569578, 0.20831936932578865, 0.22977495932250636, 0.2806251945725253, 0.8547945859836128, 0.9081681585015594, 0.1498658967990112, 0.8455780518804092, 0.23536179782309452, 0.6420349057586525, 0.6596409847741146, 0.6400392225126472, 0.5835181243746259, 0.6517501121613881, 0.6175603760713642, 0.5972992025699996, 0.6544674101335192, 0.6128502922851751, 0.6104259769229939, 0.6308764262729268, 0.13582789763738345, 0.6016434357961471, 0.61713263224619, 0.5980676325070651, 0.6078800384204697, 0.604009780278173, 0.6114110731764433, 9.999999999998899e-05, 9.999999999998899e-05, 0.07212480538567778, 0.12528349531248673, 0.017285034022488044, 0.07241401325901753, 0.10579140594538816, 9.999999999998899e-05, 0.07382127502035218, 0.1281232481126835, 0.11027534449483878, 0.07914676711206137, 0.40741505430882385, 0.008916945464605308, 0.029245810518229498, 0.17642462163874173, 0.12140065660456278, 0.13080602710919897, 0.15314253826847957, 0.1608545588324909, 0.2918325852005875, 0.07182756860241135, 0.07637133501637872, 0.23791963311118192, 0.08944229144666083, 0.349497936701856, 0.0685435533517813, 0.07798046074433074, 0.09368575128976431, 0.10154027115886877, 0.1245905684476507, 0.006563891956541168, 0.006409134645246062, 0.09019687703171109, 0.13824691527336508, 0.08351154329097898, 0.7347160488810729, 0.6592799111555472, 0.6320738170197151, 0.6037610199122789, 0.6692608595491697, 0.6419242377373542, 0.656161698705223, 0.6797986618952772, 0.7380581663351792, 0.13342226230714316, 0.07883087290962554, 0.08118894104563057, 0.09286965929719848, 0.08038853998989304, 0.09046036826391812, 0.09762279944914498, 0.1617763328300369, 0.07301084598940055, 0.35241675600191225, 0.27903107430620666, 0.22635581812068262, 0.20570577906523446, 0.49577041799159793, 0.18801249346985205, 0.27374419818249596, 0.18424869756707163, 0.1421168837114004, 0.2509777763063332, 0.27337494797172657, 0.20537202186123937, 0.37415166188098326, 0.4539775881568814, 0.2918315976834358, 0.24340092914549316, 0.22105570196115032, 0.15806868767273918, 0.13768343593317856, 0.1570877614438757, 0.18496931298563968, 0.2031247989436089, 0.30104142731996986, 0.23830711389626436, 0.18080894282304427, 0.21444831872092407, 0.10983723319666372, 0.23033323233733716, 0.1987615194172877, 0.18937886306635787, 0.24202954479742045, 0.2005354851730492, 0.19105759378269715, 0.23454559908582828, 0.23483964274927227, 0.28212010450103187, 0.20472431452426476, 0.1761313996958186, 0.1914685108298445, 0.25710716311521287, 0.211438432085863, 0.18753742631701842, 0.18526364161724407, 0.7766965365570656, 0.18931814691342586, 0.1778805428695538, 0.07653329764353622, 0.15423244729146723, 0.17360931526187906, 0.20172681202155762, 0.9321882416246074, 0.10375816716107134, 0.12045607611836207, 0.1544689748709045, 0.8298451821748831, 0.2130688248163174, 0.8789943105224362, 0.21375649945806663, 0.21223828152215674, 0.21336881589994194, 0.10424695523038985, 0.16889307779268803, 0.10545121734101814, 0.22423610968655894, 0.23402960049129007, 0.21076008116514955, 0.17896161453271708, 0.24237559225343863, 0.22030369488588475, 0.19386001893882754, 0.1982126023741102, 0.2606968994538178, 0.06242550042907513, 0.08122643067405211, 0.07288937811507634, 0.035556040994157545, 0.11015185816259732, 0.1295224902794585, 0.07142787008075813, 0.0872825519446776, 0.10039268706148907]}, "mutation_prompt": null}
{"id": "d02de3d4-e01b-4a31-be73-90d34f483411", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "a7c345a2-80d9-4f9f-870c-846e68de45a3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "a42cf555-4277-464c-b678-c7fd5dd1cbd8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20  # Increased number of particles\n        self.inertia_weight = 0.9  # Initial inertia weight\n        self.inertia_min = 0.4  # Minimum inertia weight\n        self.c1 = 2.0  # Increased cognitive parameter\n        self.c2 = 2.0  # Increased social parameter\n        self.F = 0.6  # Modified DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            # Adaptive inertia weight strategy\n            self.inertia_weight = max(self.inertia_min, self.inertia_weight * 0.99)\n\n            # Local search phase inspired by Simulated Annealing\n            if eval_count < self.budget:\n                temperature = 10.0  # Initial temperature for simulated annealing\n                for i in range(self.num_particles):\n                    new_position = particles[i] + np.random.normal(0, 1, self.dim)\n                    new_position = np.clip(new_position, self.lower_bound, self.upper_bound)\n                    new_value = func(new_position)\n                    eval_count += 1\n                    if new_value < p_best_values[i] or np.exp((p_best_values[i] - new_value) / temperature) > np.random.rand():\n                        particles[i] = new_position\n                        p_best_values[i] = new_value\n                        if new_value < g_best_value:\n                            g_best = new_position\n                            g_best_value = new_value\n                    temperature *= 0.95  # Decrease temperature\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced PSO-DE hybrid incorporating adaptive inertia weights and a local search phase inspired by Simulated Annealing for improved convergence.", "configspace": "", "generation": 38, "fitness": 0.39791895028317187, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.24.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.3991787693683613, 0.4121859696688358, 0.4017081525737901, 0.4361476696069737, 0.3804855513593416, 0.36488037840383303, 0.3881961438341195, 0.4071234761665016, 0.4109140611436961, 0.5900521071407981, 0.6143741786582502, 0.5779819276888276, 0.5872749878216168, 0.5497112072396333, 0.5731474528047875, 0.5924364670664959, 0.5971909970989732, 0.5821240216510282, 0.13999385243616214, 0.13724253472966574, 0.13445991065068597, 0.13617298420532498, 0.1447874965507957, 0.12200218919680461, 0.16258979176943122, 0.14057467095295306, 0.14114180771574814, 0.10882598500450857, 0.15969647166571121, 0.10334008183482435, 0.10719292179737527, 0.09537752775037134, 0.14383119136408062, 0.10521056423547392, 0.12340102483695059, 0.08209028908964355, 0.9423935611223336, 0.9375693118041697, 0.9433198632291027, 0.9640462564792063, 0.9447486557302526, 0.9634220852111683, 0.9536654330329104, 0.9375399999094143, 0.9676043266654497, 0.59040641663955, 0.6288812668155785, 0.6015990852988166, 0.5996290246485769, 0.6268711008065998, 0.6342658284802185, 0.602453662865252, 0.5932893561919446, 0.585475516030924, 0.7499726612318837, 0.862391098423563, 0.8204662147429258, 0.7566332014198472, 0.724778218278101, 0.8569087158256492, 0.7732421802952314, 0.23280431137538182, 0.7633543587596645, 0.5980990515263411, 0.5660246681516081, 0.5526021852978296, 0.6051055231297848, 0.5866529673243355, 0.13036431737569676, 0.6166970710455738, 0.5704591345131907, 0.56655818761089, 0.49548808032917935, 0.12979837906866454, 0.5445135205798313, 0.5428026928464507, 0.5181972160976153, 0.5683110072426008, 0.5670678653611113, 0.45143136980381793, 0.4929652354789831, 0.4902930695507033, 0.4635593379546812, 0.3965149632339754, 0.31752976424442014, 0.38671846203456217, 0.4276190550336614, 0.4543537118253742, 0.44542329017939897, 0.5221906295007264, 0.43393382536254776, 0.5956278773453928, 0.5862151550224327, 0.2238289320530783, 0.4853280093096739, 0.5139504426685164, 0.6052280969032091, 0.6016139094145787, 0.5925929988572438, 0.09599456094855452, 0.13194142477973325, 0.35080575415474247, 0.19264966931590777, 0.28769200379249404, 0.2273956985162241, 0.1300836616508514, 0.3147404683617169, 0.12683145210085423, 0.4096210450355796, 0.4000291807833498, 0.4053392029139493, 0.39123668075101725, 0.43128593380303004, 0.4339901996864737, 0.37408890818366625, 0.42074156093858883, 0.08099678627972895, 0.35478144213221163, 0.35564430703919736, 0.3722137031673224, 0.37709083940668187, 0.3424945781070965, 0.3444056438324614, 0.3794495772490577, 0.3711353619022584, 0.36842758349963856, 0.13899346947981428, 0.11983747665051503, 0.14328118020676606, 0.1440302186727277, 0.11176020443194978, 0.11510487004943748, 0.13489628120522268, 0.14430577547057033, 0.13703705116470521, 0.21326788899610405, 0.5582774343799319, 0.6091858506882396, 0.611660323916818, 0.6968825796504693, 0.5829379106310013, 0.2451430132271194, 0.37048571777629413, 0.6575309235773528, 0.2493539418483186, 0.27550606582136716, 0.26384184131823385, 0.2563339620985593, 0.24992298301143634, 0.26656570016762904, 0.24202741657792526, 0.25493683491106434, 0.2670748720681917, 0.26966908922180244, 0.3275285863687447, 0.33813156156867974, 0.3145233376494557, 0.3254807498958081, 0.3281864555818298, 0.26443448277264325, 0.3190116703537651, 0.33598266432733237, 0.19862548181565032, 0.20667987786741593, 0.20148156649326554, 0.2059879352213292, 0.21751274887026129, 0.2272954048081397, 0.21706249070769312, 0.22890846217344019, 0.21969907280035594, 0.18853300062715583, 0.20783449662541298, 0.20888882804688302, 0.21680247721700174, 0.21191362480287934, 0.19086326124061337, 0.2020832031604224, 0.20145996081812878, 0.208513354704975, 0.7652511455520519, 0.18640683606231145, 0.807010889924339, 0.7600578154538621, 0.17560534086133506, 0.8418056317697808, 0.15067191648772227, 0.7861155046757409, 0.7924818166573544, 0.8396738379293482, 0.19946884558098343, 0.8437345183701744, 0.20910457535607918, 0.2085740049769621, 0.8384639873701709, 0.81806822311545, 0.8027274213943083, 0.8482471212222769, 0.19898778816412854, 0.18657471734828257, 0.191165205547967, 0.17672925627978142, 0.18875144703792968, 0.1884838029180691, 0.19671251760423725, 0.18882029640936548, 0.2103222742849895, 0.08625890167525974, 0.10353260464504943, 0.10978063279265937, 0.10656360432735068, 0.09922519035666699, 0.1040073111609301, 0.09370158117653504, 0.0861325851069199, 0.09045471982374942]}, "mutation_prompt": null}
{"id": "021627a4-3c6d-4377-9925-b4a86aa4bb7b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "428044f1-991a-47c0-88c5-90cea84048bb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "65e7c1b9-5e98-4c5a-bff1-53c76759d8d6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "2e7e8be2-9c39-4462-8a2b-a968a1e92687", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "84e19f9e-1a53-4601-b4a4-5629cfca08fd", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight_initial = 0.9\n        self.inertia_weight_final = 0.4\n        self.c1_initial = 2.5\n        self.c1_final = 1.5\n        self.c2_initial = 0.5\n        self.c2_final = 2.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.local_search_intensity = 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            inertia_weight = self.inertia_weight_initial - ((self.inertia_weight_initial - self.inertia_weight_final) * (eval_count / self.budget))\n            c1 = self.c1_initial - ((self.c1_initial - self.c1_final) * (eval_count / self.budget))\n            c2 = self.c2_initial + ((self.c2_final - self.c2_initial) * (eval_count / self.budget))\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i] \n                                 + c1 * r1 * (p_best[i] - particles[i]) \n                                 + c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            if eval_count < self.budget * (1 - self.local_search_intensity):\n                # Local search strategy around g_best\n                local_search_radius = (self.upper_bound - self.lower_bound) * self.local_search_intensity\n                local_point = np.random.uniform(g_best - local_search_radius, g_best + local_search_radius, self.dim)\n                local_point = np.clip(local_point, self.lower_bound, self.upper_bound)\n                local_value = func(local_point)\n                eval_count += 1\n                if local_value < g_best_value:\n                    g_best = local_point\n                    g_best_value = local_value\n                    \n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced Hybrid PSODE with adaptive parameter adjustment and a novel local search strategy for improved convergence.", "configspace": "", "generation": 43, "fitness": 0.42410620390845677, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.27.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.8315943703897645, 0.8413813731503866, 0.8416493656900692, 0.8365832419123831, 0.8527635030957103, 0.8409983678479764, 0.8647016187657267, 0.8492824043807723, 0.8542427593853316, 0.6734350087724001, 0.6459834740795964, 0.651082757441335, 0.6940235730242927, 0.6693350449412101, 0.672255828144243, 0.6842744440798119, 0.6851787946822534, 0.697613174277973, 0.5856295198092297, 0.1209451675337666, 0.149252777960459, 0.17894948320201698, 0.1159918157636326, 0.1515270897922999, 0.1384839506074933, 0.15041681482560054, 0.10741852759821724, 0.10325097423509455, 0.1128492378676903, 0.12393972182982504, 0.12140445945146239, 0.12068777185412816, 0.1246839715976581, 0.139381759850022, 0.1199818177249492, 0.16699961559136012, 0.977242639700127, 0.975807283633622, 0.9680956077842284, 0.9751307587414083, 0.972294697964728, 0.973145261659773, 0.9775114230627495, 0.9622317403845707, 0.960130900462784, 0.6929496687166656, 0.6969532831948945, 0.7015085970278951, 0.6948406305924248, 0.6987904326850516, 0.7079794833531464, 0.6861017482524558, 0.6814334389457122, 0.666796500779969, 0.22960251553197275, 0.36857605796223725, 0.3829017662257179, 0.20660839671161024, 0.916472525081402, 0.6182650428969967, 0.24162153579214918, 0.23521242572995138, 0.9062194290157896, 0.5550507827758442, 0.6798293302553344, 0.5962023447168445, 0.5443623637532597, 0.5615885823348401, 0.621035282434644, 0.6219211755025473, 0.6243601594372137, 0.6026297793570567, 0.13336876595044855, 0.5923816725801391, 0.5528778611886197, 0.6091514302508294, 0.5833408872675199, 0.5923216829800868, 0.6206845585617613, 0.573659292106071, 0.5871050681779233, 0.27036679123167295, 0.40512058233360226, 0.40686161220214234, 0.2071148795462452, 0.2762674588131919, 0.3306814439133934, 0.1963893082920275, 0.35497348693849873, 0.5146671744026139, 0.30491615087039836, 0.13630329157089272, 0.38653247695944093, 0.2952261926895198, 0.12763421618419346, 0.15108409623260177, 0.44640498956767494, 0.40730822127081534, 0.39431314843532717, 0.26210133718005546, 0.17637567113742858, 0.11264849146932943, 0.43567232355230856, 0.23731935792036352, 0.4796692943250457, 0.11921301868512546, 0.2886753347825043, 0.07068948638578154, 0.3496694362245657, 0.4490375813141192, 0.37052657478227147, 0.34233013158471726, 0.3127327557268842, 0.46158601633138396, 0.4688294682129259, 0.31131285981601564, 0.0845859332470138, 0.6989475328025518, 0.7258132237279175, 0.7114217553510461, 0.6979068601873855, 0.6702590498911767, 0.709343579388199, 0.6970850949024798, 0.7379498028526588, 0.7529738081620526, 0.12544273614503199, 0.15318903876923762, 0.15116766081856836, 0.11239065786732139, 0.15414213863535775, 0.12872006768670818, 0.13853119395686664, 0.1432248885163082, 0.14970825554340972, 0.29171156156936073, 0.2898615095076321, 0.26840013137124363, 0.26238394304398927, 0.6595803409594381, 0.5625755668139044, 0.28907425973640455, 0.29931111979368086, 0.18270417886304335, 0.48716901210040864, 0.5851869909507931, 0.6363611763636758, 0.3602282441362923, 0.5089879993203416, 0.5526191535848546, 0.4140494947101553, 0.6545365098795232, 0.4338445069466753, 0.3510452697289055, 0.4814510466464047, 0.4123125749846819, 0.3742882621821706, 0.3735799844851442, 0.3013271731771918, 0.2371442696837084, 0.5383556217127898, 0.4227042824713749, 0.2393517861962573, 0.22697569975353704, 0.21860981132851143, 0.21338999151326243, 0.2479880485031295, 0.2537123842584268, 0.22424724128784335, 0.22499006525206677, 0.24330722398631366, 0.2184313702405163, 0.20257832590837388, 0.24493625111647788, 0.20930763085576176, 0.1971220431587597, 0.24753725409578065, 0.6995103410335562, 0.24089823845098457, 0.20101491284603834, 0.18795846791505533, 0.18729535427112765, 0.18707489547219702, 0.9038818057994334, 0.20058783223144006, 0.8912431974284979, 0.9164727667578454, 0.16195798998401878, 0.1667377865795725, 0.8680135355479061, 0.8310804189809766, 0.8054712139624729, 0.8759977186247557, 0.16887991226021548, 0.12769498411869484, 0.7703690980657861, 0.16866558989854408, 0.1051812862523337, 0.20856330748393626, 0.2227081675657362, 0.1884404467367451, 0.18703660185787152, 0.22334765958325398, 0.19315903069775775, 0.24628412208752548, 0.2070208204930023, 0.20451494870176823, 0.10310045426238446, 0.09788575367876562, 0.09633963173955562, 0.16107798051909505, 0.10006932940532975, 0.11858449041610997, 0.08855398003924875, 0.09888560839420191, 0.10427471989057358]}, "mutation_prompt": null}
{"id": "5d9f7460-d2b1-4197-8d8c-5fafb961e3fd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "014dd130-ad62-49d9-9891-eb140c261a91", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "0ea3bdf0-5085-412b-8fe5-b8f2477e9717", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "1ef9a06e-a840-423f-899c-cd4bbd586af9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "c56f322f-fc16-4d8a-a89f-fd4ca0436818", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "3576a07c-ebc4-4b9f-a6d1-6d7f338558af", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "0fb24f6c-654f-46a8-ac93-f6525bd219a2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20  # Increased to enhance exploration\n        self.inertia_weight = 0.9  # Start with a higher inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8  # Increase mutation factor\n        self.CR = 0.8  # Adjust crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.15  # Increase velocity range\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            self.inertia_weight = 0.9 - 0.5 * (eval_count / self.budget)  # Adaptive inertia weight\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive inertia weight and dynamic adjustment for exploration-exploitation balance.", "configspace": "", "generation": 50, "fitness": 0.43897617187954147, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.26.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.7975634833836942, 0.7859701027061398, 0.8143096414109762, 0.8090593276658097, 0.7884523847024678, 0.7677966798788377, 0.7991000836873557, 0.7933386811190241, 0.7939192035973222, 0.5550552749292864, 0.5535255249881452, 0.5713619478142512, 0.5673746687859782, 0.546479315849222, 0.5590830098732319, 0.5613080673036488, 0.5636203058832997, 0.5784909840528928, 0.1546752806092454, 0.1499880210488942, 0.1126537914007506, 0.17757008740678026, 0.10507932590160285, 0.15469440994086103, 0.1406483664558289, 0.17386599516770407, 0.13990837357666075, 0.1151690487743241, 0.10256433163117418, 0.13726079505806577, 0.13441139836439997, 0.0998650543250782, 0.12947397142763584, 0.1297727330206826, 0.13373867984964294, 0.13678923228068418, 0.9755889343009412, 0.9752782509534329, 0.979175136187197, 0.9789479740678347, 0.9774178161172085, 0.9794057115437551, 0.9739261354580427, 0.9769212337340909, 0.978818141555257, 0.6591912614472308, 0.6439818655725753, 0.6648816748559183, 0.644077352668746, 0.6629152979296316, 0.6526242514439411, 0.6576038743464194, 0.6201198740733366, 0.6346776423105089, 0.8975520552472721, 0.8167255561805332, 0.22169829687853004, 0.19357478615691637, 0.19397074857848318, 0.824994191147701, 0.8148553619248099, 0.8098544208974701, 0.8836523319141348, 0.6295579908278444, 0.6018170202324732, 0.5600614296614337, 0.6099951787170814, 0.13215437988545287, 0.60690415723477, 0.547932295438391, 0.6026657067720529, 0.5579016089745329, 0.5556405133224009, 0.526929616221292, 0.5427891127193469, 0.5402181311432213, 0.5762019901695785, 0.5831372975433934, 0.5853525610334538, 0.6132164000671265, 0.5825759855754328, 0.4363865241492211, 0.43056029711435395, 0.4745352706006074, 9.999999999998899e-05, 0.5040720643053014, 0.4162541022008083, 0.4567168255170677, 0.4010463710402271, 0.4349684609998784, 0.47150962625043435, 0.5284526009758583, 0.5237376610822253, 0.48082315328172276, 0.35354880791534804, 0.4563207794979549, 0.5460675320564872, 0.5207069223922964, 0.4976208982302255, 0.15284067217118358, 0.2501792083288993, 0.20605796031478796, 0.4237794975785484, 0.06603360038109474, 0.4122418808624596, 0.23240388919666244, 0.1640150528560429, 0.2615218893585166, 0.4035353449217878, 0.3035940001153241, 0.40422698338141005, 0.366333052058743, 0.42653771068263235, 0.4246350409203442, 0.08116887430939057, 0.08220333836024951, 0.449472512326641, 0.7216164219214591, 0.7292984976501604, 0.7109011658461757, 0.6856446875968398, 0.7049516784750447, 0.6850698326794276, 0.6926818954668531, 0.7117864496981845, 0.670662679846012, 0.14847438767559162, 0.1036299555352389, 0.09851288998852181, 0.10233679163787979, 0.1407882229649473, 0.13023141239468972, 0.16392768037568273, 0.15380081841226623, 0.11794603096187206, 0.5096898754339747, 0.29461259588069255, 0.20054073681591933, 0.24182260852990844, 0.5241245812244452, 0.31191669833758473, 0.44401672448276297, 0.20992447510640344, 0.2663685941582016, 0.4262044766261518, 0.5028126833161235, 0.5141298742254843, 0.5662148704070427, 0.5378366704005298, 0.5273155703091228, 0.3905448733419121, 0.49733073890296486, 0.4672485819244021, 0.33062283329401654, 0.3469678036935847, 0.35533779317007064, 0.450819151542844, 0.42327061488993356, 0.49769510618916546, 0.33153114172857856, 0.43634974262878745, 0.38954400489220997, 0.22908690475747628, 0.20493324961881754, 0.23481874927738489, 0.2558746001714858, 0.2610595620685091, 0.25083429058056816, 0.21550336991938834, 0.22323803688805377, 0.24894646697186273, 0.1959090570544052, 0.21634178822900008, 0.24152135392171448, 0.23783632974301738, 0.2490578773433595, 0.23690440156989911, 0.2388776707070971, 0.23168350847547692, 0.23204530297192727, 0.9010735843128961, 0.8821126072724195, 0.1531428423926915, 0.8857474348498614, 0.20130569784915742, 0.8847210225307455, 0.12289891911453255, 0.8763857798656689, 0.8830694973248026, 0.8591674279323512, 0.21095606986941062, 0.8351033638607864, 0.211713116874651, 0.8405713443968501, 0.8258125299554088, 0.8360201805573939, 0.16662331571654465, 0.8374644412560139, 0.20287099972633782, 0.19471740626972367, 0.190670994516295, 0.1782251635784161, 0.19608248590613386, 0.19360445782795854, 0.23524310276691585, 0.18361829735687518, 0.20330268258782314, 0.10307201046268855, 0.13606694835058075, 0.0881477978886065, 0.10033607858310134, 0.10322019225275458, 0.12501836550758105, 0.10697555232303857, 0.14112802829383964, 0.12550840236346017]}, "mutation_prompt": null}
{"id": "49607b61-8304-47be-8f88-fe974c7fe970", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "d5c54f43-8e57-4b86-bcb5-1b2815a9ea08", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "72ecebdc-27b8-4be3-8943-5e146a35cdab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "e9dc3326-36fd-433c-9bb2-66002dc586cc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "b979b389-86f9-4460-9d50-d8a593ac97b1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "98c23a16-0d93-4147-9c96-0bbc37086713", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def levy_flight(self, step_size):\n        return step_size * np.random.randn(self.dim) / np.power(np.abs(np.random.randn(self.dim)), 1/1.5)\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.c1 * r1 * (p_best[i] - particles[i])\n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n\n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    if np.random.rand() < 0.3:  # Introduce Cuckoo Search inspired Levy Flights\n                        particles[i] += self.levy_flight(0.01)\n                        particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n\n                    trial_value = func(trial)\n                    eval_count += 1\n\n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n\n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n\n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "AdaptiveHybridPSO", "description": "An Adaptive Hybrid PSO with DE and Cuckoo Search inspired Levy flights for better balance between exploration and exploitation.", "configspace": "", "generation": 56, "fitness": 0.35110941377718924, "feedback": "The algorithm AdaptiveHybridPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.27.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.8827165972288863, 0.7726471611194319, 0.8966004641910118, 0.8009122285856096, 0.8472020728636012, 0.8858995846519356, 0.8724446143404568, 0.8464403671089316, 0.8756122782450955, 0.4420986906604112, 0.39232278201651083, 0.5055057392756982, 0.37165354222588454, 0.48499048499235187, 0.41140398000490763, 0.3993717111950873, 0.3279893914673062, 0.5621129549045074, 0.15069237317588124, 0.12655158654081422, 0.08166204456390003, 0.15240673527617676, 0.6194251134359993, 0.13654258396100472, 0.10433497061848374, 0.12402548699695182, 0.09395710310479022, 0.1240471983388165, 0.11483329658025121, 0.09664142374523965, 0.13191064285536436, 0.13828411480161684, 0.11784780282111973, 0.08982283365774568, 0.11878577862569017, 0.1296072340899489, 0.9773753068510738, 0.9701182657155271, 0.9708086404557171, 0.9670223365105703, 0.9686667205744407, 0.971499347126008, 0.9522831347234473, 0.974899813925246, 0.966553567767601, 0.550016225077895, 0.5447070639152499, 0.5614794920648796, 0.6327939755879213, 0.6285234653172341, 0.5969678746165542, 0.5196425557492816, 0.5693199386790793, 0.5490044117859549, 0.23044488237131078, 0.9109549284696262, 0.22988598012331862, 0.3600837639921335, 0.21355133096730294, 0.9099398377284558, 0.12719465598184454, 0.2364664413148635, 0.7790961825006311, 0.13489783554928914, 0.13641743142005747, 0.2770873778117273, 0.3218772258660161, 0.3082455173836268, 0.23760707806365589, 0.3713658291807991, 0.29079387421418534, 0.38905019763154947, 0.30577510666871344, 0.2772709376338346, 0.2670724821000293, 0.28501766564204667, 0.44862730848011956, 0.2497559423740877, 0.28636759355561703, 0.3702032530918218, 0.2536212827820562, 0.21747671742362407, 0.09381849010221854, 0.21720962107552377, 0.1519965327503645, 0.0902711272496135, 0.0062305825509111346, 0.021224280553643782, 0.10197812392904959, 0.11089247929597856, 0.08528504215969368, 0.1205230862285005, 0.2380579672209422, 0.2821500824748504, 0.1142385352101275, 0.13690812350824, 0.32088891146097287, 0.17391761692720487, 0.20390953507634801, 0.043203463350844906, 0.10117202423730853, 0.13295179935022972, 0.3385511359684996, 0.1660441880181308, 0.26253487902379224, 0.1901009931643124, 0.21453104669912915, 0.07553561680802212, 0.25153757485755346, 0.2621081741223479, 0.1161997929907782, 0.2157201119739458, 0.15179881835931408, 0.29667952564717937, 0.20909536939186468, 0.33256273342573694, 0.08362331638126774, 0.5945354506754814, 0.7113759929360497, 0.6027110659612573, 0.565799596332135, 0.5433665249880504, 0.5896425658503469, 0.5403727664477951, 0.6355223561975516, 0.5491371660196841, 0.0653869647546742, 0.14570719483468597, 0.07966042129045436, 0.15888397951594047, 0.08965152230047368, 0.11265759923580643, 0.11790225690064637, 0.481176199800181, 0.09563104120588928, 0.5654056768857915, 0.20240510545414614, 0.2882825216161743, 0.2761386411580352, 0.5743707241167655, 0.27664971077424716, 0.19887317001516747, 0.2780038935639483, 0.6175001276840979, 0.5050281955616882, 0.4612867771248449, 0.4206272591265512, 0.4225563205653696, 0.5503178107672051, 0.48344679111293354, 0.23751282201861945, 0.2553315940114277, 0.2802321367460894, 0.28816270253826837, 0.3792250140959651, 0.2164089162893862, 0.3254010295588726, 0.33407155380647546, 0.3517521448724741, 0.27375704625025754, 0.24677299225052696, 0.11436098851975363, 0.24566058671352198, 0.31656178459731243, 0.2294757138941571, 0.229290795155621, 0.22483574872486767, 0.20669353795768086, 0.2104592988470002, 0.2516993582561651, 0.24321871819822627, 0.20877418966705275, 0.21777954286795287, 0.2263300947885496, 0.25207435705772685, 0.2036675232062929, 0.18500556176606575, 0.2257983226573358, 0.2033061274975928, 0.22463653404605832, 0.947593677739338, 0.18832843752427175, 0.15450777096117085, 0.1733644520232569, 0.9111345175232087, 0.9427736788088628, 0.16385693673774804, 0.12657574399343208, 0.1537386067760379, 0.9573251597970764, 0.21349161544646622, 0.8815813116943247, 0.21180784743233827, 0.9271318060118757, 0.903555033089898, 0.21333486135344837, 0.1682550582640865, 0.9218826085117631, 0.22903152787155057, 0.22428441542058597, 0.24430952371173376, 0.22273926309306913, 0.20291324315727044, 0.23170591760301085, 0.23392010311604328, 0.23001178015252288, 0.2293018345128376, 0.0996209197080492, 0.13794399821558034, 0.09859798092719707, 0.11010750813329873, 0.11207218926025364, 0.13021147155196666, 0.09063199881291961, 0.07805651224330468, 0.1250794704838376]}, "mutation_prompt": null}
{"id": "ebf6113b-6bbc-4ed5-a3d4-3e010179a76e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "b6519f40-9d9e-41e1-aea2-fc5dbe5848f3", "solution": "import numpy as np\n\nclass HybridPSODEAdaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 20  # Increased number of particles\n        self.inertia_weight = 0.9  # Adaptive inertia weight\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.6  # Slightly increased DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.elitism_fraction = 0.1  # Fraction of elite particles to retain\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            # Adaptive inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (self.budget - eval_count) / self.budget\n            \n            elite_count = int(self.num_particles * self.elitism_fraction)\n            elite_indices = np.argsort(p_best_values)[:elite_count]\n            elite_particles = particles[elite_indices]\n            \n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                \n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            # Preserve elite particles\n            particles[-elite_count:] = elite_particles\n\n        return g_best, g_best_value", "name": "HybridPSODEAdaptive", "description": "HybridPSODE+Adaptive: Enhanced PSO with adaptive parameters and elitism for improved convergence.", "configspace": "", "generation": 58, "fitness": 0.47807052609975365, "feedback": "The algorithm HybridPSODEAdaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.27.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.8341130990352197, 0.8211654330775875, 0.847936364494638, 0.8350974978565489, 0.8346399430768965, 0.841499874753503, 0.8184257716355914, 0.8230944632535824, 0.8216520220857219, 0.6317260257736736, 0.6543376377496354, 0.6075836889842637, 0.6568197831942406, 0.6213094221093249, 0.6196276264429903, 0.6606337598111327, 0.6602178347098488, 0.6610796245471471, 0.14849418317448582, 0.14543061769379295, 0.11200460842557369, 0.11276672417596545, 0.1406935741027735, 0.12282071354311797, 0.12524129092054315, 0.14775429857969957, 0.1729135993172597, 0.11412569115464155, 0.16848438101676944, 0.14902050353104312, 0.10871991220741817, 0.10905838356492659, 0.1325985626968339, 0.10399782159939563, 0.1263497980908267, 0.1329521181938237, 0.9627815075876378, 0.9506287856336724, 0.9610029462915035, 0.966052017641571, 0.9707273297054114, 0.9582604070323233, 0.9669960637070368, 0.955808624147949, 0.9576545969001371, 0.6607386585320345, 0.6848381796020484, 0.6836069837510796, 0.6815310940079182, 0.6695820815963843, 0.7032251540344712, 0.6663918849400339, 0.6777232494397388, 0.6783051577207619, 0.9079693186514061, 0.38104296583090025, 0.228206168648602, 0.8829460740924042, 0.21840414320152912, 0.8493022862698425, 0.8447698857339868, 0.7112869258969657, 0.8308285670939589, 0.593366485072556, 0.6395145211458159, 0.6760555741961436, 0.6224236087623939, 0.6332439996162864, 0.13170260236678477, 0.6283311418001404, 0.6044435190757844, 0.6654163166134515, 0.5876308556897429, 0.6301510423554723, 0.6008476303717838, 0.6181185678551606, 0.6223771266723704, 0.5775719972148858, 0.6040969742968479, 0.6545885013334927, 0.594636732033685, 0.535333102131395, 0.5502270475783555, 0.42552191197385514, 0.5097933274350761, 0.522495859888116, 0.4534715339966876, 0.49407903426365585, 0.48091003185574677, 0.4759226263824673, 0.5189481681484431, 0.45560010970688725, 0.6171493700929802, 0.5525431125423064, 0.618974577111123, 0.5302638497328783, 0.6005199621661812, 0.6709823124115045, 0.57448598069163, 0.4181009518593307, 0.4333892545927098, 0.26578363953663386, 0.3520852710909287, 0.4074532519744435, 0.46062639975874764, 0.2112262999334339, 0.37221404483464515, 0.17886678062843475, 0.5011699047358309, 0.5154440758981144, 0.49607815058596183, 0.5112780158683785, 0.5165415176258694, 0.518765142075754, 0.48884590763591873, 0.5075335153851239, 0.48601353005979686, 0.7864910016908986, 0.7812311389429332, 0.7862149459347433, 0.7775806572766963, 0.7559118627522261, 0.777386196301081, 0.7863099103329263, 0.7783948033901332, 0.7236432343264838, 0.16824389047445842, 0.10711009593363963, 0.18247395159717028, 0.15476970221048436, 0.1309703827503157, 0.1131657278271172, 0.1383722420290272, 0.1608929941489169, 0.13595672628440902, 0.6291974278220804, 0.22059942304338043, 0.6805812576937635, 0.7049233147408873, 0.697434724457449, 0.6184453965554225, 0.26035095281198206, 0.6551251390461243, 0.6310932747693851, 0.5301851128266397, 0.48339459614402736, 0.4478499235880721, 0.5039912370229527, 0.5072885055349148, 0.522598382471402, 0.6172040387034995, 0.4650349807396522, 0.24497267388336585, 0.404501277080651, 0.41772882307688364, 0.45922902599230053, 0.3472505655154561, 0.2758929738088778, 0.5121521276989822, 0.4658042272495384, 0.42720191298641497, 0.09386755851119144, 0.24895028707889755, 0.22188871583402014, 0.2220449240095923, 0.27768188533768323, 0.22727717386018942, 0.23071354149351564, 0.20715887223582152, 0.2383098421209171, 0.2266507998918923, 0.21637422076100843, 0.2431402988368817, 0.1862810590200069, 0.2471244384362794, 0.2227548462784531, 0.20281177017811458, 0.17754269849425786, 0.20093359395599697, 0.2102989749509857, 0.9109989613107282, 0.18807119741401124, 0.15358225670232017, 0.9221060071116411, 0.2009988353345743, 0.9130705890019043, 0.12263650461395592, 0.9195942306597515, 0.900020250739619, 0.8881050800544681, 0.21238288718300768, 0.9067927799351212, 0.21189302589591252, 0.2128113482947226, 0.8763312822838185, 0.8553701736220682, 0.8809533181906116, 0.8796863128705843, 0.19350768719187517, 0.22299691766843, 0.18835328039502175, 0.19545052902692228, 0.22452614744862853, 0.29174721228054623, 0.24401378717973843, 0.179708725492303, 0.19449849336740077, 0.1095314542162098, 0.12361444304550873, 0.09840841929145971, 0.1055866079649661, 0.1053316239313421, 0.08521268076063315, 0.10842697602254536, 0.11123666047177772, 0.10056820888530638]}, "mutation_prompt": null}
{"id": "6a2fa28e-c73c-4078-ad53-5e024a546d02", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "3759fc6b-0e12-401d-b28c-b0a82aeb6767", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight_initial = 0.9\n        self.inertia_weight_final = 0.4\n        self.c1_initial = 2.5\n        self.c2_initial = 0.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            inertia_weight = self.inertia_weight_final + (self.inertia_weight_initial - self.inertia_weight_final) * (self.budget - eval_count) / self.budget\n            c1 = self.c1_initial * (self.budget - eval_count) / self.budget\n            c2 = self.c2_initial * eval_count / self.budget\n\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i] \n                                 + c1 * r1 * (p_best[i] - particles[i]) \n                                 + c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            # Local search around the best found solution\n            if eval_count < self.budget:\n                local_search_radius = (self.upper_bound - self.lower_bound) * 0.05\n                local_candidate = g_best + np.random.uniform(-local_search_radius, local_search_radius, self.dim)\n                local_candidate = np.clip(local_candidate, self.lower_bound, self.upper_bound)\n                local_value = func(local_candidate)\n                eval_count += 1\n                if local_value < g_best_value:\n                    g_best = local_candidate\n                    g_best_value = local_value\n\n        return g_best, g_best_value", "name": "AdaptiveHybridPSODE", "description": "Adaptive HybridPSODE with dynamic parameter adjustment and local search to enhance convergence speed and precision.", "configspace": "", "generation": 60, "fitness": 0.40977540719981703, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.846434577692647, 0.8354547266268562, 0.8270519868427791, 0.8242856731741963, 0.8253683251890962, 0.8271061698278854, 0.8387332834618455, 0.8483527758590828, 0.8420473614809314, 0.7338003390016352, 0.713993470115843, 0.6679975861614107, 0.7104057554162745, 0.6634559380503919, 0.7240177575466837, 0.6954393331440484, 0.6710037982632613, 0.7071429524386077, 0.12673976515546803, 0.13354842657168775, 0.1743068820733552, 0.1729942765297252, 0.14984709498995052, 0.15205782070432705, 0.15556884501518775, 0.6426252086589237, 0.10779925305976523, 0.11119908178921067, 0.11447476537419321, 0.15353716398127815, 0.12733689670803416, 0.13107769679081704, 0.14854790084806502, 0.11651622804789463, 0.1178095304655673, 0.13588993810430516, 0.9647134451302517, 0.9701911196042808, 0.9593639191595661, 0.9687477860670689, 0.9628973989893922, 0.9606562467799864, 0.9722945913932398, 0.9549151283666892, 0.9470735014693455, 0.6850683489249245, 0.6926313586325361, 0.6704535737630692, 0.6768486867205004, 0.6979672436802625, 0.6857312027858871, 0.6743569445461648, 0.6505205772746894, 0.6616709688311195, 0.2295849728208713, 0.846884248187827, 0.8968803836307502, 0.9021243765659849, 0.9178672151589911, 0.9028480385423683, 0.8719185961822413, 0.8551925814776414, 0.8768019025420312, 0.5170509613151928, 0.5411426080059359, 0.5479226413796681, 0.5451360678660717, 0.6456263325078471, 0.6287524951310155, 0.6207541470470934, 0.6060812898467226, 0.6703986164686419, 0.4611276729921132, 0.25013936053235064, 0.5522073406581023, 0.5840259591459891, 0.5478629969355757, 0.5471756105268193, 0.3604547532088255, 0.6005947056218677, 0.5828878059682334, 0.17593071576554054, 0.1381798280394736, 0.0935096695603661, 0.09130099236707989, 0.28094201771721106, 0.1773291045966855, 0.09346598989607025, 0.033364596797196056, 0.18490933196283843, 0.15822720681049884, 0.17005307816613457, 0.1078070200495791, 0.21214923470080072, 0.455376853843913, 0.281905724653539, 0.3345382042296414, 0.21152492341102225, 0.2114503333342458, 0.10402692702738092, 0.13802975464265343, 0.08626595498560141, 0.2503561359485137, 0.14816927781390654, 0.4301376503196528, 0.09707637450529505, 0.1842261301091207, 0.2103491973690892, 0.2980520653572557, 0.4518254945950585, 0.43305335990446525, 0.16667970660398312, 0.2978974564417146, 0.403864317282007, 0.342155018469641, 0.2651579673241107, 0.08139538707737481, 0.6517789631612707, 0.709240510920537, 0.6431386781341063, 0.58875015325732, 0.5889188047039203, 0.5613165827749969, 0.5214167460244331, 0.700653776517676, 0.58892999937021, 0.109210936152917, 0.11468423204407974, 0.12669002740466784, 0.12286629586554354, 0.13599427706194178, 0.1543191102195055, 0.10737364032321617, 0.14885863678807887, 0.13400483747472958, 0.24319896535504637, 0.16010095348577702, 0.156270213464764, 0.20666060499503225, 0.1748961833846755, 0.2173755798852447, 0.28145890607271995, 0.5791454084287847, 0.1685898929171199, 0.31994112443402745, 0.5062458194257656, 0.5424998515994479, 0.3943269233788316, 0.5741949227792922, 0.5753868320929275, 0.5703169513852202, 0.5129003445748208, 0.5728498752095391, 0.3093016643507355, 0.47857856066845805, 0.34182744170291457, 0.22759603054030153, 0.30842688096983706, 0.24945938936924494, 0.43991502667122095, 0.370225082474788, 0.36040166212187164, 0.21193899562128216, 0.2226152908050575, 0.21230722062582064, 0.2668687847336708, 0.2227494545473846, 0.21807881538091956, 0.21544296887458803, 0.20512668652003962, 0.218765387840812, 0.24052152481268008, 0.2372180642308903, 0.6841239280908072, 0.23755860654515804, 0.23929061117350192, 0.19208582957664921, 0.2062209748503957, 0.5517969208594362, 0.2169155114934076, 0.18699733042667432, 0.17263788542124026, 0.1847052051991982, 0.844369018341857, 0.8667837776964451, 0.19991289150411207, 0.3576125833327338, 0.15973162788590567, 0.17683612447259345, 0.8419874276819408, 0.20866644885296048, 0.8333721163695001, 0.7565618619752178, 0.16808308446790454, 0.21031107395997228, 0.7842835347278286, 0.16472919677497067, 0.8768350709394759, 0.2125106541837185, 0.19082273067323796, 0.21930005433972033, 0.21821433778787924, 0.19700510394035187, 0.20423897287609083, 0.21198566320669476, 0.19173567300387973, 0.21053636089466976, 0.10319537806068291, 0.09235027811455543, 0.1059966538281516, 0.08821934245232532, 0.09197839268851205, 0.10181666636630637, 0.11058975023459228, 0.08987686231974934, 0.08663863441313535]}, "mutation_prompt": null}
{"id": "50267049-b292-468d-8d1c-b3e85fa09706", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "9d25fb5a-4e08-48f6-9691-5c7001a8eab2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "a94b9eb2-c1cf-4c60-8d77-3786609e844b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "ca77db77-63a3-484a-82e5-3955d7bc67ac", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "d47261fa-46bf-4765-9579-9f657f6444f7", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.9  # Start with higher inertia\n        self.inertia_weight_min = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F_initial = 0.8  # Adaptive DE mutation factor\n        self.F_final = 0.3\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            inertia_weight_current = self.inertia_weight - ((self.inertia_weight - self.inertia_weight_min) * (eval_count / self.budget))\n            F_current = self.F_initial - ((self.F_initial - self.F_final) * (eval_count / self.budget))\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight_current * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + F_current * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "AdaptiveHybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) incorporating adaptive parameters for dynamic balance between exploration and exploitation.", "configspace": "", "generation": 65, "fitness": 0.46708130247108975, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.8572574706871657, 0.8711458519071439, 0.8470696568642315, 0.8501784822126429, 0.8313450494855803, 0.8471253174490531, 0.8464313094770529, 0.8513119154196922, 0.8507860657304196, 0.6897971278565773, 0.6732991333836384, 0.6859066174213756, 0.6806207938151164, 0.7047470682322916, 0.6881399055068047, 0.6819884067689009, 0.6727459197156133, 0.6926604376965211, 0.1499028559084813, 0.11149061445688624, 0.17557214801518117, 0.16348193302402192, 0.16562645160626366, 0.14072659154111156, 0.09126862420199178, 0.6670935029260233, 0.12973999908389122, 0.11042390933316404, 0.1124743686018208, 0.1242013191957625, 0.13978490527105092, 0.18046546256366747, 0.09086049180973221, 0.11007261038105753, 0.13802268333290413, 0.11624293882459114, 0.9820323824302136, 0.97099443375267, 0.9702527890067112, 0.9754593931296961, 0.9773104219107357, 0.9735598476900511, 0.9746491332520172, 0.9775807885960727, 0.9746055456113962, 0.724723063923933, 0.05970968060188897, 0.763101501636561, 0.7292845424762531, 0.15328778163216106, 0.7259262171681323, 0.72855524961796, 0.723724389528889, 0.738258837663267, 0.3964760716101893, 0.8945319446525483, 0.8698719814997831, 0.9027483079869154, 0.8076306871687169, 0.21413839889035646, 0.2386656613239918, 0.876368745803737, 0.8845050138623781, 0.640513740517424, 0.7190045219584205, 0.6499554368256351, 0.6122047835706623, 0.6774745318252049, 0.6584113659387105, 0.6589003504362518, 0.6508896325821796, 0.6864318548743173, 0.6294196913861098, 0.693366716194804, 0.7005167159754584, 0.6112330633333839, 0.6742589142720536, 0.13407122853736275, 0.69041255461293, 0.6800295511290342, 0.1335665459735188, 9.999999999998899e-05, 0.6014972163187833, 0.4857087083358096, 0.06379817509864338, 0.6286586153757474, 0.6122097952615044, 0.5880885485939724, 0.6513558815172809, 0.6345791285958449, 0.6391602648456526, 0.6825113502651811, 0.6594037091873339, 0.7023401264115412, 0.597237984015949, 0.2296201341141133, 0.6094269599949651, 0.683501431236652, 0.5667016230409125, 0.18654773998943797, 0.5107295512140121, 0.44710816302131084, 0.504918041902394, 0.47593646122172806, 0.07321643362390517, 0.40645543007020957, 0.4542328309857234, 0.3359277227902425, 0.4228063616994441, 0.44833528027075464, 0.35636304929119955, 0.5263140810861149, 0.5953087608570331, 0.5227807051950937, 0.08303912227780896, 0.5687674081150893, 0.08260339006918549, 0.7971032756566634, 0.8058383067638011, 0.8135448775258781, 0.7253964581444647, 0.7709987255806481, 0.8145770028317776, 0.8072374844968715, 0.783255298709612, 0.7789005910232663, 0.1282168735794923, 0.13782562398002485, 0.18759100637460513, 0.15181672182643757, 0.11477736692455054, 0.12990637491936396, 0.15305140609537082, 0.15864649623031457, 0.1527251863746074, 0.19542403914023743, 0.7254610182758084, 0.7236213385392454, 0.6984083078457093, 0.7562892778837524, 0.2263748507982275, 0.26006456920333454, 0.20794703033205186, 0.5470690488039469, 0.5585926816039728, 0.5466061651719145, 0.37305533282019565, 0.4377646574890247, 0.6557008136943564, 0.5107422081544214, 0.5639591210083934, 0.45045657984118304, 0.6600404358151134, 0.2665964235766922, 0.47177652232403766, 0.5052258467397875, 0.26944129140472484, 0.5850273761802589, 0.5307710291259649, 0.23901481902778687, 0.23412608756375053, 0.45397067034430816, 0.270329903352553, 0.28971098749066426, 0.24270995671577544, 0.23466792308762274, 0.2518576055914715, 0.24010680557854336, 0.24950027617921866, 0.2625121853914677, 0.23854890640603876, 0.1855993832571069, 0.20595488915445215, 0.25478515356577236, 0.24354791284002297, 0.24572235984577706, 0.18387094799764192, 0.18354514618415563, 0.20732446104862856, 0.22839968584037784, 0.9096088787490616, 0.17113833146415525, 0.15415161629032914, 0.1733154892089035, 0.20098546000480932, 0.9344909155326109, 0.9076957101053288, 0.12586794241986865, 0.9104203160065172, 0.8654666922278222, 0.21351200997217257, 0.8923801478973178, 0.2127332209474493, 0.21240242938196985, 0.21206343420514417, 0.1052251597457261, 0.16755144146472412, 0.8787823444764831, 0.18195101485723952, 0.19892221327522053, 0.25396434136093926, 0.2228812961964638, 0.23661175179851823, 0.21030160625723981, 0.2008327131539993, 0.1940266101728485, 0.21964492525475032, 0.10671214820156016, 0.09325262883853247, 0.10240854344021477, 0.14419559855696784, 0.10586558233847321, 0.10811564599798607, 0.09183940856944262, 0.10352692541412434, 0.0971735927285392]}, "mutation_prompt": null}
{"id": "bd300bf3-1a89-4b9d-bb31-647c52be5ce9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "b1845f45-6166-4f61-865e-41f0bf27dce0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "cdc5f0a1-0441-4b62-860a-ab3103552109", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "87109abc-24d7-47e1-b89b-9846db413baa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "6245654a-d63c-4174-93fc-2b452cc4acfe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "34def131-d7c5-40a7-8904-59253250f14e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "c466213e-a82a-4091-966f-f53dcd12889f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "62fa3dc8-0c84-4d9f-904b-01c9aa2911ba", "solution": "import numpy as np\n\nclass HybridPSOADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        # Adaptive DE parameters\n        self.F_min = 0.4\n        self.F_max = 0.9\n        self.CR = 0.9\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply ADE mutation\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    # Adaptive mutation factor F\n                    F = self.F_min + np.random.rand() * (self.F_max - self.F_min)\n                    \n                    mutant = p_best[a] + F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n\n                    trial_value = func(trial)\n                    eval_count += 1\n\n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n\n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n\n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSOADE", "description": "A hybrid Particle Swarm Optimization (PSO) enhanced with Adaptive Differential Evolution (ADE) mutation to dynamically adjust exploration capabilities.", "configspace": "", "generation": 73, "fitness": 0.48351464408307515, "feedback": "The algorithm HybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.31.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9083686886856037, 0.9108402670542542, 0.9082606934414034, 0.8912469640049379, 0.9128935756372926, 0.9058222910439394, 0.8944490071153844, 0.9029223437103384, 0.9029507831602028, 0.7589440424347214, 0.7748216554239195, 0.752959329267166, 0.7789158302638273, 0.7839999519964875, 0.7820883656871608, 0.7878693840157388, 0.7861090832852484, 0.7367551148815711, 0.14475054715143632, 0.10687229438635681, 0.08276496045336956, 0.15932501688215195, 0.11715191045215412, 0.1348743053221968, 0.10100570053723679, 0.12518921204230005, 0.0940313828626328, 0.13620069856131634, 0.08247644170861257, 0.05994377169914156, 0.15820334431273408, 0.11739835783916719, 0.14030468184371603, 0.1350039643401595, 0.07735220842657131, 0.08836103769829184, 0.9719019645923918, 0.967986177437052, 0.9711988402427696, 0.9727959141971784, 0.9782293116025412, 0.968026641478168, 0.9609916193149479, 0.9715527602686851, 0.9642613151913547, 0.7924915864303037, 0.7951410833604763, 0.7961506343906404, 0.814197805931244, 0.8364908332620296, 0.8206124212049101, 0.7972130545622874, 0.8095544262803027, 0.7916453757686601, 0.2171374109988765, 0.9173621541562683, 0.8482743286440118, 0.7982854640665036, 0.2126252984492999, 0.382632399641308, 0.23587019368991402, 0.3488138785379977, 0.9181347901721825, 0.7739613990784753, 0.7151059577960719, 0.7890417416832273, 0.13552251752702282, 0.7163820252243218, 0.6805918453494191, 0.13769005433059645, 0.7515228733563549, 0.7411280526045785, 0.757556248074037, 0.1304607652776455, 0.734086592135303, 0.7614207876376936, 0.7591764973550263, 0.741820361900047, 0.7424619383828902, 0.7733693810440989, 0.13725382179949264, 0.7418188697324506, 0.7305513042143675, 0.6155613918459291, 0.6459949035963986, 0.6469323135342319, 0.6498319341990617, 0.4382610934459319, 0.5926771825598633, 0.745570119679087, 0.6826567926602105, 0.6687646858950749, 0.5646534797911666, 0.670683900945339, 0.1501478940140618, 0.25680220612719107, 0.6915822202014905, 0.6760992755863198, 0.6536066918317502, 0.1861073531756705, 0.5080798392165093, 0.6450288979149181, 0.636771426554487, 0.6793221312966194, 0.5075168875528837, 0.2972636227665746, 0.5664227610003549, 0.25717978383736595, 0.6454711090386507, 0.606180595595221, 0.5998194355148203, 0.6033780305270321, 0.6573527064497751, 0.6800803607346375, 0.626771268438922, 0.6577478181206993, 0.6578063006550232, 0.8587414810009858, 0.8536295803907344, 0.8542559045431886, 0.8330110018203315, 0.8409862368164008, 0.8310913129843275, 0.8502319946594966, 0.874212458768635, 0.8277464525247601, 0.09010766491359445, 0.19070074561823125, 0.14387066881625465, 0.11786390610684883, 0.14578534456718695, 0.13404189559275814, 0.11088163887764457, 0.1631824717520829, 0.12390984082663803, 0.8447518859400694, 0.26647743506994703, 0.228647819088043, 0.28048625257671, 0.565787954524241, 0.275447953638008, 0.2425558525062096, 0.5486765323540005, 0.784424890065232, 0.5872583483445595, 0.45435882282253104, 0.22373820378674047, 0.5396619159246426, 0.31936386855143195, 0.3324465039049719, 0.5440610885630937, 0.5522607592376747, 0.5289158315181219, 0.29304289112362025, 0.4133739490595877, 0.21042680041420658, 0.2594588227608762, 0.3481960660598433, 0.6458538593036964, 0.2765261036589153, 0.20391175259450756, 0.1185755541925988, 0.2746863909782885, 0.22217575520914778, 0.26905308154667784, 0.2934162941765027, 0.298380165680034, 0.26369870033409637, 0.20882030833827947, 0.2479124446535501, 0.24863358118928336, 0.21062901319650784, 0.19378646477734518, 0.2546647951014457, 0.1811246476802697, 0.1944763058608725, 0.21787412012227336, 0.20394463945384012, 0.22454488538061745, 0.20910132626401867, 0.15953702298062888, 0.1885845276058341, 0.15437364929058617, 0.17342142425666884, 0.2011102565737115, 0.9351853409624086, 0.16740296220740603, 0.14903701157784233, 0.15406209361613477, 0.9481103521036762, 0.21386736828781083, 0.9398565609239705, 0.21306298017827485, 0.16914334488012717, 0.911568287492196, 0.9299961578539713, 0.10489116719673386, 0.9221763163001346, 0.24558304060092173, 0.20215616282412419, 0.25159786695996833, 0.20925751886670485, 0.21617498804136825, 0.2392076077481664, 0.17379905591842604, 0.23861158876382038, 0.28392562521511777, 0.11004395188952953, 0.11161912751551206, 0.09970159339830098, 0.09128995864567191, 0.10225225120987302, 0.14388959749272112, 0.10494378488101852, 0.114272456689956, 0.09553454258022043]}, "mutation_prompt": null}
{"id": "5fcc8482-e630-4027-b15c-2764336c6a4a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "67a25f4b-5f2d-4d11-b35a-e91a4e40bb8d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "35e9df2e-c48f-456f-85d5-f3217b3766cf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "cda7d1bc-d928-477d-a131-1ec64914c061", "solution": "import numpy as np\nfrom minisom import MiniSom\n\nclass EnhancedHybridPSODESOM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.9  # Start higher for exploration\n        self.inertia_min = 0.4\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.som = MiniSom(1, self.num_particles, self.dim, sigma=0.5, learning_rate=0.5)\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            # Adaptive inertia weight\n            self.inertia_weight = self.inertia_max - ((self.inertia_max - self.inertia_min) * (eval_count / self.budget))\n            \n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n            # SOM adaptation\n            self.som.train_random(particles, 10)\n            for i, particle in enumerate(particles):\n                particles[i] = self.som.winner(particle)\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODESOM", "description": "Enhanced Hybrid PSO-DE with Adaptive Inertia and Self-Organizing Maps (SOM) for improved convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'minisom'\").", "error": "ModuleNotFoundError(\"No module named 'minisom'\")", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {}, "mutation_prompt": null}
{"id": "aed91b78-80f8-4f00-9bc8-8b6159aed003", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "b31c7677-30ae-489c-97c8-d96d1c1da82f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "937cd8df-ec67-4fdd-8c83-a3e3087c41e1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "91586e06-2ea4-4972-9398-dda7179b9ab0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "e497f2b4-b1e3-4f9a-9167-a8985d6740d2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "2e6fe4d5-25d4-4833-a1f0-6cb252249161", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5  # DE mutation factor\n        self.CR = 0.9  # DE crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                # Update velocity and position (PSO)\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                # Limit velocities\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                # Boundary check\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Evaluate particle\n                value = func(particles[i])\n                eval_count += 1\n\n                # Update personal best\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                # Update global best\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            # Apply DE mutation and crossover to enhance exploration\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) mutation strategy for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9182980487262139, 0.9185614226700092, 0.9131387161341521, 0.9063759518348449, 0.9081999507061383, 0.9188365178380411, 0.9035031431321164, 0.9174861728765682, 0.9027607377731429, 0.8082794465933919, 0.7967007069566127, 0.7626341506649092, 0.7790392913423053, 0.7807347024749611, 0.7751406846849853, 0.7631280053369887, 0.7774983928369794, 0.7807718235115371, 0.1166531197863544, 0.14799391767321535, 0.1442223703035641, 0.15796912244376637, 0.16287451415381438, 0.13386095159564415, 0.11724793434103464, 0.11750908913137392, 0.0946979951604453, 0.09107255618231047, 0.11002663783192379, 0.07687553899538047, 0.11696452298835158, 0.11161425483271503, 0.12382596304410232, 0.11636086209005991, 0.10749482480284056, 0.0891967313752211, 0.9768078407147774, 0.975857491498059, 0.9765489970860324, 0.973486946441222, 0.9670556893430351, 0.9611468979664233, 0.9659886148184759, 0.9630758965549597, 0.9719427813230487, 0.8032637224262517, 0.8232587369181413, 0.8246435845938591, 0.841442428597063, 0.8378223520076247, 0.8113176766240066, 0.8245678845486994, 0.8057045217664877, 0.7860249609419651, 0.40187213045942605, 0.1706472529943236, 0.2154694605842734, 0.2146757310906552, 0.941522654029123, 0.1560056367403011, 0.9362088246998055, 0.1515713615891915, 0.9217323337631564, 0.7384534659185991, 0.7680129749375101, 0.7221991512644397, 0.8126722352494962, 0.813187537982872, 0.7519731846414499, 0.7640503419967282, 0.7332965429528362, 0.7440426477890367, 0.7561373153464751, 0.8276445459499346, 0.7201833640006836, 0.6804110678995463, 0.1369180707865233, 0.7699569901215695, 0.7626695057925778, 0.8035170090430994, 0.7989660321148058, 0.06071049519544869, 0.7190613114074074, 0.6595992398769881, 0.577947379949966, 0.6677706848495728, 0.649710337510147, 0.5587281203303524, 0.4791313031735104, 0.6611709465506435, 0.6737254082875046, 0.696898563755473, 0.45845551801109874, 0.3587764787865252, 0.28567657625799636, 0.21643287921229026, 0.7381635605960883, 0.7543337944245101, 0.5290266042951213, 0.17379479055369917, 0.5419861141843245, 0.293580215448662, 0.46281712579572354, 0.6136998627199357, 0.524138315245521, 0.5857138868844605, 0.2720092336288955, 0.31193899705425643, 0.6059918675938312, 0.5696553190715924, 0.553859331333143, 0.6468661191660783, 0.5061533569425921, 0.6413633293810583, 0.4609606098189555, 0.6789265137080214, 0.0849547951448254, 0.8361590624147206, 0.8394913201393913, 0.8550472488202645, 0.8291053191022394, 0.834677746541702, 0.8234605952629358, 0.8309645629329099, 0.8460071526725459, 0.8534351475201658, 0.14439103869703995, 0.14275104742956612, 0.18450323806012248, 0.11182706124936759, 0.07077135008759361, 0.12595808962723154, 0.11846590981716221, 0.1448441920354071, 0.11853734178490727, 0.27493490332774406, 0.2126834774177755, 0.30027823871635695, 0.3199601422879631, 0.3728293905708835, 0.8266185529721816, 0.16716194990609, 0.2246582482391387, 0.8279647296583398, 0.5556953666871177, 0.4955745522595787, 0.20376919952664185, 0.33568635541680647, 0.3461743226695093, 0.4839643503446571, 0.22486234150411155, 0.26270274726049203, 0.19814783218513898, 0.4050301516979934, 0.3179236477048123, 0.17373782168432916, 0.4195416140363255, 0.47402439691951004, 0.30075022816907293, 0.26094506856247435, 0.278417770616872, 0.26203518638719137, 0.27243009490285597, 0.24713329888377278, 0.2109395598245445, 0.2456959779328095, 0.22563759701647879, 0.2692087966557002, 0.2170103734942238, 0.27630155071758045, 0.24554932611451497, 0.2114835410283118, 0.7500734788141485, 0.22366795853484578, 0.19637051359961455, 0.22763096512736491, 0.19420552686993853, 0.1911991126620186, 0.2222236330701679, 0.22336860227137867, 0.9514576948620174, 0.16592038249839625, 0.15428575237842557, 0.9496717758932374, 0.18866485655835286, 0.9479476010715866, 0.1681081061489662, 0.9352623747253553, 0.16347622157230235, 0.9390708633612027, 0.21243817913991292, 0.9282196187530056, 0.21191005185311695, 0.8306355634079836, 0.8824683151378248, 0.10539906676704136, 0.16949880987476795, 0.9140819209286666, 0.23868734433794303, 0.20769721157032017, 0.21994722421367108, 0.2173975136936871, 0.2495144440594037, 0.21220775374106282, 0.26597808151669267, 0.2352344434684014, 0.20798769684403717, 0.08101911875662504, 0.13805540351769363, 0.10932814300636562, 0.14092604646417128, 0.08605243451038225, 0.12921369280185702, 0.09462723020071284, 0.08536140861772346, 0.10570679056881327]}, "mutation_prompt": null}
{"id": "737fde5f-7d3f-4471-9d83-2d7c4cb357d6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.5\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.vel_min = -self.vel_max\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(self.vel_min, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                r1, r2 = np.random.rand(2)\n                self.inertia_weight *= 0.99  # Adaptive inertia\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], self.vel_min, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n\n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    trial_value = func(trial)\n                    eval_count += 1\n\n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n\n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n\n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "HybridPSODE", "description": "A dynamic hybrid optimization algorithm combining PSO and DE with adaptive parameters and chaotic randomization for improved exploration-exploitation balance.", "configspace": "", "generation": 84, "fitness": 0.3440897347408096, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9609439960134925, 0.961729652347745, 0.9640934073327306, 0.9175035422327387, 0.9317358832663056, 0.9577193361650636, 0.954345538520663, 0.9648137909232536, 0.9591540317812427, 0.889659359912752, 0.9219660828618154, 0.8628250632421258, 0.850441500820175, 0.8255105443422105, 0.8843352000089661, 0.05421925023154439, 0.8760052529071355, 0.8628124603969656, 0.09427348702959448, 0.1269490931283086, 0.10253021647258098, 0.148319644088601, 0.11243296491678556, 0.11365873914736602, 0.08159138684429634, 0.11330242194344031, 0.06893908216209332, 0.12710688295826789, 0.07110617294774679, 0.08688402117022598, 0.09877527641567319, 0.08705936665257596, 0.06481181280066017, 0.09770171916557424, 0.09813508959126616, 0.09227813180495847, 0.9740197819366585, 0.9705361808621977, 0.9721123377574828, 0.956334448462837, 0.9594915083422274, 0.9526997499891616, 0.9592501027750091, 0.9512744385599026, 0.9615571424993808, 0.8059273807547711, 0.8228786431508899, 0.592597874118913, 0.5919128866909622, 0.5976422281807469, 0.7621917101379259, 0.6818764650869041, 0.7505909674079898, 0.7442196676859072, 0.2523898251379665, 0.09975133082096144, 0.1720571992025023, 0.28318232664164944, 0.24452231422509352, 0.21115954314077623, 0.17952138818715024, 0.17791768699923682, 0.1796990937194214, 0.8071868296749445, 0.6401922821452737, 0.394125328055706, 0.49825649762332, 0.13755024630425228, 0.30205916408531286, 0.13721344554096526, 0.13777060389671913, 0.13812873676937343, 0.13829325940165693, 0.13517445335762746, 0.4283689605210558, 0.4264843539174027, 0.13792598392834532, 0.5186615518654532, 0.5372932655236422, 0.6392346154257721, 0.8227385978450132, 0.08627387112283291, 0.048693653833846495, 0.10116386831245383, 0.21102283483876427, 0.18288453166164953, 0.19142638933574752, 0.0457618169734787, 0.13063274689934246, 0.18440632827496783, 0.18261046173043383, 0.19880140075780317, 0.1290078962104657, 0.16864243052206906, 0.15038151804629052, 0.08512852058962195, 0.17186882466330522, 0.2239242215859375, 0.1478654115643243, 0.5313189921904898, 0.1409640763212403, 0.1358335017710216, 0.2052095689380704, 0.23557877439730524, 0.09901303293921682, 0.2720023778925633, 0.09616452073248616, 0.16590708779757513, 0.15903294739569662, 0.19814960330205145, 0.11860693378243836, 0.17801700065125192, 0.2943772345994513, 0.2776795674960021, 0.13684985599998767, 0.1684224972181877, 0.08558873521548771, 0.745811666795799, 0.7493973739154589, 0.6095206584097048, 0.6658483290688877, 0.6056430771876705, 0.6722359859766759, 0.732620245340267, 0.6302443219335343, 0.6842360338563565, 0.060828177223666846, 0.06878469146627664, 0.19034300170157492, 0.1198128237106868, 0.09855756125603621, 0.14962491337759443, 0.09464858485041916, 0.19192501789251226, 0.11988650627943154, 0.16502731537382642, 0.15727264963056387, 0.2986616934849735, 0.15898406743009696, 0.2265615756721694, 0.1790285853355923, 0.22239180331710628, 0.23894431675005012, 0.15724298935620462, 0.1851846908128798, 0.21979631101311714, 0.2339278805230327, 0.2551306151260031, 0.25006345014817166, 0.26779948877116244, 0.18655222066996147, 0.29375952568659613, 0.2800067970249438, 0.28876255865230094, 0.19272630763753873, 0.2013297365647566, 0.1740470187902079, 0.18908815938342305, 0.14423839296288243, 0.2176419726933454, 0.28920042245065736, 0.12670032137180043, 0.26613094716230257, 0.21992991087465064, 0.21077519111973575, 0.27864561246681374, 0.301460271612908, 0.28698654461669937, 0.3103711403201599, 0.25553390102744733, 0.23977984769689964, 0.18668523263264425, 0.1933533005188448, 0.20101696450899176, 0.1722693829304195, 0.18305460345651237, 0.17633398471224104, 0.22948258458499582, 0.20572323646759627, 0.1942460104153073, 0.18778114043638117, 0.18918890719021264, 0.1723635913242344, 0.17349109921413186, 0.20096363287529162, 0.9303281345810482, 0.16829890042700668, 0.1677701251738356, 0.16356688770695216, 0.9077341643948534, 0.21249431874873204, 0.9285129288823625, 0.21200093960983735, 0.2127113970463025, 0.9387425804875517, 0.1053520791262248, 0.16994198517843795, 0.9107615984674633, 0.2065391079440324, 0.22778098372008226, 0.23180866208389694, 0.21414915723979233, 0.22907041126723648, 0.21775445823097073, 0.2396799064490589, 0.21197175247432287, 0.22185288552898375, 0.08713321058271761, 0.13778882035333007, 0.08458165823933217, 0.14397927957287115, 0.08941972523720365, 0.13912491161753027, 0.07994292375139189, 0.08460935582286455, 0.11351774256005465]}, "mutation_prompt": null}
{"id": "7c828708-f67e-40ad-a44c-cda042066c2a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 85, "fitness": 0.49553063453682666, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.50 with standard deviation 0.31.", "error": "", "parent_id": "167f341d-af74-4174-9c34-17ecad1f6048", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "c6e7c736-b744-4ee0-9466-5773ccee0e4f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "bd741c11-79f0-4ebb-8cd6-edb2741463d9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "fd287c18-073b-48e4-a03a-0167918bb288", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n        jump_probability = 0.05  # New parameter for random jump\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                if np.random.rand() < jump_probability:  # Random jump to enhance exploration\n                    particles[i] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                else:\n                    self.inertia_weight = 0.4 + 0.3 * np.random.random()\n                    r1, r2 = np.random.rand(2)\n                    velocities[i] = (self.inertia_weight * velocities[i] \n                                     + self.c1 * r1 * (p_best[i] - particles[i]) \n                                     + self.c2 * r2 * (g_best - particles[i]))\n                    velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                    particles[i] += velocities[i]\n                    particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "Hybrid PSO-DE with adaptive diversity preservation and random jump for enhanced exploration and robustness.", "configspace": "", "generation": 88, "fitness": 0.44109444619635857, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.27.", "error": "", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.8878740852179431, 0.870239798888257, 0.8973535926276326, 0.8804026436497984, 0.8822416581642469, 0.8796221571522977, 0.8947338400667673, 0.8776922773782965, 0.8711484033845952, 0.6282560198304857, 0.6404770764789429, 0.5618170015118251, 0.6716697951089481, 0.6846157286643282, 0.6630101259655792, 0.6299120033365122, 0.6389640048154284, 0.659340881641949, 0.16405998567780922, 0.38068583112705157, 0.2341069913902346, 0.4963840180472264, 0.1483981530683044, 0.152918907533371, 0.4188802511637998, 0.283340469846153, 0.45595501090527357, 0.14246402542590642, 0.16038752130881784, 0.15867870927635797, 0.5209839559820131, 0.14549819525146268, 0.2250648062633802, 0.14692527066182015, 0.13188354546331615, 0.14632757219241233, 0.9718804247359352, 0.9741210055871534, 0.9617596841548002, 0.9649452453939571, 0.9763779382101565, 0.9544131443795832, 0.9615174924942067, 0.972579348570568, 0.9623811180809451, 0.6450093946023918, 0.6627422799409076, 0.6245139937144482, 0.5916053614390978, 0.7330217287183489, 0.5965098803062958, 0.624156331043979, 0.6101251329590482, 0.5741812370687582, 0.9189776859081147, 0.9046046773891304, 0.17177547134141447, 0.9323668338224724, 0.8810651028637488, 0.8553669457084117, 0.23015823675104996, 0.2352782721889406, 0.2377940696902877, 0.6405951629022482, 0.13506153752537453, 0.7285813032264261, 0.1092635296368204, 0.4439268379609186, 0.41565380161932963, 0.611341342658191, 0.4893317002179267, 0.4675920153287336, 0.5905473578255043, 0.6520465005598051, 0.4854716505121832, 0.5336157137579138, 0.6095658552631245, 0.1362694438473736, 0.5866073303551751, 0.6714441309391903, 0.1365705078466557, 0.5182879503097428, 0.10748930611353824, 0.4708408350580561, 0.3964161525343034, 0.24818011648375937, 0.24237987397312932, 0.3571785362992618, 0.44512259464522774, 0.44928942543477157, 0.6147070730433973, 0.33956435274527197, 0.5311704049679784, 0.5398712000883255, 0.4626782117301157, 0.17360304419620864, 0.6116436606144326, 0.6134288031654858, 0.5531540962209053, 0.2610345394115242, 0.0934207767775328, 0.21805813379251782, 0.39805377405945974, 0.25843886554863027, 0.27941433104615543, 0.362428733410077, 0.38144277807558125, 0.16984713873378499, 0.39867609188438313, 0.37828743561309297, 0.4171517138239549, 0.37305121005762243, 0.3620493547189727, 0.006695734855462487, 0.3768487549216275, 0.38091074222921717, 0.08475761248967573, 0.7845319335428189, 0.7982385883217267, 0.6298510991019965, 0.8099365850903282, 0.7532103000571678, 0.799552442230061, 0.7142678005027197, 0.6677822634864693, 0.7038209472842964, 0.1299726749845711, 0.1563009316297601, 0.13879718872875424, 0.11815443619004307, 0.056995835317420696, 0.16175591191713812, 0.10868299932383885, 0.17899875379738805, 0.10581850816820404, 0.2744364919492449, 0.44139338357669733, 0.2771031978847204, 0.7157652787052036, 0.2707557630576901, 0.5353915897870468, 0.6630415777588896, 0.5477903388948648, 0.3795638245994565, 0.38413064245068895, 0.4971456494754174, 0.564107599754015, 0.45415473521691874, 0.42889842584853455, 0.47926681665807414, 0.36644960581342034, 0.2479955464875958, 0.22240545622533103, 0.2280586239061848, 0.4501385903639349, 0.20003568678438277, 0.38722704519481066, 0.37386530805655405, 0.22383564748445228, 0.32608847487446146, 0.31359881965480507, 0.20952246562944588, 0.33478053464474167, 0.2569328020942485, 0.2333820981550453, 0.2216619908571139, 0.2611605196388198, 0.26025078329422924, 0.2523211100134096, 0.22644791998886904, 0.24072951902155204, 0.20947758392577276, 0.7389568760883334, 0.19968428918816994, 0.21254432343852492, 0.22629883272590245, 0.2558531216239378, 0.2529769226169829, 0.24917900434815365, 0.18143300190005052, 0.4563047741887726, 0.1645974434723999, 0.1485136405360079, 0.5993848850423396, 0.20013736801185222, 0.9331355203449538, 0.7356155176771411, 0.9281265102572123, 0.9241537278117512, 0.9479227891418047, 0.6462652730534973, 0.9264432310258732, 0.16951308705499923, 0.21095559044108136, 0.8955564848949669, 0.16740536242608828, 0.21108220108093823, 0.8985870717773092, 0.19696570292719484, 0.19098654987094077, 0.20112541549277907, 0.19729974778501858, 0.17568682483842368, 0.1844815689788124, 0.21978419430862672, 0.1931724157989282, 0.1942200375654256, 0.11811358931522231, 0.08927886005122765, 0.0985395401830208, 0.12908569522337698, 0.10332171373894561, 0.09476559039231947, 0.07946811601579795, 0.10113488996412967, 0.17176099580409498]}, "mutation_prompt": null}
{"id": "0c12c9b8-eea5-4ced-a8dc-d9ab74fe29af", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "04dd75b2-8716-49d3-9f80-0c27b3b7f178", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "2fd4a58f-a0be-4260-88a6-743c93ca4531", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "6e1bd158-bd81-428f-bd22-634824974604", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "5961c56a-fe44-4c7e-8c43-a4260ce1e95e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "edbcebc2-0639-453c-84f4-34e990e8686f", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.9 - 0.5 * (eval_count / self.budget)  # Dynamic inertia weight\n                self.c1 = 2.5 - 1.5 * (eval_count / self.budget)  # Adaptive cognitive component\n                self.c2 = 0.5 + 1.5 * (eval_count / self.budget)  # Adaptive social component\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    dynamic_F = 0.5 + 0.5 * np.random.rand()  # Adaptively change F\n                    mutant = p_best[a] + dynamic_F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedAdaptivePSODE", "description": "EnhancedAdaptivePSODE with dynamic adaptive strategy for inertia, learning rates, and DE mutation factor to improve convergence and robustness.", "configspace": "", "generation": 94, "fitness": 0.48281568512343104, "feedback": "The algorithm EnhancedAdaptivePSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.27.", "error": "", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.8445409928051348, 0.8436168366310244, 0.8441697436334438, 0.8220852667196982, 0.8200430417167488, 0.8421400198904347, 0.8386614670619165, 0.8382995762546093, 0.8245913548895755, 0.683278895202013, 0.6518398024590917, 0.6629443031356019, 0.6584939447854385, 0.6547223482204965, 0.6193626987475407, 0.6649788958461224, 0.6423242719003284, 0.6634297968480507, 0.16195637019544062, 0.5737806448431131, 0.1590016147296407, 0.14518109687313974, 0.14045663881557335, 0.1506787711815818, 0.1448361252626722, 0.17004865458816987, 0.17148036489165241, 0.13100812578110943, 0.1066240839679975, 0.14478118347372015, 0.14886002098756035, 0.09226224414196493, 0.14788832946941455, 0.10798531944272527, 0.1242499400562983, 0.14469722826489795, 0.9685647978289577, 0.9640498531159306, 0.9690032910655914, 0.9745505132897893, 0.9780351464883839, 0.9659004723672693, 0.9739676292448434, 0.9716854125806866, 0.9660567826317757, 0.6908554425480798, 0.6844333085413399, 0.7221789130812633, 0.7018991876238265, 0.7163427420842632, 0.7085425646036729, 0.7099618653968429, 0.7111847699920653, 0.6853871609979787, 0.8369039478471656, 0.8766905491192846, 0.8674076090129037, 0.8898120088624689, 0.85397060940965, 0.21079940904512762, 0.8273178861439039, 0.7583088833934786, 0.8341034379085481, 0.6248446723684645, 0.6156277471969762, 0.5705507404016463, 0.6795065087117174, 0.632015932486016, 0.6171579715867548, 0.6459503713546224, 0.6250554469909801, 0.6175451977753814, 0.6792535772851571, 0.6550386348859991, 0.6663995476482212, 0.6732836310528787, 0.6022545537504448, 0.6543296491053117, 0.6155864709056226, 0.6176522695582225, 0.7322938456788703, 0.46679797598382133, 0.5708021033015023, 0.5207769519857703, 0.6084051909030286, 0.4262961586771825, 0.6394290737819447, 0.5513341020031499, 0.5518491211405349, 0.6308053937057226, 0.4524487329265864, 0.5985569889945458, 0.6711885274006973, 0.6059466893348862, 0.4570418196360203, 0.43152814365356995, 0.6745062674257658, 0.5806733811044711, 0.6596378863068468, 0.2764509973975916, 0.3739129727535404, 0.45771508505896574, 0.5129712048405781, 0.3487952431656556, 0.5215823154873455, 0.4284511463830418, 0.2609186532638803, 0.19853617380148048, 0.48040031200435196, 0.4731517680910369, 0.5226459658465877, 0.5385505994974329, 0.5419383161048601, 0.49953256568628945, 0.5668521395843551, 0.5481351114641808, 0.44239563484748656, 0.7641452643243606, 0.7701228367712856, 0.7734253350184305, 0.7424748927529694, 0.7658947758454335, 0.7593445305362488, 0.7237202226760889, 0.7822618777099262, 0.7619319864794472, 0.12896307916130612, 0.14598299915821666, 0.17676964594093536, 0.12279592681034301, 0.09433943093586672, 0.12681781161005312, 0.16908362454188175, 0.5769237410842115, 0.15159257878409294, 0.23051590613287887, 0.3086796171559554, 0.44580408525179216, 0.2922671165124624, 0.581865041119219, 0.2137455240249645, 0.19105342409808634, 0.6054485465709697, 0.5745096997216901, 0.5258472923480904, 0.6242319530071144, 0.49103352760301455, 0.5439112190654597, 0.5426484928576991, 0.5538696370656594, 0.4581744240566188, 0.5421554357644776, 0.5264260375548413, 0.390751153779604, 0.36402761278002005, 0.45674196570673675, 0.3898694215218934, 0.31646404381411175, 0.3592411925293353, 0.43712648371086615, 0.2193898348308585, 0.2750988125419249, 0.3066048801764688, 0.2106519922735921, 0.20968449251611687, 0.26767771580669586, 0.25243551467282555, 0.24364400408433085, 0.26924303684087514, 0.2636891142929698, 0.27097013255886127, 0.23694206912382665, 0.5901889891499648, 0.22423951771860795, 0.24983889248053026, 0.24102309178086856, 0.20952861166144, 0.20632397827386662, 0.1898854593326702, 0.21955193744741552, 0.15809282404307246, 0.1877601925734167, 0.15364353835459843, 0.17318642560874398, 0.8828334056044224, 0.8879479221899077, 0.7976451303963916, 0.20023934308711622, 0.17549282932331134, 0.8907174965726892, 0.8655972447039116, 0.9077332854786505, 0.20841560451927676, 0.8807624246096554, 0.21141767864086258, 0.8919430451757199, 0.20790959605554604, 0.20128365736715315, 0.182650572856361, 0.1734874666944035, 0.18922858501192463, 0.1952819896027549, 0.20128071979836104, 0.18720578865143034, 0.19131743419389657, 0.185952154449607, 0.18157864078601416, 0.09966372183025907, 0.1351875947375083, 0.1757093286370518, 0.10349755317496279, 0.09805951954642989, 0.1353690449196434, 0.09837144222881522, 0.10193976116823145, 0.09165184238260005]}, "mutation_prompt": null}
{"id": "2e435e0e-dda0-4537-b25a-de4f10f13623", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "6e28777b-df12-4b85-b5ec-979fd503ed53", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "7d45a062-bc68-467f-9f42-7b624aca0e32", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
{"id": "35996d58-638c-4a8a-876a-970d5c6120bb", "solution": "import numpy as np\n\nclass AdaptiveMultiSwarmPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = 3  # Introducing multiple swarms\n        self.num_particles = 5  # Adjusted per swarm\n        self.inertia_weight = 0.7\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n        self.alpha = 0.5  # New parameter for weighted mutation\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, \n                                      (self.num_swarms, self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, \n                                       (self.num_swarms, self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([[func(p) for p in swarm] for swarm in particles])\n        g_best = p_best[np.unravel_index(np.argmin(p_best_values), p_best_values.shape)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_swarms * self.num_particles\n\n        while eval_count < self.budget:\n            for swarm_idx in range(self.num_swarms):\n                for i in range(self.num_particles):\n                    self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                    r1, r2 = np.random.rand(2)\n                    velocities[swarm_idx][i] = (self.inertia_weight * velocities[swarm_idx][i] \n                                                + self.c1 * r1 * (p_best[swarm_idx][i] - particles[swarm_idx][i]) \n                                                + self.c2 * r2 * (g_best - particles[swarm_idx][i]))\n                    velocities[swarm_idx][i] = np.clip(velocities[swarm_idx][i], -self.vel_max, self.vel_max)\n                    particles[swarm_idx][i] += velocities[swarm_idx][i]\n                    particles[swarm_idx][i] = np.clip(particles[swarm_idx][i], self.lower_bound, self.upper_bound)\n\n                    value = func(particles[swarm_idx][i])\n                    eval_count += 1\n\n                    if value < p_best_values[swarm_idx][i]:\n                        p_best[swarm_idx][i] = particles[swarm_idx][i].copy()\n                        p_best_values[swarm_idx][i] = value\n\n                        if value < g_best_value:\n                            g_best = particles[swarm_idx][i].copy()\n                            g_best_value = value\n\n                    if eval_count >= self.budget:\n                        break\n\n            if eval_count < self.budget:\n                for swarm_idx in range(self.num_swarms):\n                    for i in range(self.num_particles):\n                        indices = [idx for idx in range(self.num_particles) if idx != i]\n                        a, b, c = np.random.choice(indices, 3, replace=False)\n\n                        mutant = p_best[swarm_idx][a] + self.F * (p_best[swarm_idx][b] - p_best[swarm_idx][c])\n                        hybrid_mutant = self.alpha * mutant + (1 - self.alpha) * np.random.uniform(self.lower_bound, self.upper_bound, self.dim)  # Hybrid mutation\n                        hybrid_mutant = np.clip(hybrid_mutant, self.lower_bound, self.upper_bound)\n\n                        trial = np.where(np.random.rand(self.dim) < self.CR, hybrid_mutant, particles[swarm_idx][i])\n                        \n                        trial_value = func(trial)\n                        eval_count += 1\n\n                        if trial_value < p_best_values[swarm_idx][i]:\n                            p_best[swarm_idx][i] = trial\n                            p_best_values[swarm_idx][i] = trial_value\n\n                            if trial_value < g_best_value:\n                                g_best = trial\n                                g_best_value = trial_value\n\n                        if eval_count >= self.budget:\n                            break\n\n        return g_best, g_best_value", "name": "AdaptiveMultiSwarmPSODE", "description": "An adaptive multi-swarm PSO-DE algorithm with hybrid mutation strategies for enhanced convergence and exploration.", "configspace": "", "generation": 98, "fitness": 0.32921769788688177, "feedback": "The algorithm AdaptiveMultiSwarmPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9188013515400937, 0.9084432256741958, 0.8767431389261696, 0.8599711167618238, 0.8608543851650201, 0.8879911803082112, 0.8842037348786834, 0.8816645049253136, 0.8528992170693459, 0.5339787494984599, 0.17687646715954775, 0.69988839343842, 0.47204590279263814, 0.32649747362773407, 0.34594933376454706, 0.4914213663412581, 0.48953547840251244, 0.3603201266216509, 0.15927002258715894, 0.16365806913538639, 0.1034492241013617, 0.11807798551475335, 0.09701748907211294, 0.12228651300755122, 0.10265624375494076, 0.08234993413066438, 0.11883723210808717, 0.07756467303398018, 0.08787584305025375, 0.08824107498173783, 0.14168276468181762, 0.08300228357504968, 0.07929149788523626, 0.12011077714152218, 0.09192112848290779, 0.11169373331917509, 0.9767773219770042, 0.9575962447240736, 0.9732339961366617, 0.9654986229707494, 0.9687235248141662, 0.9464192853365928, 0.9420849715161362, 0.9630659245842194, 0.9727795762194635, 0.4411428740393216, 0.4088313772804931, 0.47432286066458684, 0.33092209946726325, 0.35444032082496046, 0.4802456435229693, 0.257148888600117, 0.44037969736043103, 0.30700816334832925, 0.21335107232991501, 0.30558015660496096, 0.22449911790460642, 0.28115550898733943, 0.23764469176492542, 0.23276232988864798, 0.2095047529470948, 0.2373643555684497, 0.23843965305746073, 0.2804010841678748, 0.5046549209607104, 0.1341311448662036, 0.3804192840730677, 0.1560401680160265, 0.42261791093403445, 0.43609762660330775, 0.13655427008594268, 0.13689981143691998, 0.5290205639133299, 0.13383814403769645, 0.5216350000806846, 0.2309684474129231, 0.3847902522291361, 0.5894700801785208, 0.284161470978619, 0.1345099749416615, 0.1778957477783617, 0.11014274825157666, 0.07677379372113369, 0.1433786389840669, 0.3040443397911977, 0.2837393069381041, 0.3898946857098843, 0.06729726904972155, 0.15637668947233085, 0.14455265796034, 0.1705381019585882, 0.20827058864886228, 0.15722231374799012, 0.13563162132065576, 0.14456216525198173, 0.09189994106532451, 0.2527147743732905, 0.19945843389642448, 0.2055414883880471, 0.2297318084513571, 0.10520178805276248, 0.11803542027241565, 0.13040724536562143, 0.07972441884485126, 0.08207381876794384, 0.10290117214417838, 0.1380461995649339, 0.23044474674607673, 0.2114325820481322, 0.1275865531298499, 0.5809372031810067, 0.24451675625625258, 0.3381863853884596, 0.1749437961232021, 0.08470474164922615, 0.14231425058648295, 0.0846452982266257, 0.6640879909250188, 0.6575513770461897, 0.598327694653197, 0.5100244366510216, 0.7185741500870133, 0.5012106443877524, 0.6432537880011181, 0.6899409331076807, 0.6349729233522639, 0.08677837179971759, 0.08486572986681007, 0.11838584865059276, 0.10168948330884853, 0.07490216137733463, 0.09797224894877776, 0.13431908864875297, 0.10407299910603829, 0.1059637410894928, 0.2106673260776203, 0.3212761338582242, 0.19234579219711545, 0.19654193104892403, 0.28048881700427497, 0.3692408209264346, 0.24734064027788383, 0.23859257607991946, 0.23740604783764252, 0.2970103027745141, 0.3152869499515427, 0.2601508313852764, 0.2801109202118893, 0.2316699710528578, 0.28998114268766706, 0.2339616955818542, 0.22710384680374773, 0.25728181824070484, 0.19475290480815277, 0.26412114878445114, 0.16317702198751016, 0.18855026752464654, 0.25784038675812837, 0.17849604845861688, 0.22038422411779612, 0.22105030052391061, 0.15379449633383735, 0.23640566361750381, 0.2282591824145077, 0.22624356117878475, 0.2038997330200767, 0.21721435287292346, 0.2350041686550074, 0.27085854040938473, 0.25506669357394807, 0.23308070927492885, 0.19280224166875937, 0.17103694030000793, 0.17946457919304015, 0.20093114623631914, 0.16881373391403665, 0.18575843743712972, 0.1802442720968187, 0.20093923720435491, 0.2094294058624987, 0.9234775612377235, 0.9191267332315383, 0.18349819073792673, 0.9241885043782011, 0.20084107443607546, 0.9299859081660702, 0.7266871554948255, 0.9335451486645205, 0.1630248386906784, 0.885973744922878, 0.2133089248291301, 0.8827322825677304, 0.21071237325862935, 0.6927315279888261, 0.8811880062246115, 0.7794502676334267, 0.16607725304105536, 0.8529509913493963, 0.2021800865801523, 0.2162301556556564, 0.19919782317815593, 0.19018572906192777, 0.1801860038600931, 0.18526624810305037, 0.19271313214293218, 0.18764128895679577, 0.19517388124492197, 0.08720273955847113, 0.112080680991414, 0.09648098062887145, 0.09110123280628524, 0.14573192411054026, 0.09213912953729819, 0.10524880220129018, 0.0923250139202042, 0.07949251601818719]}, "mutation_prompt": null}
{"id": "9f09781f-d138-4461-b2b5-ffe7c2e20dfc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = 15\n        self.inertia_weight = 0.7\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Adaptive DE mutation factor\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.num_particles, self.dim))\n        p_best = particles.copy()\n        p_best_values = np.array([func(p) for p in particles])\n        g_best = p_best[np.argmin(p_best_values)]\n        g_best_value = np.min(p_best_values)\n\n        eval_count = self.num_particles\n\n        while eval_count < self.budget:\n            for i in range(self.num_particles):\n                self.inertia_weight = 0.4 + 0.3 * np.random.random()  # Adaptive inertia weight\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i] \n                                 + self.c1 * r1 * (p_best[i] - particles[i]) \n                                 + self.c2 * r2 * (g_best - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                value = func(particles[i])\n                eval_count += 1\n\n                if value < p_best_values[i]:\n                    p_best[i] = particles[i].copy()\n                    p_best_values[i] = value\n\n                if value < g_best_value:\n                    g_best = particles[i].copy()\n                    g_best_value = value\n\n                if eval_count >= self.budget:\n                    break\n\n            if eval_count < self.budget:\n                for i in range(self.num_particles):\n                    indices = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    \n                    mutant = p_best[a] + self.F * (p_best[b] - p_best[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, particles[i])\n                    \n                    trial_value = func(trial)\n                    eval_count += 1\n                    \n                    if trial_value < p_best_values[i]:\n                        p_best[i] = trial\n                        p_best_values[i] = trial_value\n                        \n                        if trial_value < g_best_value:\n                            g_best = trial\n                            g_best_value = trial_value\n                            \n                    if eval_count >= self.budget:\n                        break\n\n        return g_best, g_best_value", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid PSO-DE algorithm with adaptive parameters for improved convergence and diversity maintenance.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7c828708-f67e-40ad-a44c-cda042066c2a", "metadata": {"aucs": [0.9075232753831686, 0.9114681923034033, 0.9040278069370827, 0.9060573667390641, 0.9067047929964384, 0.8998727153788831, 0.9112275587103457, 0.9111185221827754, 0.9032775830077975, 0.7850483578680956, 0.7997403640995826, 0.7738217357423284, 0.7755234760325779, 0.7876677348547027, 0.79664347998032, 0.7868840207506498, 0.7890125980845, 0.7806042851734757, 0.09059529534080935, 0.09364860604433012, 0.13111344158574068, 0.1245009221671709, 0.1620654157699728, 0.1272628612626615, 0.10157573024388455, 0.09807990508798725, 0.1336058065296868, 0.09838507764241344, 0.10469883331853869, 0.12600091115916034, 0.10634049050894867, 0.11211202007170884, 0.16366393716216754, 0.09275349238218955, 0.09493954463523535, 0.10903836654668775, 0.9803927750753368, 0.9650744193175995, 0.9714254350867949, 0.9642051824631391, 0.9910512779399142, 0.9708186671725765, 0.9703671598859415, 0.9596287764697657, 0.972104235010547, 0.8034952776312538, 0.7708388394170566, 0.7764147800698002, 0.793895138021747, 0.8225132541440546, 0.8060091070888521, 0.8149533262277123, 0.7860653905717458, 0.7694845872437059, 0.911594779933698, 0.22775067599581567, 0.2167260475241044, 0.9254906386751274, 0.9331390795052867, 0.8378183006821246, 0.8810827286293846, 0.23536042852983907, 0.36210577939183264, 0.7831501954532001, 0.13577312919791162, 0.7216226659887744, 0.13707616527251998, 0.7798908111393854, 0.7346092954277159, 0.7856395613458397, 0.7769839976765069, 0.13596669461702182, 0.7425196470252935, 0.6913532779999163, 0.6861631180269256, 0.8232559651240476, 0.7729443108844947, 0.6561296280682579, 0.7092317280439151, 0.7649527063819999, 0.7874565479144648, 0.6037091388475235, 0.7468678546671765, 0.6572972761687945, 0.6111102433723111, 0.6495314051069179, 0.5652253355378191, 0.673377536915812, 0.6087282143361211, 0.5982679312321877, 0.6669079205742233, 0.7033731694476097, 0.641559784781077, 0.7031433047883052, 0.7328301044087437, 0.6480264551241732, 0.7314769884547072, 0.5937798587469889, 0.7133242101676973, 0.41749321253041605, 0.3807146413926865, 0.5722596709534491, 0.08276628544517606, 0.5928932049069277, 0.2966480595500688, 0.4165644785966599, 0.21190087704843807, 0.28172179334276903, 0.555815262967253, 0.6021526753390638, 0.6071084830516311, 0.6796159440401259, 0.6280433362195228, 0.7037178663519928, 0.6828881526906292, 0.6993824919536907, 0.08520464760075153, 0.8721676677804683, 0.8577644746917086, 0.8965935788911413, 0.8577176883506334, 0.8475925201491469, 0.7948981943213631, 0.8628349992968061, 0.8666900149391019, 0.854592774250841, 0.088457593118771, 0.09716969961306732, 0.0804988479792722, 0.1630045566980971, 0.11697437134990973, 0.11874499030407915, 0.12540542119899833, 0.14597575997701628, 0.09216110084268037, 0.7721467779531856, 0.3305679626095299, 0.17791378406576874, 0.2595213555938646, 0.23381735986995922, 0.30106719350160116, 0.28872696850466506, 0.6050287441358714, 0.2199746181809542, 0.4536243871897391, 0.5543689760667667, 0.6932255656618241, 0.5375492386555993, 0.48374074440028203, 0.4705660331833842, 0.3970624254518148, 0.49768883165248257, 0.648452783493572, 0.2890156102800957, 0.4343182839952363, 0.21178477476667745, 0.5401006184375006, 0.38304421379911713, 0.3303238851677117, 0.3675348970098694, 0.46607296188131897, 0.28001614879096615, 0.29775316218105496, 0.2956175342848535, 0.2407794033378733, 0.28242041673448326, 0.25095939685919944, 0.21752600355262253, 0.25669140997665907, 0.2926671961359386, 0.25093984389772395, 0.18370919614598136, 0.22402251757347913, 0.20073905616258592, 0.1859038935782391, 0.19625452227329476, 0.18460743635737986, 0.18463372193806815, 0.22762852132240263, 0.19606624639571624, 0.9482671208003864, 0.17308251169790434, 0.9237756856886102, 0.9387735889620402, 0.20136182769911914, 0.9433164129230098, 0.951288111142931, 0.21178600552396476, 0.15380106012504002, 0.9377401070543234, 0.21404484373942512, 0.9355179513304062, 0.21204862971008775, 0.2132408958368458, 0.15655635203475537, 0.9224368702841996, 0.16864478377447834, 0.21309624840204777, 0.18919855270910169, 0.18941048589674547, 0.1891255512897192, 0.1991005155031066, 0.19488288903654338, 0.20801031548169768, 0.24870545527530308, 0.19037961501246126, 0.20764689464019837, 0.0979732342721692, 0.09335838118743867, 0.13805653297169573, 0.08768637357634912, 0.10793447125114142, 0.10284247113123968, 0.0888494112968281, 0.10093694816970422, 0.14976320412663757]}, "mutation_prompt": null}
