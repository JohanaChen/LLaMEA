{"id": "eafa8883-08cf-4596-a587-435d1e002102", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                mutant = np.clip(x1 + 0.8 * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < 0.9\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This algorithm combines differential evolution and simulated annealing principles to balance exploration and exploitation for efficient optimization.", "configspace": "", "generation": 0, "fitness": 0.11927379674602837, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.19667895259753154, 0.19038396331889507, 0.1687262624029785, 0.17344236286642067, 0.17324573637221619, 0.17539553818692033, 0.16735833801019873, 0.16004479406854277, 0.15899027121804188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039382521027422235, 0.03954606327071253, 0.043747445026613097, 0.05211392134068771, 0.031744285760023416, 0.06145662103189775, 0.043460716085581996, 0.042297364063008214, 0.03783945751925144, 0.029700141310281314, 0.03617160473580794, 0.036841279009643624, 0.028657926222975583, 0.02463824961475858, 0.027651513955616935, 0.035993540146228575, 0.018641356333155223, 0.028502062041435017, 0.8705571462768283, 0.9374313081498828, 0.9089377457968795, 0.9118562496058938, 0.7155013732480222, 0.8951601759449795, 0.9700470531677412, 0.9255208947047893, 0.987626986304446, 0.07974555974475206, 0.04975231784644785, 0.1282221893087313, 0.07941342135733143, 0.04632232339944109, 0.06024579893105497, 0.06864297509964867, 0.055130660445592894, 0.06516880831023208, 0.12665907488125905, 0.12491953000905409, 0.1229541281510319, 0.11692579271866943, 0.10678741598356778, 0.10701689198535314, 0.10668174115737072, 0.10183972225166671, 0.12865436570578737, 0.0006206346202975999, 9.999999999998899e-05, 0.008677442938611057, 9.999999999998899e-05, 9.999999999998899e-05, 0.006448603526682528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003209941464841548, 0.011330228080016824, 9.999999999998899e-05, 0.00646725272022175, 0.009238005099682423, 9.999999999998899e-05, 0.0012640485679987767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02142281737542595, 0.043209755646402614, 0.04753984522489607, 0.0377427783155444, 0.03458442599036282, 0.07880802885360372, 0.03070796785271801, 0.03978711368503607, 0.0478026490398461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00327042099946262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063600694489091, 0.0020759859174779294, 9.999999999998899e-05, 0.17651561688855022, 0.18029748538065937, 0.20087927507046444, 0.19415652253475668, 0.2003266502791442, 0.2032342850548482, 0.2064945984170461, 0.16924391833479435, 0.19891237765125402, 0.04901690545418513, 0.05591265846011795, 0.03745342535892193, 0.04155495345155291, 0.027632627714008984, 0.03693911440017017, 0.038583761306550834, 0.03673464702469886, 0.042215949639506256, 0.1339913671246168, 0.12616585775264377, 0.14107052883584037, 0.14188641240055877, 0.14206033833629095, 0.16725527499693726, 0.16440438508908906, 0.13321119775397705, 0.17329448336757358, 0.15017778484640987, 0.14946553793041584, 0.15569249992355816, 0.1599431215174535, 0.15754336941356306, 0.1611634302220194, 0.15805650916236502, 0.15632675962905196, 0.16513638119783158, 0.09636044123908272, 0.0978526654703501, 0.10176861913368884, 0.10361213998511554, 0.096807309495887, 0.096516374052384, 0.11043558511288776, 0.10221943909116493, 0.09992784894232076, 0.1570370519372566, 0.1457781184334479, 0.178040655146395, 0.1476535995430348, 0.14284351313367405, 0.16576627221050133, 0.14834154556275758, 0.15961564219437208, 0.14681496440228403, 0.13490381380642935, 0.11501324894174281, 0.14113266970894234, 0.13469492784856052, 0.14357110339864598, 0.12985692871052257, 0.12035665014056396, 0.1594010934260225, 0.14526722596617947, 0.1698289117840337, 0.16969658663561182, 0.15292825643595975, 0.14951371100503963, 0.1636956817339118, 0.15441903718152827, 0.1629908011671377, 0.17165828484669454, 0.2096773617542984, 0.11936580036950706, 0.15531747840446974, 0.1554845054888947, 0.13401117573741173, 0.12117276056869264, 0.1542357789678881, 0.17680557763642646, 0.1394981334330445, 0.15232315092078774, 0.18060163352606196, 0.21263128278819976, 0.17633357932187832, 0.18340143954269572, 0.18140770350396918, 0.19418634040909677, 0.1835692207314341, 0.17988950698826955, 0.19000142078774684, 0.047135885503611696, 0.04758598003844039, 0.05179492655321827, 0.05466253639762486, 0.0410226232334453, 0.04705809612258094, 0.04626585800059635, 0.05070374659707921, 0.062483910677859966]}, "mutation_prompt": null}
{"id": "557ce37f-b217-495b-af34-d59c7d4386d9", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 1, "fitness": 0.1321227202741555, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "eafa8883-08cf-4596-a587-435d1e002102", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "ded90f29-e07d-4de9-b8f7-daeeb1bc3054", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.8 + 0.2 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.98  # Adjust temperature scaling\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This refined hybrid algorithm improves convergence by incorporating an adaptive temperature scaling and a more dynamic selection of the crossover rate.", "configspace": "", "generation": 2, "fitness": 0.13010000434708624, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.20753498707104068, 0.19340732700953112, 0.20876201650570347, 0.19863719032553173, 0.22602823173299302, 0.20256960275294567, 0.20956232791558027, 0.20466090330632147, 0.2090365973710182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06098406668290157, 0.049979555149937904, 0.05084467934288006, 0.045598830131290735, 0.045245883329517844, 0.051948385872313874, 0.042392135163738964, 0.0796101682881104, 0.04662732323700236, 0.05071106631907618, 0.031973920612030304, 0.03937032246736816, 0.031939463452471006, 0.03109224401725752, 0.046796340632242805, 0.036028209971339265, 0.04338480859768912, 0.04332130051897565, 0.9096994850957001, 0.9323280085639825, 0.9326462192010531, 0.9652166537699826, 0.8401936700352552, 0.9473963070161057, 0.8752107650521374, 0.823189000006092, 0.9638867918554785, 0.07842456772218886, 0.06266550002073457, 0.09308471842791821, 0.09963370118529291, 0.08618476396204411, 0.09394556131366971, 0.08309720211267269, 0.08672022291315207, 0.07518470622626428, 0.13411279740058357, 0.14743882486630022, 0.1264655873824969, 0.14915724930136898, 0.13082602620089978, 0.13778597012764549, 0.12476310455926509, 0.11449377177173536, 0.15568450141453027, 0.0178534055314451, 0.030339337218371454, 0.017911331923368023, 0.02530889683370874, 0.02849743377807812, 0.012319329296788473, 0.020969931483356574, 0.010343058996008736, 0.030456321954084653, 0.005143023184194129, 0.02769701291460136, 0.03291714047657146, 0.01496619245907349, 0.018856021416921442, 0.04001773406508602, 0.017769285429221404, 0.035013266068842475, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0526574932766678, 0.05552035945943512, 0.034976143386690084, 0.036200588702674175, 0.01711171329550254, 0.04277522746558682, 0.049651251791860695, 0.05468917054567324, 0.06400915226318671, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028818733253660467, 0.010846421400558026, 0.005149084775224355, 0.002561088599015826, 0.002162033027448551, 0.0007558689317084255, 0.0057736443174104535, 0.0021955576250225484, 0.0013483752195122545, 0.22025266404278432, 0.1934619761966726, 0.22414460795985358, 0.22568559071481897, 0.2097673797987405, 0.21935365361237447, 0.22354592883342583, 0.21375549074451072, 0.24017846591779313, 0.04723383226758193, 0.04135223041110714, 0.045588375894338284, 0.04231761303081605, 0.044112034249263576, 0.047043108038644976, 0.0538506243669864, 0.049571622905335455, 0.04770956554820205, 0.12632433006303379, 0.12228369294594377, 0.15903541036775737, 0.1391503068683656, 0.13196796873853622, 0.14360380594039657, 0.15388523341241012, 0.14499231344196195, 0.12856711120632003, 0.17885648266646315, 0.17127606650303695, 0.1684584873390853, 0.1811712822710898, 0.1665246095981856, 0.1729089118224152, 0.1785282635191019, 0.18747162536491357, 0.1741189719592332, 0.11845551897357676, 0.10640842968403763, 0.10355321385495897, 0.12363461573418899, 0.10904356866825726, 0.1254867595239928, 0.11734105220779989, 0.1267832352025684, 0.127059827024406, 0.16901402413891242, 0.15892685269325557, 0.1692805672719836, 0.16343614597405232, 0.147084392578533, 0.1574443685580298, 0.14830342448674605, 0.14707701068492474, 0.15497960584034265, 0.1430104157653943, 0.14034529815513708, 0.1454035692172938, 0.13779175542344724, 0.13704408335122575, 0.14926492945103798, 0.15047781654121772, 0.15270438321443602, 0.14647194589462909, 0.1977231879960647, 0.21278090795770566, 0.20548488952290067, 0.17801338695969227, 0.16324536155796632, 0.18826806401613672, 0.17161838827440445, 0.19486430752345907, 0.1692658628844378, 0.20947654489203382, 0.16057233417729422, 0.19530681243047043, 0.18414781789403, 0.15239180493945859, 0.17315429486988088, 0.18572012026992668, 0.1409992003999614, 0.20511226485393608, 0.18371117788219138, 0.17982718316047575, 0.18836330955330716, 0.1796178536273848, 0.19041505170418926, 0.17735755962169153, 0.19362150791514499, 0.18572394351058552, 0.1752787677614882, 0.04375326557495118, 0.048307718664974186, 0.0520650102842517, 0.0516927385993855, 0.04836203011139373, 0.05268653681207691, 0.06321217595601214, 0.051537368169482956, 0.05411708012990335]}, "mutation_prompt": null}
{"id": "95f2b78d-f5d4-4ba2-870a-e2e60edd97cc", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "9997f5f9-ec4f-420e-abeb-2c6db25a1932", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "4c168385-5edd-4402-8084-7294242d1a1c", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "c76e7d6f-5658-4271-bacc-3ea0a85dfac2", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "16c6693e-df1d-4e45-93ce-209f9f4e52de", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This enhanced algorithm incorporates adaptive mutation scaling and crossover rate adjustments to improve convergence and solution quality.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.21216696046801187, 0.18703796027875874, 0.20132488811867877, 0.22149154741368537, 0.22615991093893095, 0.2277023861394435, 0.1947303381883314, 0.20516109295742224, 0.21003437355062426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06115974746068764, 0.04441928912303206, 0.05040312693197213, 0.05186864899214305, 0.04602091274389131, 0.06154868311114481, 0.046506211945824716, 0.04359445587303967, 0.049702495179251294, 0.03589404933973639, 0.041791159030021285, 0.034520764567101514, 0.041829865614954165, 0.03448971527547107, 0.038257363933955846, 0.040492748077989416, 0.04323189587239373, 0.0437171811126813, 0.9681965618137155, 0.9325556076068233, 0.8774873830438954, 0.955908135808433, 0.9559061109248282, 0.8466042298432462, 0.8040006243841787, 0.8533475694245326, 0.9637248145020788, 0.08391793180838303, 0.08193446124391435, 0.0939511872004084, 0.097155721266173, 0.08030947630431129, 0.10235649335738584, 0.08040174793881583, 0.08994201665776358, 0.07445543832830881, 0.15003257500172462, 0.1493804969701743, 0.14555061993800644, 0.13724222861282998, 0.11302116841875376, 0.13159396515654975, 0.12759785742552554, 0.10795481161479092, 0.15709764776588564, 0.02294024734400557, 0.03284441928370796, 0.014818542390111489, 0.02816803647911781, 0.0070222971408026025, 0.01226594209088594, 0.03703230623608855, 0.005424316512824601, 0.034673418577784276, 0.021553354850789352, 0.03313174549499376, 0.026599037335990228, 0.01362013066096679, 0.014804838337677428, 0.017547650210769095, 0.027616097873147005, 0.02090305836159101, 0.012101324116469026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054978248036508415, 0.05552035945943512, 0.03454262691967269, 0.09650102175691988, 0.05831839685262952, 0.0989879298618167, 0.062300344010266184, 0.05468917054567324, 0.037951951783594784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008468588813906885, 0.006719428081509049, 0.007366231343538532, 0.0038006348702330772, 0.0056425644070507985, 0.002751171268267183, 0.0034148147460772993, 0.0028364295816134533, 0.0069077932290545485, 0.22378856494261035, 0.230075403687236, 0.2343259038617126, 0.253007053309104, 0.21603822047894372, 0.2422124955531112, 0.2578154794058569, 0.21246646037758132, 0.25117047846708596, 0.04523957302982906, 0.04183916075526817, 0.06258080287058398, 0.051390723947968175, 0.04423940307143692, 0.05056808275123692, 0.04959077783992816, 0.057573329104204984, 0.052045857928948, 0.11937495985574564, 0.12792252106040103, 0.1672655473543373, 0.1329943237674921, 0.13088251578947474, 0.14135937342577487, 0.1460254493545241, 0.15741135220221492, 0.15949978638513895, 0.1675547295061689, 0.17283288919802775, 0.16899159770631755, 0.1844244343851582, 0.16743730391920741, 0.189592383505355, 0.18729428101925127, 0.17828919295491852, 0.1858058153456964, 0.11933858651506857, 0.11129328477823763, 0.11216313013645773, 0.11483720735404801, 0.12140131538013188, 0.11076835154465947, 0.12249720152044141, 0.12956531483363365, 0.10950676013464677, 0.15733738546216247, 0.16157475362736928, 0.19542137151326566, 0.17349964284364328, 0.16416747239172214, 0.15523838456014705, 0.15030055062382874, 0.14503379391615467, 0.1582874518029075, 0.14303966289043746, 0.1418930904441077, 0.1509230901722678, 0.1336252026627992, 0.13535734481314943, 0.1497658625641387, 0.1518179499804614, 0.15410649038911584, 0.1336172665108334, 0.183506623067636, 0.19045032362655034, 0.21108644751619743, 0.1794101152199401, 0.16358740791950588, 0.22997207457028335, 0.18950178371795834, 0.2109526503536011, 0.15157658877549296, 0.17628511402294733, 0.16880600600479467, 0.20653546837983427, 0.19021731775882322, 0.15408234247448382, 0.16325061647633587, 0.21428522463640243, 0.141495889746443, 0.20557073088908517, 0.18264640753739736, 0.18913749281389258, 0.18569473348550425, 0.17718342658218367, 0.18867112733433455, 0.18480278285380336, 0.18048155488351314, 0.18830194313984383, 0.1848537805750715, 0.042126767900426465, 0.043844911669512654, 0.058040871806051886, 0.05243052901453482, 0.04641950222319757, 0.052773226994303535, 0.04545657364129385, 0.044301437255735654, 0.04911451340088191]}, "mutation_prompt": null}
{"id": "dcb18cf5-d9d5-4b8a-ae70-42c253448852", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n        \n        while evals < self.budget:\n            # Adjust population size dynamically\n            if evals > self.budget / 2:\n                self.population_size = int(5 * self.dim)\n\n            for i in range(self.population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor based on fitness diversity\n                fitness_values = np.array([func(ind) for ind in self.population])\n                fitness_diversity = np.std(fitness_values)\n                F_adaptive = F * min(1.2, 1.0 + fitness_diversity)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "This improved algorithm introduces a dynamic population size and adaptive mutation factor based on fitness diversity to enhance exploration and exploitation balance.", "configspace": "", "generation": 8, "fitness": 0.0514906749593026, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.11869729595922507, 0.08108763387163931, 0.10451273043808118, 0.09729504519506205, 0.1192158459111593, 0.14281230719647497, 0.10296760920999093, 0.08843527126799233, 0.08702836086222832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01112391551520775, 0.01467079663371329, 0.005375109906600173, 0.011491274125176143, 0.009452155409316987, 0.01944290170322127, 0.018248263482334326, 0.012276099026972576, 0.014975893680546526, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009082459674076837, 0.01959972157639278, 0.0030930128897740383, 0.00016380546432082088, 0.014763392921912755, 0.0006806549562934361, 9.999999999998899e-05, 0.0666931960345537, 0.0582270204638049, 0.06312320478148614, 0.10240681609722013, 0.09668764519070006, 0.08308534763870468, 0.09529858978972938, 0.09174810410068224, 0.07196030552336907, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01569158001686266, 0.01244619589797602, 9.999999999998899e-05, 0.011293333694524565, 0.020144366239191913, 0.10027683525177622, 0.08224659834595494, 0.06691335507482798, 0.0667108215001172, 0.07285119553694963, 0.05914573685279789, 0.027925793539240518, 0.05931056463008866, 0.06733781322087562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02212156575295343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005890456620492146, 0.014608641715983639, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888030686047845, 0.15756555760738078, 0.15263037669976676, 0.13462272985744117, 0.11887203474890506, 0.1111577574395245, 0.16112956940342849, 0.12863722163784974, 0.1210557193025883, 0.00878492955865151, 0.016094077863117118, 0.02198412468535549, 0.03266886175302153, 0.0038127111462996632, 0.01759993274736349, 0.006329032452726868, 0.016386967717490597, 0.0267656688986897, 0.08494000004272673, 0.08611516746829473, 0.11842175776965747, 0.09855305120349966, 0.10852972522114013, 0.11288517637550044, 0.09706943231295628, 0.09150269458307625, 0.07846612099165706, 0.14956042863230756, 0.1153133077305285, 0.1613932299901244, 0.13800672315110074, 0.11850430594385086, 0.12149811683092682, 0.141541850400269, 0.17377774300845283, 0.11750512232470478, 0.07590979120914776, 0.051994513646692164, 0.08699778265627633, 0.06573934751655364, 0.06406947898089654, 0.06707391423425002, 0.08670973422617068, 0.0997711199450243, 0.06482369643455566, 0.1219429970272915, 0.09856465032939099, 0.13345086981233123, 0.11310544112114784, 0.09404042826869952, 0.11286505181198647, 0.12318833687520381, 0.10156140832806937, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004247491683877835, 0.10030081661010026, 9.999999999998899e-05, 9.999999999998899e-05, 0.14567683868263792, 0.07466602457976645, 0.08799925064341174, 0.07506219681574966, 0.1207914665021157, 0.10260957017943206, 0.10944864083044648, 0.10511484148144368, 0.15377021471832808, 0.11321349068299336, 0.10267165755511809, 0.06932034027342138, 0.11320405446076653, 0.059689279220369595, 0.08131496250607595, 0.06688509915363539, 0.06847157660729208, 0.06388758980603215, 0.14706548356588411, 0.15292101312991235, 0.14763022729669195, 0.14955734323031467, 0.1394212260919403, 0.13687046190285745, 0.15182814354396756, 0.13539553689262995, 0.14985332631085424, 0.013766569112299787, 0.025805608354008136, 0.031393493129599714, 0.034776732194404913, 0.03425093938292756, 0.022718530522477853, 0.018323439717548906, 0.03803354422653826, 0.024851940555406182]}, "mutation_prompt": null}
{"id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 9, "fitness": 0.21119348180860517, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "557ce37f-b217-495b-af34-d59c7d4386d9", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "6dd624c8-36ba-479d-9c98-d28c01f79ee3", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "104f6f9d-63b2-43f8-a3f1-444b69f43e18", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n        prev_best_fitness = self.best_fitness\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                levy_flight = 0.01 * np.random.randn(self.dim) * (np.divide(1, np.power(np.abs(np.random.randn(self.dim)), 1.5)))\n                trial = np.clip(trial + levy_flight, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n            \n            if np.abs(prev_best_fitness - self.best_fitness) < 1e-8:\n                break\n            prev_best_fitness = self.best_fitness\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Integrate Lévy Flight for enhanced exploration and incorporate a convergence criterion for early stopping.", "configspace": "", "generation": 11, "fitness": 0.050881924726143224, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.05.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.10671088209755986, 0.09463591096414314, 0.12759368773771218, 0.05197979939227548, 0.07642673941340561, 0.131407306807109, 0.1414903811213789, 0.096511105674435, 0.1190019474376881, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012747760706869116, 0.006902386302953478, 0.010248410008371844, 0.021792398305041427, 0.003444089143291418, 0.016234233475255655, 0.035884901031833394, 0.005360104082671957, 0.0145075767548426, 0.02399062514517769, 0.0, 0.005784150386501596, 0.0, 0.0, 0.002187291199128749, 0.04965906220377381, 0.0, 0.02329959328534492, 0.09134279311814575, 0.065549616043718, 0.0941089870089934, 0.09112043379243318, 0.07059818398588469, 0.09919126744056117, 0.15177793042966514, 0.1024863261886807, 0.09901818455624456, 0.031177982819856176, 0.03585359980752567, 0.0049331735423367995, 0.0192734193722075, 0.0017764083685093413, 0.061265615646865945, 0.0, 0.0, 0.0, 0.030666670421053865, 0.05153667879796997, 0.04176186916794489, 0.09285235009755166, 0.04088387401690985, 0.027422511038804775, 0.038883747237063115, 0.03364670180102969, 0.026234772749197277, 0.0, 0.0, 0.0, 0.05193269336882134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0057632731080593524, 0.030037326450195412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016212978024172986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1376290818506022, 0.16326749914430838, 0.16120674905039412, 0.11787121933125178, 0.0924643409197421, 0.15463382653921942, 0.136880398352339, 0.10472467625706472, 0.17162570677976696, 0.017691010565678345, 0.046234718376532924, 0.0017115509261560469, 0.018647178555702193, 0.014768399940939925, 0.0, 0.023986880380428954, 0.01702197903657776, 0.026743192198905863, 0.0986266192272387, 0.11260873360679557, 0.08665498925184856, 0.08707370253149804, 0.1039523692975376, 0.09833121181675064, 0.09665141704717739, 0.12619095973542427, 0.08286169533759036, 0.10307915875549356, 0.12341676924576073, 0.14206145939523596, 0.15451775294393444, 0.12518459605733023, 0.13033956251902912, 0.12121881222823938, 0.1413399744772621, 0.11935232670676998, 0.0752670526915934, 0.07173644976522209, 0.0640554559439408, 0.05958596054748555, 0.0790573263027714, 0.06875217315154403, 0.09010705800531671, 0.07356562276941225, 0.10215493319378399, 0.1173403082613852, 0.09546075676048293, 0.11119755180446389, 0.13048164448872013, 0.09093513923647278, 0.11757749638849324, 0.11383199684169498, 0.09569282430283133, 0.1356113879051707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1384679584096703, 0.0, 0.0, 0.09690217644719212, 0.07970899752395433, 0.09804921737247618, 0.08538289922747389, 0.07072661542395631, 0.10615979304926437, 0.05019996939456706, 0.11570537889213395, 0.0932169324176928, 0.07199637575187512, 0.07100360608330525, 0.0798919600458432, 0.06849519542817306, 0.07424157561520128, 0.04971046103179688, 0.06414555025954483, 0.06968056165103098, 0.11018164766345051, 0.13624218004823374, 0.15639616894523356, 0.14929022490352184, 0.13674326929435043, 0.13240795319977205, 0.14916471354194438, 0.1412881845151116, 0.14899183833707463, 0.1489654550437015, 0.02684280768468128, 0.04145028798062811, 0.024924476046280453, 0.016523503426936204, 0.02594223315389388, 0.046013870376518606, 0.041025934490246274, 0.015881547440904642, 0.020442852904821507]}, "mutation_prompt": null}
{"id": "e74b349a-3e2c-49d1-96aa-84b5c5faa615", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "cc126d29-347f-4c11-837d-8e0ae8b09fbd", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "3a36a6de-f6f3-4884-9b6f-ffc0c4460cb2", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "0c8ae451-7509-4793-b398-620d252ce38a", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "4c32e2ff-d3be-4aee-af85-89de5cb7392d", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                \n                # Dynamic mutation factor based on diversity\n                diversity = np.std(self.population, axis=0).mean()\n                F_adaptive = F * (1 + diversity)\n                \n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n                \n                # Dynamic crossover rate based on progress\n                progress = evals / self.budget\n                CR_adaptive = CR * (0.8 + 0.2 * np.sin(progress * np.pi))\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration through dynamic crossover rates and selective mutation to boost convergence.", "configspace": "", "generation": 16, "fitness": 0.12798781199080514, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.16722603499351285, 0.2031509627310183, 0.23127855681580223, 0.3762342514541285, 0.17983444326403353, 0.24636439734581195, 0.31471176320843175, 0.19249245368359003, 0.16857515855175353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07559115075552059, 0.07959145041012305, 0.04015184333785671, 0.06422448915863133, 0.09070793452150283, 0.04663511294477807, 0.06403446004243762, 0.056950192343517614, 0.02751802485986843, 0.04880814386794374, 0.029836089144572697, 0.05480658527786486, 0.042580265400606776, 0.061703152583229004, 0.0854613832625386, 0.06433822561254932, 0.04466506143046767, 0.07397509934029567, 0.9787612498615837, 0.9948070488221039, 0.9883903986889195, 0.9866949573689308, 0.9951190158647616, 0.9976236689016651, 0.9941710559622918, 0.9755201608273021, 0.9869229805462647, 0.08448935766593713, 0.07420154593356132, 0.04197819837042316, 0.08532823364653253, 0.060746343579254014, 0.04630043981277254, 0.13045347254586048, 0.07284841995944158, 0.068080326589677, 0.140499505382369, 0.10919312022833494, 0.13274933487221063, 0.1272720087267396, 0.128769681711559, 0.09857227332906426, 0.13419471707987718, 0.10527297827889104, 0.09792261226232657, 9.999999999998899e-05, 0.08358065902169254, 0.01647533135241519, 0.04318713776670213, 9.999999999998899e-05, 0.02992628785604534, 9.999999999998899e-05, 0.0395671428787826, 0.06342645211927245, 0.008626852535253415, 0.021548775473464232, 0.00869127781777912, 0.029369213427734242, 0.00012817447605117938, 0.03900970622323041, 9.999999999998899e-05, 9.999999999998899e-05, 0.009244056065965012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016035947660653083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003133366460238207, 0.030557123850730172, 9.999999999998899e-05, 0.010193774493625685, 0.0003539817445438187, 0.02336739584634029, 0.026884343983821224, 0.0790394980579473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04394393113918127, 0.03499007944911514, 9.999999999998899e-05, 9.999999999998899e-05, 0.02652678650740503, 0.1727046460088021, 0.28907210338410183, 0.2253349629453293, 0.24360213028385924, 0.2551964439560769, 0.33996538593118053, 0.23774929815297918, 0.17538698375259532, 0.32362917418264125, 0.05660590683071309, 0.04076923972346036, 0.03728569709402274, 0.03877543819425611, 0.02016473591591761, 0.07597502108141108, 0.020769561398806258, 0.04811896888090483, 0.05042398277660198, 0.12459975349177932, 0.1256256126279779, 0.13257479011145645, 0.14081682015115093, 0.1784226087907257, 0.1510593705419646, 0.11086283488306092, 0.13943359986872073, 0.11817710181821983, 0.15726975747400307, 0.13258428153656054, 0.15740834201162457, 0.13884035423348995, 0.15820183434750157, 0.16946097123624682, 0.15390396860643085, 0.1700484096451106, 0.1859837058768955, 0.09353549079847157, 0.07610018431879473, 0.08892385046976015, 0.09604780325831341, 0.09164705691811326, 0.07497151701233484, 0.09149428591707043, 0.10516295238523543, 0.10731267618671914, 0.17082783720888006, 0.12070440011134342, 0.12913953716334714, 0.1341382596664642, 0.13502497319733542, 0.12598749540301357, 0.15179162582221162, 0.13970266565653888, 0.17676152903530673, 0.16253208858699197, 0.13694508393224625, 0.1179448190424871, 0.15070728188340077, 0.14930205082481407, 0.11139919963162825, 0.1433299610877593, 0.13108213773115074, 0.1278343366946556, 0.17552137349689512, 0.13508849429706637, 0.11426437551018409, 0.1128697327882503, 0.15567321161894687, 0.11925077832898756, 0.14788195936163595, 0.1527554470005329, 0.14532803688710005, 0.13101693084085342, 0.15293098868174437, 0.11257751376191372, 0.1804505320560007, 0.12396331333734067, 0.10560421841692258, 0.16642205988038372, 0.18715215061307044, 0.18868292212975601, 0.18746518046160254, 0.16637360242667487, 0.16920295959827092, 0.16855383742592134, 0.1838439426362486, 0.16873703129675544, 0.17572123249175653, 0.19039511810694054, 0.18054131516952, 0.04584582269253368, 0.028299086070854518, 0.034402821225188784, 0.03724770103884145, 0.04381761752353308, 0.04239536718627568, 0.055105450167744485, 0.03772235320972828, 0.04094651340198674]}, "mutation_prompt": null}
{"id": "9a72e5c2-7963-4257-baf0-9a17f7b94a0b", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance with adaptive cooling\n                acceptance_prob = np.exp((self.best_fitness - trial_fitness) / max(1e-9, temperature))\n                if trial_fitness < self.best_fitness or np.random.rand() < acceptance_prob:\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found with a more robust mechanism\n            if self.best_solution is not None:\n                replace_index = np.random.randint(self.population_size // 2)\n                self.population[replace_index] = self.best_solution\n\n            # Adaptive cooling schedule\n            temperature *= (0.99 + 0.01 * evals / self.budget)\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced adaptive cooling for simulated annealing and refined elitism to improve convergence.", "configspace": "", "generation": 17, "fitness": 0.19435996609082137, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.3822865044273607, 0.4188531821666591, 0.39984848712733323, 0.41091564726830176, 0.38108009817459854, 0.4004158515737357, 0.4350707231755898, 0.3912705767410988, 0.38601005353535445, 0.11290705828083902, 0.013971584426070494, 0.05665600835505413, 0.1336768405781802, 0.05429644639481079, 0.05044408685701296, 0.054779684174012244, 0.10440481394933998, 0.08628441764737693, 0.10206000645783586, 0.09876601102314331, 0.10164227784204594, 0.09579690978057986, 0.11202896336165646, 0.08426540903403423, 0.1100242386463679, 0.08940977958082585, 0.08631463594713007, 0.10431569768844606, 0.11761586107827282, 0.09063990139437916, 0.07641278917935546, 0.09379163444296901, 0.08052768647930175, 0.09182503799400821, 0.10842467120651023, 0.09382871114883728, 0.96885789850325, 0.9412878269344372, 0.9714572897262553, 0.9647339688302875, 0.9711056540041638, 0.9725042900125604, 0.9364824511386273, 0.9770420686707926, 0.9644082422431187, 0.2765950745102631, 0.15987797638700052, 0.18842516739410675, 0.17799540882866804, 0.21289940276766628, 0.17080696695428665, 0.12889356582552713, 0.19850973425460272, 0.09367133558416696, 0.2156132553241883, 0.44218680724763504, 0.1603952951198575, 0.1878217190867617, 0.16836397207863063, 0.21140733106113097, 0.21303332474789827, 0.27434250982189357, 0.27707113221974455, 0.11153751502090503, 0.10123843444441505, 0.0902841745963513, 0.09158701122993462, 0.12243410451855818, 0.07516488281954203, 0.12147015537966821, 0.08415273425389258, 0.13838874287462855, 0.03877883166547258, 0.08212162711960558, 0.09724936575504783, 0.10873274128187294, 0.09922023325552332, 0.09208929942587785, 0.11025814329769601, 0.08232596632096667, 0.11544769320667514, 9.999999999998899e-05, 9.999999999998899e-05, 0.011388992583377333, 0.001986801006805816, 9.999999999998899e-05, 0.00010550669558651027, 9.999999999998899e-05, 0.0008754084521586103, 0.0006868847466006134, 0.10574675750046914, 0.12218796868706994, 0.048258786132292175, 0.06620409605590927, 0.06818493365413014, 0.0020035220863957592, 0.05903806412821544, 0.0497214817794267, 0.06961156515724287, 9.999999999998899e-05, 0.0006842026956662695, 0.0002798049347522147, 0.0001859430559812969, 0.010480766075065762, 0.007498692814018049, 0.0015806974192049683, 9.999999999998899e-05, 0.00035477004371109455, 0.061028416920463124, 0.07717145387468538, 0.06337185887139185, 0.051230797665312244, 0.037522554398904506, 0.012794694222281633, 0.022342644476087803, 0.056178430102067245, 0.06671802957141881, 0.3666462913892451, 0.36864966735969806, 0.34205314991757274, 0.397855980427574, 0.3476169994365482, 0.36959206771149467, 0.3571479198125901, 0.35228456947998754, 0.3506800410489642, 0.06850165222068572, 0.06066143334319929, 0.09595915861727766, 0.05912831521010864, 0.07194841635221294, 0.08693391367635417, 0.08009687378431352, 0.07469521993538564, 0.06910211083973716, 0.15792671495966604, 0.1525030326317416, 0.13063270705977503, 0.13344345291323279, 0.1441986815388887, 0.18596850172063495, 0.1623224536849961, 0.15929777342546736, 0.16335719495010437, 0.23029453570289737, 0.28280819355688447, 0.28305823375721306, 0.25766267479167604, 0.27236562719767365, 0.2571462361805561, 0.25151745497150724, 0.2526802518976312, 0.2681533966741113, 0.1545382245705258, 0.1769770311858987, 0.21535346752498885, 0.13695980660162244, 0.16421462950223453, 0.1612222230097119, 0.1551116167771548, 0.14771208850363604, 0.2029927507906829, 0.19335164662970428, 0.2011036245226916, 0.18936234099477356, 0.18067009057657613, 0.18795770596468941, 0.18367708236188207, 0.1829345002513928, 0.1782114959733715, 0.19021972478915983, 0.18514712126326516, 0.176113604281962, 0.16778616507265598, 0.20006360517858401, 0.17303416866318366, 0.1918857511042894, 0.19124654262794172, 0.17701416813404192, 0.19111651320992495, 0.5276593544313537, 0.575043099103133, 0.5009478465284015, 0.16785446953722727, 0.15690097284816307, 0.15417267601502138, 0.5768464708837855, 0.17701912874544234, 0.19029204561713864, 0.4028684461415616, 0.5405992051724069, 0.178864570211826, 0.47268374933373536, 0.15849935726037545, 0.3330578490364078, 0.16202536308247184, 0.4056282152113482, 0.1969014051211596, 0.19842782902990574, 0.18993831600654587, 0.1793052577891413, 0.18415688231767757, 0.18516685647199993, 0.19724113702098167, 0.1774976048121153, 0.18880101667314386, 0.18315348953315946, 0.06948079101566929, 0.056234168062101575, 0.0622944951700003, 0.07672987206082638, 0.06940349551883829, 0.07460473331903938, 0.07040977826479156, 0.07747387284717511, 0.06754212848991314]}, "mutation_prompt": null}
{"id": "535988d2-9c25-43e7-8a58-eb85b67daf47", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "2f8c3c2a-8fab-48e7-9ab3-1fa1636ba4db", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "e9be8820-3034-4302-a328-9fd87fea852e", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "81403ef8-e049-4b24-ae68-835ae4259997", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "d7bb1f4b-9975-4760-966c-3a17aeca0821", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                diversity = np.std(self.population, axis=0).mean()  # Population diversity\n                F_adaptive = F * (0.5 + 0.5 * (1 - evals / self.budget) * diversity)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                acceptance_probability = np.exp((self.best_fitness - trial_fitness) / temperature)\n                if trial_fitness < self.best_fitness or np.random.rand() < acceptance_probability:\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Dynamic cooling schedule\n            temperature *= 0.98 if evals < self.budget / 2 else 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introducing a dynamic temperature cooling schedule and mutation factor adaptation based on population diversity to boost exploration and convergence.", "configspace": "", "generation": 22, "fitness": 0.16839243247388627, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5232568116330878, 0.3065239860524631, 0.24362948694508924, 0.29442931016448093, 0.17996400570857674, 0.5087574045605717, 0.487081901145182, 0.5084684615310827, 0.22169772204938687, 9.999999999998899e-05, 9.999999999998899e-05, 0.10228793428630867, 0.22063434889708455, 9.999999999998899e-05, 0.2892818769086415, 9.999999999998899e-05, 0.011942002188306322, 0.05873322574125539, 0.09406810245915276, 0.1304243593118949, 0.1041865444701231, 0.1074905907849315, 0.08255591940832474, 0.09923802199150888, 0.07959884212249946, 0.09737764876386645, 0.09061033649782402, 0.047357217089081693, 0.04654348614213977, 0.11817337584908105, 0.09600050428729612, 0.09070736276602542, 0.07741507880495468, 0.04059482898253641, 0.08549127253726985, 0.08204916531591011, 0.974755508341478, 0.9803423839414045, 0.9904679090338624, 0.9708452891473139, 0.9944880922314872, 0.9700858047081464, 0.9873574479353104, 0.9806481288291959, 0.9903408912511403, 0.13182743625429394, 0.1036859633805941, 0.13182639508934013, 0.26569046880509517, 0.15032683615396836, 0.09981372461459082, 0.16153340285787976, 0.13477205086503052, 0.09388180047392414, 0.25887782145045857, 0.192596442666238, 0.12400930855832448, 0.49155936813454615, 0.1327550794765573, 0.16059498547902562, 0.08536527884999157, 0.19455490678874288, 0.20808726883355244, 9.999999999998899e-05, 9.999999999998899e-05, 0.0968068858762714, 0.09836618920722484, 0.07435675775840023, 0.03920578898239857, 0.013944432430123888, 9.999999999998899e-05, 0.10774195067300729, 0.009221341540250227, 0.017926992372941264, 0.00954722366950822, 0.12198098906637134, 0.020386713231221654, 0.1043725766678717, 0.11143918626019567, 0.09172690072982348, 0.019859380135123006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010749221991551372, 9.999999999998899e-05, 9.999999999998899e-05, 0.07594357865752721, 0.05199367570155844, 0.09675461276558495, 0.010004708787401229, 0.05553334912324537, 9.999999999998899e-05, 0.041946126518820015, 0.0526616861587067, 0.11807057659678599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025107593673653894, 9.999999999998899e-05, 9.999999999998899e-05, 0.044522379321022876, 9.999999999998899e-05, 9.999999999998899e-05, 0.03611748227078404, 0.014715080046538431, 0.0659248134832644, 0.08910722339972676, 0.0862549793561801, 9.999999999998899e-05, 0.03250345199190108, 0.11762423554943358, 0.03808363353110056, 0.21933661872491517, 0.18537828356708674, 0.4389575929542424, 0.40589123280862327, 0.1773712510178228, 0.3127679545480119, 0.28645100081926944, 0.2956947342040327, 0.40297483866508654, 0.05216776432079351, 0.04417779670519595, 0.05079028505443073, 0.06202565631309953, 0.044979531886134794, 0.06187829497109709, 0.0876453727957427, 0.05583349111257452, 0.07356506979871302, 0.14026117601866628, 0.1328990411523897, 0.1331434669025695, 0.10135296913402181, 0.14482855400154238, 0.13801053166571942, 0.1286008160103287, 0.13657051466731196, 0.15400285588547125, 0.17185763249064767, 0.17252820313926964, 0.2273768829408842, 0.18798674401476867, 0.1999641081740997, 0.2483646560838818, 0.28733930807226093, 0.23175615417854556, 0.25102928727483853, 0.09002001567436868, 0.14984314171076474, 0.1290895593103336, 0.0936053764152961, 0.17563138366838849, 0.16159756420049576, 0.14495311824216695, 0.17126918193763863, 0.13064092043718278, 0.16493386628020001, 0.17150975764422982, 0.15292041787348665, 0.14855812567632642, 0.15962220399115434, 0.18249948665715432, 0.19493948698797237, 0.14009259889226178, 0.1542421602554752, 0.17410936689120882, 0.1697044598224462, 0.14519125067842176, 0.1580781499156012, 0.16606607369781579, 0.16663346200568574, 0.1758915608459254, 0.15676946220800525, 0.14732167827599318, 0.1927628528428832, 0.5668135846833035, 0.17978799931443767, 0.15652061956941965, 0.11366420694726476, 0.6275339830870506, 0.16344886760139055, 0.18200094637248232, 0.16182534022093642, 0.18437607390062427, 0.14840253998311637, 0.10331931491564517, 0.15499280709967989, 0.41514699285285883, 0.1653976294065156, 0.18182716400230492, 0.1804898162881, 0.19662757504503547, 0.18163613578981774, 0.17297099890169487, 0.18693423095046846, 0.17041507210838003, 0.1820053435360005, 0.1907150405190038, 0.19280940596724427, 0.16536758032692378, 0.21611908326630536, 0.04621451154674905, 0.047204127057851264, 0.08025428901473664, 0.06780376371620855, 0.05869007450324737, 0.046688489853851545, 0.06488499857165186, 0.052832707198946394, 0.06222489805426068]}, "mutation_prompt": null}
{"id": "3a9ccc59-4eb4-49dd-9106-3a93b7acaf54", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "2d8f623f-7dad-4036-820b-f73f61cd1418", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive if evals < self.budget / 2 else np.random.rand(self.dim) < np.tanh(CR_adaptive)  # Adjusted line\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Local Search Intensification for better refinement\n            if evals % (self.budget // 10) == 0:  # Added lines\n                local_search_indices = np.random.choice(self.population_size, int(self.population_size * 0.1), replace=False)\n                for idx in local_search_indices:\n                    perturbation = np.random.uniform(-0.1, 0.1, self.dim)\n                    candidate = np.clip(self.population[idx] + perturbation, self.lower_bound, self.upper_bound)\n                    candidate_fitness = func(candidate)\n                    evals += 1\n                    if candidate_fitness < func(self.population[idx]):\n                        self.population[idx] = candidate\n                        if candidate_fitness < self.best_fitness:\n                            self.best_fitness = candidate_fitness\n                            self.best_solution = candidate\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Refined with dynamic crossover and local search intensification to enhance adaptability and solution quality.", "configspace": "", "generation": 24, "fitness": 0.2107617435153383, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5592977812002562, 0.5386109796323195, 0.557340462133859, 0.5500572725431181, 0.5350703294453376, 0.5324223573185142, 0.5520533212794931, 0.5177708945265078, 0.5473373793411209, 0.2316878233605334, 0.08659906982732524, 9.999999999998899e-05, 0.23125107883337992, 0.023612743836357697, 0.10609225194901284, 9.999999999998899e-05, 0.049076612592255375, 0.04023936850961052, 0.13158470475731188, 0.10659345891134286, 0.09234374329333062, 0.10581582532988765, 0.11201354943292785, 0.07751906588090574, 0.07896184113303972, 0.09368065756829169, 0.12640668203146854, 0.0758475629563593, 0.08718611790111863, 0.11407251905585325, 0.0911351399033149, 0.10017772469249153, 0.052849658699029134, 0.09172763855180732, 0.09192594621251104, 0.07545432297212629, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.309478003874873, 0.2208612327334959, 0.19736465470321896, 0.12589629351214338, 0.20292594804549313, 0.13295819112023932, 0.2918195369976099, 0.16854150589117767, 0.23970251574716128, 0.30770770300166816, 0.2267828309308143, 0.16089232952402144, 0.19143591112982727, 0.23513143684357085, 0.5385846520222968, 0.6431479893826306, 0.5108794327547171, 0.2906409565063929, 0.11764767195720105, 0.13639361675278727, 0.057965212202098715, 0.19760969579445709, 0.09805588987884817, 0.08442842228738645, 0.11047005832209522, 0.15686227167494904, 0.12386257774721521, 0.02694298414308216, 0.13236683541240968, 0.09864920329188787, 0.1484026560020275, 0.03532519908872023, 0.053087947628073784, 0.10703787463957015, 0.10282877072630181, 0.1435959219467734, 9.999999999998899e-05, 9.999999999998899e-05, 0.03398797678646692, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037014872837281, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865167625923, 0.09460191625105985, 0.041312203830168204, 0.0886214534030818, 0.11864645226525716, 0.16088829033518737, 0.11524013647122577, 0.0834714070262651, 0.14808284702772012, 0.02600266115047345, 0.003968311945624192, 0.05886064363505117, 0.02694216503416591, 0.038656113060265174, 0.028686914496437788, 9.999999999998899e-05, 0.05212074204765127, 9.999999999998899e-05, 0.0002709297565556268, 0.09845842090275858, 0.056630001885487724, 0.08318435788377665, 0.06890245489157931, 0.045171927455470384, 0.004640070670002605, 0.0464852066924899, 0.03305703645835678, 0.1476899270499753, 0.4173475209291275, 0.43473074530241707, 0.46066308726695204, 0.4383566177179168, 0.4217532380210687, 0.4020754509493346, 0.4661965559967204, 0.426185039716235, 0.3945231880976465, 0.055649149844711476, 0.07140862969428985, 0.05094020714684033, 0.08275531086210486, 0.06934256697330543, 0.08470905103097393, 0.06937402814281335, 0.09575884519437605, 0.048147986407944376, 0.15651971035763368, 0.15414674591809818, 0.13406556372067824, 0.13202321574149378, 0.12416345477147284, 0.13239022974952963, 0.13353722591600414, 0.15977038220144146, 0.13815223487865946, 0.25614033526504, 0.3230697454390352, 0.35285988807846236, 0.31396997038218666, 0.3430376747213124, 0.36053336178447637, 0.36335892595988895, 0.3443674732477098, 0.21780874104082992, 0.23492888364808395, 0.1496874564550026, 0.29590078249209384, 0.14643026380971547, 0.21730507277837652, 0.20246693290389983, 0.13577873965638487, 0.2148831132253185, 0.17477349443372547, 0.20110854588595484, 0.18478405035721224, 0.24287596963339697, 0.1686903899344201, 0.1678679221155639, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.2062715265976115, 0.17752737991506107, 0.15534796265766204, 0.21800341637214482, 0.18429820245279616, 0.21174235880779624, 0.1716407404561, 0.18751915479791303, 0.1915317755219934, 0.1969154870492098, 0.15925995674285076, 0.19880572367276872, 0.18135299806820682, 0.14772776460248915, 0.6319562516913404, 0.372706220345425, 0.6079331627984746, 0.17064250485729204, 0.4717471098231629, 0.15939390396039854, 0.15699637111803733, 0.16246244908387675, 0.20182763430687778, 0.16520268728430398, 0.1946818122101116, 0.3880007414434704, 0.2058195311399762, 0.17626580549630422, 0.19052528636462496, 0.23145272282116625, 0.19529305671866992, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.19372888831134627, 0.1718563890691175, 0.07214185079290114, 0.07152140287712794, 0.05230775827245615, 0.05661963779754042, 0.07371763801619868, 0.07170009084070406, 0.07026737207749445, 0.07975026650983486, 0.06934651862196806]}, "mutation_prompt": null}
{"id": "ad9671f0-5f35-4e17-8b43-23385f4f786e", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "d1a94502-0a4a-467d-8b0d-a65656682599", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "7f4df3a9-372e-41bd-8f2a-9b6d45fa4192", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "d0460c57-9d7d-4af6-ac29-b851bf6d0c7c", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "162fd554-02d3-441b-9e1b-5c3ea6af1f8b", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "cf6ccb10-451c-4d83-b53f-6d9426ee7e49", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "921efdfd-1d72-47be-adb9-e24792731e32", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n        cooling_rate = 0.97\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            temperature *= cooling_rate\n            cooling_rate = 0.97 + 0.03 * (np.sin(evals) ** 2)  # Chaotic cooling schedule\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced adaptive cooling schedule and chaotic maps to enhance diversity and convergence speed.", "configspace": "", "generation": 31, "fitness": 0.20205727782835362, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5705170965814873, 0.5442191170255273, 0.5639088132609587, 0.5745258275633103, 0.5642308089719351, 0.5599750200303542, 0.5706847493597054, 0.5614700129720055, 0.5551321465480277, 0.23881699610660323, 0.08659619227485382, 9.999999999998899e-05, 0.22057798017654262, 9.999999999998899e-05, 0.10325447131903387, 0.044263081732739185, 9.999999999998899e-05, 0.04029263057556054, 0.13153463100407792, 0.09410334104707507, 0.07849063922490751, 0.10581582099399, 0.11206461228788323, 0.07462693371532736, 0.07894268604970234, 0.08980744583186717, 0.12514061999364945, 0.06672141574942148, 0.08861603046996003, 0.10023370336700843, 0.08419892025540976, 0.10017773715466505, 0.05106042856760673, 0.0917099931263643, 0.0722101122711607, 0.06621722731364188, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.26147457240583605, 0.2036012592965042, 0.25909399584956394, 0.267203661314514, 0.3277761428862569, 0.13297552838195803, 0.2355831470630767, 0.16755629694608376, 0.11617908062123183, 0.3200920366153073, 0.20543041859775735, 0.16249758084857335, 0.18873700401796933, 0.24267764532536007, 0.18936610065907533, 0.28648532248888436, 0.1626473078167281, 0.21238501415977595, 0.11422499899540584, 0.13573789088024912, 0.05072880665831547, 0.20070913584063432, 0.10060803440376442, 0.08442852981610982, 0.14394509566198432, 0.15780002216181854, 0.11723681800016528, 0.021179739585727164, 0.13729490214354756, 0.0990994785909044, 0.1545189727970221, 0.0581033089018983, 0.02965601619766145, 0.10700640307529086, 0.10281690439433244, 0.1389697828121842, 9.999999999998899e-05, 9.999999999998899e-05, 0.03918452101881831, 9.999999999998899e-05, 9.999999999998899e-05, 0.022332731561489738, 9.999999999998899e-05, 9.999999999998899e-05, 0.011463466832393743, 0.09155906924643076, 0.04031454886391839, 0.09023407361896318, 0.08666806562370144, 0.15515415744386152, 0.11708183956252383, 0.08211963408287448, 0.0752138472642846, 0.025647425206413388, 9.999999999998899e-05, 0.04953590620803061, 0.02666029625580668, 0.04132048770498409, 0.035732657683805846, 9.999999999998899e-05, 0.04211700662857398, 9.999999999998899e-05, 9.999999999998899e-05, 0.09646870475923097, 0.056626735597751554, 0.09210022028901133, 0.07091021042729206, 0.039073932603762795, 0.004632097285346415, 0.04875620862018171, 0.023771977220539697, 0.1386666132679626, 0.4662309158686191, 0.42435886097380615, 0.4295877352959676, 0.4455539584358783, 0.4645482425378604, 0.45155851304908323, 0.452180357320519, 0.4288254419281574, 0.4338920723909634, 0.055649149844711476, 0.07140917833886429, 0.05094020714684033, 0.08300486794053519, 0.05879708798229999, 0.08416851357248178, 0.06937402882603494, 0.0949360367647134, 0.04268934638003252, 0.14883378606296738, 0.15416861437967677, 0.12906024465672095, 0.12422244704455898, 0.11673277346054622, 0.1209873059706692, 0.12920934944572926, 0.14797530998712283, 0.1344901001284048, 0.2587903055305675, 0.2517610297698206, 0.3004925873153689, 0.37354326236312174, 0.34113640860251704, 0.26557311609836665, 0.34889729008626436, 0.3215090820640176, 0.3401341206994847, 0.19727351999914455, 0.1462185936807413, 0.2504172559576595, 0.15867226482865338, 0.21144694368569672, 0.18418623863977102, 0.13077903636996924, 0.18475216060699973, 0.1790981434330965, 0.18803980371847573, 0.18478405035721224, 0.20840495271445525, 0.18792940938676972, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.19036323743980688, 0.17696777587584145, 0.1530976473060186, 0.17712350715924097, 0.1819562975510891, 0.2120550280450283, 0.17152314516132172, 0.18914930483505066, 0.1869169744261472, 0.1969719479408517, 0.1586322097541606, 0.1987773744435628, 0.16426533443364044, 0.14503859156248977, 0.6482976983714275, 0.4167688218654714, 0.2107144159555202, 0.1568900987630868, 0.5911322898955111, 0.15903362497797402, 0.15699745690511135, 0.16137950505214527, 0.20177078745767607, 0.16510787963370244, 0.18318011861873496, 0.19944078101499696, 0.2056272798233275, 0.17626580549630422, 0.19052528636462496, 0.17113957033428762, 0.18363808150705785, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.19361454818785673, 0.1718563890691175, 0.07091610225420286, 0.07152234414039249, 0.052433281793928144, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07025442755700406, 0.07922993402321787, 0.05985803196862527]}, "mutation_prompt": null}
{"id": "f057bb44-51d4-4ef3-8446-230a03be1492", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Dynamic Cooling Schedule\n            temperature *= 0.97 if evals < self.budget * 0.5 else 0.99\n\n            # Diversity Injection\n            if evals % 100 == 0:\n                random_individual = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                self.population[np.random.randint(self.population_size)] = random_individual\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Refined adaptation with dynamic cooling and diversity injection to enhance exploration and convergence.", "configspace": "", "generation": 32, "fitness": 0.2067021663517898, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5941967198888476, 0.558750853292973, 0.5692220834599339, 0.5974051080560562, 0.5873202041073928, 0.5811346501922214, 0.6141600883084902, 0.5822670123140461, 0.5723211753173018, 0.2399158227802538, 0.2980739656477708, 0.2762129465815718, 0.19474593877649415, 0.13548686391479547, 0.18279848073547067, 0.017958423068271778, 9.999999999998899e-05, 0.3696007016687427, 0.13720019392389693, 0.09614943391364972, 0.0799661832485532, 0.08469202510924356, 0.11206229227779962, 0.07305735592144103, 0.11101973026710765, 0.08980744583186717, 0.1251392744062223, 0.06801218124594, 0.08972954763281105, 0.09464965228771849, 0.0841959356380908, 0.11729950813095269, 0.07850686985958999, 0.11411752384702867, 0.09863556810250407, 0.05776518307116152, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.32503345587808363, 0.19198195461057044, 0.19205894165626392, 0.20403929026866185, 0.36480354854786223, 0.12932859116007034, 0.2055426306679563, 0.30065600186581154, 0.12479977250726404, 0.28420912664792286, 0.20561384170551855, 0.1584596777703371, 0.1814583884909875, 0.23766746048398935, 0.19197807723850213, 0.5416372915552826, 0.12563949495437066, 0.3029914322486619, 0.11402506994941908, 0.07835264960093558, 0.10095362599180369, 0.1975648139851045, 0.15148680563034378, 0.08443557085717424, 0.15938323833685863, 0.18550437231276384, 0.11552177931363727, 0.021518491410013163, 0.07121809080604014, 0.09859251247854628, 0.1545393090277164, 9.999999999998899e-05, 0.0672794679044062, 0.11973358002511991, 0.021444789776540518, 0.13339357545758923, 9.999999999998899e-05, 9.999999999998899e-05, 0.05071993209567249, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00941475287586635, 9.999999999998899e-05, 0.008140273762986316, 0.09132712303809853, 0.04534473753896129, 0.07092576919636684, 0.0885724250594383, 0.1408556922797517, 0.12446548700537408, 0.08052467506684624, 0.06794598791971906, 0.025647295797637915, 9.999999999998899e-05, 0.03200816860033573, 0.026547880702105564, 9.999999999998899e-05, 0.04606592504502183, 0.019918026771949204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09760291015133804, 0.05675587200522514, 0.06304449089249753, 0.06878920993832838, 0.04715488841344617, 0.0033156874311597306, 0.04872886770220408, 0.023771977220539697, 0.13719526210731547, 0.42930953568209795, 0.47101043192325853, 0.45468353263326866, 0.4264616231798336, 0.5242532307700073, 0.4589498722714441, 0.45724514355693946, 0.4499662962631361, 0.43071553917779115, 0.055649149844711476, 0.07140918611683067, 0.056058827974843184, 0.0830766099089375, 0.06832976485574449, 0.07903969211133222, 0.06937181233673395, 0.06687714302190484, 0.04268934638003252, 0.14883378606296738, 0.14189478169828762, 0.12256628567932604, 0.12422244704455898, 0.14741864135622784, 0.1562287914443825, 0.12920835663773034, 0.14797530998712283, 0.1337023214771128, 0.2604072787242824, 0.18173033062327815, 0.252252841793591, 0.25507551790725724, 0.34621512573485047, 0.3279306420457416, 0.24835776808172483, 0.2099605554629438, 0.22483725595667803, 0.24932460826582592, 0.16030690613062637, 0.1906302101272146, 0.15028753282035723, 0.18957116800609042, 0.1921746006954359, 0.1633361881313038, 0.16425052200915924, 0.17842926331416542, 0.16367681001312684, 0.18478405035721224, 0.17894844536343701, 0.18319360482310698, 0.16647188301075744, 0.16897895378770356, 0.19532088171558526, 0.20854598877275887, 0.17633100434037752, 0.18742123638178276, 0.1680429899050725, 0.15906910880742997, 0.17129920257768882, 0.18261928544826156, 0.19874509213574243, 0.17208971399457806, 0.16787406020439322, 0.17300729721858932, 0.196925956021491, 0.15243325440844435, 0.6273741506854835, 0.16509279060264492, 0.1456598157045863, 0.6557132791811734, 0.15111340176597954, 0.17685629718638907, 0.17119687937185213, 0.20415036747874782, 0.15479455840462453, 0.49496687314904253, 0.1637878841178423, 0.2012369980861446, 0.16481425811189543, 0.18759266981702216, 0.19812029372730944, 0.19879351010176338, 0.17626580549630422, 0.18993831600654587, 0.16784448943216446, 0.17636655434724458, 0.1767195201492866, 0.1782353044005569, 0.19225524680876815, 0.1728460017055129, 0.16995822947005468, 0.07091610225420286, 0.0864506607244735, 0.07358247130284612, 0.059798967626418786, 0.0547991473689583, 0.06031125834851059, 0.0702133972041209, 0.07977197728750429, 0.06274389135618275]}, "mutation_prompt": null}
{"id": "7559790d-6d1b-49e1-88fd-67d7887b5558", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "a8c1faf8-ad4e-4a7f-844f-5cb0762dee2e", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            # Adaptive population size based on remaining budget\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                # Differential Evolution Mutation\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                # Adaptive mutation factor\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Crossover with adaptive rate\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Evaluate trial solution\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                # Simulated Annealing Acceptance\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            # Elitism: Retain the best solution found\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            # Cooling schedule\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced with adaptive population sizing and elitism to improve exploration and solution retention.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.5515184485267743, 0.5399086341232582, 0.5583849214671781, 0.5575039373697614, 0.5385657450854289, 0.5313906063161201, 0.554208951541754, 0.5471282195262538, 0.5536443932792219, 0.2311584252432507, 0.08659780590044885, 9.999999999998899e-05, 0.2317958703097709, 0.02361459451603709, 0.10562088845215967, 9.999999999998899e-05, 9.999999999998899e-05, 0.04023847352858578, 0.13158470733721916, 0.10659354392661569, 0.09235557369964753, 0.10581582532987721, 0.11201354942549568, 0.07718660615465778, 0.07896184113305493, 0.09368065756829169, 0.1264066801971403, 0.06672101722146784, 0.0871857687227523, 0.10040936977564885, 0.09119415945069287, 0.10017772469660124, 0.05284965890949789, 0.09172763849218157, 0.07228365533096603, 0.07543619401510782, 0.9526580446282028, 0.9351324173476485, 0.964026877069132, 0.9596426437405661, 0.9754741391416173, 0.9731092138380569, 0.9464393085005522, 0.9518099983434855, 0.9585823435140202, 0.27029645633843624, 0.22831218591585956, 0.25003849591691574, 0.12592545724836723, 0.19639113509453365, 0.13202139455609763, 0.32996456680880193, 0.16837857223560626, 0.1955205720198241, 0.5612947219595121, 0.2267967711829083, 0.16089232952402144, 0.19143591112982727, 0.23527957951679723, 0.49557059382411295, 0.6431479893826306, 0.2607129992012124, 0.2976287566587108, 0.11764758532293074, 0.13817392055601463, 0.050615939696669776, 0.19759129661846664, 0.05669756726714881, 0.08442842227952418, 0.1106777531602745, 0.1553390573541934, 0.1252445646910182, 0.021179741316429856, 0.13663858286432495, 0.09904083666364727, 0.15814780429192665, 0.028638527373455847, 0.03098312305297346, 0.10704552537043588, 0.10282872375566565, 0.14888031473820684, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505348614836091, 9.999999999998899e-05, 9.999999999998899e-05, 0.05312133159417931, 9.999999999998899e-05, 9.999999999998899e-05, 0.010928865777912855, 0.13294492156396187, 0.040366669889173146, 0.10026294849572592, 0.1369271747996208, 0.16081065172231734, 0.12545429220189885, 0.08345033005930147, 0.14621997792602903, 0.02564742523328256, 9.999999999998899e-05, 0.04956427117654638, 0.02666135521603097, 0.04131665615215263, 0.0357431163896994, 9.999999999998899e-05, 0.04215611863957369, 9.999999999998899e-05, 9.999999999998899e-05, 0.09883731060008127, 0.056630001933498875, 0.09034204030986892, 0.06890245499144554, 0.04586433827349046, 0.004650942350366671, 0.04820025872233091, 0.023771977220539697, 0.15090188821383943, 0.4799054950016268, 0.44988677364081575, 0.45545756481756494, 0.43170614055202916, 0.42043655749214404, 0.4169264412531105, 0.47093900618837514, 0.43911254327554927, 0.41626475965119336, 0.055649149844711476, 0.07140862969429329, 0.05094020714684033, 0.08299144873057607, 0.05879708798229999, 0.08445358773767153, 0.06937402814238791, 0.0953487159669898, 0.04268934638003252, 0.14883378606296738, 0.15414674626623182, 0.12894592106689673, 0.12422244704455898, 0.11673277346054622, 0.12098488207185276, 0.13353740289067573, 0.14797530998712283, 0.13525552459259726, 0.2574086701005305, 0.31560778519700217, 0.3283381496396882, 0.3202556233478686, 0.30959580990288227, 0.357918909164879, 0.38414371302212613, 0.31408794970889964, 0.21806491750845647, 0.23576845266663815, 0.14967316883062853, 0.298273568524007, 0.14643503995250962, 0.2173901157638337, 0.20366778636019933, 0.1307795925285964, 0.21538376076912868, 0.17475033536645512, 0.20182846625248396, 0.18478405035721224, 0.24287426956806935, 0.17375265555925123, 0.16165405071454042, 0.16897895378770356, 0.2054836790329564, 0.1903454082524051, 0.17576852186735104, 0.20627495096501192, 0.17752750608680257, 0.15309750219900253, 0.21801392238027295, 0.18429862413571307, 0.21174233499637962, 0.17164076260334316, 0.18751346648882083, 0.19107583786525217, 0.196915947515655, 0.15863097775069968, 0.1988057016850966, 0.1636110972113174, 0.14493165936017727, 0.6434604009547248, 0.43516340662198083, 0.6143747856171058, 0.17064768065807545, 0.5331014947095176, 0.1589942020252878, 0.15699536501746403, 0.16137950505214527, 0.20182709306047675, 0.16520274375148114, 0.1928322304909066, 0.3973309397843754, 0.20582332929229907, 0.17626580549630422, 0.19052528636462496, 0.2341346991571699, 0.19529322489934464, 0.17549055228932942, 0.1679052822953223, 0.19225524680876815, 0.1937288887142108, 0.1718563890691175, 0.07091610225420286, 0.07152140265769302, 0.05230636982713399, 0.05661963779754042, 0.07371763801619868, 0.07101046131969668, 0.07026737207769451, 0.07958934127598438, 0.07106156818611775]}, "mutation_prompt": null}
{"id": "661133f1-81f7-4477-b38c-494f384db3d6", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        initial_CR = 0.9  # Initial crossover rate\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                diversity_factor = np.std(self.population, axis=0).mean()\n                CR_adaptive = initial_CR * (0.8 + 0.2 * np.random.rand()) * (1 + diversity_factor)\n                \n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved exploitation and exploration balance by introducing a dynamic crossover rate and rewarding diversity.", "configspace": "", "generation": 35, "fitness": 0.15822282040916227, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.3219328741499472, 0.3519714548322791, 0.5294903868021401, 0.47986431145128283, 0.5175658981952725, 0.18814231366147904, 0.34319792046146935, 0.4226279475849327, 0.5704688459613027, 9.999999999998899e-05, 0.016846838133448006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01112838137064065, 9.999999999998899e-05, 0.036573297043084985, 0.050030727861514634, 0.05395341562250999, 0.05975266242219479, 0.04533162759110143, 0.033593044199217936, 0.06543567234672099, 0.11411036505163141, 0.03836469175406132, 0.061284298155956485, 0.08070476366764268, 0.027496608918539445, 0.04268479292313876, 0.06478963724621967, 0.057852631756304396, 0.06840228801775594, 0.061394170271931725, 0.04357590432987346, 0.04118066810536036, 0.959884008511838, 0.948826759522043, 0.9451183981974907, 0.9757530550140568, 0.9750484987495379, 0.9852943736163816, 0.9598887255973705, 0.946654330003523, 0.9711805957504264, 0.20409779935131478, 0.14401922965280423, 0.11175877599208983, 0.06778617792029784, 0.03971269712301673, 0.09399748432042487, 0.07623505232110728, 0.1013205008933139, 0.07463995266856183, 0.148870860126458, 0.19277665773034947, 0.19556460633530093, 0.13968537304848283, 0.16705261681079542, 0.1757495123013192, 0.12268865710510313, 0.11327670088597919, 0.1374430577485396, 0.02316790584665518, 0.07114632665754217, 9.999999999998899e-05, 0.08550120732396915, 0.0317923888410373, 0.1332096091179017, 9.999999999998899e-05, 9.999999999998899e-05, 0.14419904754703383, 0.01988101607153714, 0.00035659099247642434, 0.09477052348327741, 0.05270842568593037, 0.030369531161210994, 0.1313508285904289, 0.08213981668399406, 0.06558204442177284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011291615826780621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018100680415236603, 0.007794403409411954, 0.08848890970664036, 0.0035920167048758556, 0.030924952557287333, 0.015831393183670883, 0.01162502393866216, 0.02606234323948886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04326518033004101, 9.999999999998899e-05, 0.018969627013333934, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010082551748628044, 0.02181107294962692, 0.033739218498343715, 0.026270295970375113, 0.0903305964786667, 0.11059514585332686, 0.06226877847826162, 0.0316378174822346, 0.02963452512554554, 0.4262307252227956, 0.3826663634269838, 0.3330414163977551, 0.36088657334972274, 0.44086092891356, 0.39887276596707666, 0.46257581379819657, 0.3974838844037718, 0.44284501788867914, 0.0502461958661119, 0.06101571328727751, 0.05093007379059877, 0.05902182774322717, 0.08116424796908728, 0.06586575633766278, 0.06284403297854202, 0.03235531073914977, 0.045770458881930765, 0.12240801284731584, 0.11261875094926, 0.11791538319020278, 0.10121518969348886, 0.14414387281322938, 0.11494801102532926, 0.21382245170358816, 0.14970445149328493, 0.0978876853929147, 0.16174282102601834, 0.2713414995204838, 0.20417316144065356, 0.2089438717072446, 0.1799162168636882, 0.1624665718270406, 0.20663689865216317, 0.19395581053351107, 0.21919254609166872, 0.14697737867389382, 0.22850603723496754, 0.16492129460940974, 0.13868828744148376, 0.12620941667187213, 0.11287081222787843, 0.1150904431569375, 0.12820090912614035, 0.13232852617601654, 0.15641699964258293, 0.18506328796087634, 0.1509963601973774, 0.20196693777714314, 0.13541840329268817, 0.2080179376800636, 0.16074806385968698, 0.13893022851109804, 0.1587101435662167, 0.16630441735470325, 0.15559621196734186, 0.1495324753870687, 0.1709313682806669, 0.16106132761949943, 0.14821192521218385, 0.1570608151934828, 0.170964565783282, 0.14909993744181993, 0.12298688763471088, 0.23949000864032755, 0.16337274398962398, 0.14732561047207815, 0.17320870949643685, 0.13376652521984778, 0.1425691068829139, 0.11060076016596032, 0.14359627708755418, 0.16514416157882317, 0.1507949758265107, 0.24703954427394503, 0.19549186414603392, 0.15793601394086676, 0.161891879869685, 0.2569177989092476, 0.20287504567546244, 0.18872294384766286, 0.17651184243971274, 0.19018313329289793, 0.1873485103272735, 0.177638436439014, 0.17199096797584934, 0.18371577047785737, 0.19525988155104035, 0.16433467082946007, 0.20891676393994196, 0.07739970577385302, 0.06250407921813805, 0.06875183219441083, 0.06953049589639138, 0.06721934198223445, 0.05822081877525509, 0.08983086415402564, 0.07687581523662324, 0.06564498558420362]}, "mutation_prompt": null}
{"id": "b08a094d-7007-4932-84fb-7b38c78da381", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8  # Mutation factor\n        CR = 0.9  # Crossover rate\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Dynamic learning rate for crossover\n                dynamic_CR_rate = CR * (1 + 0.1 * np.sin(np.pi * evals / self.budget))\n                cross_points = np.random.rand(self.dim) < dynamic_CR_rate\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced a dynamic learning rate in the crossover mechanism to enhance adaptability and convergence speed.", "configspace": "", "generation": 36, "fitness": 0.20225755796994008, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.539441109558328, 0.5565921133129939, 0.5668208705693765, 0.5419639403568921, 0.5611913822676227, 0.56578853399989, 0.5136933982956211, 0.5346016041017344, 0.38322997340230835, 0.12413067239662268, 9.999999999998899e-05, 0.17387291010929873, 0.033913634151610084, 9.999999999998899e-05, 9.999999999998899e-05, 0.06515425819163845, 0.16135856039605168, 0.027866335476173343, 0.07157152719912252, 0.06591712426012308, 0.049614262479737437, 0.06809940173873874, 0.08932513545544463, 0.07672113024793448, 0.08017416707069547, 0.07369191528215446, 0.07453310253334, 0.10116253139585785, 0.05879489203086452, 0.05628129708116725, 0.07138707232012642, 0.061977663433987806, 0.07237808211263252, 0.10811171069678349, 0.0846754791502925, 0.09597555723012607, 0.9722748040396373, 0.9448040551368322, 0.9313574433111077, 0.9565184673936631, 0.9493243775534407, 0.9476129041783887, 0.9428725663208651, 0.9741348390247039, 0.9712941413182342, 0.2439210997899156, 0.12643174904681165, 0.1353889419764941, 0.08718442888239553, 0.13369161968747034, 0.09764015648929836, 0.3212651973831051, 0.08220908515031622, 0.27238754512764374, 0.11157592546768369, 0.1481462958749844, 0.6415667291701339, 0.6681303863193364, 0.11316335351569307, 0.1849732289156355, 0.3233908982175966, 0.21065984423236883, 0.20630316131568105, 0.2486511414708814, 0.10561000087949035, 0.31710027822604037, 0.10611584568680643, 0.10984973377693563, 0.12185864691712123, 0.11433827881810521, 0.212788256163699, 0.13784483501549405, 0.00943495681923523, 0.11429882020110649, 0.10002226530550051, 0.0753419420843855, 0.08810748136664825, 0.10690133037139038, 0.015206267853909994, 0.01106824330080347, 0.08457714097688152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04950625410575571, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008800611465802466, 0.15349552210134154, 0.0651075040742346, 0.1361856087561346, 0.06478903802464975, 0.10559921373922498, 0.07440445253662531, 0.01481001504039492, 0.04014868923486681, 0.0026585792844366907, 0.05354809855946041, 9.999999999998899e-05, 9.999999999998899e-05, 0.05275295617838405, 0.06048299219704789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0459309351105428, 0.11704365333579514, 0.01762420879054083, 0.10749135915114205, 9.999999999998899e-05, 0.02278171927970163, 0.008549323181979762, 0.006621672930327227, 0.050956678666456146, 0.0648992763059576, 0.4080432566154075, 0.44969202375292805, 0.4265678040642731, 0.4562294050170159, 0.2033100712760776, 0.413110379622181, 0.4438481247770443, 0.4213926480773911, 0.43078720400175885, 0.0807661013369041, 0.09688607734367649, 0.09998794216768203, 0.051593556633954374, 0.059753299618998446, 0.09263891653364809, 0.06335626959567531, 0.07013026191371885, 0.05899547973451846, 0.16040068337307933, 0.11990297794894, 0.14642445371351098, 0.1394739524527686, 0.12507451149466964, 0.12180949771716731, 0.1187032643153576, 0.16734764853012418, 0.15411027607745742, 0.24891148668191765, 0.22704063420452048, 0.2793477632830621, 0.2978916525033237, 0.26489394141900935, 0.32653074107864033, 0.2563073809498613, 0.21968471604656992, 0.3078744231537667, 0.12534056690072026, 0.14418995195318907, 0.23272381914869045, 0.13099519926829473, 0.15372357548694038, 0.1898676419064106, 0.16199127555312298, 0.15092684853412852, 0.0922215598302113, 0.17942638822375212, 0.17304016058990235, 0.2258382658900484, 0.1526550406586753, 0.16989603323638036, 0.18426400172552648, 0.1613910077702354, 0.16693979805120984, 0.18274325152063065, 0.20878903270503613, 0.17792803715366812, 0.1821226126295139, 0.20090001891169518, 0.17799858081929743, 0.1693430229432441, 0.17573524563571752, 0.15685921158182936, 0.178375405368413, 0.22562304015635404, 0.16070880997983172, 0.6443128007553054, 0.14382150937292337, 0.6054685426267381, 0.6670102392062807, 0.18396110689268652, 0.17175798772157214, 0.6822463700676868, 0.1364934164310302, 0.6831404589560621, 0.15564958446851374, 0.12740341820470535, 0.24789458141257759, 0.661195121106712, 0.19748111858016937, 0.18758695294865757, 0.18032109034355692, 0.17005108406175695, 0.1981530735680248, 0.18786927935822495, 0.16582403001545432, 0.16222550850383866, 0.18208111750145883, 0.19272656253866383, 0.18149130720011564, 0.15656953577500876, 0.04092784908206626, 0.060469099128963366, 0.08518770434069833, 0.06151348905812626, 0.06505901162077043, 0.061805625639686834, 0.07718582622223824, 0.07977222828539976, 0.06846123892214728]}, "mutation_prompt": null}
{"id": "a9d7a734-097f-410f-b86a-f69ff1a03d6b", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Memory-based guided search\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial  # Update memory with best\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced memory-based guided search and neighborhood perturbation for enhanced convergence.", "configspace": "", "generation": 37, "fitness": 0.28177351139116447, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "0cf6b126-ef59-4e52-a2f8-a593621f82ee", "metadata": {"aucs": [0.7725672503813478, 0.8096188819712116, 0.780404132960158, 0.8099909925557951, 0.8279490080413467, 0.837154950698175, 0.7792665911547922, 0.7866870144490401, 0.8142064178227547, 9.999999999998899e-05, 0.10141044896248952, 0.27116410064666274, 0.6119730669654228, 0.006070048500506298, 0.6292377520139817, 0.4076010951128275, 9.999999999998899e-05, 0.3748842621806543, 0.1176573492148062, 0.10588144784623454, 0.12346233322327882, 0.11046623577492065, 0.12059116400072722, 0.16578429331209243, 0.13363518658645646, 0.09077680147356293, 0.10092277252359749, 0.11521008219869877, 0.09506200668395381, 0.11626650704098807, 0.09757998047256788, 0.09714606429032902, 0.10897509404853789, 0.1331534032412286, 0.14433262319034945, 0.1278243174348388, 0.9401157605279575, 0.9063878999922943, 0.9071892268063888, 0.9427570176317641, 0.9437236088768345, 0.884906593930616, 0.944037068992414, 0.9342741159959169, 0.9441493873756184, 0.5296732670169861, 0.2853650133291965, 0.4957608570499733, 0.13247947176224129, 0.28487576108307466, 0.5766394434379889, 0.26154614550510846, 0.5849098708672685, 0.2963729272915724, 0.22619022600387484, 0.33293834414048906, 0.16959288444471676, 0.20660088958023848, 0.2054940092780747, 0.205053803120814, 0.22870426597836202, 0.2315200469605675, 0.23751108054252734, 0.47505968428518575, 0.1262545789394819, 0.12304905376563169, 0.417769853071818, 0.10990091244546674, 0.11674247804763238, 0.16550622190050268, 0.15047263732107963, 0.1616423679019814, 0.13208163584912513, 0.21600847027297176, 0.12582470231602405, 0.14377050657890322, 0.12041855643309196, 0.1648162974762174, 0.12145905850630045, 0.23067475699705842, 0.12391834352689735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10509624810384555, 0.06860406548524278, 9.999999999998899e-05, 9.999999999998899e-05, 0.018678015874715626, 0.2346946292636447, 0.0907814891629305, 0.2042331410049557, 0.13996776607563155, 0.19555443983559695, 0.02779234736078584, 0.08163310971924254, 0.2864320659878018, 0.1270284418617501, 0.23283248569493242, 0.034621427420539086, 0.1283182972305622, 0.22813358405765527, 9.999999999998899e-05, 0.1575526109303046, 0.1289157412380706, 0.1531647070084735, 0.15458842977378517, 9.999999999998899e-05, 0.14033513753473859, 0.03189909979484151, 0.12623133387167396, 0.3311323174733729, 0.06797117532031738, 0.09944796838026759, 0.1729733394398716, 0.16376384565906832, 0.08408220710796865, 0.5462560438423928, 0.571412186093299, 0.5342425679735536, 0.5529074715088098, 0.5192946673714278, 0.5083304182394727, 0.6029790827673704, 0.5129652266188065, 0.6068181561815288, 0.07780413321570434, 0.10627557073037464, 0.08329090342079126, 0.07804125006354512, 0.13034376868514663, 0.09150760668634939, 0.07951626841990633, 0.06987179032984292, 0.08216617228188627, 0.14648175991567203, 0.2524311962637644, 0.14925426010359677, 0.15043150190562415, 0.14004963987661556, 0.1933158488823471, 0.12517293560045695, 0.21591918759982043, 0.12046980731736368, 0.3389919990290068, 0.2604952979077416, 0.3299910382079826, 0.3037956128760062, 0.39079307760953197, 0.2863925325086073, 0.376554090352191, 0.4464181393977985, 0.4882629740237414, 0.23789213716453328, 0.19222037618140897, 0.23215001663665435, 0.1940275909575674, 0.22417164604814832, 0.18300737224806518, 0.22175501838766953, 0.28389055496431326, 0.21048944764142308, 0.22956913181783667, 0.1805381765078098, 0.2104004944973319, 0.22315811537748753, 0.19504015697149912, 0.22405337732764297, 0.18034458196185044, 0.1615352285250501, 0.20688868232431168, 0.2207344304581934, 0.21999636352703733, 0.20823813852988937, 0.20014939885033944, 0.19590083964833216, 0.18502755583923491, 0.19183045143447686, 0.1909440219207018, 0.17321210239429952, 0.7764847456965296, 0.184016031746132, 0.18772158190979138, 0.8644924820170805, 0.1683593361961524, 0.8395219517759089, 0.16786572074531592, 0.9009102120428156, 0.881866729544721, 0.7990243688703177, 0.21024350716173468, 0.7876327830106913, 0.707403594735778, 0.12675660087952145, 0.15320018052389384, 0.16739436329103807, 0.8053935788460904, 0.8841809538905517, 0.17674553665440929, 0.194979569934017, 0.1917484202839197, 0.18859447689048092, 0.17352752115737946, 0.187980504371543, 0.18880259784988862, 0.1775496035238051, 0.18915285764429257, 0.07390761126190937, 0.07133780108145582, 0.11238829330224853, 0.08326705383449828, 0.08134329557285402, 0.09924575862946217, 0.07122776329397729, 0.07052975801559169, 0.06545947454937018]}, "mutation_prompt": null}
{"id": "de061d5c-9626-4e6b-ae2a-ae82207e2608", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F * (1 - evals / self.budget)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Memory-based guided search\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial  # Update memory with best\n\n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced memory-based guided search and neighborhood perturbation for enhanced convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a9d7a734-097f-410f-b86a-f69ff1a03d6b", "metadata": {"aucs": [0.7725672503813478, 0.8096188819712116, 0.780404132960158, 0.8099909925557951, 0.8279490080413467, 0.837154950698175, 0.7792665911547922, 0.7866870144490401, 0.8142064178227547, 9.999999999998899e-05, 0.10141044896248952, 0.27116410064666274, 0.6119730669654228, 0.006070048500506298, 0.6292377520139817, 0.4076010951128275, 9.999999999998899e-05, 0.3748842621806543, 0.1176573492148062, 0.10588144784623454, 0.12346233322327882, 0.11046623577492065, 0.12059116400072722, 0.16578429331209243, 0.13363518658645646, 0.09077680147356293, 0.10092277252359749, 0.11521008219869877, 0.09506200668395381, 0.11626650704098807, 0.09757998047256788, 0.09714606429032902, 0.10897509404853789, 0.1331534032412286, 0.14433262319034945, 0.1278243174348388, 0.9401157605279575, 0.9063878999922943, 0.9071892268063888, 0.9427570176317641, 0.9437236088768345, 0.884906593930616, 0.944037068992414, 0.9342741159959169, 0.9441493873756184, 0.5296732670169861, 0.2853650133291965, 0.4957608570499733, 0.13247947176224129, 0.28487576108307466, 0.5766394434379889, 0.26154614550510846, 0.5849098708672685, 0.2963729272915724, 0.22619022600387484, 0.33293834414048906, 0.16959288444471676, 0.20660088958023848, 0.2054940092780747, 0.205053803120814, 0.22870426597836202, 0.2315200469605675, 0.23751108054252734, 0.47505968428518575, 0.1262545789394819, 0.12304905376563169, 0.417769853071818, 0.10990091244546674, 0.11674247804763238, 0.16550622190050268, 0.15047263732107963, 0.1616423679019814, 0.13208163584912513, 0.21600847027297176, 0.12582470231602405, 0.14377050657890322, 0.12041855643309196, 0.1648162974762174, 0.12145905850630045, 0.23067475699705842, 0.12391834352689735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10509624810384555, 0.06860406548524278, 9.999999999998899e-05, 9.999999999998899e-05, 0.018678015874715626, 0.2346946292636447, 0.0907814891629305, 0.2042331410049557, 0.13996776607563155, 0.19555443983559695, 0.02779234736078584, 0.08163310971924254, 0.2864320659878018, 0.1270284418617501, 0.23283248569493242, 0.034621427420539086, 0.1283182972305622, 0.22813358405765527, 9.999999999998899e-05, 0.1575526109303046, 0.1289157412380706, 0.1531647070084735, 0.15458842977378517, 9.999999999998899e-05, 0.14033513753473859, 0.03189909979484151, 0.12623133387167396, 0.3311323174733729, 0.06797117532031738, 0.09944796838026759, 0.1729733394398716, 0.16376384565906832, 0.08408220710796865, 0.5462560438423928, 0.571412186093299, 0.5342425679735536, 0.5529074715088098, 0.5192946673714278, 0.5083304182394727, 0.6029790827673704, 0.5129652266188065, 0.6068181561815288, 0.07780413321570434, 0.10627557073037464, 0.08329090342079126, 0.07804125006354512, 0.13034376868514663, 0.09150760668634939, 0.07951626841990633, 0.06987179032984292, 0.08216617228188627, 0.14648175991567203, 0.2524311962637644, 0.14925426010359677, 0.15043150190562415, 0.14004963987661556, 0.1933158488823471, 0.12517293560045695, 0.21591918759982043, 0.12046980731736368, 0.3389919990290068, 0.2604952979077416, 0.3299910382079826, 0.3037956128760062, 0.39079307760953197, 0.2863925325086073, 0.376554090352191, 0.4464181393977985, 0.4882629740237414, 0.23789213716453328, 0.19222037618140897, 0.23215001663665435, 0.1940275909575674, 0.22417164604814832, 0.18300737224806518, 0.22175501838766953, 0.28389055496431326, 0.21048944764142308, 0.22956913181783667, 0.1805381765078098, 0.2104004944973319, 0.22315811537748753, 0.19504015697149912, 0.22405337732764297, 0.18034458196185044, 0.1615352285250501, 0.20688868232431168, 0.2207344304581934, 0.21999636352703733, 0.20823813852988937, 0.20014939885033944, 0.19590083964833216, 0.18502755583923491, 0.19183045143447686, 0.1909440219207018, 0.17321210239429952, 0.7764847456965296, 0.184016031746132, 0.18772158190979138, 0.8644924820170805, 0.1683593361961524, 0.8395219517759089, 0.16786572074531592, 0.9009102120428156, 0.881866729544721, 0.7990243688703177, 0.21024350716173468, 0.7876327830106913, 0.707403594735778, 0.12675660087952145, 0.15320018052389384, 0.16739436329103807, 0.8053935788460904, 0.8841809538905517, 0.17674553665440929, 0.194979569934017, 0.1917484202839197, 0.18859447689048092, 0.17352752115737946, 0.187980504371543, 0.18880259784988862, 0.1775496035238051, 0.18915285764429257, 0.07390761126190937, 0.07133780108145582, 0.11238829330224853, 0.08326705383449828, 0.08134329557285402, 0.09924575862946217, 0.07122776329397729, 0.07052975801559169, 0.06545947454937018]}, "mutation_prompt": null}
{"id": "688fc13a-7b37-490b-966b-9c508e4378c3", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 39, "fitness": 0.3035737164097205, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "a9d7a734-097f-410f-b86a-f69ff1a03d6b", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "768c5a95-542b-4ef1-8dc5-73519790b509", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "6dd6c3d5-20a6-4b27-a776-59a11807a507", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "7e74a3a9-6cd4-4bae-9046-f6afacfc2e48", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.5, 1.2)  # Updated range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.98  # Slightly faster cooling\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced a dynamic scaling factor and elite preservation to enhance convergence efficiency.", "configspace": "", "generation": 42, "fitness": 0.2989253255079274, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7941720479152738, 0.7335071775131397, 0.8076795537774688, 0.7687239297583368, 0.7536985463991556, 0.7614567145626947, 0.7492105094007793, 0.7303645208962448, 0.7772922179148715, 0.5342730064876796, 9.999999999998899e-05, 0.43547584383506255, 0.4919208222336283, 0.5184890379959513, 0.48339387221949914, 0.5914426106358187, 0.48139750563875605, 0.5615132170357375, 0.103275614054258, 0.5192560503237396, 0.1438380493004211, 0.1065927993654735, 0.060994809512881165, 0.13639574518411535, 0.1198558569663064, 0.14674874375969216, 0.11341345997494101, 0.13978415358616625, 0.10543058692729157, 0.11588443607632548, 0.07792572105505535, 0.0869033594862374, 0.11286132160976925, 0.12437372277574099, 0.13991419792637094, 0.1062126801987382, 0.9511313728693329, 0.930490190669157, 0.9437280481630379, 0.9515942981752109, 0.940841875822983, 0.9314775626315371, 0.9341416091397716, 0.943694924755548, 0.9415716567590218, 0.14545030996340702, 0.45132383336243864, 0.5181850285528408, 0.3971700339747456, 0.2993337963568927, 0.4258722688993801, 0.5217237807712833, 0.19947054652367657, 0.47130242405082545, 0.8385212725420672, 0.1751459851209809, 0.22213745590348044, 0.26636563520316414, 0.7981127486635944, 0.32199664702804187, 0.2243897096158165, 0.7937623488953153, 0.17305009138632, 0.1444566745732474, 0.4763274184497013, 0.3964484865897354, 0.21061312061869253, 0.14047547209237166, 0.4424413320362227, 0.19178283475886537, 0.36099443427247246, 0.16970080770225182, 0.1434142510124371, 0.1237164543788476, 0.1725827562841541, 0.17425560805043439, 0.15115081623602145, 0.1601654826562, 0.20189488185536986, 0.2095104262823414, 0.31282944599801166, 0.05508634078435748, 0.03901454147150052, 0.06028757059767087, 0.06900727741084267, 0.1436243104070718, 0.02959654023343916, 0.05977007021498282, 0.032911732861294896, 0.031925036967933584, 0.2501528607560586, 0.11745671306448802, 0.16788905828962364, 0.07629809793382625, 0.0819583641137227, 0.07334328880068186, 0.27947808443216393, 0.11087078177413678, 0.08411087782953441, 0.10853686972836962, 0.07433007800661395, 0.133526582303921, 0.09980343792935709, 0.08312848591335464, 0.18423588501238009, 0.12595234945385358, 0.0738104341591479, 0.08079767934895155, 0.22976762441954557, 0.07977764803260146, 0.19243077495700733, 0.06045418240911371, 0.13010741945695936, 0.09360046598318783, 0.11649193155719573, 0.18148536353092182, 0.13629611424808785, 0.5973996810958409, 0.5117967028315116, 0.5680736540668658, 0.6023862725828075, 0.5809486358269229, 0.5456566848907027, 0.5528078792621445, 0.506571092859044, 0.5713065588894004, 0.08077524739404685, 0.15749873910575496, 0.12238498896324601, 0.14595207571819924, 0.11166197117944343, 0.06049322588865069, 0.10684176926178912, 0.15638576595242615, 0.09865040776903111, 0.12805919541463373, 0.16676913278701855, 0.1793336488768691, 0.19993971882400552, 0.22214057534572051, 0.13560103351112762, 0.1956947750273701, 0.17037366565944523, 0.18703084775732604, 0.3108763588112432, 0.46015866211419687, 0.30466256704557704, 0.4802457136149222, 0.29085395023375993, 0.2750223478007303, 0.20923011978673545, 0.44069579773085255, 0.4432542763534342, 0.16559137456954054, 0.2606288642585546, 0.25937751902565387, 0.24185534186922386, 0.24747109050423544, 0.16057773219485427, 0.27811568212221505, 0.2139891301737804, 0.2011891849313493, 0.2125578192472969, 0.2540766857129104, 0.20359094596071314, 0.17552186057873698, 0.18383380708917452, 0.19962655920153172, 0.1802693900440674, 0.1964184053069684, 0.24553692492016976, 0.19273176818054305, 0.18378100612076165, 0.20428451105298795, 0.19477664699809716, 0.17979496535174655, 0.22098216771038992, 0.18735016125589787, 0.24441831826125404, 0.21910897693493903, 0.18613709971673187, 0.18634070577832795, 0.19585166067392434, 0.8968005049367634, 0.8632311353359773, 0.1461815679711984, 0.16548655528725598, 0.11591418393968156, 0.15590406715954164, 0.7860043952845878, 0.8151439207872824, 0.8122890559129265, 0.8397670519526027, 0.2090614809627953, 0.1656732168952485, 0.7979840984556659, 0.8287687069549616, 0.1645196195381421, 0.1972227726328194, 0.18966946824373043, 0.1787056671487155, 0.17256433230491697, 0.17277545496127056, 0.17248914714291297, 0.17399559737257508, 0.19694354641428713, 0.17876082340369337, 0.07016427696079408, 0.06235559334358021, 0.10510934166077845, 0.09719372198967902, 0.0765572872959861, 0.08741902570255133, 0.08622821112386447, 0.07593528998218646, 0.0818976683291992]}, "mutation_prompt": null}
{"id": "fdb547b8-a8a1-459b-8f3f-3c556fbe7991", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "24fd273d-9ba5-4c84-88be-8a10f6240ca3", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "04e793c3-4811-4b15-a9da-1f5195686647", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "c43b8a73-2515-4aa0-b0dd-19c5ced49c74", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "53e3d408-0196-48b9-8d40-e3e532120fa2", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "702cb546-7d19-4371-8a58-92a5f4615d5f", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.2 * np.random.rand())  # Enhanced crossover adaptivity\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  \n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size // 2)] = self.best_solution  # Elite preservation\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved convergence by introducing elite preservation and enhancing crossover adaptivity.", "configspace": "", "generation": 48, "fitness": 0.25993487792438086, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.5928731484883978, 0.6030786875548371, 0.6793301203083233, 0.5542170072926703, 0.5849826836119367, 0.5562489094751422, 0.5914094809097786, 0.5813961258565878, 0.5883925377613846, 0.40072648313447157, 0.044884042038387584, 0.2753376316565427, 0.37358929099452753, 0.36753484647535406, 0.026023603857863065, 0.2384048469402693, 0.16134620668282973, 0.09269219365007453, 0.10238097017762215, 0.1096224479306156, 0.12225085320291451, 0.15226437338211618, 0.12498502228241393, 0.12586512159993257, 0.15528579819418442, 0.0993385906393025, 0.3621398428429776, 0.11269240975387018, 0.137147371528907, 0.10190412158261919, 0.10347637760562212, 0.10976933912234765, 0.09321795428016322, 0.12003974615021129, 0.1329276195892315, 0.11878043237675995, 0.9247499516151667, 0.9178793596216621, 0.9132785093192299, 0.9343950332248129, 0.91483523391115, 0.9179316578780771, 0.9303739835792691, 0.9255728140808754, 0.9362076339430454, 0.2111712867121872, 0.2498294914575544, 0.3072220015864705, 0.347360717759748, 0.24347609142864757, 0.4645876257316396, 0.20396735838246582, 0.3426870084173471, 0.4258994125964164, 0.3747968853681446, 0.7054323529254216, 0.22449965939551153, 0.18389412554305895, 0.2608314350349952, 0.3201767141186983, 0.8444999459335687, 0.3546271574715957, 0.37988718393648047, 0.1694935427473181, 0.10975978193672564, 0.14981793646631847, 0.13308485400611758, 0.14086005882119057, 0.12008560152345304, 0.12237958342009991, 0.1713170001494453, 0.14805542459252063, 0.20997228679023205, 0.13413893804436827, 0.1961110030618417, 0.1273450422408129, 0.1414444457832046, 0.11326576954840295, 0.15889994539953078, 0.15767013612784253, 0.09333688345603519, 0.004033759445186802, 0.011796989503315314, 9.999999999998899e-05, 0.005615347582491048, 9.999999999998899e-05, 9.999999999998899e-05, 0.006311773505915164, 0.020975198489226576, 0.003622671347302653, 0.06780196404501149, 0.14626479774603263, 0.1435410565023456, 0.050211633625745544, 0.11511445673074994, 0.07349782040396058, 0.22832605994095878, 0.17181473779435252, 0.12905827131481273, 0.0527866905177401, 0.07335453088584676, 0.050714836339467495, 9.999999999998899e-05, 0.0745374750932628, 0.09058402991315684, 0.08918950520973379, 0.057287489775211586, 0.07132898637757212, 0.0856392713669396, 0.1246484627442358, 0.130475875312427, 0.11273247506965567, 0.08740468371097654, 0.14070134494469644, 0.24749154986816913, 0.10191804126207249, 0.07305065679980105, 0.49314626595174627, 0.4513143787121692, 0.45112789590921576, 0.47836061402811114, 0.5150352279460098, 0.4807453440116145, 0.5144178678153837, 0.47765015143537515, 0.48363818929902924, 0.11156692638414512, 0.1094978801764751, 0.14276965223798266, 0.08403884199597522, 0.09732918936737533, 0.08401809112660052, 0.08441250652062882, 0.09800297402349956, 0.08540626725210532, 0.14372274009427388, 0.13852273586697006, 0.1420878471887107, 0.3924705024896862, 0.1790940810944981, 0.1356447246829794, 0.22283738905917094, 0.15650309163650378, 0.1455702083150482, 0.32420467266734954, 0.3226258306187926, 0.3320914366753318, 0.3595574825702227, 0.368971365160391, 0.27305870802399224, 0.3555349840853841, 0.37213399588222995, 0.2258675114481007, 0.24789587311069083, 0.18700634716163056, 0.2029134268702536, 0.2679169578344359, 0.25563157984739093, 0.20956498885760688, 0.21025771241645075, 0.16623923029257204, 0.1762278959933039, 0.2087888299269408, 0.18305522162999321, 0.20519086391456043, 0.18697475737886837, 0.19994104422346093, 0.20353321161565063, 0.19652320499475273, 0.20074103614724104, 0.20940465832561905, 0.18384828496096128, 0.2155146152986982, 0.2045556129717221, 0.18721608910930465, 0.2532336644939863, 0.22025114553069258, 0.1920227770320313, 0.23129230779150056, 0.17546305916094374, 0.18705400295513142, 0.18478600725514482, 0.18460327916927677, 0.861622696008505, 0.7404818411603742, 0.8206263337924724, 0.25089988278268405, 0.16197746282924907, 0.6948922585123696, 0.4917812573177741, 0.703369987891513, 0.8267293743722344, 0.5790584095071958, 0.20960017589036795, 0.15422203785530852, 0.5658721309946282, 0.5976661305833182, 0.16374590446809667, 0.20784410123639796, 0.20181911016547305, 0.1873273694671047, 0.1977872478046424, 0.18065053994645386, 0.17667874243249826, 0.18151452873301155, 0.20301038687926565, 0.18018043191079747, 0.0696100561886489, 0.07859453719566223, 0.09164798732235735, 0.07767668413745377, 0.07189009628412679, 0.09615017463241837, 0.09578859168876375, 0.07932742618618793, 0.07936693027674568]}, "mutation_prompt": null}
{"id": "1c339ddc-5ed0-45fe-a763-4df475a0035c", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n        adaptive_step = 0.1  # New adaptive step size\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n                        adaptive_step *= 1.05  # Increase step size slightly\n                    else:\n                        adaptive_step *= 0.95  # Decrease step size slightly\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved convergence by adjusting learning step size dynamically based on convergence trends.", "configspace": "", "generation": 49, "fitness": 0.3035737164097205, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "3fc9422b-2abc-4378-92ab-bb16cf986e95", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "4eaad071-7d0a-4f93-9b7d-b01b4570c8e8", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "63b23606-8e6e-4793-865d-cec64194c5bb", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.success_history = []\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        \n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  \n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Adaptive CR based on success history\n                if len(self.success_history) > 0:\n                    CR_adaptive = 0.5 + 0.4 * np.mean(self.success_history[-10:])\n                else:\n                    CR_adaptive = 0.9\n\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    self.success_history.append(1)\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n                else:\n                    self.success_history.append(0)\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved exploration and exploitation balance with adaptive CR based on success history and diversity boost.", "configspace": "", "generation": 52, "fitness": 0.28655392425185106, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7610973467786266, 0.804254775374113, 0.7373609171729063, 0.7584205992831775, 0.7583606714418517, 0.754510011124916, 0.7368140084326874, 0.7288449089532554, 0.7256794886413469, 0.5247113768248713, 0.4724659610656212, 0.04573047088690596, 0.5475798005870026, 0.19656253793003775, 0.23616036167384413, 0.4788234237066772, 0.49442815639574544, 0.4740683447703956, 0.13672007881655268, 0.16259755516123808, 0.14799073630840265, 0.1675285629643749, 0.27259963223078365, 0.12879140302042436, 0.14515695187859712, 0.13551575409512173, 0.14448294093846614, 0.09218672291660879, 0.10417942303870908, 0.0929561629622978, 0.14421561307040243, 0.10765179735743646, 0.11840775967812456, 0.10659066625662561, 0.1209525376719035, 0.14606662769059653, 0.849772286168285, 0.8416736845798277, 0.8299143129895413, 0.8497713513922751, 0.8652167258799802, 0.8640488414968809, 0.8523630245970272, 0.824844035439942, 0.8599677445913669, 0.4501464830087142, 0.42093818286349527, 0.418700912203125, 0.5045646285971295, 0.4738897738019663, 0.46669412958474676, 0.4957544841393079, 0.40499926747070514, 0.5255165887252402, 0.22440448470482244, 0.36602699100625846, 0.18928371703250413, 0.7624159502376098, 0.21244708973141435, 0.2569489329528265, 0.17656233355954465, 0.21835689776858658, 0.22231768350434433, 0.22963029000873514, 0.15789107316480444, 0.1722110943090751, 0.18904345896259378, 0.22904698830355275, 0.32002419162680573, 0.1758667110527805, 0.15311399058525854, 0.3746716771574504, 0.12541166805807225, 0.15674050981828347, 0.17777321107861155, 0.23046560432477803, 0.1834657916939696, 0.19572943585676816, 0.21951587630791614, 0.22669182495501838, 0.12780012493300985, 0.0027876503731180113, 0.1101802854752526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010029776643054489, 9.999999999998899e-05, 0.06488577715232058, 0.03163594501548417, 0.11411385901474747, 0.09867550340072617, 0.15604346031040095, 0.03478421084620109, 0.048673671483040026, 0.1563104185718346, 0.12448911870886548, 0.11500790614392842, 0.21438231611891634, 0.11325643628528737, 0.11726116320012714, 0.12916172487960698, 0.0739093612806262, 0.12243886827978767, 0.16597549448396764, 0.09781872535101266, 0.026276108437385703, 0.08197893009621626, 0.12621181817560445, 0.13577613302260239, 0.13658653065205695, 0.11584283711570731, 0.054329885842964165, 0.07156664212437536, 0.12106123947205594, 0.15008006657644746, 0.10707573155630778, 0.5194590128652788, 0.5280432776605343, 0.5534668910306606, 0.5461297529594664, 0.5187563100835625, 0.5716292302418948, 0.5644733167568934, 0.5835371765825224, 0.5703680957734514, 0.12833101746615472, 0.1381819272694833, 0.07258569771698098, 0.14759540150539707, 0.12094289689659177, 0.10408869211620642, 0.09613557322767063, 0.08203493300465303, 0.13203011355702587, 0.17483526653806092, 0.16896452759757508, 0.1888707185879489, 0.14875633467128135, 0.13980480716658672, 0.20283165127134284, 0.20526222394927895, 0.18739128820699558, 0.18770453029354528, 0.44441405978631887, 0.23594206662279416, 0.2616948111966737, 0.41535617637460975, 0.36254989325542986, 0.3720528734325468, 0.3873093752934571, 0.4224255497498006, 0.28557009574455583, 0.2735274468097526, 0.16932642471743187, 0.248193495272249, 0.2122177696911599, 0.2333050052692761, 0.23406327461267862, 0.20312894893103517, 0.14540451447799752, 0.20014743942918622, 0.1921691783013404, 0.20163556686387762, 0.20327758652639427, 0.21517280379206927, 0.17967133027138238, 0.21268126707871227, 0.22026668258065318, 0.1842399890725559, 0.2100611977935971, 0.19718728288947673, 0.2385216560185407, 0.17792000473265512, 0.19037220238421226, 0.19200111458846136, 0.22496508803675075, 0.1967978293856183, 0.21173196658431903, 0.21834596003361706, 0.18620012209457437, 0.1778008350944419, 0.18767253204375045, 0.7835090729994696, 0.1508728532899033, 0.7590246006250487, 0.8371736461188573, 0.8305189651188537, 0.7891176837243529, 0.7649098238456105, 0.2098736721848683, 0.7518279986785751, 0.7862256542025154, 0.21025622702527347, 0.1512892532568061, 0.7120389867592034, 0.6389907794062641, 0.165428900237658, 0.17554986427953967, 0.17419347172959465, 0.17989392923916836, 0.18123598761357884, 0.1909194407310848, 0.21339424427773335, 0.17247998939918707, 0.17665855157305455, 0.18689103602320556, 0.08735735431083158, 0.08605731925540017, 0.08188158914812449, 0.08933545979568391, 0.09155131743258649, 0.12916954108145395, 0.08026173581823826, 0.06531232764541839, 0.07280853632605666]}, "mutation_prompt": null}
{"id": "b5913806-09d4-42d9-8304-4dc90f69ab4b", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand() * (evals / self.budget))  # Adaptive crossover\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved convergence by integrating dynamic population resizing and adaptive crossover.", "configspace": "", "generation": 53, "fitness": 0.29604964041480686, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.8140513050574331, 0.8197024832278473, 0.7561497415903956, 0.7673689110668833, 0.7648910160396514, 0.7874676462363042, 0.767723604278955, 0.7791207228071132, 0.7861088755951087, 0.3262435002668037, 0.43014138895265197, 0.1502367665536678, 0.509763969144815, 0.574772007878845, 0.08422315194953223, 0.45760977479017095, 0.4953971744984643, 0.5347262268213802, 0.13048504263853844, 0.09983291856637477, 0.10888128573442157, 0.11230006751687671, 0.1068132943436716, 0.12576428542576323, 0.1413504819760394, 0.10810940354278264, 0.10536420863593154, 0.11274185114189672, 0.09978595537038981, 0.10695549028845053, 0.10904788676654786, 0.07950323994910491, 0.11901136007765123, 0.1151153586406104, 0.13895116221397608, 0.1188681748444238, 0.9496706281494118, 0.928397153036236, 0.9158068023386886, 0.933830476742851, 0.917189690883945, 0.9155266451300765, 0.9127631355039014, 0.9404526495764205, 0.9430481429088406, 0.5229205073965124, 0.4335147760599499, 0.408413307117247, 0.3624439573294771, 0.4894919056196788, 0.46030139464181874, 0.46457380084904387, 0.3596041844558179, 0.4202114016817602, 0.22362779603243554, 0.8210441336600899, 0.3720679765850732, 0.8085041902260377, 0.8112241048523327, 0.3380584575593627, 0.23009069283720707, 0.21422591582507777, 0.21842746725479678, 0.46514606468827324, 0.27827157130521074, 0.18057807874200682, 0.18106205313442136, 0.232611695103769, 0.3316807284456641, 0.2365543581312871, 0.3445602534466137, 0.2713059528792965, 0.1743153928738198, 0.34497401243667714, 0.11537785638232523, 0.16418379757047552, 0.08333520069692912, 0.29926457054703837, 0.2411343534652305, 0.20164844125166936, 0.33825154103140154, 0.0021510541116099846, 0.03723024317671331, 9.999999999998899e-05, 0.0626227557024378, 0.018725761253231776, 0.03467436098286669, 9.999999999998899e-05, 0.024721992938117054, 0.037616515888712065, 0.10816665194013897, 0.13749556032123111, 0.17611282499519, 0.08704107389590332, 0.10007483602590761, 0.18138747503051555, 0.13300486645260956, 0.12957445999426087, 0.1125598658657303, 0.06618531873026046, 0.0416477725743456, 0.0585878622376369, 0.1325790979763728, 0.11701100490398819, 0.09364328608405814, 0.14976706489425684, 0.16408772091661228, 0.19660820607304352, 0.06605870621220022, 0.20533354220676214, 0.13175560740876846, 0.18192058365504793, 0.20717256827972697, 0.1456888721431484, 0.0763344116719541, 0.08059355566419524, 0.08156333831238571, 0.5746846729134849, 0.5817928677860857, 0.5595275501130255, 0.5686205999276012, 0.568764560451142, 0.5728200390656197, 0.579387739213272, 0.5461853876050673, 0.5982269848654006, 0.13692233879314208, 0.10671598679782657, 0.07910787615977388, 0.07415102867522949, 0.059473741412956804, 0.06781711733436646, 0.08473918012479431, 0.11568787932190516, 0.4327289207810592, 0.16549721814713925, 0.1725417536386401, 0.14301925647368208, 0.11987587876890138, 0.11667271783154942, 0.1668133685507388, 0.18103742772432718, 0.17547371530726652, 0.22226651689811594, 0.39007617239862946, 0.32141379259690717, 0.3035128915288863, 0.4430505913654095, 0.3181628066584752, 0.31012076862258686, 0.4877132107190236, 0.28714307697936614, 0.31575653590677266, 0.2111500336012717, 0.25697843180066715, 0.2855775585230481, 0.18422120172323497, 0.18280114944833936, 0.2196719167749127, 0.19697287924938023, 0.22287069739174636, 0.23520593540911883, 0.266254369693555, 0.2509738539425064, 0.1847802249076076, 0.1853899004950723, 0.17999711549801833, 0.18034703079261305, 0.2242580611556757, 0.20267442938584768, 0.22501152781707456, 0.1939813522249909, 0.18784467289453188, 0.2087748118722349, 0.22244037098657032, 0.20524274877513693, 0.16883020107789437, 0.1823040761215361, 0.18134583152695727, 0.20953546007353085, 0.1862011705097688, 0.17539266392992903, 0.18623347812637858, 0.8727323489829683, 0.8164848620997146, 0.8333280945852927, 0.8650728872217375, 0.115640172697834, 0.14959686775167225, 0.6425356995853666, 0.20816901946481592, 0.8073228811532325, 0.15305362233037445, 0.20936222567303886, 0.15405456385021365, 0.15822357366862594, 0.7551917588905868, 0.6773085283202828, 0.1803657969188136, 0.1736849576812921, 0.17495363154600851, 0.1856513310730764, 0.18065305261279796, 0.1819525729174214, 0.19456632540044394, 0.1652374206701428, 0.17890464683718055, 0.10049406813911299, 0.06455058521417811, 0.06919614137525643, 0.0703326717990711, 0.0839965190263331, 0.10038594780485055, 0.10290878306516626, 0.07699711546667531, 0.06888255925176368]}, "mutation_prompt": null}
{"id": "46a3446b-fa57-498d-beb0-eb2d988c7984", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "877d6060-c307-4efc-8050-84fe6a65856f", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "7f3d0128-17e9-44b8-ae8c-5fba25e367e1", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.5 + 0.5 * np.random.rand())  # Dynamic crossover rate\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.985  # Adjust cooling rate for temperature\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved adaptive exploration by introducing dynamic crossover rates and temperature cooling schedule for enhanced convergence.", "configspace": "", "generation": 56, "fitness": 0.28247553099834516, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.8360735490403499, 0.7744577358146538, 0.7944532706981986, 0.7901668372507293, 0.7783570161706378, 0.7817579166432862, 0.7576797726434354, 0.7498491014551145, 0.7369396581492915, 0.5418394777428458, 0.5486700400918962, 0.3212066002350401, 0.4948251641631175, 0.03963795266800463, 0.09275475126324073, 0.4821033978537247, 0.5328687489439019, 0.4893860756800045, 0.1177634764266633, 0.16441033336607347, 0.15665435981212028, 0.13162520426049684, 0.132475855535783, 0.16919700290586692, 0.1707378404568375, 0.14971708376193327, 0.25921063336240235, 0.1240770578230127, 0.09804933564896345, 0.10894527789567987, 0.11596894243796618, 0.13913329554050546, 0.12712918612683366, 0.10862289194724539, 0.10453363598374343, 0.12762990003691033, 0.9235920203390969, 0.8763288239916076, 0.9028815995315455, 0.9368855979820241, 0.9352618394298834, 0.8908765834147511, 0.9034493781074644, 0.9272977482250566, 0.9213250812540995, 0.6047377099518803, 0.553584558636774, 0.4928391167842021, 0.47940927521261556, 0.4722026271511669, 0.5524988278983487, 0.4135826608681251, 0.4545760005892252, 0.42947557460655184, 0.24091984027819158, 0.3588823018062165, 0.2918310188470379, 0.35455734425840235, 0.3469369131944774, 0.26681342022049437, 0.17320201562639126, 0.20151239608716698, 0.29315500003977546, 0.11623440632312154, 0.13505893378246714, 0.19037717468998183, 0.19502979809657994, 0.1596957024474015, 0.1566550517928914, 0.20059972172271678, 0.353573175113023, 0.17952929955342134, 0.12566596643700645, 0.12008796879671557, 0.14721044528836047, 0.15122924187201803, 0.12378229929341944, 0.1441039486368405, 0.12189379818349821, 0.12321441568574831, 0.1495568383727779, 0.04852375134184206, 0.012376562709065508, 9.999999999998899e-05, 0.008817473756613459, 9.999999999998899e-05, 9.999999999998899e-05, 0.010111210355261968, 0.02229588182822495, 0.09534791105606022, 0.08832796491235495, 0.12307650765439904, 0.2251400689009111, 0.21071771803325234, 0.12467955370997474, 0.20727423984491744, 0.14813019461151122, 0.09320713873808961, 0.13524733383513354, 0.0389325697934817, 9.999999999998899e-05, 0.15296389368203456, 0.06050335870600554, 0.07882517854263138, 0.07176958767354868, 0.09500071056238835, 0.07321738436633274, 0.24760423522571395, 0.15261152611621398, 0.1522935532281131, 0.13173917228938403, 0.07547313982197412, 0.0486109118006669, 0.1785966770788342, 0.11712337226181257, 0.14149850587969703, 0.06991171137552088, 0.553830362209659, 0.5186440800397375, 0.5613729799693978, 0.581055186723147, 0.5609408261485235, 0.5219484832665904, 0.5759631195486707, 0.5510842357371066, 0.5904510282484607, 0.10577875909889733, 0.11352368159368997, 0.06922619344994674, 0.09571597669347631, 0.10643645772733112, 0.09462546383444859, 0.08895006191733157, 0.0831889205475902, 0.10804502652719694, 0.14969832409900918, 0.21306334946483718, 0.19685127939669278, 0.15162895005825738, 0.13414854688795308, 0.21448422616783613, 0.31100474277241963, 0.16084877481787097, 0.26230661583370574, 0.308801883295836, 0.39477992719102495, 0.3699333302733081, 0.23387681207343225, 0.256469434351706, 0.31846661498969153, 0.4412394309003512, 0.23149632561022682, 0.39264905734302524, 0.22968536406628304, 0.1797010404227425, 0.1801546299492942, 0.2327665035491575, 0.18766874530662514, 0.19396774159936947, 0.1892133399656163, 0.20286120253829543, 0.16279406825608533, 0.20124837423511, 0.21265134035825273, 0.1844123101246451, 0.21288230210167358, 0.1909996499741441, 0.2110359532363505, 0.22110810571202477, 0.18667427240451984, 0.1805341884354802, 0.18723633284991414, 0.20534138004636437, 0.19649659717124046, 0.19110624286803346, 0.19015128239902246, 0.1891550251974553, 0.19694255933917137, 0.2098806422817836, 0.18331281336155214, 0.7910600213730122, 0.1862019165952955, 0.18597182776296783, 0.8721765116660619, 0.7866916679293522, 0.19764470306720094, 0.7998789120042966, 0.11499650237766923, 0.11956365783737566, 0.8158922258867332, 0.7843284631052939, 0.7236289610476042, 0.2049073693953548, 0.17989933148037418, 0.2962675786584371, 0.16768047110719253, 0.16488121553671353, 0.648258577671431, 0.22193449713619362, 0.17076555879928512, 0.17529891594726488, 0.1891170648553313, 0.2113120754292067, 0.17965666734351038, 0.18718673516527584, 0.21043512066437564, 0.17607857965125417, 0.07490183355745594, 0.08131728426964324, 0.09913287629957501, 0.0757770494215052, 0.08281270264069918, 0.06131938508956902, 0.08883952649923155, 0.08208002420867, 0.09293756765451122]}, "mutation_prompt": null}
{"id": "513f4a1d-9d11-4b1c-86ad-66b22346d596", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "f00e43a3-8efc-4973-aaad-8c2c23d5bc71", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "47be5a63-7086-401b-a59f-41f5ca489469", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.5, 1.0)  # Adjusted range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.7 + 0.3 * np.random.rand())  # Dynamic crossover adaptation\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.3 * trial + 0.7 * self.memory  # Enhanced mutation diversity\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved exploration by integrating dynamic crossover adaptation and enhanced mutation diversity for better convergence.", "configspace": "", "generation": 59, "fitness": 0.30332026369869913, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.9187697452285504, 0.9313984451694904, 0.9338462687139926, 0.9060398693145466, 0.8852330928987846, 0.928037356637815, 0.9094153954035432, 0.9120416063847986, 0.922210274883343, 0.6228198478449561, 0.6352261196164697, 0.5512716913383442, 0.5727586050474436, 0.6242760332491841, 0.03965576603776566, 0.6149350867051189, 0.173617405095848, 0.5643761226081834, 0.16303883750323367, 0.09153061508102223, 0.09584211360022366, 0.13164712707919057, 0.5064403617267423, 0.11691639725513303, 0.13270771313350083, 0.171422006148792, 0.13008096561615312, 0.11137483116043967, 0.10301516086257467, 0.12470255720015977, 0.12541803049956357, 0.11119328356076241, 0.12042849564379399, 0.0988361339979027, 0.16842405888969747, 0.07587731141117948, 0.9124767153317788, 0.880332044411928, 0.8939055275188001, 0.8950805177488512, 0.894106990388425, 0.8728061246127207, 0.8966658559676248, 0.9109481809824439, 0.906033837866063, 0.612801241660951, 0.655946744363342, 0.5005308267883413, 0.6182213340060336, 0.6535739192700627, 0.3915081596579437, 0.6057384763154934, 0.5567708782995405, 0.46670575392418157, 0.2136405757546811, 0.3476652274436337, 0.20823978342349214, 0.2721795380891818, 0.27753115845154774, 0.321067809284699, 0.22378127344122134, 0.676459121871974, 0.17994359411119898, 0.4029993088953292, 0.23214217103368062, 0.3961071890471012, 0.2892376091746248, 0.2896229266370801, 0.292662400402671, 0.2980519237444853, 0.4770440843496946, 0.3999971526167746, 0.246042155875823, 0.17624624947609968, 0.269430449462821, 0.37563649841863556, 0.25080912823046997, 0.22797214662818666, 0.2678904329114251, 0.1873944900004083, 0.4094953202063155, 0.145192248952278, 0.1070505382727106, 0.022537909410166646, 0.04425500608978106, 0.09166635027640335, 0.021852010365015495, 0.057170842295685365, 0.17817445818415867, 0.1450513783191133, 0.08162795401226708, 0.10863709936084742, 0.2842460427398139, 0.2832420978560716, 0.10445131005931396, 0.1305624580462198, 0.12240546502611538, 0.0942707618084041, 0.41012695448591097, 0.09781991146535252, 0.16950497237078654, 0.23420723396163112, 0.07519066676703279, 0.21835355737200857, 0.1455097753419079, 0.10546263320280358, 0.11478780366498065, 0.13528028213694965, 0.18624274933723906, 0.28111197781343344, 0.15211690115274779, 0.12838016509024652, 0.15815848556058643, 0.13291274525663843, 0.15623648759722308, 0.1371578071937567, 0.0939277551982648, 0.5865618873997744, 0.5773073655173778, 0.5979722095842467, 0.6147189467366571, 0.6211539382944186, 0.5827140688273569, 0.6537420060659398, 0.5788085371732521, 0.6039371770228839, 0.1295404479255432, 0.11397371463958406, 0.07942264703043767, 0.09436565954365428, 0.14605680718948355, 0.10337734384086272, 0.10242637228505813, 0.08411808039872282, 0.09442934390668101, 0.2551137280461503, 0.17085625468896892, 0.17253916213295217, 0.24676957816086853, 0.33032545719159634, 0.19885990948140697, 0.22368767155677993, 0.2676142292529371, 0.2139389405877089, 0.38631771893079514, 0.3507941251632637, 0.3410972618913629, 0.2632917152877642, 0.38895323054185926, 0.3147185398831953, 0.2858480119554412, 0.3545303399561892, 0.3398699909995614, 0.2595232500180187, 0.15872159827164922, 0.26422725523789636, 0.1828020674710087, 0.24067157391806604, 0.2673962524308755, 0.20142930246920587, 0.3323876300103953, 0.2344530382434915, 0.2024711873655145, 0.22897773421039114, 0.2675796074521676, 0.23710263657389197, 0.1970845202818201, 0.2870046134459159, 0.2079255230747593, 0.22845198999674887, 0.24816600249150988, 0.17731337551417614, 0.3651398687853632, 0.1857964230043202, 0.1997187244441324, 0.21112945617774315, 0.19477383201914478, 0.1803145884231142, 0.18718659398125448, 0.1871396856438189, 0.18877193430191874, 0.17963259317154712, 0.18900936008770963, 0.11505323387048261, 0.11486380810252816, 0.1543126386073087, 0.10763408646432104, 0.12276947413406547, 0.10688009386605335, 0.8624794280223606, 0.21121510418407285, 0.21154563385274971, 0.15493057710087055, 0.21316613644087978, 0.21148191196604615, 0.16783580857296565, 0.16661478021846166, 0.16898223546180657, 0.19315745418086017, 0.17254214437298432, 0.18690800521998874, 0.19113728667531338, 0.1920777360477265, 0.1774857863847603, 0.20369865006482113, 0.169083332967221, 0.17159463574942513, 0.12954097262743347, 0.08390463087163391, 0.10123581259834735, 0.08631933819148907, 0.08750993447268973, 0.10529670771777988, 0.13527723947383674, 0.06688449817556508, 0.09855282796397569]}, "mutation_prompt": null}
{"id": "21d23b69-355e-4298-9299-913ec6557531", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "3abe446c-6754-4b3d-a32d-cd14be5d21cc", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "21251b46-95aa-4c3c-a695-77a349072f2e", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.2 * np.random.rand())  # Dynamic crossover rate\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % max(int(self.budget * 0.05), 1) == 0:  # Adaptive restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Modified the restart strategy to a more adaptive frequency based on performance and added a dynamic crossover rate for enhanced convergence.", "configspace": "", "generation": 62, "fitness": 0.28652743716693946, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.8064387024669684, 0.753943672207586, 0.7522751067747516, 0.7902795881195519, 0.7664483515390044, 0.7613460159769994, 0.8220102840934016, 0.7503721382044505, 0.736906129709054, 0.07123396434969342, 9.999999999998899e-05, 0.1532852723722844, 0.4736858661940684, 0.5627993223397535, 0.08694447306821784, 0.07741714751223827, 0.42505356297452257, 0.44622772309855696, 0.11850893530086382, 0.09715942920332232, 0.09391792668073828, 0.131577777580686, 0.1379871919028719, 0.10654375649601988, 0.1425647637554046, 0.09436174228407379, 0.13341193975907495, 0.09293378595664414, 0.11114956520247943, 0.08784023501728311, 0.06742546940561855, 0.09969314787909533, 0.10773001746310984, 0.1344081846437366, 0.10855883242716713, 0.1062411205074737, 0.9315853280282921, 0.9279322161250213, 0.9224552670289298, 0.940994938357825, 0.9240348179784241, 0.923574879019451, 0.9296557179656706, 0.9360152677496009, 0.9377402672866754, 0.5052533714056311, 0.54189619755211, 0.515049176107359, 0.4922354175165601, 0.4427205138770588, 0.5317003152267996, 0.35307108369207196, 0.6046196342256425, 0.5567604330300985, 0.3811465122904616, 0.2035963310042309, 0.18486274082186993, 0.21507767498152996, 0.20892882898219456, 0.2733225148387036, 0.7938455325270452, 0.3414250550478948, 0.22798454640135357, 0.3806835007654592, 0.11797743440644393, 0.2025650602833975, 0.33828623760375043, 0.1267761506891728, 0.20941457975163702, 0.2597396821836321, 0.2615066698943619, 0.16650018876378203, 0.20690607762508317, 0.11776478429027515, 0.12312240689433929, 0.19824646614977726, 0.22703950574423593, 0.3137684068729638, 0.12597890769110798, 0.24947116056889895, 0.20724158575492313, 9.999999999998899e-05, 0.0077400135435660156, 0.05446565841799689, 0.07642641753491386, 0.07595744608689525, 0.017248284676173342, 0.05723616822055333, 9.999999999998899e-05, 9.999999999998899e-05, 0.12476962557970706, 0.11455128843524687, 0.14665464564762276, 0.2673618955109519, 0.14231890458906438, 0.18600655519544784, 0.33022158232089394, 0.13018309755148638, 0.11255998357528607, 0.11466772274813652, 0.120370890024035, 0.06657120034258512, 0.0817923768628882, 0.12282218979338666, 0.20313549458628355, 0.080995262576525, 0.12286614393691508, 0.1068171817692295, 0.1645769523409374, 0.08631637261807212, 0.16606068456247502, 0.117210892248932, 0.15656083384981268, 0.2258368839097068, 0.09197082334260909, 0.10638177603147503, 0.07549043466513616, 0.5728229013939745, 0.5881599235510679, 0.5535652992693568, 0.5674805136764096, 0.5713905567337683, 0.5737058589458943, 0.6040664804672189, 0.596092813693921, 0.5894281658872351, 0.10591551555531475, 0.0918954369405437, 0.10975310530017579, 0.11253284114471096, 0.0698168328938189, 0.10937955363962848, 0.15469413991374892, 0.12869778956714395, 0.10648684062311697, 0.1439552088484355, 0.14184203606588852, 0.16075168167214537, 0.2549416403217021, 0.12571361516542856, 0.17573996881421095, 0.15552722584717726, 0.18991028873876226, 0.16254764769196395, 0.4366241765738379, 0.39820890810942744, 0.37448975806663953, 0.26424657191610945, 0.44760665548787715, 0.4439783725133234, 0.38912366464019266, 0.4600739061929138, 0.2667832470601822, 0.23753331274048683, 0.16358756300172395, 0.24924773075425855, 0.2887760345350965, 0.26995030504521644, 0.2377670132393881, 0.23645656784156932, 0.21212561097906257, 0.20043774624147714, 0.23920869318030868, 0.20108179420521988, 0.17446314321468037, 0.2747119299804278, 0.1923968482436057, 0.26041987652027676, 0.19074517906218325, 0.16579800528604172, 0.22503007159733757, 0.17837300203561313, 0.20595429350382588, 0.18507446743913392, 0.21589217120445514, 0.2109007054070342, 0.21122286368326715, 0.18715378190368348, 0.20288204463771575, 0.2201740127280144, 0.1864725872561308, 0.16571003577959087, 0.18439238964592086, 0.8875205560426004, 0.7694264258440067, 0.1497471742409785, 0.16052619203096452, 0.11622436458877905, 0.15799007869724446, 0.7885018191964182, 0.6799045395895096, 0.5578685827299302, 0.6966552453327653, 0.21072921581723802, 0.7407477429382479, 0.16629190398436644, 0.8416420352021098, 0.16231347601370183, 0.1887432336304694, 0.20758138799617898, 0.19482315659580351, 0.1724902005683432, 0.18234216436480477, 0.20586638005664848, 0.18995286417882562, 0.16416415020772257, 0.17890464683718055, 0.06759603355449506, 0.08325905062258321, 0.07242964557998133, 0.09177369562503301, 0.08856525718771568, 0.06908436153553443, 0.06738467557953842, 0.09936119533944254, 0.06392584197029738]}, "mutation_prompt": null}
{"id": "584bfab4-dab9-4710-9e11-370089cd822b", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_dynamic = CR * (0.5 + 0.5 * np.random.rand())  # Dynamic adaptation\n                cross_points = np.random.rand(self.dim) < CR_dynamic\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                adaptive_learning_rate = 0.5 * (1.0 - (evals / self.budget))  # Adaptive learning rate\n                guided_mutation = adaptive_learning_rate * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced an adaptive learning rate for guided mutation and dynamic adaptation of crossover rate to enhance convergence.", "configspace": "", "generation": 63, "fitness": 0.13416350055699505, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.36124630510297584, 0.3195069843100832, 0.28023872910094705, 0.30007853629986725, 0.30434017765511057, 0.29746621789652095, 0.35652695670751033, 0.31778124654802553, 0.31139442331164724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07242050331282102, 0.09292276210633499, 0.059607380396370035, 0.0824471277014438, 0.04733821822890827, 0.07431879785591478, 0.062399099696278104, 0.07382164800102853, 0.07652445370525673, 0.0704796997077749, 0.06265818451084615, 0.05686754612567346, 0.07814318112557428, 0.04523113139820201, 0.06529344690904038, 0.06528357059874457, 0.06793394922439022, 0.05549385282367325, 0.1093534189587988, 0.08082781082552737, 0.07955757606605662, 0.10596656053833686, 0.10593834086145149, 0.0933234952351144, 0.0889193103587066, 0.08884266465449542, 0.10174239523755801, 0.15723621320379466, 0.14571522668280035, 0.16795113239800807, 0.12268506472577756, 0.17100761045281565, 0.15791152661310748, 0.15901960770397605, 0.16077133608215133, 0.17759824472923558, 0.20814798028739623, 0.20901120410560803, 0.1950439045977873, 0.18580253003043035, 0.23253562777227232, 0.16893888595009598, 0.17920310684296292, 0.17147119659303467, 0.17488296342539633, 0.04956000125797888, 0.07224726392391057, 0.07727842212748015, 0.04861274559355666, 0.0721670516426055, 0.08412870600859146, 0.0872235312145675, 0.15731262648635924, 0.14444877864474526, 0.13842966248514132, 0.11219442131409829, 0.10201872066071505, 0.12122654996629556, 0.10421300321378624, 0.11557252185008327, 0.11752831124506369, 0.11703489439745174, 0.10791921088651724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037768698269452505, 9.999999999998899e-05, 0.019708810462746418, 0.08034820201813109, 0.1228350651370389, 0.0997753896813034, 0.04550205247501016, 0.08297693086992275, 0.07619735621839407, 0.07792527700823193, 0.10104437135158983, 0.10970213173461252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04201110413191367, 0.024728298838150642, 0.04204115323417168, 0.033633692553639016, 0.025923172734555355, 0.03472406229547509, 0.05553285241948902, 0.011600678272811416, 0.029212542554213572, 0.2842578252905733, 0.28608725503961874, 0.30271033889372345, 0.2747706614624702, 0.2802100117672315, 0.29798010589188784, 0.2960771181489702, 0.3062394565656349, 0.32025328155621, 0.0739635427267269, 0.0759799159130754, 0.06264511922347171, 0.059736841981999356, 0.06623057289749301, 0.10861580442301622, 0.07443202937295723, 0.06386475978401229, 0.07177139066885263, 0.15585540974634637, 0.15260913935927178, 0.1328143283454465, 0.15881783025000384, 0.13316932075855437, 0.14675589092571195, 0.135591307296686, 0.13669257058875262, 0.14503624885074184, 0.21372716571407335, 0.21469922515354123, 0.21274593043470746, 0.23225153214146765, 0.26032129300809004, 0.22816852901256146, 0.2601062094222961, 0.1980533597834394, 0.18664279750163892, 0.12935902087333473, 0.13062197480490267, 0.14891576838605347, 0.1828452542438752, 0.14225471174722804, 0.1730417554941992, 0.16476669520655363, 0.1382726444507143, 0.14012447001856654, 0.2181580611189433, 0.2587127743281682, 0.2295814978725349, 0.23008382647638104, 0.23016048331830685, 0.22210035890512791, 0.21960068583631298, 0.23756033569074508, 0.2375382529326997, 0.1614006461587313, 0.1807400953401831, 0.16576723986656938, 0.168380624111237, 0.1689881307059109, 0.1728716953980335, 0.17811387925941458, 0.19187240799093874, 0.16582234351727054, 0.1695600919121012, 0.17423364149735265, 0.17386454317985844, 0.3008542850670547, 0.16714813937551865, 0.17045640889337843, 0.3018179970189203, 0.11270810642205287, 0.11325810989322449, 0.27710987504868156, 0.4090212274981939, 0.2370176868385686, 0.16524725147563823, 0.36764112422510953, 0.2911882268771896, 0.1625192304532802, 0.16660280482247347, 0.15908514123231576, 0.18026723095799335, 0.18842562403828844, 0.19500909429213675, 0.19156621325656487, 0.19303837985476024, 0.18742013677825775, 0.18211349791880416, 0.1825473333065425, 0.19589670346782673, 0.10070906510807143, 0.08049129875499461, 0.08133451401916247, 0.06509457257286722, 0.07733574414188549, 0.10963568666253465, 0.0789997581643529, 0.08700926617974669, 0.07756285312008349]}, "mutation_prompt": null}
{"id": "8db22e2e-79c6-4f57-8079-2301739775a0", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "86219df5-49a9-4b0a-808d-fdecbde347ac", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "5915556f-41d6-4d98-900e-14cf94989dda", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "a8cfe436-75f9-4148-bd03-1b6ec463b728", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "e3a65ed7-e176-47c5-9141-6a6a0b17feba", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "706b2080-5945-4642-8d30-f19213fcdedb", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.2 * np.random.rand())  # Adjusted CR range\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.7 * trial + 0.3 * self.memory  # Adjusted weights\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Adaptive exploration with dynamic crossover and mutation strategies for enhanced optimization.", "configspace": "", "generation": 69, "fitness": 0.25459667714078343, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.6142162188536162, 0.6064725592342459, 0.6261637977259736, 0.6053193391837595, 0.6071042040100153, 0.6462115084087594, 0.6262956784996058, 0.6081021970729057, 0.5972480477049215, 0.36330907749505437, 0.026891541822053333, 0.049013476158051184, 0.31600565462202546, 0.4849657178826924, 0.3268950007886048, 0.40602977692631603, 0.3525125733556752, 9.999999999998899e-05, 0.13504344250895806, 0.12546548065975416, 0.11470124237041435, 0.1271289281378244, 0.09224890178724177, 0.36282727128175707, 0.11246596679810661, 0.09255305315161555, 0.09623980656688202, 0.07481197879952983, 0.1090067204504589, 0.09269521324071905, 0.06417378598177037, 0.12974815687728258, 0.10797010436255183, 0.09248600748730518, 0.10443359424821941, 0.1103579781825299, 0.9287553019705362, 0.9221077364823362, 0.9428072994529028, 0.9454914852804821, 0.9384740968530794, 0.9044905006930916, 0.9536949293473496, 0.9286985920135852, 0.9519055045278116, 0.41562126849387915, 0.23453580169311206, 0.18349774912546335, 0.24456467823497063, 0.36071017351021606, 0.21141095190719572, 0.3849205148555931, 0.1871693190001813, 0.15372079202986766, 0.32470859015235554, 0.23674648838749623, 0.20773516085616917, 0.26073506199213603, 0.20627881395633463, 0.24749956535901785, 0.2236244548770685, 0.21143021523718886, 0.22337549331021256, 0.10828832571943381, 0.20223903348957672, 0.11894013049919794, 0.1342447411797888, 0.22059869764605022, 0.15857869437773375, 0.1222197096874923, 0.1963276913662182, 0.17494428239285242, 0.12261576809180985, 0.3070156664834558, 0.25327881234694427, 0.10638209594595194, 0.159295544634243, 0.11183346750122813, 0.11906860562673827, 0.12743115135232141, 0.10977328736339187, 9.999999999998899e-05, 0.013763878472924485, 0.00010669720454148379, 9.999999999998899e-05, 9.999999999998899e-05, 0.034103135142491414, 0.022594985094911868, 0.08220602942284372, 0.010864565806317894, 0.045701993936716145, 0.10157769546739215, 0.19472352089654754, 0.006364681276600281, 0.049429117767962216, 0.09264845701815971, 0.09499548126189361, 0.19632588024945397, 0.1841062026774588, 0.18791008287653277, 0.12279381751160712, 9.999999999998899e-05, 0.05948553717606775, 9.999999999998899e-05, 0.07073434999088235, 0.06152784968983038, 0.061139190364633555, 0.13166193179889452, 0.09961491097682051, 0.12947581337242586, 0.14169187732398547, 0.03653349681559648, 0.20970289018139165, 0.08432343873943993, 0.11396867842722547, 0.07887028955452147, 0.08259605016683091, 0.4563797471710228, 0.4697435108784299, 0.48103029846685497, 0.4526178171292339, 0.5071014037803309, 0.5181026167372733, 0.4861298549834774, 0.45429504912190133, 0.48078165519668614, 0.0788003427009677, 0.08194226483615874, 0.10538655285516652, 0.06251937446064493, 0.10837844750546977, 0.1402162318419169, 0.12935081550000682, 0.05485995954493916, 0.0950996859188632, 0.13875958382074494, 0.1613110992443384, 0.14748389128577544, 0.16439876655441998, 0.12816865828873758, 0.12392729909356348, 0.15792176711290873, 0.12673682688106547, 0.16458952921997916, 0.36928922288114163, 0.34218537521456005, 0.29421043886483933, 0.31840202044981647, 0.31731849258796907, 0.36730772239052545, 0.31048792664022196, 0.3640116803598946, 0.356134449113365, 0.1723506181762099, 0.18401309752150807, 0.22611205106441767, 0.2722119214569797, 0.24802946624726707, 0.21950365025417218, 0.3303423967122381, 0.2220559415721708, 0.2700093360162902, 0.19378363963042144, 0.1782851634398105, 0.1770339711780543, 0.18380771081377623, 0.17597109223548546, 0.20132881463176022, 0.18771074202981164, 0.1974674538802813, 0.20281513436978638, 0.20001441881434112, 0.18983734172059674, 0.1981427115387645, 0.21217537091215688, 0.1975474516143111, 0.23310166308017966, 0.2001348040678086, 0.1794931552981165, 0.2296948768949022, 0.17847630348597032, 0.1729592812703702, 0.1752771239320966, 0.7429448646340697, 0.7001830436249155, 0.71111393562191, 0.8191896269642204, 0.35870929729100065, 0.7414455676018954, 0.6192702545381139, 0.5984877104519905, 0.1580332581537054, 0.16807805471955928, 0.2071485262245918, 0.7005032922449522, 0.6255100307875208, 0.6823108687581111, 0.5336148387534301, 0.17995639139197828, 0.18767140377882374, 0.18749446166257, 0.20506016541939998, 0.16764258997700232, 0.165340719579399, 0.18657017525582198, 0.18111738587578796, 0.1630943417401135, 0.0868101790107999, 0.07686549321057357, 0.06603593940601826, 0.0726393424954378, 0.067162973809898, 0.10129362288650212, 0.07133509028342522, 0.05613347758645759, 0.08200548157180132]}, "mutation_prompt": null}
{"id": "100e6ce9-9e2e-441b-9f73-f5650a0119c6", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "766c524c-4630-40a1-a0cb-f6d865fa0ab9", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.5, 1.0)  # Adjusted for better diversity\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = F + (0.3 * np.random.rand() - 0.15)  # Dynamic step size adaptation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.2) == 0:  # Improved restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced a dynamic step size adaptation mechanism and enhanced restart strategy to improve convergence.", "configspace": "", "generation": 71, "fitness": 0.2981024206209462, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7921791120459685, 0.7680464210157959, 0.7608923213955726, 0.8171339480035879, 0.7357555785155121, 0.7793591215753927, 0.7844834734020115, 0.7022665337074904, 0.7896356330863863, 0.4816169318957706, 0.49524814502629844, 0.25910850542573727, 0.5393950073285665, 0.4969622085479144, 9.999999999998899e-05, 0.47444363598981554, 0.44532845853349656, 0.020457567409007282, 0.10141427428174088, 0.14371483361544146, 0.1320880568989563, 0.11875875083881604, 0.1282870821704133, 0.10596965867171515, 0.1559691180660231, 0.11202057415043054, 0.08419734771744825, 0.06398984865109181, 0.09120184289825006, 0.1328883484718426, 0.1352476349185725, 0.11726524217349144, 0.1131604225948789, 0.08767982929528573, 0.09425859544563864, 0.10583096539682613, 0.95157491100928, 0.9346447613746938, 0.9400730240245937, 0.9495885043198465, 0.9349886475018189, 0.9229838632348872, 0.9080046083621661, 0.9504890327992449, 0.9347484789190605, 0.478067255203386, 0.4318421532170479, 0.40717058774572823, 0.4523004841796062, 0.48021184483912316, 0.27806072431804785, 0.5549131913948384, 0.5105149124624666, 0.42143174429962205, 0.20745084661834656, 0.29440941916270713, 0.20856655866966478, 0.21078637378590315, 0.3465430114261868, 0.7850321343963829, 0.7915138626001013, 0.2260510958547165, 0.226966403960018, 0.1375397975663194, 0.044970383204875564, 0.2538364181974674, 0.18713692321223252, 0.11848200056280633, 0.37460704570984804, 0.2459794607966227, 0.16580766528206736, 0.1974559318140927, 0.11815667028423171, 0.07372227350307348, 0.11641989275581965, 0.4136664864975462, 0.15636501043884632, 0.2849382482866628, 0.2713811033406591, 0.35396003333880044, 0.12188441208133483, 0.03651765287377129, 0.046782023352545776, 0.09447596183762708, 0.07426981945204547, 0.018574569038151134, 9.999999999998899e-05, 0.06562935021380623, 0.025045270601825487, 0.020983112607390275, 0.10971608578684644, 0.38526391135667437, 0.20371074799887534, 0.07829283862658554, 0.15030859866917312, 0.058139851138052645, 0.12485008654566687, 0.06270331151863995, 0.19956460487376093, 0.008282798969203808, 9.999999999998899e-05, 0.14021807357965388, 0.10893746827556516, 0.10907436945791271, 0.19367615925209736, 0.13845646559539293, 0.13584082777273743, 0.06987474057446885, 0.13418499829279407, 0.06032641508346992, 0.09389359715348145, 0.10427058503323061, 0.21462082214997358, 0.13598157014533663, 0.14017357217623216, 0.16365013641648363, 0.0943908408635512, 0.5411950562335031, 0.5447217444034402, 0.5262369955942083, 0.5352131435670029, 0.5981398256676382, 0.5683304000466567, 0.5468000885565899, 0.5526998134490446, 0.5731412765670343, 0.1120707278938331, 0.11633725377570703, 0.09757720301992157, 0.08184036948813522, 0.09955667398065549, 0.08510478834567203, 0.08092024401866893, 0.10075202495136715, 0.08450756970722084, 0.1400863377329371, 0.12081220266876047, 0.1834733306945775, 0.1638584371643086, 0.2033160456915547, 0.18851557938937247, 0.1757025736734038, 0.17907846169010988, 0.27394803666484935, 0.31821948845473813, 0.4362316864991831, 0.3808438892271686, 0.39008520377718936, 0.2990752041564291, 0.3649960955037961, 0.3883314787412421, 0.4868988625185037, 0.3120850030196264, 0.14369796611550534, 0.2808293984171645, 0.25836204116869466, 0.23154602769996568, 0.15560362764118474, 0.15212905075801586, 0.19392196585873378, 0.3096994733727336, 0.23086453438435128, 0.21069870733998997, 0.1817672480483401, 0.18298546131481885, 0.18821340694381294, 0.2402512926113498, 0.25389652550978103, 0.18297042432677324, 0.20829319385946288, 0.22589289663840184, 0.17221232786748064, 0.1949966847677812, 0.21926412176282783, 0.2148331045843277, 0.19496044405653745, 0.20379777869554283, 0.17897431982353906, 0.19145313404201947, 0.18281085786287277, 0.18707162999648308, 0.18781801197933978, 0.1831575316648072, 0.8587257131680154, 0.7768542736607856, 0.19837828651735967, 0.886197308810031, 0.11598473165802281, 0.7961026019256249, 0.8487952999594794, 0.7225393242700198, 0.8358765765084932, 0.7954988263908599, 0.21084014278194918, 0.8222106777486102, 0.2957479660477629, 0.7855323591567391, 0.7156765204404538, 0.1833635406988704, 0.1832808638967134, 0.1801666975968137, 0.17555953982876105, 0.1821982290400629, 0.19188129637365425, 0.17096003652658276, 0.1720725756121465, 0.17716987186413358, 0.09069367326832811, 0.07258933205429474, 0.06714514156709173, 0.07066920587389336, 0.13361993994405819, 0.0731933206831451, 0.0918937736435389, 0.08682523865466696, 0.08572920330973088]}, "mutation_prompt": null}
{"id": "351d01e8-9993-4851-bbf2-2ef07d8119f7", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "976a4468-d348-4abb-917b-b70d4c3508a5", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.7 + 0.3 * (evals / self.budget))\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.15) == 0:  # Dynamic restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved balance between exploration and exploitation by introducing dynamic crossover rates and an adaptive population reset mechanism.", "configspace": "", "generation": 73, "fitness": 0.2946025772209741, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7856888790662654, 0.7447460583989121, 0.7572316515308883, 0.753727568309072, 0.7398418066306557, 0.7214180163191631, 0.7365789167408512, 0.7611928902785142, 0.7600946144803423, 0.04060985373141124, 0.5307605896113352, 0.054206576073710155, 0.4978562457910549, 0.13184137479800462, 0.11689325750367585, 0.5485604515245424, 0.5187615853268319, 0.19061031640958037, 0.14401660695812113, 0.13623201040717414, 0.10297654113888965, 0.12080835288470848, 0.15839798195929689, 0.11636089198781974, 0.11069234538116668, 0.13314260912615028, 0.11944628389934242, 0.0909447349577347, 0.1660137828091669, 0.1216398428861094, 0.12607864621882614, 0.1077366807560105, 0.14128962149723756, 0.12508471325993853, 0.13836060389891225, 0.13326239330088296, 0.9061652648442842, 0.8888857428750895, 0.87266101807491, 0.8821116720073108, 0.9028320429994336, 0.9032464213514444, 0.8778571289131826, 0.8964346515908812, 0.9071794017021277, 0.437605818935192, 0.4690119427682087, 0.31669888472487795, 0.5170889877543613, 0.4681588899554169, 0.43308827168301023, 0.43077906127777055, 0.4839127050222414, 0.4330884691117818, 0.7905761785910209, 0.3589782711105505, 0.6723593932802523, 0.36019846174705605, 0.27010324105128436, 0.26778640780664587, 0.17353350705168868, 0.3756606015023385, 0.7894764056816522, 0.32121589677678997, 0.42573540008180055, 0.31638716021889746, 0.27616205974276875, 0.3425926439691793, 0.2791109894784538, 0.1765116302397164, 0.19146125325731833, 0.25395250999388785, 0.36511706348769035, 0.15810148400820712, 0.1861343758027746, 0.27171974343300564, 0.14485697417498045, 0.12204104017380635, 0.3543158330184636, 0.10781614549381813, 0.3025497267002656, 0.0381135430589713, 0.021014130435701328, 9.999999999998899e-05, 0.035427228304491076, 0.09197368374937975, 0.01974996102503579, 0.05343866499925021, 0.0637495912792101, 0.024983275692642914, 0.11413571553271196, 0.19111015648151186, 0.12087542476278945, 0.06672491182666929, 0.04679094025193831, 0.09118072896989782, 0.12676887077093812, 0.09671295538304658, 0.1947843474744516, 0.07868936596983134, 0.15445525839606455, 0.07807815243935001, 0.12187311603624207, 0.1368542827572321, 0.10335037173103356, 0.09871791201086466, 0.14703233941851412, 0.10979970154054985, 0.11620980979026463, 0.07169133800648941, 0.09490017573898146, 0.24557835184423038, 0.14725229967969444, 0.10722614381128037, 0.22990016549652725, 0.14624489735944535, 0.0823398747464229, 0.5287103303590214, 0.5710204240750656, 0.5889351309746971, 0.5265717855646022, 0.5295215846976835, 0.5642708224864046, 0.5669015166588847, 0.554626664842125, 0.5447124648864696, 0.08648424437574143, 0.13870844195764054, 0.060477265431369776, 0.08282747813426283, 0.131961661603878, 0.0873673611146567, 0.08938029769915612, 0.14642149453982622, 0.1453766062654115, 0.3650455496153243, 0.24731629381238518, 0.215259384758415, 0.19928079831809442, 0.18817205637687917, 0.17311565389264671, 0.13841930572950734, 0.24559873394546317, 0.14179985876904588, 0.2695267952874779, 0.3796453327659174, 0.29069668681343064, 0.48365792386133755, 0.30569082624979504, 0.3375147098550352, 0.4655668894052758, 0.25988514354765846, 0.4748161419816215, 0.1840828497245054, 0.21059254887840562, 0.1848585421609431, 0.2576165776445264, 0.23126917599942176, 0.25801287530864125, 0.23955345537899098, 0.22767730170233969, 0.18009987844562325, 0.1930545916542381, 0.18203664654862128, 0.23054233703677873, 0.23642687368976278, 0.19358380537962872, 0.20467483327802627, 0.23196784586643748, 0.1897645810397406, 0.2477440606766248, 0.18035466474156725, 0.19095002371466652, 0.20697589838830577, 0.18220126781638812, 0.19342525446554804, 0.19395701627412998, 0.1921917366976219, 0.18973193691453638, 0.2041431160104228, 0.18670301680906753, 0.17667774994966656, 0.18675722135022943, 0.8153612663517951, 0.7983405607785096, 0.14628766723636732, 0.7471496477310418, 0.1748573767809556, 0.8667172076223851, 0.7692434202198789, 0.6572878422160773, 0.7380287554879024, 0.14671708384144366, 0.20830860348614533, 0.20616898771797898, 0.16623047049030304, 0.7960061849163573, 0.6985380504174472, 0.19730280493836838, 0.18649355577683369, 0.18266104911320358, 0.18628066350085237, 0.17114245481866563, 0.1711533223973718, 0.17195102409554275, 0.21877960746000247, 0.1687989188698501, 0.07842983930336123, 0.0829786944036367, 0.07654952463683062, 0.0890622957510041, 0.07778136492972243, 0.08541432325404674, 0.07298238260806977, 0.07269714496472657, 0.0833494833263283]}, "mutation_prompt": null}
{"id": "4d2a6ec1-24ea-4c48-a654-51f410edb78a", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n        self.elite_fraction = 0.1  # New parameter for elitism\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            elite_count = max(1, int(self.elite_fraction * adaptive_population_size))  # Elitism\n            self.population[:elite_count] = self.population[np.argsort([func(ind) for ind in self.population])][:elite_count]\n\n            for i in range(elite_count, adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.2 * np.random.rand())  # Increased crossover randomness\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved adaptive differential evolution with elitist selection and dynamic crossover.", "configspace": "", "generation": 74, "fitness": 0.22869588696296964, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.6830126978751088, 0.6194940699217317, 0.6871948301451323, 0.6585798127302089, 0.545212290015685, 0.6687135853704151, 0.6640142662573795, 0.5705242176570953, 0.542790469547221, 0.14171703580742556, 0.13102655804949315, 9.999999999998899e-05, 0.17137957830082073, 0.05974250515274504, 0.10547064659927563, 0.13352672607463334, 0.09428345429410623, 0.20716935935613479, 0.10219451059645412, 0.13113941338817514, 0.0846672000932065, 0.1173453132422666, 0.11192970016651249, 0.1076637118213799, 0.09026878390655857, 0.10426830804859999, 0.10678707359918849, 0.07968351538856056, 0.05973241161452425, 0.10016580139649633, 0.05875096120058021, 0.0978220403407678, 0.09880929763175095, 0.0972027607521766, 0.08260346094588567, 0.06931923392405448, 0.9127600604972627, 0.9117199093569082, 0.9110075449499172, 0.8946691719693337, 0.9254918628370334, 0.8882470379328493, 0.9031623485405342, 0.9218263990777409, 0.930735908247071, 0.14124827498077341, 0.2967369727149842, 0.2674083735133924, 0.38041357565382494, 0.3046151274735034, 0.3182456089535127, 0.17498040764577383, 0.27448271358802934, 0.26043288319804103, 0.82981844989566, 0.6213101788626803, 0.20164736952136642, 0.2095589884548883, 0.2120652424410413, 0.18544101819048764, 0.28336618284912773, 0.16706600428211882, 0.21602542603805963, 0.06579785776166713, 0.11379063333790762, 0.13790991319056534, 0.09729051614727524, 0.12578433625066532, 0.10786773997050314, 0.11408739773084764, 0.20352256352266784, 0.14059391976577973, 0.09593399130607483, 0.10416124216420808, 0.10223984915985496, 0.14663310554329922, 0.10055045482308411, 0.12470992795483815, 0.23003716577778788, 0.13876799157161313, 0.06809277702396721, 0.05134925892379283, 9.999999999998899e-05, 0.007345527250995465, 0.001066007734037755, 0.01699688735533944, 9.999999999998899e-05, 0.0075170117101536205, 0.02130391339291815, 9.999999999998899e-05, 0.14702598390826793, 0.02040290850736126, 0.21734793113873097, 0.09456438655313848, 9.999999999998899e-05, 0.04402387140716424, 0.06110970842956032, 0.0486729533797412, 0.04755563880340996, 0.020373289193884925, 0.048661848165550636, 0.043591835199424, 0.040011488105772486, 0.0235820682851543, 0.049181523295086294, 9.999999999998899e-05, 0.036450134368817944, 9.999999999998899e-05, 0.07583251264084956, 0.08935655363080386, 0.1252614586266294, 0.0620351723760183, 0.1198708339907475, 0.12020334955115108, 0.14978007461684006, 0.09927910821823682, 0.05725215909002768, 0.48341492256212437, 0.4754287788166821, 0.5084325667758831, 0.5170562631928328, 0.4431275943071823, 0.46383068385286275, 0.49921866297306783, 0.4966178677062124, 0.4611245734493068, 0.0720444221585207, 0.08072734962561712, 0.045136623556953026, 0.09844573470036155, 0.062433478354501526, 0.06410965311124095, 0.0632298590064202, 0.10436138901056435, 0.06589586355454191, 0.12075784050646854, 0.1401124378916616, 0.16432129667619122, 0.11853484587593888, 0.11734783907599611, 0.16113762746434424, 0.142016382136808, 0.1524863106619092, 0.12588857409467746, 0.2888285558812308, 0.3066009609104754, 0.3053360360287287, 0.33799461932821173, 0.3391606413806849, 0.27824115348024414, 0.31326846312439893, 0.2735541112150459, 0.23989814883140326, 0.16131305870106427, 0.1795244073076605, 0.18024656182051635, 0.20715247183101815, 0.16295911136597896, 0.20048762347834492, 0.15806834184247875, 0.1844673862110069, 0.1433652031591509, 0.18170105034588102, 0.1822031227351909, 0.16947560033778697, 0.1865928856332405, 0.1702875124975295, 0.1879777374461632, 0.1720109341697844, 0.20621749045572046, 0.18283235949784116, 0.18979062251953893, 0.1887027984613936, 0.20834924843903202, 0.18695829945880815, 0.1797868165049331, 0.18426474078737243, 0.16853996025592533, 0.1682623823888798, 0.17373116840971614, 0.16352052643014903, 0.17872595966350635, 0.17015194041526915, 0.8149034193602355, 0.626730505866275, 0.7140826239190202, 0.1695020244205454, 0.820316845605521, 0.6176794131378189, 0.12462257863976267, 0.5746070491647197, 0.5399828289453624, 0.2055426779956554, 0.14187936404425672, 0.2035144250433898, 0.21179001388067664, 0.4134371996443812, 0.5280172693061373, 0.1866183273283749, 0.16026640280607918, 0.18338589150123086, 0.18296540779623816, 0.1831725672681359, 0.17090658611475007, 0.167481927555594, 0.16238874001717063, 0.21327555500863815, 0.10386984256706344, 0.06006729165937619, 0.08492834912051672, 0.08233212721355943, 0.0772178567942674, 0.056977344113946726, 0.07371977538120644, 0.07285015870596612, 0.06732431649551085]}, "mutation_prompt": null}
{"id": "99c262c9-dfb8-4c8e-8673-2a9a308333e0", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "6e16b532-db08-4c85-99da-36cbcd3282cb", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                CR_adaptive *= max(0.5, 1 - evals / self.budget)  # Adaptive crossover\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.995  # Slower temperature decay for stability\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Introduced adaptive crossover strategy and dynamic temperature adjustment for enhanced convergence and solution quality.", "configspace": "", "generation": 76, "fitness": 0.2982723611909686, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7865750991229652, 0.7871775296304582, 0.7968782046663674, 0.8129538534713908, 0.7386648798594654, 0.8123787184928593, 0.8282394713376844, 0.7580026180172956, 0.8010675932832398, 0.5631004633623014, 0.4586931163766068, 0.5092259008256372, 0.49136971224355186, 0.5641958793026671, 0.08486651700068137, 0.3759921241053644, 0.20885070480008128, 0.5459773011168838, 0.15666604194001588, 0.12208102059525572, 0.15139026936521027, 0.13030153796434318, 0.12394574078352849, 0.5167591227661817, 0.1566677358534897, 0.11957263989455169, 0.1410013368759282, 0.1354732806482083, 0.13186485100505907, 0.13310606937569736, 0.13766583501722618, 0.12898289560031295, 0.1374187459127737, 0.13179917028299792, 0.3929489914016966, 0.1100480258169102, 0.9388171844276337, 0.9325450606541599, 0.9320890165961055, 0.9478510252708322, 0.9304086157501623, 0.9220054491909155, 0.9043834707157311, 0.924721436929784, 0.9277552432442177, 0.44363609699221396, 0.47195611100217527, 0.434785786145078, 0.5120398385393596, 0.48725116936059265, 0.5055593028346004, 0.47572435291158877, 0.45788441679215264, 0.5062382826259082, 0.2242109911131317, 0.21109597819075465, 0.3530714699900773, 0.2055422002918611, 0.2698548910208316, 0.20202975557599012, 0.3409506602408324, 0.7611714724840744, 0.22857398655436323, 0.14740931395440582, 0.16916024961461462, 0.17586584826649287, 0.15480705101414916, 0.14551978611590854, 0.16453355793023405, 0.21728751255470502, 0.18669567582959945, 0.15166753101278974, 0.1865564478404984, 0.3165927591213502, 0.19455129182318898, 0.15754018610653642, 0.12735051217469517, 0.20345149311525268, 0.13294694134100504, 0.20431431549539059, 0.17366844176282925, 0.06276248153078412, 0.003655432405687664, 0.070990793941065, 0.009399346442634071, 0.035163636864139924, 0.0014036335006732958, 0.100040691986921, 9.999999999998899e-05, 0.014093729269845201, 0.1188882698560294, 0.1075485538350811, 0.10424650627037624, 0.07647000854012453, 0.07390069075234351, 0.160544049736833, 0.07609610497831931, 0.11568974809899135, 0.11448582120467476, 0.10749139434848654, 0.08186641434464981, 0.05853456933296819, 0.09790868075887083, 0.16356269436471615, 0.1794477174941752, 0.13227090039173584, 0.08947344808640789, 0.062304476142937326, 0.15693063668919527, 0.15546041480762374, 0.24526153651328608, 0.06859318325193109, 0.23181134710036577, 0.14703055727656467, 0.11937667221251158, 0.0982824180345786, 0.09168024013283849, 0.5331187841417617, 0.5227117627879068, 0.5120671116394424, 0.5460485828669585, 0.551953411293791, 0.49385907581347477, 0.5551014413879578, 0.5338028224425986, 0.5313105144893806, 0.12065848731321971, 0.09044102638605978, 0.08035713027168878, 0.08468205137265417, 0.06050003525705283, 0.08416967300045985, 0.1084216254835616, 0.07656645611151924, 0.10427186674833444, 0.16575949099902354, 0.1829421011416522, 0.1487526854118334, 0.21360403915966109, 0.13666233498261904, 0.2035291301537444, 0.17995358815383733, 0.2260629820910942, 0.17179899449686686, 0.3156227218054658, 0.34069824651098657, 0.4038079212099427, 0.43307944365651496, 0.34023040242346636, 0.30058452474652975, 0.4816874933686618, 0.3472815087707918, 0.2511959630913426, 0.18908631263178954, 0.1804254162353094, 0.3630828263633793, 0.2493175665877, 0.19401673581295653, 0.2629273811628604, 0.2834951254676277, 0.22976884312784807, 0.1854620656602488, 0.19572454989880894, 0.22774668378238483, 0.23633201792950742, 0.2705019655398029, 0.20942650604529545, 0.2202751413827374, 0.20646869883323482, 0.20095813355161363, 0.2160282610989348, 0.18199007078600937, 0.20407661108023434, 0.19296331186381022, 0.2027463889566059, 0.24707032699118459, 0.2005216761333629, 0.23951403391788118, 0.20810529215271478, 0.2296268033520915, 0.18644991868253846, 0.18616861366007986, 0.18293794417234444, 0.8878293502315423, 0.8704464685387268, 0.8328448767417217, 0.8400835689001056, 0.11590879825608758, 0.7987274415298198, 0.5349863628660714, 0.20839575408497713, 0.7159347562642591, 0.5945375245732425, 0.2106437562973429, 0.15476467431552487, 0.5874018610143101, 0.6889956138478387, 0.6635697617132872, 0.1709482098351558, 0.17479713605791114, 0.19287953803536373, 0.19501067919878712, 0.18724234982893762, 0.1800826978294905, 0.1906400621369032, 0.1805064144102747, 0.18492930477553915, 0.10525478306140301, 0.08187412596119736, 0.11625517019030307, 0.0939402102724991, 0.11586397711373941, 0.0688653234381218, 0.098810916785665, 0.11147155071707715, 0.07913436545119623]}, "mutation_prompt": null}
{"id": "b126ca6e-ec57-4561-94e4-dfb062d7558c", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            # Elitism: Maintain the best solution in the population\n            self.population[np.argmin([func(ind) for ind in self.population])] = self.best_solution\n            temperature *= 0.98  # Dynamic cooling for better exploration-exploitation balance\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration and exploitation using elitism and dynamic cooling in a differential evolution framework.", "configspace": "", "generation": 77, "fitness": 0.15208007363122228, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.2821707691073404, 0.3581246929393216, 0.4123629676467153, 0.24870509744942348, 0.38552207298208363, 0.42967799503384485, 0.30648660780375625, 0.38820170309638313, 0.25940347414179177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02906420180439695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.057928075360174636, 0.07867353964539048, 0.07086317062961844, 0.05965153233625642, 0.07098847872949698, 0.07418111271365324, 0.05407055342389955, 0.060437625915048976, 0.05941621775102701, 0.04587915802403553, 0.048280418213514587, 0.05313330429605745, 0.05174582581228293, 0.05145412811598815, 0.0468372286218941, 0.039924212053999875, 0.048370945640699214, 0.06078734923266016, 0.8522884211414264, 0.8417018537942909, 0.7458008751284548, 0.8529060082731444, 0.8260210742590373, 0.6810011628361368, 0.7030232630974784, 0.8415085977749055, 0.8235099778878061, 0.11205696646250729, 0.11633858627321203, 0.11965290386199945, 0.11171347293827805, 0.09468635922693303, 0.10974259654904617, 0.11408293128707936, 0.1163614019701068, 0.09896778956822183, 0.18376116407449394, 0.15031639609772396, 0.17882119767142068, 0.163313582283803, 0.1494233828169288, 0.17214412953967162, 0.15265119345548794, 0.16296899932843512, 0.1905806848691538, 0.015877682082917954, 0.058777396662382686, 9.999999999998899e-05, 0.07992894081718627, 0.019233448214293958, 0.03216673899941613, 0.04095918601956949, 0.03244139111310329, 0.051837104532089895, 0.0864354097784803, 0.01441620271727384, 0.04459558620999926, 0.0298977453813426, 0.026493877951948686, 0.035721988952139294, 0.06531426541144159, 0.064619720666801, 0.03608653293119002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06291713940474508, 0.06817174779265656, 0.05029473957032371, 0.06628469744794419, 0.07159185273537638, 0.03824683416353325, 0.050857070950132255, 0.12723402822472707, 0.10231355345601079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010564159366453163, 0.006465852512042014, 0.0027829875001033066, 0.009439010650043045, 0.00024599697581140223, 0.01073067640901304, 0.0011397991721965317, 9.999999999998899e-05, 0.012847666941507074, 0.39639492228600315, 0.3715310183807108, 0.37587446380882794, 0.403939112558812, 0.3553157843711451, 0.39344847307487896, 0.3571546525356609, 0.3790334758938321, 0.41404171861702166, 0.06157272306054529, 0.05990139498142799, 0.07449143580455708, 0.08308656731574171, 0.054553338774803506, 0.05754726129871701, 0.0655104005639019, 0.05642311221838969, 0.06280144842164992, 0.16321400526196883, 0.13973400580921558, 0.12319784101233922, 0.20429180812152314, 0.16998261416180627, 0.15177907446413597, 0.1339761708300854, 0.1205651276871269, 0.12233417845022598, 0.21697646637535983, 0.20964255251608688, 0.22702886889361418, 0.21888552468824096, 0.21836269598453195, 0.20480639915311527, 0.22428538579590662, 0.20717932534938077, 0.18759501522583955, 0.13135437624579627, 0.1103902594443874, 0.13764989075941214, 0.15741463232692898, 0.13649900135271886, 0.158979787644564, 0.13681981022898704, 0.1725407204283691, 0.13385289047173954, 0.17979643708252502, 0.17600153565705567, 0.1748515194055833, 0.17404511646188514, 0.19044986470649716, 0.18466480812149633, 0.2027177480927157, 0.18931518808424963, 0.17539323406750462, 0.16686087724449739, 0.17238434983202844, 0.16758600507651167, 0.16510825543650065, 0.16065760338548518, 0.15895337851758518, 0.1671638920781725, 0.1570378950614748, 0.16540312781237443, 0.1701955002563691, 0.2434555577035309, 0.15913387958387726, 0.3082838463121249, 0.2203604186441318, 0.24468198139937714, 0.1582603797415666, 0.13529145150195365, 0.3187653486271863, 0.26268968874055576, 0.17635960937573925, 0.2433673565231308, 0.21758370395365922, 0.16584307807013643, 0.1423504887395075, 0.2702400747696134, 0.17691414494685564, 0.1721052093336155, 0.18611093872108342, 0.1720185509129193, 0.17575367825535637, 0.16849999381398117, 0.1724292764693267, 0.18289623100776953, 0.18356573507510743, 0.17309425626037156, 0.1786624647797369, 0.06239418933925789, 0.056659780194589615, 0.06309290178365246, 0.06269784338949025, 0.06553610076205463, 0.06533681844280359, 0.0655456476930818, 0.06473332355272254, 0.06661742419146577]}, "mutation_prompt": null}
{"id": "4546bc6a-3185-4c3f-ad67-db8efed3dda1", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.previous_best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Adjust CR based on fitness improvement trend\n                if self.best_fitness < self.previous_best_fitness:\n                    CR_adaptive = CR * (0.7 + 0.3 * np.random.rand())\n                else:\n                    CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                    \n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.previous_best_fitness = self.best_fitness\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced dynamic adjustments in mutation and crossover rates with fitness trend tracking for improved convergence.", "configspace": "", "generation": 78, "fitness": 0.2949219052740686, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7369964723448097, 0.764563777771229, 0.7682862311691763, 0.7985291310890938, 0.7522955485812506, 0.7742575096741215, 0.8012792338442813, 0.755171953854216, 0.7741983203260004, 0.5138072687155519, 0.47067988581549225, 0.1478905409264928, 0.4894877269899276, 0.5001843728944648, 9.999999999998899e-05, 0.47134547186495024, 0.43167222532042804, 0.5182713480501411, 0.13053339431742172, 0.12460680962806858, 0.11471041842737772, 0.14485136371123286, 0.08969980174458436, 0.11454451850137759, 0.10276220553205218, 0.14396864408007626, 0.09182612628463593, 0.10877741490242165, 0.12728374708077084, 0.12619291224568696, 0.14566749364421427, 0.08927799976797779, 0.08559329309380448, 0.08791615644487083, 0.16159937178829953, 0.12871495289832469, 0.9540584023422978, 0.9259794789899498, 0.9178239781151522, 0.9322456828097736, 0.931982756110198, 0.9093574013867963, 0.9287494059890747, 0.9275686444868432, 0.9361050199851289, 0.22416047550585372, 0.567260835784041, 0.4145629476835093, 0.4186027482008444, 0.49287039059147075, 0.4919854512886994, 0.4706612465479352, 0.47598017881906174, 0.503459123534126, 0.18018054177300913, 0.2239811525750388, 0.7792618588318918, 0.19943208422408543, 0.8097474333980245, 0.36249876416263005, 0.3536013913969396, 0.21562409131562477, 0.3549557894336959, 0.3646504693364261, 0.18998742232164145, 0.15724571933978493, 0.16382585959302742, 0.2672366061613961, 0.18748800918851893, 0.48382206683833195, 0.1223532450332745, 0.21331966466618468, 0.15826507022082947, 0.23685953143924054, 0.2308138901910588, 0.24147487318687288, 0.12346202202233669, 0.13680567956431477, 0.21429372875129793, 0.1528847848828211, 0.2034984467376626, 0.035722841346273126, 0.03210016806938909, 0.010181413993139876, 0.0642611118536186, 9.999999999998899e-05, 0.023197297659685367, 0.012993593667480985, 9.999999999998899e-05, 0.012968090689238654, 0.07353512120569061, 0.12330850549234329, 0.09867295608307414, 0.08038761314769349, 0.08754167623970155, 0.0844590039387384, 0.3146387517950424, 0.09732576832523354, 0.11817080199729879, 0.07264686358061467, 0.0682077540084356, 0.03921297675623481, 0.0806974101004223, 0.21479324345634243, 0.12316713422143599, 0.102132923812009, 0.08907283596219973, 9.999999999998899e-05, 0.09722279429156677, 0.1195407547361248, 0.1211465378333143, 0.09473437001681795, 0.10277830367617258, 0.12900742666452902, 0.13518585883609735, 0.0989556423047836, 0.07502134529459492, 0.5416448471536627, 0.5727595722308602, 0.5216763821138728, 0.5808963694764857, 0.5558599365166479, 0.5371972986237298, 0.567972457512943, 0.5479907745750794, 0.5112788397159527, 0.13284328290204028, 0.10457186796769435, 0.09221913807118853, 0.1595022563767705, 0.08378868524859695, 0.11679524673710273, 0.16005091549746953, 0.11069197183980395, 0.09065427012483707, 0.13605676552334467, 0.13935229890672873, 0.23486568050960377, 0.13237860802934298, 0.2592779919421643, 0.14138042963524078, 0.1829969164319687, 0.18520070373712338, 0.2000548931320676, 0.3175710510602653, 0.3933475423148688, 0.3010338344340907, 0.35199029750842836, 0.30551456719560954, 0.45711894320000523, 0.43189962606212706, 0.30252575750958755, 0.4178110967701787, 0.23211110360681064, 0.14777686806334644, 0.19569326911501905, 0.24524795038260272, 0.2433801947736417, 0.33645234599918095, 0.19229963482840784, 0.27506061230646117, 0.19213439142772437, 0.2275323590633006, 0.20108179420521988, 0.19690706148456005, 0.23376543440966469, 0.19678449845765422, 0.22961207004258155, 0.2359147729382074, 0.18034128030282737, 0.20716327531288103, 0.18288984634222405, 0.19208993102426253, 0.17849571076450754, 0.1759648834895734, 0.2349714571989595, 0.18546908850414656, 0.1948075876655072, 0.18612704093855215, 0.21178108158503484, 0.1864470046551885, 0.8617304134294276, 0.18416813306087287, 0.8837440752368995, 0.8605479317542597, 0.14994580837911853, 0.16019807886943405, 0.11667531196609193, 0.7968052077134973, 0.7984075639732668, 0.6530415685846329, 0.6089826985647557, 0.15210280634266327, 0.7025566934047252, 0.739712015008539, 0.16627833065290165, 0.6556597150172079, 0.6872824301688218, 0.17181502295556472, 0.1758928796299446, 0.19696053620452714, 0.17414586664494947, 0.19522250401103025, 0.18186176800405618, 0.19456632540044394, 0.18485470620623912, 0.17828690673285275, 0.06882939347513617, 0.09898868490504176, 0.07339422952342278, 0.08989859748270301, 0.061451286398143234, 0.08426995320813946, 0.08530981314371511, 0.08934551692107873, 0.07130820161230222]}, "mutation_prompt": null}
{"id": "bcbd9c45-772b-42dc-ad6c-002d768bada2", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand() * (1 - evals / self.budget))  # Dynamic crossover\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                self.population[0] = self.best_solution  # Elitism to preserve top solution\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved adaptability by dynamically adjusting crossover rate and implementing elitism to preserve top solutions.", "configspace": "", "generation": 79, "fitness": 0.29714992533758633, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7810724108439171, 0.7465806662386278, 0.78827601887726, 0.8285393500159757, 0.7433149716501422, 0.7607440290929688, 0.814672977648879, 0.7361489459550342, 0.7945216763419528, 0.5124249350901181, 0.504375564117375, 0.09507187647741722, 0.5258340836884946, 0.5910076130330889, 9.999999999998899e-05, 0.07415286269416155, 0.47514688788574744, 0.09579170008127513, 0.11645768627855957, 0.13674165954629192, 0.10053622246989158, 0.11576349295691857, 0.11021165069331729, 0.1341594128012783, 0.12840687369704096, 0.1098875937226832, 0.13099366987935157, 0.11882603080582843, 0.1293144391108173, 0.09071803257796851, 0.10537440379744645, 0.11375640702617218, 0.10581209836427607, 0.1264764634532759, 0.12988731541449128, 0.12492505919482522, 0.9482272477468446, 0.9328111058657366, 0.9341085930441583, 0.9494699218037914, 0.9360384750590036, 0.9262393088687535, 0.9071210171625006, 0.9381045920732067, 0.9339593145521611, 0.36385785324723974, 0.2064643752854407, 0.3692662955799956, 0.4993835993342669, 0.5651426188949394, 0.5318659212261557, 0.5383241975735673, 0.4564027172486589, 0.3195723570436648, 0.3754642696632512, 0.20524528276571374, 0.22124355997614853, 0.8076745661231197, 0.33880468342632175, 0.26695563226125496, 0.22068646794145674, 0.2783487909926895, 0.22964852145709014, 0.2857287087739787, 0.28532492498019946, 0.20194669986522618, 0.21241974341424752, 0.11631341588566624, 0.15618143176708, 0.3839313587090426, 0.19052538347352366, 0.2517372956278101, 0.2772543106736858, 0.21249995135215882, 0.18162979681569913, 0.4088561386932379, 0.1909411518344324, 0.18500989560400494, 0.18011401276611327, 0.17554391271465686, 0.11833135707389852, 9.999999999998899e-05, 0.09191529289459122, 0.07125150700463123, 0.05523975427052663, 0.015412638752116847, 9.999999999998899e-05, 0.07540413596673001, 0.05231969203512021, 9.999999999998899e-05, 0.13554489199941633, 0.17562419292359788, 0.15947272845405425, 0.10819017313983603, 0.15278541250530597, 0.1921501292079486, 0.08642587674294377, 0.12010448701484588, 0.11443797508297071, 0.10960470541453082, 0.12535292237874396, 0.07267162283805739, 0.07836174143113728, 0.14051391983896844, 0.16038930246223793, 0.12364166104431884, 0.10251935707825377, 0.0530135913455817, 0.14400857726663086, 0.1966864855629672, 0.17709855184643786, 0.058473938312743834, 0.2594030305853592, 0.2074545650501184, 0.113979065621164, 0.1771754454366865, 0.09101197069505995, 0.5303451162385037, 0.6116612117928614, 0.5811360640771703, 0.5279613854461342, 0.5417319262315206, 0.542726504619843, 0.5862583961902801, 0.5587113096328036, 0.5566395655917014, 0.07211829441463546, 0.08471204615430539, 0.13616033008156758, 0.08772001097332671, 0.11283201610019256, 0.06194658924402352, 0.11101227281241066, 0.0735904097505119, 0.1124314016589687, 0.16016465337893515, 0.15588022244530642, 0.14498663502579434, 0.20489196470352422, 0.12015724658396287, 0.1758463945443276, 0.18290396265945985, 0.11617800099824893, 0.1383697523487596, 0.4297143544634927, 0.362511536473214, 0.45126896600537014, 0.46689048481695505, 0.412378249013725, 0.30390512685709736, 0.47199962920025296, 0.33860521536637556, 0.22022458258497413, 0.3269946047506683, 0.21827677288385527, 0.23939592366658857, 0.21929567825815288, 0.1538620544928586, 0.19041870162653485, 0.26221549089829344, 0.2686427170294613, 0.13924012378790906, 0.17681370944403973, 0.20367866965591286, 0.1958748493419631, 0.18154448448364413, 0.19930538071801684, 0.18430704688633992, 0.20388983669814276, 0.19709783516492752, 0.18913498964393327, 0.18281011508563094, 0.18778619724039147, 0.19345624399476546, 0.19871873801347306, 0.19771638757801213, 0.20831621819259838, 0.19966416724040847, 0.18979283462565288, 0.1870227004099122, 0.1866569478663499, 0.18708387095307422, 0.18439105238254117, 0.8830973488487468, 0.85581386432125, 0.8198490594194858, 0.8546477340050018, 0.11621132147440583, 0.8770441969917177, 0.8404457648801845, 0.21004077154655143, 0.860045276290965, 0.821796262392166, 0.21086655902635243, 0.15549935091592182, 0.7321253102885358, 0.7594525781869139, 0.7664538558298207, 0.16260881944566064, 0.1782610317726332, 0.17586594617868068, 0.21228260807668742, 0.17080383291947399, 0.170012555377404, 0.18671362036941397, 0.19886166889047663, 0.17890464683718055, 0.07869977779279247, 0.0843668695972406, 0.0759889363920887, 0.06273711312535524, 0.10113769489117275, 0.05948793276435249, 0.1321644269761777, 0.08843339096059422, 0.09500237467035222]}, "mutation_prompt": null}
{"id": "eed3ec07-c248-4d73-aa73-a76bbaf95e14", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "a1d03115-c76e-49fe-8630-b168ebae9928", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "a880976d-9717-4d8e-aa8b-5c095f580e1f", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.5 + 0.5 * np.random.rand())  # Adjusted crossover probability\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                # Adjust memory influence\n                guided_mutation = 0.7 * trial + 0.3 * self.memory\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating adaptive crossover and memory influence adjustment for improved convergence.", "configspace": "", "generation": 82, "fitness": 0.2649379048508942, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.6806467812148496, 0.6533391881002208, 0.6709246161281723, 0.6048253902440386, 0.6475435027698442, 0.6448232735397075, 0.6574352607278591, 0.6639440590633333, 0.6376732474176423, 0.3785447216100831, 0.03936391726145316, 0.35298013689299634, 0.45951387636257846, 0.01721457597831555, 0.04134672721371513, 0.0704124781811657, 0.27719164131888896, 0.37245037021705685, 0.13488327558523283, 0.13075171427994103, 0.1310492906430789, 0.4001739180485333, 0.1484132928624522, 0.13986880021849846, 0.13921523726046836, 0.12502403876857893, 0.13717665799459156, 0.12541433241532107, 0.10215192168486287, 0.11918738151731267, 0.10106670611694568, 0.1333642735557774, 0.10107062009945456, 0.08926821061266399, 0.13143217118140182, 0.08548884661078082, 0.9442598261223937, 0.8814405004190978, 0.8989840066101298, 0.9277797643140635, 0.9387297363771914, 0.8945523690998668, 0.8915405631460067, 0.9297766971084698, 0.9314773709978169, 0.3325960889117334, 0.22126093433187966, 0.37869611432957206, 0.4076941712814556, 0.4093111836609812, 0.4117229800397372, 0.35004046039389236, 0.4218879550181721, 0.3584540044668544, 0.35650389663797377, 0.6059839647079944, 0.21105507904289822, 0.20815958104073506, 0.25319922607048795, 0.26336391927775304, 0.7655904151508099, 0.22705733182634136, 0.734953663157617, 0.18385965738151921, 0.12431496006431064, 0.12679311840465057, 0.14751392277406317, 0.15231459640891953, 0.14346191482763537, 0.22624905109715, 0.15500454845748046, 0.24046626843541286, 0.1165015506946796, 0.13961524093902666, 0.1400798990774128, 0.08893579997396905, 0.44957112712569014, 0.17316368665432946, 0.20929717206774268, 0.2143166875945277, 0.14281402636134266, 0.035889422554592265, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018776077588159579, 0.0409163908072907, 9.999999999998899e-05, 9.999999999998899e-05, 0.007880446926415985, 0.0355148316425099, 0.10974329101171076, 0.15098242063915424, 0.09540440351353952, 0.05675866917039185, 0.12418437944552096, 0.10062024883310072, 0.0977250236472772, 0.20423552342207263, 0.12555816817659837, 0.14476366095691395, 0.09105697456083295, 0.0694984318986328, 0.04484582307672391, 0.18708301286649698, 0.06866656175737551, 0.06986280087183239, 0.12436007131239202, 0.05776950853832152, 0.12050457320650554, 0.06084615932169368, 0.19924865456276097, 0.027357201070447035, 0.11249413329323721, 0.13640763353761065, 0.05960395553374853, 0.11556583401674525, 0.12319512236510366, 0.4201462311672164, 0.4358516519016189, 0.4664575129467031, 0.5239127888160036, 0.487833735131181, 0.4477323570064248, 0.5025476879381874, 0.47701410501102515, 0.4764240806194251, 0.08560120348605471, 0.07597875876609195, 0.11565612608744502, 0.12599539938167914, 0.0868740189180135, 0.1231670355800698, 0.05625382685205804, 0.07156118743220252, 0.09682709141374712, 0.18798819380380094, 0.14469708450579633, 0.14974082515960685, 0.1708961472818733, 0.1535546869008525, 0.22882333986618852, 0.1896491273878047, 0.15776777966827527, 0.16222231082796423, 0.28823110191872603, 0.17410535749609657, 0.2839162007243674, 0.2713361102554761, 0.20112231422355442, 0.20341659665472644, 0.2209426917495303, 0.29949025817595376, 0.36530844004258034, 0.1903247296597501, 0.2097568713993464, 0.24751093316381334, 0.26080664059455494, 0.23232644346981146, 0.2145882127096289, 0.18082187332270483, 0.18917904726613388, 0.19257496460073775, 0.18599755895228176, 0.18795996617175714, 0.2082590820826209, 0.21153270940325775, 0.18251145398892699, 0.18712098840394664, 0.1776819779924379, 0.18046449089582073, 0.19730096700101207, 0.20761517867303914, 0.20506687900747955, 0.2026877832582178, 0.2115291281949061, 0.206041736188586, 0.46448667221016104, 0.19781278194794394, 0.20574569376663498, 0.22094137291593208, 0.16188935186604936, 0.18384450009347575, 0.1652948417806006, 0.7763292356960763, 0.15536400368117975, 0.18742454039703593, 0.7133524357207817, 0.7517824893123121, 0.7386565744344968, 0.5930841472138384, 0.6434673090712901, 0.2294186652720931, 0.5951130360751787, 0.4933703170180491, 0.5690676061646308, 0.5546373349940215, 0.45265609214900215, 0.5531016944221601, 0.18145355330727675, 0.18261903778094923, 0.17561738468808763, 0.18534935565093003, 0.18014241771960005, 0.18059589972135837, 0.1682811945036521, 0.1848924506023183, 0.17837674614747379, 0.07486672200871802, 0.0743837320748888, 0.07445543928158571, 0.08560302392515895, 0.0831146843530356, 0.092739823864052, 0.07766087953289968, 0.08116476528735761, 0.08338623376579124]}, "mutation_prompt": null}
{"id": "f62f1c5a-9d1a-4f1e-838e-00d130a4d611", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "6e5d0c83-dc4c-4db0-957f-504a39bccf41", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "0bf8555c-d5fb-4756-901c-df15ada02063", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "9c92e986-3fd9-4eca-ba3f-de28d45183b7", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.2 * np.random.rand())  # Wider CR range\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.05) == 0:  # More frequent restart\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved exploration by adapting crossover rates and dynamic population size for diverse search.", "configspace": "", "generation": 86, "fitness": 0.28652743716693946, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.8064387024669684, 0.753943672207586, 0.7522751067747516, 0.7902795881195519, 0.7664483515390044, 0.7613460159769994, 0.8220102840934016, 0.7503721382044505, 0.736906129709054, 0.07123396434969342, 9.999999999998899e-05, 0.1532852723722844, 0.4736858661940684, 0.5627993223397535, 0.08694447306821784, 0.07741714751223827, 0.42505356297452257, 0.44622772309855696, 0.11850893530086382, 0.09715942920332232, 0.09391792668073828, 0.131577777580686, 0.1379871919028719, 0.10654375649601988, 0.1425647637554046, 0.09436174228407379, 0.13341193975907495, 0.09293378595664414, 0.11114956520247943, 0.08784023501728311, 0.06742546940561855, 0.09969314787909533, 0.10773001746310984, 0.1344081846437366, 0.10855883242716713, 0.1062411205074737, 0.9315853280282921, 0.9279322161250213, 0.9224552670289298, 0.940994938357825, 0.9240348179784241, 0.923574879019451, 0.9296557179656706, 0.9360152677496009, 0.9377402672866754, 0.5052533714056311, 0.54189619755211, 0.515049176107359, 0.4922354175165601, 0.4427205138770588, 0.5317003152267996, 0.35307108369207196, 0.6046196342256425, 0.5567604330300985, 0.3811465122904616, 0.2035963310042309, 0.18486274082186993, 0.21507767498152996, 0.20892882898219456, 0.2733225148387036, 0.7938455325270452, 0.3414250550478948, 0.22798454640135357, 0.3806835007654592, 0.11797743440644393, 0.2025650602833975, 0.33828623760375043, 0.1267761506891728, 0.20941457975163702, 0.2597396821836321, 0.2615066698943619, 0.16650018876378203, 0.20690607762508317, 0.11776478429027515, 0.12312240689433929, 0.19824646614977726, 0.22703950574423593, 0.3137684068729638, 0.12597890769110798, 0.24947116056889895, 0.20724158575492313, 9.999999999998899e-05, 0.0077400135435660156, 0.05446565841799689, 0.07642641753491386, 0.07595744608689525, 0.017248284676173342, 0.05723616822055333, 9.999999999998899e-05, 9.999999999998899e-05, 0.12476962557970706, 0.11455128843524687, 0.14665464564762276, 0.2673618955109519, 0.14231890458906438, 0.18600655519544784, 0.33022158232089394, 0.13018309755148638, 0.11255998357528607, 0.11466772274813652, 0.120370890024035, 0.06657120034258512, 0.0817923768628882, 0.12282218979338666, 0.20313549458628355, 0.080995262576525, 0.12286614393691508, 0.1068171817692295, 0.1645769523409374, 0.08631637261807212, 0.16606068456247502, 0.117210892248932, 0.15656083384981268, 0.2258368839097068, 0.09197082334260909, 0.10638177603147503, 0.07549043466513616, 0.5728229013939745, 0.5881599235510679, 0.5535652992693568, 0.5674805136764096, 0.5713905567337683, 0.5737058589458943, 0.6040664804672189, 0.596092813693921, 0.5894281658872351, 0.10591551555531475, 0.0918954369405437, 0.10975310530017579, 0.11253284114471096, 0.0698168328938189, 0.10937955363962848, 0.15469413991374892, 0.12869778956714395, 0.10648684062311697, 0.1439552088484355, 0.14184203606588852, 0.16075168167214537, 0.2549416403217021, 0.12571361516542856, 0.17573996881421095, 0.15552722584717726, 0.18991028873876226, 0.16254764769196395, 0.4366241765738379, 0.39820890810942744, 0.37448975806663953, 0.26424657191610945, 0.44760665548787715, 0.4439783725133234, 0.38912366464019266, 0.4600739061929138, 0.2667832470601822, 0.23753331274048683, 0.16358756300172395, 0.24924773075425855, 0.2887760345350965, 0.26995030504521644, 0.2377670132393881, 0.23645656784156932, 0.21212561097906257, 0.20043774624147714, 0.23920869318030868, 0.20108179420521988, 0.17446314321468037, 0.2747119299804278, 0.1923968482436057, 0.26041987652027676, 0.19074517906218325, 0.16579800528604172, 0.22503007159733757, 0.17837300203561313, 0.20595429350382588, 0.18507446743913392, 0.21589217120445514, 0.2109007054070342, 0.21122286368326715, 0.18715378190368348, 0.20288204463771575, 0.2201740127280144, 0.1864725872561308, 0.16571003577959087, 0.18439238964592086, 0.8875205560426004, 0.7694264258440067, 0.1497471742409785, 0.16052619203096452, 0.11622436458877905, 0.15799007869724446, 0.7885018191964182, 0.6799045395895096, 0.5578685827299302, 0.6966552453327653, 0.21072921581723802, 0.7407477429382479, 0.16629190398436644, 0.8416420352021098, 0.16231347601370183, 0.1887432336304694, 0.20758138799617898, 0.19482315659580351, 0.1724902005683432, 0.18234216436480477, 0.20586638005664848, 0.18995286417882562, 0.16416415020772257, 0.17890464683718055, 0.06759603355449506, 0.08325905062258321, 0.07242964557998133, 0.09177369562503301, 0.08856525718771568, 0.06908436153553443, 0.06738467557953842, 0.09936119533944254, 0.06392584197029738]}, "mutation_prompt": null}
{"id": "fdbe57f7-d434-4f6b-959b-ff6e2d71cd27", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.5, 1.2)  # Expanded range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.15) == 0:  # Adjusted restart strategy frequency\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.98  # Slightly adjusted cooling rate\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved exploration with dynamic mutation scaling and stochastic restart for better convergence.", "configspace": "", "generation": 87, "fitness": 0.301660962489749, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7941720479152738, 0.7335071775131397, 0.8076795537774688, 0.7687239297583368, 0.7536985463991556, 0.7614567145626947, 0.7492105094007793, 0.7303645208962448, 0.7772922179148715, 0.5342730064876796, 9.999999999998899e-05, 0.4559199022267256, 0.4919208222336283, 0.5184890379959513, 0.48339387221949914, 0.5914426106358187, 0.48139750563875605, 0.5615132170357375, 0.10327561405460406, 0.5192560503237396, 0.14383804931140443, 0.10659279939374333, 0.060994809512881165, 0.1363957466503607, 0.11985585697807022, 0.1428985302263016, 0.11341345999146235, 0.13978415359644591, 0.10543058705360397, 0.11588443613054422, 0.07792572105505535, 0.08690335948693029, 0.11286132162700757, 0.12437372292629112, 0.13991419795881155, 0.10621268083928315, 0.9511313728693329, 0.930490190669157, 0.9437280481630379, 0.9515942981752109, 0.940841875822983, 0.9314775626315371, 0.9341416091397716, 0.943694924755548, 0.9415716567590218, 0.14545030996340702, 0.48252054040566716, 0.5342880788439637, 0.41660219104084417, 0.30064801016010323, 0.45348083831555874, 0.5367049978427721, 0.1994705467197294, 0.48752031898084647, 0.8385212725420672, 0.1751459851209809, 0.22213745590348044, 0.26636563520316414, 0.7981127486635944, 0.32199664702804187, 0.2243897096158165, 0.7937623488953153, 0.17305009138632, 0.14445667457767508, 0.5006008758364155, 0.40774062457042626, 0.2519585736586778, 0.14201906262168174, 0.45189337704963395, 0.23279529366411655, 0.40563116059348114, 0.19490356167533296, 0.1547504082636746, 0.1237164543788476, 0.18995269919953706, 0.198203138237236, 0.1725203710890102, 0.17164521741660044, 0.22263250350389308, 0.2095104262823414, 0.3531543435886427, 0.05902200248351963, 0.055133929526636316, 0.06133072190243671, 0.06901508459911798, 0.1773211016169336, 0.03011320291606645, 0.05991896633297378, 0.03316160817452363, 0.032493356329021617, 0.2524848591266283, 0.11854869051728711, 0.16945014105798417, 0.07638670884011878, 0.0819583641137227, 0.08004981840201053, 0.2869778964990807, 0.11087078177413678, 0.08426049992336315, 0.1107341495684564, 0.07684255286428421, 0.13621669024229555, 0.10545512000542734, 0.0845136971661401, 0.18438466930431263, 0.12595255583044074, 0.07456535900370742, 0.08158716703155655, 0.22977376372900815, 0.07977765248330393, 0.19243110353587356, 0.06045418267926961, 0.13010741945695936, 0.09360054398370743, 0.11649196957778463, 0.18148544462076133, 0.13630718191685898, 0.600335916926431, 0.5124066711209992, 0.5739561968054097, 0.6027885193076539, 0.5810911654499833, 0.5456566848907027, 0.5528940656873561, 0.5149393553135182, 0.5720950947550897, 0.08077524739404685, 0.15749873937899195, 0.12238498896555738, 0.14595207574801405, 0.11166197118109866, 0.06049322588865069, 0.10684176926178912, 0.15638587445402086, 0.0986504077706486, 0.12805919541463373, 0.16676913335233634, 0.1793336488778623, 0.1999484452598259, 0.22214062598832152, 0.13560103351112762, 0.1956947750273701, 0.17037366565944523, 0.18703090085153862, 0.31088576464383144, 0.46049324334814323, 0.30466937111112513, 0.48037238047247666, 0.2908682924909124, 0.2750317291217126, 0.20923709477552377, 0.4407627236938818, 0.4435025403160022, 0.1656127760183792, 0.26069350850732087, 0.25937841625851443, 0.2418567498923364, 0.24747708651522204, 0.1605897628200399, 0.27811747106554596, 0.21399389381818612, 0.20119318939222353, 0.2125578192472969, 0.25407681834735796, 0.20359094596071314, 0.17552186057873698, 0.18446808075022159, 0.19962655920153172, 0.1802693900440674, 0.1964184053069684, 0.24553692494338242, 0.19273176823974902, 0.1837810061209072, 0.20428451105538492, 0.19477664700023134, 0.17979496535174655, 0.22098216771200463, 0.1873501612603634, 0.24441831837139982, 0.21910897731235646, 0.18613709971878323, 0.18634070579252893, 0.19585166067473403, 0.8968005049367634, 0.8632311353359773, 0.14618156797199444, 0.16548655528725598, 0.1159141840201553, 0.15590406715954175, 0.7860043952845878, 0.8151439207872824, 0.8122890559129265, 0.8397670519526027, 0.20906148096803512, 0.16567321689560688, 0.7979840984556659, 0.8287687069549616, 0.16451961954276417, 0.19722278645321556, 0.18966946991736755, 0.1787056671487155, 0.17256433230491697, 0.16392334521913765, 0.17248914714291297, 0.1723093412611948, 0.19694354641428713, 0.17876082340369337, 0.07016427696079408, 0.06235559382641365, 0.10510934166077845, 0.09719372198967902, 0.0765572872959861, 0.08741902570255133, 0.08622821112386447, 0.07593528998218646, 0.0818976683291992]}, "mutation_prompt": null}
{"id": "2c9cabc8-31f2-47ac-a496-bba2a16ad44a", "solution": "import numpy as np\n\nclass RefinedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget * 0.8)))\n            F_adaptive_range = (0.5, 0.9)  # Adjusted range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                if evals % (self.budget * 0.05) == 0:  # Enhanced vector generation\n                    trial = np.clip(0.7 * trial + 0.3 * np.random.uniform(self.lower_bound, self.upper_bound, self.dim), self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "RefinedMetaheuristic", "description": "Leveraging dynamic population size adjustment and enhanced trial vector generation for improved performance.", "configspace": "", "generation": 88, "fitness": 0.18736503608281557, "feedback": "The algorithm RefinedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.2858628969472077, 0.24778444678341127, 0.30139825116327956, 0.4461469406591613, 0.42832400127738723, 0.22574975619771498, 0.24760119781914003, 0.291066017683142, 0.27758781823942147, 9.999999999998899e-05, 0.010214699676024841, 0.00013263831732257536, 0.2475823051854814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2207972596698199, 0.10861922289445192, 0.08356220741682374, 0.09036725583858018, 0.08859306158813651, 0.09270982626729418, 0.08513208944349515, 0.07355725083288778, 0.10488243221894777, 0.09783912304637432, 0.08382693949864828, 0.10094618924070131, 0.09803517516635651, 0.06733986387662994, 0.08925270349693182, 0.13895134153902933, 0.0420123230680296, 0.06264988390243176, 0.07293992570954799, 0.9591208878342837, 0.9615965961206114, 0.9589879164217315, 0.9297632025679126, 0.9567822316137304, 0.9766339165115687, 0.9506815231933612, 0.9782252081295834, 0.9674346020310577, 0.0686643792515923, 0.2833340120509983, 0.27479497666557784, 0.1269631813641141, 0.13026476853731161, 0.10056948286935607, 0.21141694878851824, 0.2597586217785115, 0.23360516730647785, 0.20506407138962024, 0.20562096267750618, 0.12468304054488799, 0.1517861778074061, 0.15886096439809627, 0.14345858752888785, 0.42732862742303157, 0.39419159224727995, 0.19932692496290683, 9.999999999998899e-05, 0.13960997564546118, 0.031550123006540365, 0.021720668561844625, 0.07165313588603894, 0.09563615036372397, 0.15449882906048296, 0.09817344302522502, 0.11525219695544364, 0.130898857947797, 0.018669671985203085, 0.07658960419477878, 0.09366314971550149, 0.0975853244396565, 0.0948393013644836, 0.03922863012719646, 0.052777868830191754, 0.09252193537846709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049915377587542165, 9.999999999998899e-05, 0.05958933764437646, 0.10494502801881278, 0.09805728032800487, 0.05504115279818411, 0.06791513525687531, 0.05103552032901992, 0.08106614583621852, 0.09963074223500312, 0.05783828331137797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009548775127190545, 0.024339799574491394, 9.999999999998899e-05, 0.07143716785667165, 0.04253971659313871, 0.12565563981121086, 0.08872715903059558, 0.061089228486134184, 0.037612858351924516, 0.029190509592643354, 0.37321265403396664, 0.3267073372156446, 0.37397670667952543, 0.36412229260503703, 0.37397137133368097, 0.38124107396240503, 0.3846587499640224, 0.3673751248247975, 0.3685788152456164, 0.06095698668831462, 0.07920692366769255, 0.08415736186121625, 0.07500330874948247, 0.052815987064794845, 0.053513899563385925, 0.0542243794104359, 0.054960041453089414, 0.08406437448228476, 0.1638921346542851, 0.14375187700582992, 0.11952686293130188, 0.2045133306552942, 0.16050865983432727, 0.15538566761779005, 0.14302880064028756, 0.1263235274456953, 0.13983742560549184, 0.23736035335603678, 0.21180461268980566, 0.21778255364812582, 0.19570127807556392, 0.21408367998049138, 0.17949774533555085, 0.216946823692862, 0.2820378061936385, 0.16565785118017484, 0.17117403178203872, 0.15047559164792457, 0.16215135799865643, 0.2000230489813537, 0.10906302398898804, 0.18232242036274826, 0.21984988151017337, 0.16370093607915948, 0.16958630830949517, 0.16329949624418771, 0.16494070552594053, 0.17221054594176965, 0.19257208269402393, 0.15994351689571462, 0.1906706903294919, 0.20898343422445342, 0.17796398870793184, 0.16590836885154336, 0.1852915539305675, 0.17115579964752636, 0.18024480888608851, 0.173637110395245, 0.1680654794933938, 0.17084217289442039, 0.1615721651909876, 0.16831082775255468, 0.17487999830669254, 0.16560572345976288, 0.5872327697515918, 0.1620159185900527, 0.269571180131866, 0.2586022348383761, 0.56408995621852, 0.5490960554560586, 0.615137850796259, 0.5219837421733751, 0.47474883846328764, 0.15520905455127254, 0.5244866179873788, 0.18428730765349788, 0.43286235826057806, 0.11319118661607375, 0.19502012256821444, 0.5028328278179603, 0.4101563485573956, 0.1777555029876694, 0.1693833334177034, 0.18331705691407263, 0.20601635535664486, 0.17620916692761257, 0.17880263748849234, 0.17195550700360307, 0.17928969902792868, 0.19212009801902008, 0.060244116496190325, 0.04246354423922183, 0.0614961671935389, 0.050338244242310815, 0.05873208932231955, 0.06810941610636367, 0.05584598500115645, 0.05137264316684631, 0.04790496784221232]}, "mutation_prompt": null}
{"id": "79f5f99a-1a83-4c7d-9ef4-9e8ef77ff183", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.5, 0.9)  # Slight adjustment for F_adaptive range\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.85 + 0.15 * np.random.rand())  # Adjusted range for CR_adaptive\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            elite_idx = np.random.randint(self.population_size)\n            self.population[elite_idx] = self.best_solution  # Preserve elite solution\n\n            temperature *= 0.98  # Slightly adjust temperature decay\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced balance between exploration and exploitation by tuning adaptive parameters and introducing elite preservation.", "configspace": "", "generation": 89, "fitness": 0.29046205792922075, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7945193992939854, 0.8074398603748092, 0.8397691120471124, 0.8130366429746368, 0.7688774944722525, 0.8364103944864509, 0.8117939918296375, 0.7845286380705341, 0.8292369520042007, 0.020728702625565365, 0.4778486638750301, 9.999999999998899e-05, 0.09282079432868251, 0.471764451733118, 0.3979632411129159, 0.5914925649189446, 0.3891984889667236, 0.14625338729653337, 0.12633878770613816, 0.09322474748905663, 0.11495106686181011, 0.12403973753802888, 0.10303112312950657, 0.09909726373995131, 0.09844292051858405, 0.10901687780392533, 0.0958216562079911, 0.09224765463865647, 0.09099797193779069, 0.10113058856784463, 0.08846444544198784, 0.0915466806840135, 0.12450758571905385, 0.13289088561888895, 0.0979433393903466, 0.10221998415707623, 0.9447757846198086, 0.930430067100664, 0.9230429295456611, 0.90907452502509, 0.8967555016309565, 0.9032739476332466, 0.943161039594459, 0.9262020474028212, 0.9376298214390412, 0.5479576855288733, 0.5659131825835383, 0.497973428527272, 0.5630612904567845, 0.49853983212992803, 0.47382701297399676, 0.5256851619882138, 0.443211020397522, 0.37627395527753216, 0.36935030537548696, 0.1915626592809413, 0.22715562522735644, 0.26708835766076044, 0.353992420079123, 0.269958644885703, 0.7877892825979335, 0.8198020097289889, 0.17372646677812076, 0.15900782942433234, 0.18747924721947984, 0.11707913413498372, 0.16816617764846398, 0.12850825522583942, 0.1509270378637233, 0.17556912274294667, 0.4150096141594649, 0.37048067248916183, 0.3970372687293776, 0.1942374833111321, 0.1179667284752084, 0.14277791030517017, 0.20364405517377104, 0.11770622653064311, 0.12811176666370705, 0.17507692774422068, 0.10932736100271778, 0.05356713466352425, 0.009126752391342419, 0.12347077567699616, 9.999999999998899e-05, 0.012247815092550796, 9.999999999998899e-05, 0.0817962643807183, 0.016163713055611706, 0.054518321200224595, 0.08709953082898592, 0.1230987239532153, 0.20060782020284962, 0.06573716639976734, 0.09429225878604552, 0.15384425526633894, 0.285713333058641, 0.1394853619391404, 0.09065465070029022, 0.01880761024269506, 0.08527164280701127, 0.13633011069559742, 0.08265181590315185, 0.11086421385445477, 0.2187421291148025, 0.08882423889315683, 9.999999999998899e-05, 0.07238998786779793, 0.07209831211205997, 0.1041201050319771, 0.18543582842760864, 0.10357919479753341, 0.1577315504508381, 0.21444778698037126, 0.2982597377327152, 0.15205595902365276, 0.04843605732912715, 0.6282849136681319, 0.577475077336697, 0.6434290098966758, 0.5408878383434288, 0.5904765728108118, 0.5979721455436584, 0.6211947256276489, 0.554445354039655, 0.6284589469488149, 0.08575344097214388, 0.07474872305442126, 0.08909742672875365, 0.09952520857434699, 0.06603229626914964, 0.06762399825124288, 0.12599312222115588, 0.09337247850709207, 0.08981144631649696, 0.14601988932318477, 0.12767744701273553, 0.21779742022110826, 0.1987317949725662, 0.3093074117643737, 0.16979190414147582, 0.1428926444939379, 0.17738029994559945, 0.30942600060036607, 0.3510875440840584, 0.34376013683686757, 0.3653661150017615, 0.3326568983295096, 0.47521021300535404, 0.32581795032518934, 0.29248900945536294, 0.4339675070226614, 0.4130142488833525, 0.25847402361103455, 0.3117414658255039, 0.21426717513295135, 0.19501712553589812, 0.23984108478984145, 0.1771052545134013, 0.1876701057179967, 0.20255091181157925, 0.15819767106425076, 0.23188506322852687, 0.1769774424679923, 0.21731367203055174, 0.18563192400798778, 0.19674252166079054, 0.21681524925922235, 0.20529334000328825, 0.19004492948619622, 0.19357458328002075, 0.18917686241868525, 0.18506999782845646, 0.17883001802711296, 0.1831819382219858, 0.19790084207481518, 0.20325945998771155, 0.19802237425667013, 0.20086936807836375, 0.20536393544827902, 0.18488892185533556, 0.1873828573814611, 0.19385642036042783, 0.8951525694543295, 0.15072556595470799, 0.8012435376666835, 0.8775955110660207, 0.12058712595311227, 0.8814084851378186, 0.7951378970324066, 0.21019418919348798, 0.7945631874196863, 0.15102224964503297, 0.20995499503436788, 0.1527619225095026, 0.16808173969537732, 0.6640211150516537, 0.7977301086511592, 0.17160356520438147, 0.17584629533483853, 0.1744822817702406, 0.18386758071272824, 0.18377404044820267, 0.17004141736046352, 0.20649491948346654, 0.18054595742164037, 0.1754521085400449, 0.12254108372449501, 0.07583594922028714, 0.09363359553098727, 0.11780049505646106, 0.07675844053743708, 0.137778036257173, 0.06583302941897107, 0.06639531325952663, 0.09022342333211941]}, "mutation_prompt": null}
{"id": "2814054f-9cd1-406a-928f-dec4fc246123", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "12638f74-1814-491f-ad71-c75b6ae11e90", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "19709b4f-3bd5-443c-bcd1-8d1e647da76d", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "84861ba4-38ca-467e-b44f-969ecc28fdf5", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.2)  # Increased range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.4 * np.random.rand())  # Dynamic crossover range\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration and exploitation by adjusting mutation factors and introducing dynamic crossover to improve convergence.", "configspace": "", "generation": 93, "fitness": 0.2870123038471577, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7743065890184853, 0.7258724447614635, 0.769573074842414, 0.7920054338001915, 0.7346084741025225, 0.7787100914178824, 0.7417225344911996, 0.7502792277071715, 0.7292932493931394, 0.4530097567200856, 9.999999999998899e-05, 0.12518122914592822, 0.5461655305798199, 0.5079246147360124, 0.43178779048683513, 0.18460389643845576, 0.4375019774076431, 0.4431058708103732, 0.1693083056311061, 0.12200663062636252, 0.1282831349565, 0.12082157715948327, 0.07257409715467877, 0.09820154348185939, 0.13488045355825562, 0.12150093495736691, 0.13350767536562202, 0.09002908226210349, 0.08975597358060405, 0.09195565323390531, 0.10254832836452876, 0.14387364256021096, 0.1137863101199531, 0.08579245432523863, 0.10827668510033384, 0.09740313000507028, 0.9648499717205756, 0.9319676124063603, 0.9373155988598803, 0.9591505216827758, 0.9390654038192482, 0.9486014657736771, 0.9491432964778247, 0.9433060987625329, 0.9543523093109745, 0.15882433797653706, 0.2802467592139408, 0.38428730428018876, 0.4600456643453954, 0.431441273892592, 0.523478193881955, 0.3518382463405223, 0.4285789714746696, 0.49681061272289306, 0.25013579463931757, 0.27371917784867505, 0.1796049938333687, 0.20829155157184542, 0.272966474058981, 0.8328384539586208, 0.22463772303508955, 0.8249803942867706, 0.232836039923615, 0.4026763779197229, 0.19280645387515638, 0.16253420945863528, 0.43549217743028223, 0.13299775903416522, 0.015927016303125874, 0.38051272627848376, 0.1246090136278526, 0.23566958992344644, 0.18389100599982244, 0.12666674730450866, 0.216191284516555, 0.20503685177629727, 0.13041132971738645, 0.38373672082979415, 0.4061476763561541, 0.201829816538172, 0.2681897330902744, 0.1837388246616235, 9.999999999998899e-05, 9.999999999998899e-05, 0.07040434533990902, 0.013858147767463525, 0.06348971958743366, 0.02736190792637716, 0.11505034269128678, 0.034315680413377625, 0.2695661310502556, 0.13569276210782677, 0.11041919240179066, 0.06860408298445309, 0.09369681575406485, 0.07047425122245587, 0.1812611472577289, 0.1319602574448565, 0.19221581748182548, 0.049141705615254994, 0.10522222551695581, 0.1464302405444018, 0.17730318481717444, 0.13908936797329297, 0.1305694863140754, 0.07754821739790274, 0.09296380247190394, 0.06656335568058658, 0.11724503629237748, 0.02755199992901125, 0.23518889961541445, 0.07558079076875635, 0.09841754344536624, 0.24588270092684317, 0.07884311313377457, 0.09118396822126429, 0.10112311548629149, 0.6108794143430811, 0.511002817730718, 0.5351385747789278, 0.6102304755358099, 0.5364841670996412, 0.5729302353331471, 0.5474925094500702, 0.529171463954369, 0.5972378200797208, 0.0790168144343214, 0.10075940002617245, 0.09782805013751716, 0.11208427259475429, 0.12559981186122027, 0.11309774063309541, 0.0889110659339456, 0.09528061441480074, 0.08382086180547721, 0.13967226439349667, 0.13059932029146326, 0.18455019549963592, 0.16358213828097667, 0.12755201247662296, 0.12740940886875962, 0.16151877765051392, 0.18946043882652663, 0.12939214696710755, 0.3215483233266002, 0.2940452696694078, 0.4399824417734738, 0.3411764616623425, 0.4321518537099893, 0.4235036172842701, 0.3458145745618403, 0.37724796917557946, 0.23327885864099585, 0.15859512763537864, 0.21010972165467579, 0.16045327035242773, 0.2532564109408548, 0.19630307067045705, 0.1754652967234711, 0.2620490332035069, 0.253663373373307, 0.2594624336697978, 0.1971871817187799, 0.16912616952655934, 0.21517606434630066, 0.20556052684253567, 0.19373912909961566, 0.22526954480949923, 0.25873630143539017, 0.18831635049842876, 0.25615323437473936, 0.1909418109212675, 0.1850450374146223, 0.5983096274584079, 0.17301821300760567, 0.20999337990351818, 0.20061989538103364, 0.1873387562547706, 0.19627986351355609, 0.18700528563637608, 0.18563734625715145, 0.1844646862079924, 0.1881100384356531, 0.871841703518214, 0.15179580738502396, 0.1948433395868211, 0.1593842630989375, 0.11638826921633172, 0.8357750456437623, 0.6981541957062322, 0.7465206700135707, 0.776201175199359, 0.2097844185030363, 0.1525124332554766, 0.7610295951898428, 0.6696583567601215, 0.7779702941708051, 0.168611697833136, 0.17187711886563484, 0.17603723584915587, 0.2051792043496854, 0.20349100704605272, 0.19643133920500422, 0.1649596631993283, 0.23565822448455842, 0.1675367906139087, 0.17548344882779743, 0.06775554108005777, 0.10066226525070088, 0.05847796473596789, 0.06605669531970393, 0.05533058729350837, 0.0683898545581737, 0.06764290402183581, 0.06778362016100115, 0.10353822194440931]}, "mutation_prompt": null}
{"id": "6e797637-7392-4896-89ec-c9e8b0086ebd", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.7, 1.2)  # Expanded range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.95 + 0.05 * np.random.rand())  # Slightly increased CR variation\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory * 0.5)  # Memory influence halved\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration and exploitation via adaptive F range and memory-guided mutation for improved convergence.", "configspace": "", "generation": 94, "fitness": 0.12433956502802444, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.26954482711253636, 0.26202220075010596, 0.2619389846195007, 0.19307001127753498, 0.19732258558592852, 0.19522986285122979, 0.2373546598202957, 0.22558209476224445, 0.22066903907132707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07605831169985833, 0.07281757456222981, 0.06207681040865265, 0.07644569646450528, 0.052784387927422904, 0.057843189287980934, 0.04591099945046406, 0.07316444551851964, 0.06409267011365061, 0.04627125283611644, 0.05211367123835875, 0.07295890773731895, 0.08152077050321982, 0.0515090409792045, 0.06532378772519898, 0.05134017944228053, 0.04584660293507148, 0.05326196725983101, 0.0438839613147084, 0.04382329924695261, 0.043466292268315554, 0.04313272997794704, 0.041565651814807425, 0.04349905010252364, 0.04335332140382375, 0.04387367156756594, 0.0439496214587094, 0.13146183346645268, 0.13918474975549766, 0.13345899256938631, 0.09479013913295076, 0.10952311220836541, 0.12175070640063346, 0.1784576921021509, 0.17356429342090995, 0.17486515288751292, 0.21988266243448729, 0.204397662413212, 0.22007288842384187, 0.18565200333487597, 0.16431938617582598, 0.16704981259353613, 0.14806181845220123, 0.1509369462313891, 0.1327262854615674, 0.03857904784234667, 0.04346803910344721, 0.06149771781233648, 0.08325554566511251, 0.060518496781522435, 0.0625795058148384, 0.0927017064776654, 0.07009357443316333, 0.07727572000523708, 0.09358993911399172, 0.11649761616670506, 0.15796265892723516, 0.121394552098127, 0.09276979727384693, 0.1641394390099873, 0.19708904377238812, 0.1167969636853079, 0.1748991051640877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1332851561860945, 0.11231463568399591, 0.10273940262283432, 0.0865673163735673, 0.11391541602490163, 0.0733520372211407, 0.08959757051730832, 0.04303620512451489, 0.09460393211278462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006095660015537185, 9.999999999998899e-05, 0.0011636631921760898, 0.012114423865579371, 0.012490624013329232, 0.024502674869679164, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.28133542753061747, 0.252324410954865, 0.270614990245449, 0.23841171968995367, 0.22651289236042382, 0.23061787225501307, 0.28730078138262494, 0.27983086593977047, 0.26328663375417305, 0.08392331992422974, 0.07576273853028048, 0.07587068252147, 0.06949739404588395, 0.062002741040879106, 0.06518278578003922, 0.0640665267038163, 0.07336299862524753, 0.09219295654878057, 0.13808333651620486, 0.10989005564505516, 0.138727825427031, 0.13720368225327462, 0.13816140883261718, 0.17946479905867163, 0.15834835641230094, 0.14357892040574438, 0.1322076740125212, 0.1862918669283924, 0.19058529083451115, 0.1961376426643181, 0.21510929771509346, 0.2032639305536742, 0.25098228928826405, 0.18485545699569672, 0.16671057499297037, 0.1666940403459436, 0.11894353191107399, 0.13889139954906937, 0.13107996486683482, 0.15371387362483147, 0.16741470886276588, 0.15752380941840782, 0.1252782642474043, 0.12171871152390579, 0.11694518453088443, 0.21849232179186584, 0.230464508903658, 0.23624195300062734, 0.2097403311512236, 0.19566320976471052, 0.2364739210315352, 0.21647338620887313, 0.20648415961492939, 0.1867839249228589, 0.1737035470267141, 0.1648632058442865, 0.17032174209903206, 0.16053691232518374, 0.1697279173046401, 0.16487527236401545, 0.15920155240913103, 0.17273839994211282, 0.16797962880727246, 0.16611052870193377, 0.18042409031160933, 0.16775838994736259, 0.2610173842327279, 0.2381125281492802, 0.26503430176712706, 0.2689784096794511, 0.2970799936224445, 0.3806197995160129, 0.2850927619869297, 0.3175811687870197, 0.2702199300180431, 0.31616195095399846, 0.12577056139207454, 0.3289599533631572, 0.2615127421745671, 0.2459001105174703, 0.28749681365749646, 0.17093776040215836, 0.20549367906456362, 0.18860035130245634, 0.18253833027437527, 0.17644590257912218, 0.17635907223364589, 0.17697644789508027, 0.18983880083708893, 0.17434994447630547, 0.09575236726146452, 0.07569599400444982, 0.0746143495096594, 0.09137043061126515, 0.07309275383220759, 0.08297356592679483, 0.07457510998042127, 0.06844110824258465, 0.07602367354575468]}, "mutation_prompt": null}
{"id": "e4d24ae0-1e30-4c5a-935f-3b356eddc0ce", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "99ebf820-487a-4160-8e9f-cbb33a2765cb", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Enhanced exploration by incorporating self-adaptive mutation and restart strategy for improved diversity.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.791182309338918, 0.7580920368675974, 0.8063156948305104, 0.8140826229018883, 0.7717599170214522, 0.7764869384093025, 0.7943111648971628, 0.7601103137380898, 0.7914057744518557, 0.496293368988148, 0.43661573056781255, 0.45440597533964444, 0.5565156265697844, 0.5591706275474098, 9.999999999998899e-05, 0.07415634445631658, 0.48160362449012517, 0.5303281510207223, 0.11611583600675457, 0.12535541600511535, 0.09962159856566921, 0.11573369401414824, 0.10688480005081236, 0.13416496859805427, 0.1314344939873181, 0.10638769642242496, 0.11335792343475515, 0.12079746336482933, 0.12933465934900779, 0.10105774323473127, 0.10131822099109067, 0.11409313058532966, 0.10581046865689236, 0.11889261325897171, 0.12989614891210655, 0.12592007135903494, 0.9514703576302066, 0.9340657002693523, 0.9404229683064261, 0.9494999362380185, 0.9365132896764582, 0.9264083446372953, 0.9074395162913487, 0.9375230896608342, 0.9342242198196857, 0.4365881025791154, 0.5261107088145756, 0.4571165773659883, 0.39460314609676495, 0.4431303288443089, 0.3513167637052266, 0.5542216604703456, 0.43488061214782314, 0.46597978705178633, 0.3760238557800534, 0.20524528276571374, 0.22136734407790015, 0.7768798968382529, 0.3296001588174954, 0.26631534177755867, 0.21013366349707574, 0.2402783420931801, 0.22807837213341864, 0.24730776730295956, 0.238772000771711, 0.22499818002464766, 0.21245154307904313, 0.11845694389455441, 0.17308711460856663, 0.43475409848584534, 0.1189750617515567, 0.32739994165058106, 0.3297159868018146, 0.21247737937270383, 0.1684172425033772, 0.44095037148577, 0.17734484415801632, 0.18523326946406515, 0.31273667389000614, 0.2286548727969382, 0.11691622502120569, 9.999999999998899e-05, 0.08263623406907539, 0.03217903352974316, 0.08480259090341702, 0.021777872213037508, 0.031177441868237787, 0.07540342987127702, 0.0006387917584447234, 9.999999999998899e-05, 0.14728137493475046, 0.10605543917838134, 0.174000733802821, 0.09820604189536641, 0.19901994224313624, 0.18950815172245594, 0.09691941933038073, 0.1213100256212396, 0.11443797518856191, 0.10416020168389839, 0.12832340417992982, 0.06468180432808435, 0.07848244403652804, 0.13745083516619272, 0.34623114546752265, 0.14034949295628163, 0.09804696820259706, 0.051592819918545696, 0.1715305503241148, 0.25857862923741204, 0.1833929613686961, 0.059079141100252475, 0.22893642246104073, 0.20752040161048502, 0.11855498001982401, 0.1524100155153345, 0.0919913176929893, 0.5821721173451782, 0.5839227958180466, 0.618387350217881, 0.5686971127467567, 0.5253710304390578, 0.5792160175144558, 0.5964167285946282, 0.5950916163611105, 0.5605550189577717, 0.07211829447012075, 0.0974293453586712, 0.14241503264203037, 0.08745613473943536, 0.11284932231589262, 0.06194658924402352, 0.08074850204526918, 0.0735904097505119, 0.11242630497706818, 0.16016375413770312, 0.15588233954371444, 0.1444219409472578, 0.20489196470352422, 0.12100982376026481, 0.17584946294226633, 0.1833217389738685, 0.11617800099824893, 0.13859043133998727, 0.34392871382854906, 0.36440891670630726, 0.4194052263772041, 0.37373615780396685, 0.38204827586541135, 0.3000945068781019, 0.4393417858401457, 0.4446931949143438, 0.2480595720226919, 0.3035609235034019, 0.17914830858713227, 0.25864029320574977, 0.23288326986822672, 0.15156700186882976, 0.1896736741740569, 0.26744975540668625, 0.2814046806463084, 0.1392022517559175, 0.17681370944403973, 0.20574295981392687, 0.23053801202381075, 0.18243987474470014, 0.2218126556635328, 0.16922230119012727, 0.2262196351910305, 0.19709783516492752, 0.18913498964393327, 0.20403238094186604, 0.18773156408192926, 0.19345654552412395, 0.19854374975213418, 0.1977577903739106, 0.18215147004060772, 0.19969780456410013, 0.1898481568147372, 0.1963850442828533, 0.18679322907031282, 0.1870871226459121, 0.1843919986553174, 0.8810710486438822, 0.8517009470529988, 0.8230894359854422, 0.8599448047921385, 0.11629184978565676, 0.8666770038298645, 0.845030950074748, 0.2101820536585639, 0.8371179876417033, 0.8565716165570596, 0.21086513459536682, 0.1554376833959462, 0.7182186440715457, 0.769803063043659, 0.780755461648006, 0.16260881944566064, 0.1782610317726332, 0.17571227735101547, 0.21228260807668742, 0.1684890571224389, 0.170012555377404, 0.1867136391748181, 0.19412789464181446, 0.17890464683718055, 0.07869977779279247, 0.08437316729132505, 0.07594006801046793, 0.06776026903421262, 0.10113047078060478, 0.08684907764474226, 0.11346072731983659, 0.06385318139757457, 0.06265318480280169]}, "mutation_prompt": null}
{"id": "cd7f5284-8997-40ee-9b05-1eae97c22d76", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.2)  # Modified range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.8 + 0.15 * np.random.rand())  # Slightly adjusted CR_adaptive\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + 0.9 * self.memory)  # Enhanced memory influence\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.98  # Slightly modified cooling rate\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Adaptive exploration with an enhanced memory-guided mutation and dynamic population resizing for improved performance.", "configspace": "", "generation": 97, "fitness": 0.15542330621726227, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.3724982995356755, 0.4315714483158274, 0.4741950834859108, 0.29172231256504866, 0.3099868852700962, 0.3221898180169893, 0.39037200249025505, 0.3351895453687129, 0.39916565614386923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06694952492248463, 0.01806348540442837, 0.026318183140370488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07953819671199502, 0.08103149769229401, 0.07084159673906487, 0.09265659885907296, 0.07773341976960346, 0.06810802546257366, 0.09244448798084726, 0.12500305157185743, 0.08041892449316179, 0.08268002935515284, 0.06259137565803008, 0.07631491004710755, 0.06761960242279275, 0.08121180740584244, 0.060131782854562665, 0.06807599416897991, 0.06735415518580701, 0.08350809380301105, 0.09923149034580803, 0.09876686172866811, 0.09898686074958807, 0.09971553550686951, 0.09966353356894286, 0.09881312928220776, 0.09946616550493603, 0.0996078332369118, 0.09928254604333231, 0.20496756998788634, 0.16941730329354976, 0.153196073921682, 0.14324636908417832, 0.11237064546640763, 0.19507621631653338, 0.2262197591222207, 0.20810093966923549, 0.19502704830201112, 0.3655862558095728, 0.33766942625347496, 0.3629442630717763, 0.2427627514870152, 0.23552748780422839, 0.17198739928955142, 0.21624418080841512, 0.22507745717312366, 0.23134484116593113, 0.09882765226582979, 0.1157834957152456, 0.08687454912607206, 0.09438856649353189, 0.12050098739288728, 0.10346993613933186, 0.11816352280970166, 0.14529620204975746, 0.07456299215140483, 0.11575453630560117, 0.20021013991031056, 0.16357816946126857, 0.16905357189419157, 0.14550519394678485, 0.12048126686597205, 0.13737557379687548, 0.17649102604057387, 0.11469057718930709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00523469818377853, 0.05746218074155918, 0.0793048390419202, 0.09782472175189738, 0.05509094179214624, 0.1468113439941373, 0.0702092170979648, 0.14687469740209091, 0.0594084520681778, 0.06728219600031715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026484989222287147, 0.034756395655627825, 0.06012446301688179, 0.04803679770237723, 0.027463675299743584, 0.028095443466024328, 0.04963639648629359, 0.06297928625096683, 0.0740348106708123, 0.38504626048192947, 0.3512551240905867, 0.3214028185563059, 0.3449951453310338, 0.2964740049447635, 0.34767537779800584, 0.34821480940558946, 0.3566890708179743, 0.3465732212829643, 0.11092264789177464, 0.06766535474041302, 0.08349352216223127, 0.081534745154202, 0.10945806109122769, 0.08024681782521625, 0.08399535068907116, 0.07625606707665533, 0.0876032199088258, 0.16226989956055182, 0.13932275253040427, 0.14790924595781108, 0.16656780069979904, 0.18393435970798688, 0.18415274059327114, 0.19292301479484042, 0.16969065579504972, 0.133821502520019, 0.26121564415358123, 0.25231758651547986, 0.2630130388634152, 0.22774222775235853, 0.2484506244351843, 0.26457058155300406, 0.2590892810958374, 0.2825457136294789, 0.20711699804651862, 0.16839637467377921, 0.16970332775788433, 0.17718156955938635, 0.21006658657229504, 0.20641667208904524, 0.18008512087091333, 0.1504822315899722, 0.15669134209318403, 0.18090151511984365, 0.22417605961623643, 0.21940027979032528, 0.19077469334560604, 0.20097474079897248, 0.19657856252189443, 0.2302108359224837, 0.21320213161117718, 0.19197061687468697, 0.20206253721314638, 0.1741619137351711, 0.16553399850282313, 0.18272269143718356, 0.1708595368971062, 0.17655786746590896, 0.18576164225749925, 0.18143906304885993, 0.1686337832597692, 0.18757241892401832, 0.1652061479477679, 0.17760819803462946, 0.5674628501930075, 0.42332949604266545, 0.16440425301690487, 0.4217514558586488, 0.15633961445085187, 0.11533669429704319, 0.28392036940221566, 0.40729896138238986, 0.41572277846791217, 0.29725832292005405, 0.4786297885552755, 0.20174503427759305, 0.305314661956565, 0.24240285846832466, 0.16486279670665904, 0.3272628539492264, 0.17625617657582004, 0.1780625440484871, 0.18761972672453808, 0.18024077736816868, 0.16740263251671583, 0.20050170715777016, 0.17908536637357153, 0.17216139345092574, 0.17734979071595158, 0.08007660937076433, 0.06407475658861694, 0.08031230716729665, 0.07771522200938341, 0.07804241675086288, 0.08951782129891472, 0.0732580916988882, 0.07768305583292912, 0.08133396611364019]}, "mutation_prompt": null}
{"id": "c1501144-b3ed-4186-87fb-9100e01418d7", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            fitness_variance = np.var([func(ind) for ind in self.population[:adaptive_population_size]])  # Calculate fitness variance\n            F_adaptive_range = (0.6, 1.0 + 0.5 * fitness_variance)  # Adjust F range based on fitness variance\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / temperature):\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Restart strategy\n                self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved convergence by dynamically adjusting mutation based on fitness variance and incorporating elitist selection.", "configspace": "", "generation": 98, "fitness": 0.14607714334588393, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.3382094145764065, 0.28282615518807275, 0.28038529179139116, 0.25514646874094016, 0.23521205561812963, 0.26548924655333106, 0.25276412106626744, 0.25477243486791223, 0.33694293308389367, 0.015772710608045193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05909075038990563, 0.10508486934175654, 0.0640474333819755, 0.062490245726360416, 0.06268629234646483, 0.07477252667662393, 0.07298177796189087, 0.07172422196473505, 0.058048193906417356, 0.02760628449782765, 0.05519166234951922, 0.04550989887293477, 0.06911022713137915, 0.04809709413105212, 0.053472422752861126, 0.05436379481751352, 0.04637964550495488, 0.05017624403372556, 0.9580783160151688, 0.946376021956977, 0.9593660263631726, 0.946068870060253, 0.933398732479838, 0.964429797956143, 0.9502652958143487, 0.964783009755752, 0.9676127040240409, 0.10589711641316457, 0.08502159309324198, 0.09425969384912081, 0.10326236428591784, 0.11009498153438313, 0.08768597553749091, 0.08199514802784802, 0.06755396517689494, 0.10475149613201795, 0.14859988650339762, 0.2678071182857835, 0.1640574377163404, 0.17639792520640152, 0.18355416868615926, 0.14136263094429324, 0.10493990479350801, 0.18948284896525613, 0.14327739937567496, 0.050682473283540475, 0.12069962862463268, 0.01065391402561855, 0.0016580930896943347, 0.082749339849426, 0.00715560121184422, 0.04004678317318899, 0.0076138076981513425, 0.039865533823120636, 0.05900095520465043, 0.09853902444589657, 0.08428790877478365, 0.029304576104750235, 0.0057455892340376735, 0.04859756745770649, 0.0036516711777270228, 0.018627103506248743, 0.05582830068744993, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.141858872797195, 0.08744168211870162, 0.059164616798928704, 0.050287689843993344, 0.020351255011153646, 0.003244926392887093, 0.014784826998128664, 0.026724966374323977, 0.04623768382809501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031464626737013335, 0.0001537600014940299, 0.00994924240304551, 0.02819031503975944, 0.010698505463379804, 0.016948028852689645, 9.999999999998899e-05, 9.999999999998899e-05, 0.03876215264811622, 0.20953931115998625, 0.2850677779109624, 0.2234865530297, 0.31131304601774523, 0.25625369991548164, 0.22747808633233058, 0.29644150892560306, 0.3150964464104662, 0.2264970430951584, 0.0700399711453592, 0.0464840879922922, 0.043773532681743, 0.05359951735782631, 0.06722100751921245, 0.047645046207598685, 0.04178735288220137, 0.06499375794062257, 0.06089766310737055, 0.20667248561718277, 0.1329409220805261, 0.13067178308552319, 0.11720395006450002, 0.17581880270474592, 0.15160580123000744, 0.12667750864223581, 0.16409510305170827, 0.10102021122384341, 0.20051392249572486, 0.20271749335981482, 0.21228406135523104, 0.20218932706386905, 0.18202452524066526, 0.2148774033807801, 0.2127475930252556, 0.20966109723033188, 0.1598795487947906, 0.12639221309881266, 0.1401119335346328, 0.16355724022639584, 0.12449904204908457, 0.13473091672292392, 0.12083082341675522, 0.13290486431597037, 0.1484838894739412, 0.12098993112931622, 0.1475109398200113, 0.16143157808605224, 0.16952742540909438, 0.16362268836691563, 0.15450350319131156, 0.1500189140345103, 0.15452839946571095, 0.15078289018362134, 0.17849926695889684, 0.1599940003309097, 0.17621350322106444, 0.1523131452803509, 0.13440177944080955, 0.1296825600538768, 0.13068280394778542, 0.1389047621369831, 0.1427976446466377, 0.13833337674800827, 0.14549327638825238, 0.15502944515890626, 0.1541212786229349, 0.45249013557113993, 0.2064008713530282, 0.12245922208171489, 0.4349040135117108, 0.303382820130477, 0.11985566550280946, 0.28000471669912963, 0.11070641527647618, 0.21191988787557303, 0.16197988135600794, 0.11452185065409248, 0.16970424497519265, 0.15046711262120438, 0.12747323879364425, 0.14286144945420165, 0.1810251623739536, 0.16613204863389985, 0.1754799306912539, 0.19500716780437988, 0.192331102272834, 0.1562967891580742, 0.199472101360613, 0.17676366565680468, 0.18413263413282777, 0.05363577657687146, 0.0669001020330956, 0.07295081957948657, 0.0663947260446901, 0.07302968353758821, 0.07399621521657407, 0.05511450567170251, 0.06866157741163081, 0.05990873850643508]}, "mutation_prompt": null}
{"id": "7d8df5bb-6506-4de2-8d26-89f743d82a29", "solution": "import numpy as np\n\nclass NovelMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.best_solution = None\n        self.best_fitness = float('inf')\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, dim)\n\n    def __call__(self, func):\n        evals = 0\n        temperature = 1.0\n        F = 0.8\n        CR = 0.9\n\n        while evals < self.budget:\n            adaptive_population_size = max(5, int(self.population_size * (1 - evals / self.budget)))\n            F_adaptive_range = (0.6, 1.0)  # New range for F_adaptive\n\n            for i in range(adaptive_population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = self.population[indices]\n                F_adaptive = np.random.uniform(*F_adaptive_range)  # Self-adaptive mutation\n                mutant = np.clip(x1 + F_adaptive * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                CR_adaptive = CR * (0.9 + 0.1 * np.random.rand())\n                cross_points = np.random.rand(self.dim) < CR_adaptive\n                trial = np.where(cross_points, mutant, self.population[i])\n\n                guided_mutation = 0.5 * (trial + self.memory)\n                trial = np.clip(guided_mutation, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evals += 1\n                if evals >= self.budget:\n                    break\n\n                if trial_fitness < self.best_fitness or np.random.rand() < np.exp((self.best_fitness - trial_fitness) / (temperature * 0.5)):  # Adaptive selection pressure\n                    self.population[i] = trial\n                    if trial_fitness < self.best_fitness:\n                        self.best_fitness = trial_fitness\n                        self.best_solution = trial\n                        self.memory = trial\n\n            if evals % (self.budget * 0.1) == 0:  # Adapted restart strategy\n                self.population = np.random.uniform(self.lower_bound - 1.0, self.upper_bound + 1.0, (self.population_size, self.dim))  # Expanded search space\n            \n            self.population[np.random.randint(self.population_size)] = self.best_solution\n            temperature *= 0.99\n\n        return self.best_solution", "name": "NovelMetaheuristic", "description": "Improved convergence by incorporating adaptive selection pressure and diversified restart strategy.", "configspace": "", "generation": 99, "fitness": 0.2938932852671044, "feedback": "The algorithm NovelMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "688fc13a-7b37-490b-966b-9c508e4378c3", "metadata": {"aucs": [0.7483264917118837, 0.7313789536939967, 0.7790582853363923, 0.7781643158728848, 0.7289179653734097, 0.791394245435775, 0.7685989536259338, 0.7912824988736081, 0.7737876236377291, 0.5253895649479288, 0.4379688241988794, 0.45919590729992377, 0.5074676412335256, 0.5646732671859297, 0.015185127313237845, 0.0741526090018062, 0.467483377033279, 0.5456121936876628, 0.11605406283666564, 0.12536397570391744, 0.10918511261465302, 0.10001946980522458, 0.09997635619510625, 0.13335219412802435, 0.11821952580029882, 0.10529140017933569, 0.11623928160239771, 0.11290326068580125, 0.12817003826380713, 0.10867099128309743, 0.11591186082517546, 0.11381080458299586, 0.10408148725742938, 0.11876759044205787, 0.12972409441228538, 0.12567793331738264, 0.9460657230994396, 0.9223354297998015, 0.9376802896898958, 0.9465937894515973, 0.932484319232803, 0.9238705376996049, 0.933711250549825, 0.9404330470703799, 0.9346031195086418, 0.43144047628599, 0.26796394238569854, 0.454799531476648, 0.42840037583567736, 0.4972709332106403, 0.3362777926927576, 0.4858083135800313, 0.4781458670326857, 0.24704313267362787, 0.22391170159178542, 0.32750097734379846, 0.2907341714093902, 0.3215078011040511, 0.27301693663501414, 0.16852337194992872, 0.21714321785220847, 0.23983387342893825, 0.22867521702936622, 0.30952442218782206, 0.2585666127511118, 0.205993733040716, 0.22964872402986125, 0.12363413436449266, 0.16984537822700896, 0.41442823138229934, 0.11848804769044052, 0.21088169017148817, 0.2662072586148625, 0.21791466620163258, 0.1567657186652779, 0.39250849061134485, 0.15913986353142606, 0.1851840320516841, 0.28100312851217457, 0.18177272774995779, 0.11688511511320576, 0.0070683936224124055, 0.05652524775095913, 0.043456632166712694, 0.06905066894856426, 0.016795848017846948, 0.03166139367072407, 0.07541028172952324, 0.017807807377643092, 9.999999999998899e-05, 0.13578457327787496, 0.10169468566455087, 0.2282010038372838, 0.11633312797282891, 0.16797467183375614, 0.19754634408773897, 0.08223836911237181, 0.12593158891560852, 0.11445096881032935, 0.10417342746458236, 0.1268650224474286, 0.06467386377053752, 0.07843723270546321, 0.13726938619529594, 0.32604796109849354, 0.13944321221545364, 0.09825311391250291, 0.05202679385016218, 0.16710572559250836, 0.17524558603192308, 0.20319886902041218, 0.05651114213296693, 0.23883121393994156, 0.1999109606077244, 0.1432929543741831, 0.15511261927576214, 0.0900381810798182, 0.5452862446969837, 0.5348942825291052, 0.5557418714992215, 0.5541199451916448, 0.4998459441334704, 0.549592409104784, 0.5570605404226863, 0.4799046776122353, 0.5400908134772167, 0.07456308507560483, 0.09759480896425754, 0.1117758702132694, 0.08379130384437672, 0.11278423673261351, 0.06678510351332878, 0.08074472735556337, 0.0735904097505119, 0.07727001848722526, 0.16015288061686295, 0.1429140707938441, 0.14330909531887515, 0.20489196470352422, 0.12555514979033744, 0.17584573146182791, 0.2340651033610368, 0.11617800099824893, 0.13848198844769355, 0.28420964360412904, 0.41005548142665893, 0.36713877835261033, 0.2974237772826597, 0.3666757003744203, 0.44618678798355116, 0.27124535820671913, 0.28853542726182135, 0.2520910274970597, 0.17905329363954137, 0.19857155183710673, 0.2503716704871416, 0.26338755637703903, 0.15478778067618748, 0.22452778184531363, 0.2096808830200877, 0.2808479124526222, 0.16954224355675906, 0.20568693169032992, 0.180958945296118, 0.2820426381062322, 0.18154448448364413, 0.20279380622229815, 0.21108714383002092, 0.19279664696548582, 0.19709783516492752, 0.16463611511721188, 0.20585597323068627, 0.20187687658637088, 0.18298499989418027, 0.181922503100712, 0.1952867921778787, 0.18213698690681368, 0.1977811154982293, 0.17360108674501584, 0.6547676008531611, 0.1869062551356684, 0.18717446134434634, 0.18406970179421178, 0.893320164267521, 0.8865774690004702, 0.8067614942833067, 0.8666186873398114, 0.11635673948620584, 0.8555783660731162, 0.8282689290597913, 0.20972471041799212, 0.6906977171428292, 0.8325788091411042, 0.2097883937288152, 0.1554720989864109, 0.7308500557252864, 0.719744614212671, 0.7605058067017632, 0.1720682293517648, 0.17710493890264445, 0.17365790535302716, 0.17132479561110836, 0.18922890537810877, 0.20906433394364599, 0.18671286178872892, 0.19505002984845132, 0.17828690673285275, 0.07869977779279247, 0.08817502223006068, 0.0758150889003113, 0.06273711312535524, 0.06585473382903162, 0.08609915559440018, 0.13275487323260982, 0.06446637180245307, 0.058739412160429105]}, "mutation_prompt": null}
