{"id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 0, "fitness": 0.2233014000342305, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "55a6fd28-3589-4a55-a826-adae5e15708d", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "82a53b90-cbeb-4a39-8805-43b3a800ffc6", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "e02ac52d-beb6-45a7-9d6a-7e1cf706c5ba", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        adaptive_step_size = 0.1\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    adaptive_step_size = max(0.01, adaptive_step_size * 0.9)  # Decrease step size\n\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, adaptive_step_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n                        adaptive_step_size = max(0.01, adaptive_step_size * 0.9)  # Decrease step size\n                    else:\n                        adaptive_step_size = min(0.2, adaptive_step_size * 1.1)  # Increase step size\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm combines Differential Evolution with Adaptive Step Size Local Search to dynamically balance exploration and exploitation for improved convergence.", "configspace": "", "generation": 3, "fitness": 0.20312728090815588, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.4399964613210888, 0.41916372345384845, 0.3909257080256927, 0.47979668772127215, 0.446491993103018, 0.44645855751875274, 0.4220258262368628, 0.4260974839114011, 0.4324004219499802, 0.15443493989409196, 0.16839630915612247, 0.19192558669057846, 0.16124096708929048, 0.1629338003865165, 0.16878724372234521, 0.1602872274586742, 0.14981295083530788, 0.16640933420794612, 0.08409343828508531, 0.09230442753964674, 0.0872557694095738, 0.09160850712477475, 0.09338708972777254, 0.09413621067124245, 0.09830698115915781, 0.08822759546901993, 0.08781847605600523, 0.07380386904764324, 0.07996749312689355, 0.08135243237564771, 0.08200660721527764, 0.07430499071345786, 0.08771071764608496, 0.07072920777380698, 0.08096310512883775, 0.07881338473380606, 0.8600663344562114, 0.9508199872142393, 0.7665803645754873, 0.848093617635217, 0.9159077021598875, 0.9217484152849302, 0.9152039498162023, 0.8782931086228671, 0.9295735481630608, 0.20247013958087723, 0.1724184817166342, 0.18459000915894597, 0.1676619278625895, 0.18099135636840102, 0.18616760028527712, 0.17637819075522365, 0.18786164470304967, 0.1847505189596147, 0.2692248550848132, 0.40787774790567755, 0.2881727365324409, 0.3459077192255049, 0.27971827281707806, 0.31914501402356554, 0.2649783914272603, 0.30308248294916906, 0.3308818747753407, 0.10662643942036265, 0.106617126399558, 0.09955603293639492, 0.11212113255316014, 0.11901477101692615, 0.13801028338471022, 0.11548820208085508, 0.12611827860667724, 0.12612246647772496, 0.10777715760186746, 0.1262942755622818, 0.09956503937121142, 0.11177078798337592, 0.12926232151839034, 0.10953336507738809, 0.10647243455418898, 0.10280974913029695, 0.11086108190964639, 0.03289063260753178, 0.04317718734170628, 0.04503863008189524, 0.034370749580559634, 0.042997946589556024, 0.04362809336555962, 0.03318731839986466, 0.053674885281954854, 0.028378089468309553, 0.1644431657249985, 0.1540920707741954, 0.19528080449651375, 0.15028480707307312, 0.13682142038136247, 0.18757918122360084, 0.15570889354516182, 0.1914907023222302, 0.19474978997680525, 0.000785217895409529, 9.999999999998899e-05, 0.0017110521154051206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08236108271312026, 0.07490868471349021, 0.08865265197954486, 0.08640415399245338, 0.09594741048254984, 0.08288470154831362, 0.11100148064393434, 0.09354432279028657, 0.10357423688867562, 0.36757826228918933, 0.3695889930294093, 0.3544778188512302, 0.36596015604774546, 0.35660851236026525, 0.3656730504480059, 0.36925247651420434, 0.34651805481236475, 0.3711114606531869, 0.08075155887429297, 0.07726047593830376, 0.09519440548413405, 0.07700882550345645, 0.09615748737264307, 0.10026385052162456, 0.07797614321442325, 0.07966084194430545, 0.08443478808352356, 0.22608324742423136, 0.18609654092119843, 0.19539178539591417, 0.1809615511194902, 0.16018190029920165, 0.17241748452978845, 0.20329564240945952, 0.20518120542923424, 0.1916151796765022, 0.2058490084533674, 0.23210134887346512, 0.23148761339682866, 0.21962586503573855, 0.22305641776113494, 0.2240024407461345, 0.2491414339484972, 0.2583341768455647, 0.22770191953269037, 0.18488335803684353, 0.17429726168711746, 0.18404874374975666, 0.1648227635422549, 0.17306653442370368, 0.16949028208612105, 0.1713438452677032, 0.18475545938172677, 0.1773109389708718, 0.19421535682240032, 0.1802304954372379, 0.1759873781580522, 0.1869451002194502, 0.17102592696181906, 0.19270861485454527, 0.18780014040740167, 0.18754578775335418, 0.17649389648338965, 0.170990106726028, 0.18000434593154968, 0.17541954365677248, 0.1870715771249747, 0.17848002775652416, 0.1780965750612511, 0.17569382131003497, 0.19477935641830846, 0.17725762584779714, 0.372400312905246, 0.3921992764052695, 0.24673473842042726, 0.3093311114017997, 0.1640480406845285, 0.2877537531570634, 0.23445764861305785, 0.2712065592260706, 0.29449231290915745, 0.28256616164556503, 0.19390568751131665, 0.19987528867780924, 0.23493446974510923, 0.3226313976623879, 0.3077817759355256, 0.20601500724164357, 0.18853214066015067, 0.1920642845201903, 0.19678675428275405, 0.18406643690006907, 0.19557108566127512, 0.20623055053954564, 0.17925124918309177, 0.20262842585979202, 0.20637629365742716, 0.17802976206332755, 0.19351672865042369, 0.07359090911493349, 0.07870982338479626, 0.0677913917218459, 0.06985957756505445, 0.0669593406606609, 0.06643663579387216, 0.06744537485255986, 0.06533862074268704, 0.07597513285832469]}, "mutation_prompt": null}
{"id": "e1ec6ad2-411d-4b74-a166-191255db4261", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "f5b23707-bbbd-4b26-ad05-d1b934fbfa22", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "886df0d6-45f8-4be0-87e2-52a5e112a973", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "7143a3a1-ae42-47be-98f0-d5519a8c508e", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "620b2108-7930-4d6d-825f-7841f9a9933d", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "0ae93fd0-f2db-44de-828a-1d8f02d6bce9", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "d2601688-5016-4faa-a16a-9607796dac3f", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            # Adaptive Differential Evolution parameters\n            F = np.random.uniform(0.5, 0.9)\n            CR = np.random.uniform(0.7, 1.0)\n            \n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                \n                # Select mutation strategy ensemble\n                if np.random.rand() < 0.5:\n                    mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                else:\n                    mutant = np.clip(a + F * (a - b), self.lower_bound, self.upper_bound)\n                    \n                trial = np.array([mutant[j] if np.random.rand() < CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "Integrates adaptive parameter control and ensemble of mutation strategies to improve exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.21416540634770348, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.4677091099626799, 0.43922042699395936, 0.4760639484297109, 0.46914910116715913, 0.48673384166688116, 0.48311398800584715, 0.503141821733942, 0.465887663590843, 0.48375131391567916, 0.16396172082730076, 0.1502028255112764, 0.14728685384809526, 0.1441489443457571, 0.15290174217563435, 0.17540401848590448, 0.15365632495957637, 0.17750121454427825, 0.15885180790175324, 0.1309557952790521, 0.11008227577788476, 0.09797605826433287, 0.1022713918636462, 0.09218789811485617, 0.0976202842774272, 0.09541722625622462, 0.09252411632678614, 0.08805751892929126, 0.08408772081701643, 0.08511760158990744, 0.08090628610303063, 0.08219133691078806, 0.09625853975163123, 0.08303905299421332, 0.0885694038462791, 0.09285146320583082, 0.08296571968141397, 0.9593060311714092, 0.9757402917304849, 0.9481857663286128, 0.9399954360918411, 0.9283601849409726, 0.9563788476755978, 0.9722821611063794, 0.9310973972536667, 0.9521042284852896, 0.2334561428069275, 0.21960259995127962, 0.2056320439707615, 0.23274775407858628, 0.19637348558542755, 0.2045754308158111, 0.20693982285781298, 0.23844031234553764, 0.19082222612295696, 0.2780355140110724, 0.26559092885592106, 0.2719218957294838, 0.32399961467988203, 0.3923266338063647, 0.46437363104209317, 0.345786410778248, 0.3424083408644131, 0.27673890257804923, 0.13337321918463896, 0.11879829666066455, 0.11913691007972482, 0.1311427963784223, 0.11939217851772232, 0.13874000626184102, 0.15751280122452094, 0.14042588012098445, 0.14458025837146138, 0.14879061299523177, 0.10661698236442518, 0.16839111431724774, 0.15686257816771543, 0.15134162539560403, 0.14491136690692497, 0.16840799089128267, 0.14963166750911627, 0.13931391083450162, 0.06656303141071263, 0.04098437184938064, 0.04679593832033169, 0.0516822587033785, 0.0308688028052575, 0.04665707479349601, 0.03933573903025922, 0.0408059800987145, 0.03404259572148893, 0.13557189626437682, 0.14777721774766472, 0.18613150573680637, 0.15573635748158288, 0.1298581643113741, 0.15400463401924824, 0.18258189235560784, 0.12857069354816253, 0.1865921261892749, 0.003344063493013527, 0.000362924524553776, 0.0003066645144965685, 0.003668263935505789, 9.999999999998899e-05, 0.017602316115204686, 0.0059076673038400696, 0.013073534372323281, 0.0242801059918738, 0.10446309131036347, 0.08715019730661588, 0.09950650490360402, 0.10885905018348019, 0.0966139780373596, 0.11991762546733298, 0.09420560500100217, 0.11918984172877367, 0.10982631598574333, 0.3705739756225467, 0.3619367721502653, 0.39280131368660254, 0.37352515184615187, 0.39967401629966703, 0.3632201247660871, 0.378985659465495, 0.35230884489580894, 0.36664838057191595, 0.09972381510780015, 0.09510787256319075, 0.10292472725534352, 0.09758792000641825, 0.08126696590975535, 0.09351102962663116, 0.08981990729470324, 0.08744710133421374, 0.09852076250232311, 0.21474712881237124, 0.2276310359903816, 0.20273258299854313, 0.26180239242994174, 0.2567056062585693, 0.20188201510506554, 0.17577191128491831, 0.16646327439926012, 0.21052967619334917, 0.22089351671862867, 0.22103775505356826, 0.22045847172289945, 0.22253833292954717, 0.22944324515125458, 0.24035484346588476, 0.23960236865470508, 0.26032167114803795, 0.21695676054823987, 0.17976609193749515, 0.1601731968583957, 0.1589853559241654, 0.15455323452244485, 0.165378492341695, 0.15358093990046962, 0.21004155517339818, 0.2035095125013513, 0.16611875705461676, 0.1776610607658673, 0.21417980378575752, 0.18192329820484987, 0.22494198238077323, 0.17818705810979085, 0.1875311829870865, 0.2081607596452707, 0.1867914328793303, 0.1809728138483241, 0.1699725675150554, 0.18728422032014214, 0.19308665082523757, 0.19098005493872416, 0.17815940552850718, 0.18924434522936984, 0.17845342795392827, 0.1840163059361123, 0.17993997092997505, 0.1870257777480283, 0.18418825681774342, 0.4750211971485091, 0.18056354138245223, 0.19053818756466911, 0.37267914662456236, 0.1740783917439228, 0.3816186496191585, 0.33898987788050794, 0.4089450270315197, 0.1930668409533457, 0.2267858728749389, 0.2113360420587943, 0.20088009742435886, 0.2803971813622548, 0.19553808099623438, 0.20296983301067661, 0.20328350434499398, 0.1902615738047605, 0.18438509398672953, 0.18082040888554618, 0.18334628103342, 0.19447354972725273, 0.19341122439041247, 0.18851671731889685, 0.2190592014416579, 0.1941818899921992, 0.0702939483369982, 0.07170872917782967, 0.07315037386075929, 0.06391933910432201, 0.07132420663697181, 0.06319526779727203, 0.0625763253085665, 0.05930844097930643, 0.06354266450114887]}, "mutation_prompt": null}
{"id": "991c3996-5018-4dbd-8380-28764f264a18", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Hill Climbing with Perturbation\n                if evals < self.budget:\n                    local_trial = pop[i] + np.random.normal(0, 0.1, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm explores the search space using a hybrid approach combining Differential Evolution and Local Search to exploit global and local optima efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.47174922731829916, 0.4884955927325706, 0.4762910085033276, 0.4636159364614959, 0.5078338502146216, 0.500974067245836, 0.5043225647076746, 0.4830900450448433, 0.513617011963116, 0.1681775941852618, 0.2047915535999748, 0.17270563009572504, 0.18157800557212977, 0.18650307042405545, 0.1934497869218319, 0.1953106604120619, 0.20168979838854895, 0.17031118819716573, 0.10604582255801165, 0.11072313619028651, 0.10108285339814427, 0.11037662689688132, 0.101177327065614, 0.09389195891219149, 0.10359618232473145, 0.10189779090556661, 0.10922358144141997, 0.08248069636548339, 0.08422953001948097, 0.07402904186161485, 0.102314374940766, 0.08828937931459335, 0.08051506752074766, 0.1058920628799358, 0.0810619583854093, 0.08082919729560867, 0.8702054115186012, 0.9510753674963075, 0.9036719897992966, 0.8404678623785318, 0.9156216307396844, 0.8986488553942313, 0.9405358634058048, 0.848685850209792, 0.9566520359944304, 0.21184973052389833, 0.20065704218206193, 0.2213270332263002, 0.20966439351651722, 0.2152316571220022, 0.21428952274877333, 0.21987804773162145, 0.22624297707200192, 0.24656224965980678, 0.4617932198206117, 0.2815507462225971, 0.28377618880751665, 0.3304743090547799, 0.3817931399230232, 0.2887315261633464, 0.2961278218985116, 0.2692324876728478, 0.2937854237154167, 0.16562980256856186, 0.12427128457149361, 0.1250723687836528, 0.16719526917608074, 0.15526874222195441, 0.13077375576470818, 0.16330195096263056, 0.14380717959480005, 0.1462023564227265, 0.20557514885374428, 0.19328641452399253, 0.17993888237923072, 0.14067297417846913, 0.14622322949239075, 0.1484803914198055, 0.14184453422614152, 0.13819953960654852, 0.14989929251771428, 0.07332545166967996, 0.06941040890290773, 0.07217597628383121, 0.07379720675903567, 0.05774053575967497, 0.049361953504927225, 0.05184942315809671, 0.0724361942905416, 0.07349578535512846, 0.1906504682749406, 0.16823252505149155, 0.1603456967069502, 0.16745341270036407, 0.17985759116533495, 0.1493060659410821, 0.1946367226079989, 0.2084805382923437, 0.18184661502988453, 0.00047430887929766907, 0.002387549029140401, 9.999999999998899e-05, 0.0039812222958819365, 0.01446288521985084, 0.0058597545923019245, 0.017214765278899757, 0.01248765698247789, 0.0071237698187436305, 0.11351307202352123, 0.11775503087736272, 0.11570319641516746, 0.11300146453913129, 0.12366839868278423, 0.11600136528032368, 0.1191906431169436, 0.11959735168181307, 0.11366283447433667, 0.38298873679226175, 0.4053173750953576, 0.4003479610961421, 0.4064516149074263, 0.4062364416218984, 0.38761032565416076, 0.41076695529993557, 0.4044645960910541, 0.37508567853689834, 0.10599321101518311, 0.10509920957557439, 0.09916918914825834, 0.09715612224526482, 0.08724435304084288, 0.09111502702727581, 0.09357667984030282, 0.09552985184722951, 0.10483137145281585, 0.18469469620317558, 0.1838789721462445, 0.26039122293939265, 0.1912362247768956, 0.20779464478605236, 0.1715216031923008, 0.20182816320997587, 0.18825524260300686, 0.1784051720712505, 0.21859881235971712, 0.2240895386750934, 0.20855185215596683, 0.21060613845668885, 0.2069757255564315, 0.22422641955633404, 0.2465436330754126, 0.24955399428572833, 0.23432383105028443, 0.16130783327908216, 0.17306596495804605, 0.15405675498768345, 0.16371107041491673, 0.17438499878111746, 0.16762139306773116, 0.1539587840163944, 0.2011050465512081, 0.1840109858310499, 0.19182357254913163, 0.1809526352316786, 0.1788207486670612, 0.17836393773651327, 0.20101355677237243, 0.1995319675970081, 0.17387896959067495, 0.1862540833933074, 0.18076631148586597, 0.18698649898032005, 0.19704521507489337, 0.18129797705602357, 0.18909459854800015, 0.1837022764565699, 0.20008790742285287, 0.17701198314088817, 0.18761078795833208, 0.18745504776625, 0.3452553330507506, 0.48500809282807456, 0.40952628075699127, 0.39611761625303754, 0.1855864746072653, 0.2711844459510241, 0.3148131091946884, 0.29363968794462103, 0.27142223409958965, 0.3855940272168795, 0.27021573124711085, 0.3503112552085573, 0.30078836082315163, 0.4223391824596814, 0.333515432038038, 0.20727329218634172, 0.422200219604838, 0.20270951190612563, 0.18010715938093724, 0.1837632001701459, 0.18360101173698873, 0.2157306916207684, 0.20089213439951104, 0.19957824157160053, 0.17096947000750407, 0.20468942220603548, 0.18581575461374955, 0.07140378109780088, 0.06939006085234689, 0.074887211203994, 0.06837222578696367, 0.07654146860949751, 0.06340956799128528, 0.07197473439681668, 0.06836734490039975, 0.07380062259768405]}, "mutation_prompt": null}
{"id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 12, "fitness": 0.2370661698467369, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.18.", "error": "", "parent_id": "3bf8dc59-4014-48b9-8d85-d17c2b4e52a8", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "16565649-4a65-4aec-9e7b-bf87a684d330", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "488db56b-e6b1-4465-a974-4a4dd6d40c2d", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "47c05de3-2e37-421e-a5f2-752620c731c3", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "7e26b00c-58e5-4827-b246-6b55f9dc948b", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def levy_flight(self, size):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        return u / np.abs(v) ** (1 / beta)\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c) + self.levy_flight(self.dim), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim) * (np.random.rand(self.dim) < 0.5)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm refines exploration by introducing Levy flight strategy alongside adaptive mutation and improves exploitation using a multi-scale local search mechanism.", "configspace": "", "generation": 16, "fitness": 0.1596496861665727, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.17.", "error": "", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.2818759732657926, 0.2538577391543845, 0.2717543652414397, 0.2745897748313758, 0.309892256944576, 0.31237749309189045, 0.3041809609758035, 0.26541042788974434, 0.3184351738016037, 0.003055505995724017, 0.03248271089850563, 0.0010706623840398555, 9.999999999998899e-05, 0.01544708068030809, 0.0008776068831463091, 0.0027781328606907296, 0.00016668096790306564, 0.0253566325200274, 0.10323414039119794, 0.11018201134494288, 0.10178764608626256, 0.1146971747801343, 0.09317883066913801, 0.11797886520131651, 0.09190849046491134, 0.09691134639449539, 0.11233321774503491, 0.0783845199839871, 0.06476618027019265, 0.07570158362233337, 0.08547434958034772, 0.07368729028988596, 0.0763128933610906, 0.06906185335310855, 0.07220482782475413, 0.06810189125488308, 0.8904078273556972, 0.9450572369409326, 0.9127355751144448, 0.899683936729638, 0.9249539386198091, 0.9252296499664732, 0.878303955353052, 0.8781620259985121, 0.9231646491558039, 0.1192340053247608, 0.11601489452474201, 0.10625125217325382, 0.12137917067508419, 0.09344027510329656, 0.11095477051968972, 0.116946130156244, 0.14275557985316978, 0.11230522069817761, 0.14656429730576837, 0.19596807985154552, 0.1693463396040219, 0.16589215448374506, 0.19544814050562132, 0.1431291317299196, 0.17837433654861867, 0.1640262596015395, 0.16654453529465063, 0.04082144470916338, 0.12359165482346146, 0.0573530642082829, 0.08075777299388243, 0.06737468341810271, 0.09500970500486383, 0.12993364154634512, 0.04170088920090387, 0.09012117731503366, 0.08131661453745853, 0.09006289703206183, 0.09193711078652445, 0.06040914892609672, 0.08823265301826888, 0.11370175585674136, 0.033234398422079314, 0.044329465735008844, 0.09933485651401464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0710803964417559, 0.07370712593899209, 0.0965421197890457, 0.06407508788962857, 0.09266768987614271, 0.06839663113902283, 0.081961713899662, 0.056356419339561925, 0.07649927224572894, 9.999999999998899e-05, 0.0017680349028407205, 0.003915800985477835, 0.002991996884790571, 9.999999999998899e-05, 0.006507178462453189, 9.999999999998899e-05, 0.00010791796661102637, 0.0014326526912736837, 0.027978959559189942, 0.055442118841814936, 0.03646316993045873, 0.041999559132150366, 0.033163447679581126, 0.05751462562953569, 0.04586449721291952, 0.0463301509278643, 0.03134069061646949, 0.2598437224843705, 0.2357851993665797, 0.2418612577009841, 0.3317686687256183, 0.2796925943240668, 0.2452198408227516, 0.27486428228017756, 0.25893306149613304, 0.2749296450364843, 0.11604624654697149, 0.11682745147498386, 0.0948160863504145, 0.10995189670989514, 0.07795984940702327, 0.0820411573284715, 0.08379881947140422, 0.10131068603627336, 0.0814350354673854, 0.1833981038873771, 0.1614184286227961, 0.21440764470111695, 0.19108502960269547, 0.16172051666863552, 0.17991102060677056, 0.18814840271953226, 0.12477013994518116, 0.16792991528969248, 0.20142937400792038, 0.18521800899047614, 0.1923273763105925, 0.1897134117909154, 0.17596670025104977, 0.18665377406714234, 0.20497490791620798, 0.2145523642953403, 0.20345272931716374, 0.13062975748273709, 0.11594003108693429, 0.1465975152386727, 0.12299724082815844, 0.11993261523981824, 0.13454109961033411, 0.1335040910844547, 0.16291190026278113, 0.14213595287169156, 0.2078657352746338, 0.1848646337929567, 0.18987335433441654, 0.1993984548709653, 0.18237473520543312, 0.19593787249819627, 0.1864340173358222, 0.18209865721047247, 0.19322946193961021, 0.18201602063913747, 0.17528876122296788, 0.18404551607605868, 0.15727900824921404, 0.20347862916127546, 0.16355655333195396, 0.17303699384271876, 0.17127949655835306, 0.15514838547051335, 0.1886068287120043, 0.23209190373015431, 0.16695654537206195, 0.15962467880650877, 0.17967641392675227, 0.1392839558735104, 0.15912081740235606, 0.14460248540124299, 0.1699256140514046, 0.2047019140774653, 0.2392055872007509, 0.25148671766563413, 0.15647211380463855, 0.17048055204826762, 0.1520513767679197, 0.17555407469305484, 0.19903564700129817, 0.2313991773484182, 0.20787147708836018, 0.20402199688143685, 0.20770701448852757, 0.21170844636832087, 0.20367821186940216, 0.20588646076652717, 0.19870200930556792, 0.21716185947796018, 0.20241624751099907, 0.07424407927680843, 0.07468740520958905, 0.08082601837537129, 0.07599256430709278, 0.07318816910572146, 0.07006407505950096, 0.07448982636659707, 0.07821033793699395, 0.08621991573615562]}, "mutation_prompt": null}
{"id": "028137fd-ed85-45bd-aa8b-cc725a1a7b3c", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "6169949d-1d36-462a-8c89-65e7ef9cb047", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "44a55d63-a862-496b-9911-9f531c0d543e", "solution": "import numpy as np\n\nclass HybridOptimizationImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        best_idx = np.argmin(fitness)  # Track the index of the best solution\n        best_solution = pop[best_idx].copy()  # Track the best solution\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            # Elitism: Retain the best solution\n            current_best_idx = np.argmin(fitness)\n            if fitness[current_best_idx] < fitness[best_idx]:\n                best_solution = pop[current_best_idx].copy()\n                best_idx = current_best_idx\n            \n            if evals >= self.budget:\n                break\n        \n        return best_solution, fitness[best_idx]", "name": "HybridOptimizationImproved", "description": "The algorithm incorporates an elitism strategy to retain the best solution in each generation and introduces a self-adaptive differential weight for enhanced global exploration.", "configspace": "", "generation": 19, "fitness": 0.2370661698467369, "feedback": "The algorithm HybridOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.18.", "error": "", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "1e781375-8859-4d4f-ab8a-8ab7231f0b63", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "9f60dd9f-d0ef-41fa-a75b-6b33ea71dc9f", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive mutation\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                # Local search: Adaptive Random Search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    local_trial = pop[i] + np.random.uniform(-perturbation_size, perturbation_size, self.dim)\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm enhances exploitation by replacing simple Hill Climbing with Adaptive Random Search for local refinement and increases exploration using an adaptive mutation strategy.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.4933663760187873, 0.52867067560686, 0.5250880893460601, 0.5454540101783535, 0.5362602475040616, 0.5231947419203591, 0.5627497655109213, 0.5452616969355234, 0.5240357465822215, 0.23517010009167982, 0.2239252555445358, 0.1922650409875235, 0.2250018683233791, 0.19588615291815492, 0.23151983206396376, 0.22840265155182493, 0.23158992006915957, 0.24383806541782338, 0.11417325128292088, 0.1229181605960532, 0.11800511815280279, 0.11341694626506027, 0.118386537805519, 0.16446979723734423, 0.15755181322546885, 0.1319698725582379, 0.12182963760135812, 0.09984609415162504, 0.09343614963823588, 0.1122070829747418, 0.10283464740045634, 0.11620520868321749, 0.10108448864389452, 0.10818491014533416, 0.08390059085760027, 0.0955133929146943, 0.8269397999983356, 0.9123146885188519, 0.89742930737685, 0.8563742069485447, 0.9184647001478295, 0.8183892427069813, 0.8770309202064447, 0.8907033243239226, 0.8626202019746217, 0.2016608552999808, 0.20582999442001682, 0.18904525921655635, 0.2383191083780205, 0.20020406236667931, 0.19913610514006885, 0.2556758198681275, 0.22583241019823663, 0.2619533910787699, 0.3827375886656865, 0.37586531653999866, 0.255248492952038, 0.5049152546070425, 0.6141375436279854, 0.4584637450977237, 0.3750089965970619, 0.3939212898710276, 0.3844797403749529, 0.1570158669332532, 0.20267060178906438, 0.18318066690255996, 0.20940652228403744, 0.2001933602549436, 0.18390992467520806, 0.19744950392279847, 0.19975566642042353, 0.18823354783888435, 0.20193615591897618, 0.2190226246579926, 0.14230686360503808, 0.1644757538155085, 0.15281929508162462, 0.19471395493034127, 0.16112953341078917, 0.1748058996702655, 0.18090799599724527, 0.08425400327314381, 0.11694508696248018, 0.11304893527864845, 0.10473078216772447, 0.12810338202367022, 0.09681260135215375, 0.08540971917522, 0.09087433138161738, 0.09360283718238915, 0.24137467452590988, 0.2112743973330926, 0.22853923908736862, 0.21067166645925162, 0.1805089569645414, 0.19638758966903047, 0.2474282733527723, 0.2607488559263854, 0.23078050204346034, 0.03456563938176038, 0.039958109813934994, 0.04319780629421388, 0.03007896181505254, 0.0346639800011046, 0.049929662106445005, 0.027785260174492232, 0.03522980320751301, 0.03459120428721485, 0.127686375643694, 0.15145075715749878, 0.1303325104584514, 0.13599489511706653, 0.1502297005807579, 0.14680427765476967, 0.1373461627434528, 0.15259514131832952, 0.13223788820211702, 0.40554299920024983, 0.43515864084629396, 0.4354560413657209, 0.43148290938524936, 0.42965990766505024, 0.4429925749189111, 0.43641398146901367, 0.41087938509100796, 0.43286217146534134, 0.13120663171592428, 0.1326776348135651, 0.12169147699478122, 0.11932672118440968, 0.1153609152447056, 0.12041407752435329, 0.1029362673641866, 0.10570991852067435, 0.13089967915867873, 0.21678977375150654, 0.17058970040826882, 0.16295581503460832, 0.21491234523251257, 0.1892590173715405, 0.19254608494602787, 0.21999370998927636, 0.19497732391563793, 0.2900137421966461, 0.23010366760769163, 0.21902417048866352, 0.24147884783192075, 0.2140487046031414, 0.21956731654897632, 0.2088479094946587, 0.25462986574451507, 0.2560749001553755, 0.24538831053371069, 0.1907314509307959, 0.1982454051192375, 0.18813603965351844, 0.16188963528859823, 0.1637779460800297, 0.16762430189403787, 0.17831713954314832, 0.18913530097877862, 0.17896156947785224, 0.1994290876186009, 0.20864219002014528, 0.1995619885358796, 0.18360274922190645, 0.19930764217989594, 0.19364932283436942, 0.21602709910475137, 0.187536107372257, 0.20356266681262913, 0.19046601888410464, 0.1890179853186803, 0.25487805978882494, 0.19026926712172876, 0.194549026555619, 0.18418774946176575, 0.19930431808288485, 0.20231884316070614, 0.1989691380272287, 0.33421469426554307, 0.17511916815927075, 0.16981745354223676, 0.27214564509992, 0.2705806934405618, 0.16049832400705888, 0.1790047930914188, 0.2746682018458042, 0.18323500539399995, 0.5517839471760895, 0.19610731650264257, 0.3994356635164491, 0.20039435332129207, 0.17623889387642377, 0.19660889973614126, 0.20330945405190104, 0.1988747723985249, 0.20351065409025637, 0.21205836200413342, 0.20249814930552812, 0.18282786856551014, 0.19499176297391996, 0.21932904822170562, 0.1933638038216251, 0.18935827805835526, 0.18969247524778443, 0.18489886017202284, 0.08904131866395493, 0.08318413050180029, 0.08023817144014922, 0.07894304472062375, 0.08436280510839533, 0.06843238634122262, 0.08175650968224213, 0.07672440470221065, 0.0746491735638809]}, "mutation_prompt": null}
{"id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm introduces a stochastic gradient-based perturbation strategy to enhance exploitation while maintaining diversity with adaptive population resizing.", "configspace": "", "generation": 22, "fitness": 0.24507231451283285, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.19.", "error": "", "parent_id": "c7e94778-119a-40b6-bb18-bb3cb44633d7", "metadata": {"aucs": [0.5260074993696455, 0.5150643206496501, 0.5217943035472731, 0.5588840755600035, 0.5400351981020861, 0.5556661564904612, 0.5315661941866179, 0.5367352116907882, 0.5079702937741803, 0.22651306316614117, 0.2212564083437576, 0.23439131697577353, 0.19685125281688265, 0.24398399111940772, 0.20696912272355583, 0.23397866690554847, 0.2425559618936446, 0.20846155005230738, 0.150851545954522, 0.11370497546781932, 0.11817199850699323, 0.10879203764606082, 0.11554962969873595, 0.10990084908791964, 0.10208026360952915, 0.11052497641648429, 0.11992482982230812, 0.09866287044331679, 0.09983665000074549, 0.10079656766080969, 0.103202130708832, 0.09662120569641663, 0.07842103023566926, 0.09068973177716433, 0.09472423987293055, 0.10125751561833962, 0.859500681001341, 0.8534254009618345, 0.8710152072826157, 0.9308182061044793, 0.898565553456366, 0.9655396914812582, 0.9187859674312033, 0.8948044264586633, 0.8887471397002236, 0.25552142955618706, 0.23493761471378516, 0.2143476842872024, 0.25331563795118694, 0.24892589415935984, 0.22340189268220056, 0.26225817743941415, 0.26654576221067316, 0.268888797799009, 0.46720337584011995, 0.4267686776932589, 0.40980662179769933, 0.42554981597622654, 0.44789341024489604, 0.5231982563486429, 0.3768045588033865, 0.4946847323135264, 0.454687630828739, 0.191888109963533, 0.14828433716417144, 0.17902331362456658, 0.165455572663479, 0.17850564721950868, 0.15440293813784978, 0.17448462759925865, 0.18527398871455725, 0.1637833631885045, 0.19221854284563322, 0.2088944948638357, 0.1559714768859538, 0.17216212715308754, 0.15323007513894593, 0.1723238455870031, 0.17108334788471435, 0.18522546027107123, 0.16774691056099733, 0.061834492943784625, 0.09313486975709906, 0.07898757712136006, 0.06369827098161662, 0.09960126647336165, 0.0850879488800036, 0.09343138679371499, 0.10373032056987996, 0.07742669976828398, 0.2366009819153797, 0.20918440793231807, 0.1920009095242119, 0.19439336816347963, 0.18359172887292718, 0.1919465203688071, 0.22390781634293733, 0.21707908343242466, 0.24463111189616638, 0.022316328988651213, 0.005581294720569341, 0.012951068598269333, 0.019565129037480644, 0.015247359227479884, 0.04625772153769725, 0.010958449442215579, 0.025069196928867443, 0.009673349318528035, 0.1176575069427418, 0.1254240285613818, 0.11742363202990524, 0.13334807435819407, 0.14303672976747017, 0.13120362286193255, 0.13818054906574284, 0.1195656987893684, 0.12689288889685557, 0.38866638197559233, 0.4280656087414213, 0.4581243446272659, 0.4207852363848017, 0.42806016684055925, 0.4358553081385024, 0.43571398482219514, 0.4331785642193873, 0.41915321471930056, 0.1094124187218275, 0.10770418618591227, 0.10946948165878878, 0.1063237281251459, 0.08880057809346598, 0.1051293008609886, 0.10412445820981142, 0.1193200745543459, 0.1204522222933303, 0.1938624057099202, 0.18981066082228604, 0.15987345243692364, 0.23823294150558139, 0.18175567617005672, 0.2171683736553175, 0.22202980421941199, 0.20454258444409956, 0.18882800349759188, 0.25125750918959977, 0.2083435018249007, 0.2476674092109381, 0.2510298212940899, 0.24791579229423377, 0.23159835469775825, 0.2581229197148289, 0.2718135640453666, 0.2607577719264065, 0.18309766073605382, 0.1810737785140616, 0.1890667940606615, 0.18805848257197333, 0.17176521328475025, 0.1789218483299213, 0.19523294253842638, 0.20366491825860544, 0.18406763809972682, 0.18462909835550367, 0.19595357663354152, 0.17630442580589167, 0.1920475328279081, 0.20109109448260065, 0.23079283252503535, 0.23273002991340552, 0.1912669570536717, 0.17980519096783698, 0.1937518899470202, 0.193558140315214, 0.18164060906497703, 0.2011233573781045, 0.18936010346593435, 0.217055273416342, 0.19069016221787327, 0.19118647363020713, 0.21067111896809176, 0.3415008916225888, 0.33032415757321976, 0.2621355316347894, 0.5224088746431974, 0.3834169560525248, 0.4141958993017508, 0.4329737854092909, 0.3294120528257064, 0.18681196284792545, 0.4798502660499666, 0.41037363240046487, 0.39527561678343304, 0.37440018537242836, 0.3128911596341394, 0.20298573864435654, 0.5600642508468052, 0.2009770074335966, 0.20261210266664176, 0.1848999327539118, 0.1765644983604725, 0.19039217270915088, 0.20018480328759647, 0.18575104458247294, 0.2016113956533434, 0.18049672962956576, 0.19621308380773694, 0.1934493717145871, 0.07147036204544743, 0.07261935306392409, 0.0784837321151699, 0.07217926715018352, 0.07895081378755753, 0.07706193518788385, 0.0688735817782985, 0.07101412606942126, 0.07231725974344405]}, "mutation_prompt": null}
{"id": "5a86a797-0611-401e-bc01-0319f7fe859a", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm introduces a stochastic gradient-based perturbation strategy to enhance exploitation while maintaining diversity with adaptive population resizing.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.5260074993696455, 0.5150643206496501, 0.5217943035472731, 0.5588840755600035, 0.5400351981020861, 0.5556661564904612, 0.5315661941866179, 0.5367352116907882, 0.5079702937741803, 0.22651306316614117, 0.2212564083437576, 0.23439131697577353, 0.19685125281688265, 0.24398399111940772, 0.20696912272355583, 0.23397866690554847, 0.2425559618936446, 0.20846155005230738, 0.150851545954522, 0.11370497546781932, 0.11817199850699323, 0.10879203764606082, 0.11554962969873595, 0.10990084908791964, 0.10208026360952915, 0.11052497641648429, 0.11992482982230812, 0.09866287044331679, 0.09983665000074549, 0.10079656766080969, 0.103202130708832, 0.09662120569641663, 0.07842103023566926, 0.09068973177716433, 0.09472423987293055, 0.10125751561833962, 0.859500681001341, 0.8534254009618345, 0.8710152072826157, 0.9308182061044793, 0.898565553456366, 0.9655396914812582, 0.9187859674312033, 0.8948044264586633, 0.8887471397002236, 0.25552142955618706, 0.23493761471378516, 0.2143476842872024, 0.25331563795118694, 0.24892589415935984, 0.22340189268220056, 0.26225817743941415, 0.26654576221067316, 0.268888797799009, 0.46720337584011995, 0.4267686776932589, 0.40980662179769933, 0.42554981597622654, 0.44789341024489604, 0.5231982563486429, 0.3768045588033865, 0.4946847323135264, 0.454687630828739, 0.191888109963533, 0.14828433716417144, 0.17902331362456658, 0.165455572663479, 0.17850564721950868, 0.15440293813784978, 0.17448462759925865, 0.18527398871455725, 0.1637833631885045, 0.19221854284563322, 0.2088944948638357, 0.1559714768859538, 0.17216212715308754, 0.15323007513894593, 0.1723238455870031, 0.17108334788471435, 0.18522546027107123, 0.16774691056099733, 0.061834492943784625, 0.09313486975709906, 0.07898757712136006, 0.06369827098161662, 0.09960126647336165, 0.0850879488800036, 0.09343138679371499, 0.10373032056987996, 0.07742669976828398, 0.2366009819153797, 0.20918440793231807, 0.1920009095242119, 0.19439336816347963, 0.18359172887292718, 0.1919465203688071, 0.22390781634293733, 0.21707908343242466, 0.24463111189616638, 0.022316328988651213, 0.005581294720569341, 0.012951068598269333, 0.019565129037480644, 0.015247359227479884, 0.04625772153769725, 0.010958449442215579, 0.025069196928867443, 0.009673349318528035, 0.1176575069427418, 0.1254240285613818, 0.11742363202990524, 0.13334807435819407, 0.14303672976747017, 0.13120362286193255, 0.13818054906574284, 0.1195656987893684, 0.12689288889685557, 0.38866638197559233, 0.4280656087414213, 0.4581243446272659, 0.4207852363848017, 0.42806016684055925, 0.4358553081385024, 0.43571398482219514, 0.4331785642193873, 0.41915321471930056, 0.1094124187218275, 0.10770418618591227, 0.10946948165878878, 0.1063237281251459, 0.08880057809346598, 0.1051293008609886, 0.10412445820981142, 0.1193200745543459, 0.1204522222933303, 0.1938624057099202, 0.18981066082228604, 0.15987345243692364, 0.23823294150558139, 0.18175567617005672, 0.2171683736553175, 0.22202980421941199, 0.20454258444409956, 0.18882800349759188, 0.25125750918959977, 0.2083435018249007, 0.2476674092109381, 0.2510298212940899, 0.24791579229423377, 0.23159835469775825, 0.2581229197148289, 0.2718135640453666, 0.2607577719264065, 0.18309766073605382, 0.1810737785140616, 0.1890667940606615, 0.18805848257197333, 0.17176521328475025, 0.1789218483299213, 0.19523294253842638, 0.20366491825860544, 0.18406763809972682, 0.18462909835550367, 0.19595357663354152, 0.17630442580589167, 0.1920475328279081, 0.20109109448260065, 0.23079283252503535, 0.23273002991340552, 0.1912669570536717, 0.17980519096783698, 0.1937518899470202, 0.193558140315214, 0.18164060906497703, 0.2011233573781045, 0.18936010346593435, 0.217055273416342, 0.19069016221787327, 0.19118647363020713, 0.21067111896809176, 0.3415008916225888, 0.33032415757321976, 0.2621355316347894, 0.5224088746431974, 0.3834169560525248, 0.4141958993017508, 0.4329737854092909, 0.3294120528257064, 0.18681196284792545, 0.4798502660499666, 0.41037363240046487, 0.39527561678343304, 0.37440018537242836, 0.3128911596341394, 0.20298573864435654, 0.5600642508468052, 0.2009770074335966, 0.20261210266664176, 0.1848999327539118, 0.1765644983604725, 0.19039217270915088, 0.20018480328759647, 0.18575104458247294, 0.2016113956533434, 0.18049672962956576, 0.19621308380773694, 0.1934493717145871, 0.07147036204544743, 0.07261935306392409, 0.0784837321151699, 0.07217926715018352, 0.07895081378755753, 0.07706193518788385, 0.0688735817782985, 0.07101412606942126, 0.07231725974344405]}, "mutation_prompt": null}
{"id": "a5e8e9e6-fb8b-4038-991b-e31bd84e3020", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * dim  # Reduced population size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            kmeans = KMeans(n_clusters=min(max(2, evals // (self.budget // 5)), self.pop_size))\n            labels = kmeans.fit_predict(pop)\n            for i in range(self.pop_size):\n                cluster_indices = np.where(labels == labels[i])[0]\n                if len(cluster_indices) > 1:\n                    idxs = [idx for idx in cluster_indices if idx != i]\n                    a, b = pop[np.random.choice(idxs, 2, replace=False)]\n                else:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                    a, b = pop[np.random.choice(idxs, 2, replace=False)]\n                F = 0.6 + np.random.rand() * 0.4\n                CR = 0.7 + np.random.rand() * 0.3\n                mutant = np.clip(a + F * (b - pop[i]), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "Introduce adaptive mutation and crossover strategies alongside clustering to promote exploitation-exploration balance.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {}, "mutation_prompt": null}
{"id": "954fda40-f4ef-4705-a7ba-ca9040f21391", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm introduces a stochastic gradient-based perturbation strategy to enhance exploitation while maintaining diversity with adaptive population resizing.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.5260074993696455, 0.5150643206496501, 0.5217943035472731, 0.5588840755600035, 0.5400351981020861, 0.5556661564904612, 0.5315661941866179, 0.5367352116907882, 0.5079702937741803, 0.22651306316614117, 0.2212564083437576, 0.23439131697577353, 0.19685125281688265, 0.24398399111940772, 0.20696912272355583, 0.23397866690554847, 0.2425559618936446, 0.20846155005230738, 0.150851545954522, 0.11370497546781932, 0.11817199850699323, 0.10879203764606082, 0.11554962969873595, 0.10990084908791964, 0.10208026360952915, 0.11052497641648429, 0.11992482982230812, 0.09866287044331679, 0.09983665000074549, 0.10079656766080969, 0.103202130708832, 0.09662120569641663, 0.07842103023566926, 0.09068973177716433, 0.09472423987293055, 0.10125751561833962, 0.859500681001341, 0.8534254009618345, 0.8710152072826157, 0.9308182061044793, 0.898565553456366, 0.9655396914812582, 0.9187859674312033, 0.8948044264586633, 0.8887471397002236, 0.25552142955618706, 0.23493761471378516, 0.2143476842872024, 0.25331563795118694, 0.24892589415935984, 0.22340189268220056, 0.26225817743941415, 0.26654576221067316, 0.268888797799009, 0.46720337584011995, 0.4267686776932589, 0.40980662179769933, 0.42554981597622654, 0.44789341024489604, 0.5231982563486429, 0.3768045588033865, 0.4946847323135264, 0.454687630828739, 0.191888109963533, 0.14828433716417144, 0.17902331362456658, 0.165455572663479, 0.17850564721950868, 0.15440293813784978, 0.17448462759925865, 0.18527398871455725, 0.1637833631885045, 0.19221854284563322, 0.2088944948638357, 0.1559714768859538, 0.17216212715308754, 0.15323007513894593, 0.1723238455870031, 0.17108334788471435, 0.18522546027107123, 0.16774691056099733, 0.061834492943784625, 0.09313486975709906, 0.07898757712136006, 0.06369827098161662, 0.09960126647336165, 0.0850879488800036, 0.09343138679371499, 0.10373032056987996, 0.07742669976828398, 0.2366009819153797, 0.20918440793231807, 0.1920009095242119, 0.19439336816347963, 0.18359172887292718, 0.1919465203688071, 0.22390781634293733, 0.21707908343242466, 0.24463111189616638, 0.022316328988651213, 0.005581294720569341, 0.012951068598269333, 0.019565129037480644, 0.015247359227479884, 0.04625772153769725, 0.010958449442215579, 0.025069196928867443, 0.009673349318528035, 0.1176575069427418, 0.1254240285613818, 0.11742363202990524, 0.13334807435819407, 0.14303672976747017, 0.13120362286193255, 0.13818054906574284, 0.1195656987893684, 0.12689288889685557, 0.38866638197559233, 0.4280656087414213, 0.4581243446272659, 0.4207852363848017, 0.42806016684055925, 0.4358553081385024, 0.43571398482219514, 0.4331785642193873, 0.41915321471930056, 0.1094124187218275, 0.10770418618591227, 0.10946948165878878, 0.1063237281251459, 0.08880057809346598, 0.1051293008609886, 0.10412445820981142, 0.1193200745543459, 0.1204522222933303, 0.1938624057099202, 0.18981066082228604, 0.15987345243692364, 0.23823294150558139, 0.18175567617005672, 0.2171683736553175, 0.22202980421941199, 0.20454258444409956, 0.18882800349759188, 0.25125750918959977, 0.2083435018249007, 0.2476674092109381, 0.2510298212940899, 0.24791579229423377, 0.23159835469775825, 0.2581229197148289, 0.2718135640453666, 0.2607577719264065, 0.18309766073605382, 0.1810737785140616, 0.1890667940606615, 0.18805848257197333, 0.17176521328475025, 0.1789218483299213, 0.19523294253842638, 0.20366491825860544, 0.18406763809972682, 0.18462909835550367, 0.19595357663354152, 0.17630442580589167, 0.1920475328279081, 0.20109109448260065, 0.23079283252503535, 0.23273002991340552, 0.1912669570536717, 0.17980519096783698, 0.1937518899470202, 0.193558140315214, 0.18164060906497703, 0.2011233573781045, 0.18936010346593435, 0.217055273416342, 0.19069016221787327, 0.19118647363020713, 0.21067111896809176, 0.3415008916225888, 0.33032415757321976, 0.2621355316347894, 0.5224088746431974, 0.3834169560525248, 0.4141958993017508, 0.4329737854092909, 0.3294120528257064, 0.18681196284792545, 0.4798502660499666, 0.41037363240046487, 0.39527561678343304, 0.37440018537242836, 0.3128911596341394, 0.20298573864435654, 0.5600642508468052, 0.2009770074335966, 0.20261210266664176, 0.1848999327539118, 0.1765644983604725, 0.19039217270915088, 0.20018480328759647, 0.18575104458247294, 0.2016113956533434, 0.18049672962956576, 0.19621308380773694, 0.1934493717145871, 0.07147036204544743, 0.07261935306392409, 0.0784837321151699, 0.07217926715018352, 0.07895081378755753, 0.07706193518788385, 0.0688735817782985, 0.07101412606942126, 0.07231725974344405]}, "mutation_prompt": null}
{"id": "0b2df30d-fbe3-496f-b13b-ced727efb16f", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.initial_F = 0.8\n        self.initial_CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        pheromone = np.zeros(self.dim)\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F = self.initial_F + np.random.rand() * (1 - self.initial_F)\n                CR = self.initial_CR * (1 - evals / self.budget)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    pheromone += np.exp(-(trial_fitness - min(fitness)))\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb + pheromone * 0.01\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm uses adaptive crossover and differential weights with pheromone-influenced local search to improve convergence.", "configspace": "", "generation": 26, "fitness": 0.18940193486078957, "feedback": "The algorithm HybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.3798681135558608, 0.37683206425531, 0.40578682533442934, 0.4139831150552651, 0.39678151050455823, 0.4134375472871308, 0.4182279253354696, 0.40896897620030226, 0.38152088832409115, 0.14801907182748042, 0.1440685760521606, 0.14726547285028824, 0.17898517217416554, 0.1539579299103121, 0.14801917096666328, 0.17118207548069764, 0.15849728511113825, 0.19467124925047652, 0.13528761264098155, 0.12944999928245993, 0.12185201122713574, 0.12277814777652729, 0.11479459020333238, 0.11778387645612287, 0.11013499578075447, 0.10769876843912152, 0.10993285209933235, 0.08981903463693908, 0.0918564443822445, 0.0991685779981537, 0.11070195740055166, 0.10813468567092877, 0.10627216900930148, 0.09778941571273847, 0.09742556853321893, 0.09140293115235798, 0.9062003464814804, 0.8980659690479924, 0.914727029392571, 0.9394929767301401, 0.978637715244042, 0.935617018649473, 0.9535052939496379, 0.896322335864318, 0.9449140684255619, 0.1545862934399791, 0.18032022822364724, 0.1261162647999472, 0.1365916611029937, 0.15961833325206698, 0.17263941241261127, 0.1604052193378237, 0.15406948043601731, 0.15996236368105676, 0.20758491707357174, 0.18531183639785886, 0.19233168090150599, 0.2328824480005205, 0.22170216402678722, 0.24642925665872772, 0.16155098960112813, 0.19065346312798281, 0.21181211797772503, 0.14950130363314584, 0.1409652610082026, 0.1328937406696743, 0.14684510759387615, 0.14270783609097704, 0.149968828479072, 0.13918261641052154, 0.12250603481047095, 0.17376415905067188, 0.15009522674760323, 0.10732909792860301, 0.10436195764164857, 0.11160107846218548, 0.09336293091048375, 0.10985493128188795, 0.11332965768912473, 0.08628271792961895, 0.09948545787139262, 0.0027837964954393613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008128507485243075, 9.999999999998899e-05, 0.0007058096536897152, 9.999999999998899e-05, 9.999999999998899e-05, 0.11695517876336747, 0.09150518614704817, 0.10468732569096084, 0.0687147032203329, 0.06868506358946669, 0.08633870043523473, 0.07226706548668005, 0.09876227328921194, 0.08488126927879713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06554572645994305, 0.06100721873067927, 0.0706817209567433, 0.0444660315612353, 0.06649157727942734, 0.10188372157942938, 0.06063058732315274, 0.05654493466834354, 0.08489122873082089, 0.30910140153229326, 0.3329010632568973, 0.35688952633713134, 0.3349680317766478, 0.3320956385184477, 0.3424967595919588, 0.3182694173510052, 0.3269804887901472, 0.31855038449266704, 0.08936871783486189, 0.09877822014177817, 0.10414172803977051, 0.10147414006771016, 0.0893112147342181, 0.10580598154844478, 0.07301765591098242, 0.08979702531319167, 0.08298325161049491, 0.18246061502202038, 0.2047038175560998, 0.23384846464023734, 0.2547997310364789, 0.21192394337716391, 0.21099994053481386, 0.20043431693094194, 0.18584952149276313, 0.18804385813802238, 0.20543489015115135, 0.1959016193052766, 0.21473658935161133, 0.19859746524301392, 0.20324445571776695, 0.19050840007552028, 0.21475749974156355, 0.2182298394046125, 0.19399154983023348, 0.14742811395943067, 0.1253843038549034, 0.14048003119104047, 0.15085014942362374, 0.1287285588455085, 0.12975911358825964, 0.14397774705101907, 0.20175873958666712, 0.13916594963683182, 0.18691804307892046, 0.1740894001732971, 0.19758145520676007, 0.19050047290252636, 0.18060675050887276, 0.17831798970898438, 0.18798441216286232, 0.17158240370189137, 0.17953336531928454, 0.16773866865503917, 0.1757016350941467, 0.17570167834419026, 0.17115069209246137, 0.18260904535899003, 0.1769186257001929, 0.19309799249062076, 0.18250569909511838, 0.17349630375466263, 0.2304602749345317, 0.2483619198888939, 0.3148863290145383, 0.20428191237989235, 0.1734523064560497, 0.24242105344961118, 0.230258646430055, 0.25774777647898905, 0.32257203846968885, 0.30021423087354193, 0.2239684091199694, 0.18680185478288536, 0.1958878187865568, 0.15528456138115176, 0.2902619211091719, 0.24632759841304186, 0.22311657301770693, 0.19363911703104153, 0.19551002464877998, 0.18479760656264466, 0.1865995970042056, 0.17430909660152705, 0.18200434356712225, 0.1767972769691114, 0.18363950354086245, 0.18615475251030134, 0.18951923106212476, 0.07767758130042235, 0.0683652613948681, 0.06914105268928028, 0.06914081894142676, 0.06574144302354867, 0.07166339490517426, 0.07152435942229407, 0.06807604389006205, 0.06474463184584622]}, "mutation_prompt": null}
{"id": "74400497-3332-4fb2-bfdd-9991f1450b0c", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm introduces a stochastic gradient-based perturbation strategy to enhance exploitation while maintaining diversity with adaptive population resizing.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.5260074993696455, 0.5150643206496501, 0.5217943035472731, 0.5588840755600035, 0.5400351981020861, 0.5556661564904612, 0.5315661941866179, 0.5367352116907882, 0.5079702937741803, 0.22651306316614117, 0.2212564083437576, 0.23439131697577353, 0.19685125281688265, 0.24398399111940772, 0.20696912272355583, 0.23397866690554847, 0.2425559618936446, 0.20846155005230738, 0.150851545954522, 0.11370497546781932, 0.11817199850699323, 0.10879203764606082, 0.11554962969873595, 0.10990084908791964, 0.10208026360952915, 0.11052497641648429, 0.11992482982230812, 0.09866287044331679, 0.09983665000074549, 0.10079656766080969, 0.103202130708832, 0.09662120569641663, 0.07842103023566926, 0.09068973177716433, 0.09472423987293055, 0.10125751561833962, 0.859500681001341, 0.8534254009618345, 0.8710152072826157, 0.9308182061044793, 0.898565553456366, 0.9655396914812582, 0.9187859674312033, 0.8948044264586633, 0.8887471397002236, 0.25552142955618706, 0.23493761471378516, 0.2143476842872024, 0.25331563795118694, 0.24892589415935984, 0.22340189268220056, 0.26225817743941415, 0.26654576221067316, 0.268888797799009, 0.46720337584011995, 0.4267686776932589, 0.40980662179769933, 0.42554981597622654, 0.44789341024489604, 0.5231982563486429, 0.3768045588033865, 0.4946847323135264, 0.454687630828739, 0.191888109963533, 0.14828433716417144, 0.17902331362456658, 0.165455572663479, 0.17850564721950868, 0.15440293813784978, 0.17448462759925865, 0.18527398871455725, 0.1637833631885045, 0.19221854284563322, 0.2088944948638357, 0.1559714768859538, 0.17216212715308754, 0.15323007513894593, 0.1723238455870031, 0.17108334788471435, 0.18522546027107123, 0.16774691056099733, 0.061834492943784625, 0.09313486975709906, 0.07898757712136006, 0.06369827098161662, 0.09960126647336165, 0.0850879488800036, 0.09343138679371499, 0.10373032056987996, 0.07742669976828398, 0.2366009819153797, 0.20918440793231807, 0.1920009095242119, 0.19439336816347963, 0.18359172887292718, 0.1919465203688071, 0.22390781634293733, 0.21707908343242466, 0.24463111189616638, 0.022316328988651213, 0.005581294720569341, 0.012951068598269333, 0.019565129037480644, 0.015247359227479884, 0.04625772153769725, 0.010958449442215579, 0.025069196928867443, 0.009673349318528035, 0.1176575069427418, 0.1254240285613818, 0.11742363202990524, 0.13334807435819407, 0.14303672976747017, 0.13120362286193255, 0.13818054906574284, 0.1195656987893684, 0.12689288889685557, 0.38866638197559233, 0.4280656087414213, 0.4581243446272659, 0.4207852363848017, 0.42806016684055925, 0.4358553081385024, 0.43571398482219514, 0.4331785642193873, 0.41915321471930056, 0.1094124187218275, 0.10770418618591227, 0.10946948165878878, 0.1063237281251459, 0.08880057809346598, 0.1051293008609886, 0.10412445820981142, 0.1193200745543459, 0.1204522222933303, 0.1938624057099202, 0.18981066082228604, 0.15987345243692364, 0.23823294150558139, 0.18175567617005672, 0.2171683736553175, 0.22202980421941199, 0.20454258444409956, 0.18882800349759188, 0.25125750918959977, 0.2083435018249007, 0.2476674092109381, 0.2510298212940899, 0.24791579229423377, 0.23159835469775825, 0.2581229197148289, 0.2718135640453666, 0.2607577719264065, 0.18309766073605382, 0.1810737785140616, 0.1890667940606615, 0.18805848257197333, 0.17176521328475025, 0.1789218483299213, 0.19523294253842638, 0.20366491825860544, 0.18406763809972682, 0.18462909835550367, 0.19595357663354152, 0.17630442580589167, 0.1920475328279081, 0.20109109448260065, 0.23079283252503535, 0.23273002991340552, 0.1912669570536717, 0.17980519096783698, 0.1937518899470202, 0.193558140315214, 0.18164060906497703, 0.2011233573781045, 0.18936010346593435, 0.217055273416342, 0.19069016221787327, 0.19118647363020713, 0.21067111896809176, 0.3415008916225888, 0.33032415757321976, 0.2621355316347894, 0.5224088746431974, 0.3834169560525248, 0.4141958993017508, 0.4329737854092909, 0.3294120528257064, 0.18681196284792545, 0.4798502660499666, 0.41037363240046487, 0.39527561678343304, 0.37440018537242836, 0.3128911596341394, 0.20298573864435654, 0.5600642508468052, 0.2009770074335966, 0.20261210266664176, 0.1848999327539118, 0.1765644983604725, 0.19039217270915088, 0.20018480328759647, 0.18575104458247294, 0.2016113956533434, 0.18049672962956576, 0.19621308380773694, 0.1934493717145871, 0.07147036204544743, 0.07261935306392409, 0.0784837321151699, 0.07217926715018352, 0.07895081378755753, 0.07706193518788385, 0.0688735817782985, 0.07101412606942126, 0.07231725974344405]}, "mutation_prompt": null}
{"id": "5ed66646-9d30-432d-b97b-199aba69dd8c", "solution": "import numpy as np\n\nclass HybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        \n        while evals < self.budget:\n            adapt_factor = 1 + evals / self.budget  # Increase diversity over time\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = 0.5 + np.random.rand() * 0.5\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                \n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adapt_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "HybridOptimization", "description": "The algorithm introduces a stochastic gradient-based perturbation strategy to enhance exploitation while maintaining diversity with adaptive population resizing.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.5260074993696455, 0.5150643206496501, 0.5217943035472731, 0.5588840755600035, 0.5400351981020861, 0.5556661564904612, 0.5315661941866179, 0.5367352116907882, 0.5079702937741803, 0.22651306316614117, 0.2212564083437576, 0.23439131697577353, 0.19685125281688265, 0.24398399111940772, 0.20696912272355583, 0.23397866690554847, 0.2425559618936446, 0.20846155005230738, 0.150851545954522, 0.11370497546781932, 0.11817199850699323, 0.10879203764606082, 0.11554962969873595, 0.10990084908791964, 0.10208026360952915, 0.11052497641648429, 0.11992482982230812, 0.09866287044331679, 0.09983665000074549, 0.10079656766080969, 0.103202130708832, 0.09662120569641663, 0.07842103023566926, 0.09068973177716433, 0.09472423987293055, 0.10125751561833962, 0.859500681001341, 0.8534254009618345, 0.8710152072826157, 0.9308182061044793, 0.898565553456366, 0.9655396914812582, 0.9187859674312033, 0.8948044264586633, 0.8887471397002236, 0.25552142955618706, 0.23493761471378516, 0.2143476842872024, 0.25331563795118694, 0.24892589415935984, 0.22340189268220056, 0.26225817743941415, 0.26654576221067316, 0.268888797799009, 0.46720337584011995, 0.4267686776932589, 0.40980662179769933, 0.42554981597622654, 0.44789341024489604, 0.5231982563486429, 0.3768045588033865, 0.4946847323135264, 0.454687630828739, 0.191888109963533, 0.14828433716417144, 0.17902331362456658, 0.165455572663479, 0.17850564721950868, 0.15440293813784978, 0.17448462759925865, 0.18527398871455725, 0.1637833631885045, 0.19221854284563322, 0.2088944948638357, 0.1559714768859538, 0.17216212715308754, 0.15323007513894593, 0.1723238455870031, 0.17108334788471435, 0.18522546027107123, 0.16774691056099733, 0.061834492943784625, 0.09313486975709906, 0.07898757712136006, 0.06369827098161662, 0.09960126647336165, 0.0850879488800036, 0.09343138679371499, 0.10373032056987996, 0.07742669976828398, 0.2366009819153797, 0.20918440793231807, 0.1920009095242119, 0.19439336816347963, 0.18359172887292718, 0.1919465203688071, 0.22390781634293733, 0.21707908343242466, 0.24463111189616638, 0.022316328988651213, 0.005581294720569341, 0.012951068598269333, 0.019565129037480644, 0.015247359227479884, 0.04625772153769725, 0.010958449442215579, 0.025069196928867443, 0.009673349318528035, 0.1176575069427418, 0.1254240285613818, 0.11742363202990524, 0.13334807435819407, 0.14303672976747017, 0.13120362286193255, 0.13818054906574284, 0.1195656987893684, 0.12689288889685557, 0.38866638197559233, 0.4280656087414213, 0.4581243446272659, 0.4207852363848017, 0.42806016684055925, 0.4358553081385024, 0.43571398482219514, 0.4331785642193873, 0.41915321471930056, 0.1094124187218275, 0.10770418618591227, 0.10946948165878878, 0.1063237281251459, 0.08880057809346598, 0.1051293008609886, 0.10412445820981142, 0.1193200745543459, 0.1204522222933303, 0.1938624057099202, 0.18981066082228604, 0.15987345243692364, 0.23823294150558139, 0.18175567617005672, 0.2171683736553175, 0.22202980421941199, 0.20454258444409956, 0.18882800349759188, 0.25125750918959977, 0.2083435018249007, 0.2476674092109381, 0.2510298212940899, 0.24791579229423377, 0.23159835469775825, 0.2581229197148289, 0.2718135640453666, 0.2607577719264065, 0.18309766073605382, 0.1810737785140616, 0.1890667940606615, 0.18805848257197333, 0.17176521328475025, 0.1789218483299213, 0.19523294253842638, 0.20366491825860544, 0.18406763809972682, 0.18462909835550367, 0.19595357663354152, 0.17630442580589167, 0.1920475328279081, 0.20109109448260065, 0.23079283252503535, 0.23273002991340552, 0.1912669570536717, 0.17980519096783698, 0.1937518899470202, 0.193558140315214, 0.18164060906497703, 0.2011233573781045, 0.18936010346593435, 0.217055273416342, 0.19069016221787327, 0.19118647363020713, 0.21067111896809176, 0.3415008916225888, 0.33032415757321976, 0.2621355316347894, 0.5224088746431974, 0.3834169560525248, 0.4141958993017508, 0.4329737854092909, 0.3294120528257064, 0.18681196284792545, 0.4798502660499666, 0.41037363240046487, 0.39527561678343304, 0.37440018537242836, 0.3128911596341394, 0.20298573864435654, 0.5600642508468052, 0.2009770074335966, 0.20261210266664176, 0.1848999327539118, 0.1765644983604725, 0.19039217270915088, 0.20018480328759647, 0.18575104458247294, 0.2016113956533434, 0.18049672962956576, 0.19621308380773694, 0.1934493717145871, 0.07147036204544743, 0.07261935306392409, 0.0784837321151699, 0.07217926715018352, 0.07895081378755753, 0.07706193518788385, 0.0688735817782985, 0.07101412606942126, 0.07231725974344405]}, "mutation_prompt": null}
{"id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 29, "fitness": 0.3267599822008529, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "c1971081-0522-4693-a0f5-2e73a41f77b1", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "bc5d1af9-9ef9-4fd3-a453-07ca32cec6a8", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "7cfad5dd-3187-4dc9-b47f-a58ab1e099c8", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Initial population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            # Adaptive population size\n            adaptive_pop_size = int(self.pop_size * (0.5 + 0.5 * (1 - evals / self.budget)))\n            for i in range(adaptive_pop_size):\n                idxs = [idx for idx in range(adaptive_pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Context-aware crossover\n                crossover_threshold = np.mean(fitness) / (np.std(fitness) + 1e-9)\n                self.CR = max(0.1, min(0.9, crossover_threshold))\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm uses an adaptive population size strategy alongside context-aware crossover to enhance exploration-exploitation balance.", "configspace": "", "generation": 31, "fitness": 0.2584506450449994, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7353757034270623, 0.7411361028829986, 0.7449854455315931, 0.7368823018068373, 0.7198708348389071, 0.7389179316112975, 0.4621698421087078, 0.45472985489167583, 0.4422951559773004, 0.24618438616865324, 0.28793234608459717, 0.30909727930820696, 0.40733093734583214, 0.29438964213487284, 0.28121416978231906, 0.3301471589070445, 0.23596678821383898, 0.2767533885054875, 0.18028467565905137, 0.15696860459369422, 0.19168106256185946, 0.45854312250670615, 0.37221185402471535, 0.16727656966937698, 0.4785872318415413, 0.3634747195444048, 0.405353479141933, 0.15852129580064978, 0.14694820087244753, 0.1688002135387554, 0.11696167671764945, 0.35653855198486784, 0.15520595246680513, 0.12447384876180734, 0.13110355637324722, 0.14263046919224975, 0.8992702441259712, 0.9348821334663362, 0.786471088483123, 0.9175974193888006, 0.8967870641567254, 0.8954194123575772, 0.8682297312513206, 0.8877627648027593, 0.8665914916112347, 0.12826783162721134, 0.14443446503909796, 0.09215084801377493, 0.3214979216929801, 0.11441568175532069, 0.14771051039082306, 0.12519600338221704, 0.12909002875158582, 0.1425564109774572, 0.7740647765576809, 0.8254839925669724, 0.7225791691453007, 0.45628031502613764, 0.2897260927059311, 0.24917520614167976, 0.21724438170371618, 0.22690343373023547, 0.28166514633648343, 0.19695198830721916, 0.2235383932832261, 0.1628256498551045, 0.19003657972034627, 0.16382845120476563, 0.15459890313752145, 0.21868636520077755, 0.20818800532916626, 0.21733301375278657, 0.17927143310271532, 0.2160314880288513, 0.18784176856463308, 0.18364700194904215, 0.15707500070437241, 0.21232879791676573, 0.18195032449528814, 0.13669644126778735, 0.1480945337543892, 0.042625310768276914, 9.999999999998899e-05, 0.0028298240470965297, 9.999999999998899e-05, 0.005632117428076566, 0.014009731896855504, 0.02024437583466865, 9.999999999998899e-05, 0.0074458988331956855, 0.12062482983610445, 0.11211195604433488, 0.09543659331099752, 0.05730507991408562, 0.08263901097529636, 0.08028971559719789, 0.1477986228408077, 0.12931596216418362, 0.10512136773557745, 0.018535192862283667, 0.013815178273857587, 0.009634029595701255, 0.013541706277196641, 0.010362788872679496, 0.02051213559121312, 0.015226334115865936, 0.015463125826948976, 0.009496208736372691, 0.1489251509567845, 0.1331711278667106, 0.13318708882610553, 0.11968361177771081, 0.1375104433170834, 0.14347278800908392, 0.09883861587256437, 0.10182093751341892, 0.10724858628386391, 0.3635523940568184, 0.33611740771260024, 0.37109140829682474, 0.37603316824671396, 0.3509375138066576, 0.3504486691845867, 0.5035333656445317, 0.48708572466256506, 0.5855654123025331, 0.14574922851094818, 0.14337340112138186, 0.128755050117899, 0.1481758690273447, 0.10566302415440765, 0.17007554444061757, 0.1049569706891702, 0.12076573929164092, 0.0937913750126389, 0.28923583991291446, 0.2349009505959403, 0.23691554625281797, 0.23633594286387993, 0.19347901569768122, 0.17258252028367604, 0.27301827417656155, 0.273199424676544, 0.3388968718751626, 0.19241704114023506, 0.17944544277166186, 0.1734202986524369, 0.39281019825993413, 0.3981662009638216, 0.3699409341701111, 0.37903530292134313, 0.4081092745250876, 0.41701382630820616, 0.18358588672120257, 0.1391360276646284, 0.19811984276260286, 0.23557670394600494, 0.28977957073192684, 0.2650315410179612, 0.24816867591742098, 0.2080978817536575, 0.25073584034313046, 0.19536543698082787, 0.16223626312708528, 0.17517183228583033, 0.2135184341209927, 0.20952780452497155, 0.22134408137291683, 0.22410748719898232, 0.20949727010769958, 0.23052805566766876, 0.20006466915688925, 0.22288196243107494, 0.20063424499249616, 0.20843379426968112, 0.23158271290445842, 0.25407704164512657, 0.2539110400954224, 0.21011050089062966, 0.22448379721653844, 0.18132923427683623, 0.19671176317449357, 0.7271061085743364, 0.49394960426722245, 0.19401050980123868, 0.24823840449808887, 0.16479756554204594, 0.16514911677903032, 0.35489601616166744, 0.3416819618687069, 0.32070062341638617, 0.43180745994249903, 0.7037504705139486, 0.16202399638364806, 0.17439799318392435, 0.38149275014687645, 0.20465555952282277, 0.20403231561567603, 0.1944071629133023, 0.18914688779469724, 0.1855594548434104, 0.19204171762350664, 0.1940054321320538, 0.18171674578650443, 0.19886251243332353, 0.2068692762045854, 0.18812027185314883, 0.1133956889463349, 0.07963426168971788, 0.09106809201886157, 0.09445119273600144, 0.08848857810645883, 0.10209171498140657, 0.09548398195784069, 0.10481707398644846, 0.08864775052269469]}, "mutation_prompt": null}
{"id": "e6ba321b-27b6-470c-8e8e-0fb70f94b968", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "2bfceec8-791e-4cd1-8b5a-9cbc0f1fa41b", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "2ca01706-3893-4aec-b41f-18b3980b2c7a", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "884959a8-7cb0-47ac-a026-8b7bc3f8bc9d", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "4e99c541-aada-4b07-a75c-9e109d099dcf", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "24219977-747e-45eb-9e15-2bff914da921", "solution": "import numpy as np\n\nclass EnhancedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n                \n                if evals >= self.budget:\n                    break\n                \n                # Dynamic crowding distance-based local search\n                if evals < self.budget:\n                    dist_factor = np.std(pop, axis=0).mean()  # Diversity measure\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget) * dist_factor\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedHybridOptimization", "description": "The algorithm enhances the original by incorporating a dynamic crowding distance adjustment based on the diversity of the population to further refine the balance between exploration and exploitation. ", "configspace": "", "generation": 37, "fitness": 0.31484995223060824, "feedback": "The algorithm EnhancedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.21.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7188322315546984, 0.7312834730591393, 0.7421304041065606, 0.7163484932524238, 0.6927752565686913, 0.6946881682379101, 0.7291238438958814, 0.7110497669473335, 0.7014036405231914, 0.4790941491248474, 0.4980283369306582, 0.4561289947660545, 0.4669093075531401, 0.4742111165134085, 0.429597575944761, 0.5097253522117001, 0.4571952698698619, 0.46027959167269616, 0.31388708102481266, 0.5101348484222945, 0.1327028384265423, 0.4984289944858209, 0.13695854859346912, 0.15731237497131878, 0.14001132952822248, 0.5154641941903457, 0.3959000133288998, 0.14789657186934635, 0.3316230135663335, 0.3056939544855142, 0.13518744443128616, 0.15416433597685264, 0.21960839264804888, 0.14574077620595238, 0.31364814576353806, 0.13908431821287903, 0.8854914774265784, 0.9291887973187271, 0.8125015075134008, 0.7879753380911495, 0.8980722056553916, 0.9430019560471767, 0.9685232694681625, 0.8730080685235636, 0.8746865945193714, 0.27027417109699803, 0.2458519552769053, 0.2448802071858488, 0.16677840867948357, 0.3192846076918572, 0.2500936205954999, 0.28710966517471637, 0.2531906472970944, 0.2264140385277874, 0.32434303191549574, 0.7146041368878682, 0.32551826966941366, 0.706314193661273, 0.35229666190001085, 0.339766630053313, 0.36071206264717104, 0.36629912179570345, 0.37036424947477997, 0.2309709237091403, 0.2970245013867545, 0.4999461523811709, 0.395065529963075, 0.27894302898976264, 0.19064931387372386, 0.17676038874579114, 0.13747268009141445, 0.5345333511165864, 0.14124042824798166, 0.1558258540764642, 0.12928688231910623, 0.22506848592701933, 0.3062469883501274, 0.14889852264147518, 0.19004093984705128, 0.14163612512400559, 0.34799457924198984, 0.13076638620352865, 0.22495628587887118, 0.10057340066052112, 0.009633411536396075, 0.11086017110373725, 0.05450921712586465, 0.16890432648184273, 0.030535639224173017, 0.11135212570877684, 0.32443964720692864, 0.28252969636320957, 0.14675662553232882, 0.12037345949566336, 0.12775274484426313, 0.10625083757878762, 0.23474231954200164, 0.18482090302750098, 0.16384085759224054, 0.10001264949883915, 0.055616464622481376, 0.06977221959772795, 0.09367525582094183, 0.10121149119091988, 0.07357328568147659, 0.14855211712793248, 0.19423519118367305, 0.09809909325860366, 0.3103181773076883, 0.2004805262809103, 0.2889444873106558, 0.1927559901642132, 0.2547280464981373, 0.28696542349807264, 0.2798236669590626, 0.25424408002972465, 0.17925339670946616, 0.5219350695954585, 0.5785268279473625, 0.5112293719064791, 0.4915416030357558, 0.4742730703857213, 0.5247069415663349, 0.5632711675031042, 0.5652744525573439, 0.5758843837254903, 0.11700591986386977, 0.1024753774986259, 0.11817852776967053, 0.1395425803868966, 0.10485360008221944, 0.1400851951633949, 0.12881754111938748, 0.1286906813210953, 0.12419220355857596, 0.2172864141417643, 0.1918196437615346, 0.18417588564104936, 0.21969067641644424, 0.27281238470434743, 0.2815599916390513, 0.24914217269470007, 0.23547208170279177, 0.20264257858596657, 0.33992892819051646, 0.2879201236853499, 0.30372392542741433, 0.4098211100260468, 0.3508815499542598, 0.3153442440102149, 0.26193487046198793, 0.31506724269973496, 0.40898571941700546, 0.22012204685436854, 0.24218639878856552, 0.30924600745341324, 0.26089315837966387, 0.2090826080242687, 0.33322403739104545, 0.37950901606653975, 0.22442862535087182, 0.29936974229006186, 0.20167060131192716, 0.22931483651579487, 0.23653930541391754, 0.223826893286026, 0.19330203619921904, 0.20152840256213478, 0.21221249075275816, 0.2224672632697685, 0.20105839505408007, 0.2263776594150506, 0.2152077916396058, 0.36655849656849837, 0.21336632647891685, 0.5245850457694541, 0.22980886894314767, 0.23522065712071294, 0.21118130597745555, 0.2063066638484813, 0.183761308520203, 0.6688016846317083, 0.8002968408733402, 0.16814784881062184, 0.6009391644840538, 0.8119493975017381, 0.752747711441941, 0.726827662184252, 0.728305808871478, 0.2046604289935514, 0.21091618276756507, 0.4268158409227186, 0.2943643572477148, 0.1982514628193548, 0.20777901730378245, 0.20631602766219392, 0.46383957328759307, 0.20652646520514117, 0.18190565767867906, 0.19756706165862847, 0.18440607515664442, 0.173668172205374, 0.20243288119591385, 0.22156299912198296, 0.2102600690955272, 0.18383635475179727, 0.19746361602288776, 0.10590849321522933, 0.08205267464203536, 0.09531766541537567, 0.0877509850967092, 0.09434875436703694, 0.08420096285587131, 0.08650550026812365, 0.08090675864413988, 0.08669814117877883]}, "mutation_prompt": null}
{"id": "30f4b10b-0aef-4a4d-a787-d134c1f02eb7", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "6c26a698-14c5-4b58-8912-c5e6db748735", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "90a054a0-b6e8-45b3-9a1c-bd806267e921", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "dd134262-cd50-4852-8e19-787c14055515", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "4e255dea-a4f2-4c71-a01e-2d1909ea6a99", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "fa52178f-68ec-46b5-a8d7-f27e594d0402", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "02ee58e2-f36a-4edf-b528-0fc585f05dac", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.elite_size = max(2, dim // 5)  # Elite archive size\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        elite_archive = np.copy(pop[np.argsort(fitness)[:self.elite_size]])  # Maintain elite solutions\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                    elite_archive = np.vstack((elite_archive, trial))[-self.elite_size:]  # Update elite archive\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Enhanced local search with elite guiding\n                if evals < self.budget:\n                    elite_choice = elite_archive[np.random.randint(0, elite_archive.shape[0])]\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = elite_choice + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm incorporates adaptive mutation rates with an elite archive to enhance local search efficiency and prevent premature convergence.", "configspace": "", "generation": 44, "fitness": 0.31669922171149484, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.24.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7902206339620984, 0.7870447360735748, 0.7709951600875575, 0.7956096134755785, 0.774441703204949, 0.7731572580853042, 0.7864499085465562, 0.7583490790936559, 0.7870274203444725, 0.5275268051177944, 0.5162079901839774, 0.4930636721266536, 0.5462164441187036, 0.525296877427099, 0.5327258928915973, 0.47600079128676454, 0.4946583583688501, 0.5120141978382972, 0.18086001737766488, 0.4181837467055928, 0.1608167529537935, 0.153239575983376, 0.4705795560306516, 0.11738890621328935, 0.1310647029312908, 0.5351728757725456, 0.17361167510556863, 0.11736797992599313, 0.12931999625824142, 0.07124210557676813, 0.12307706275926045, 0.13900637720553355, 0.12647552055635902, 0.1264710806885896, 0.1686496951751425, 0.13323588559994948, 0.8972373331149981, 0.9352719777035301, 0.9018901908313022, 0.9349231870694283, 0.9322230216388252, 0.9248424422575817, 0.9146073712295435, 0.9494738009018872, 0.9284520789388985, 0.41430238722062906, 0.38188744368211935, 0.3745938066523221, 0.46655075715484895, 0.36671166802448163, 0.4193663680804246, 0.3833546789554746, 0.36254839190813515, 0.3983284231655222, 0.22174740223160616, 0.8167698388379979, 0.8502362329310311, 0.21168033679937048, 0.26886828499148996, 0.20815244939215427, 0.8471922507078423, 0.8351905268203701, 0.8185632873974372, 0.1614099932777292, 0.15744563078422924, 0.19609808297800801, 0.16928282235450953, 0.34238311019316603, 0.1875324567654536, 0.1843505476500904, 0.12757239028351708, 0.18628919757595297, 0.17464062206768027, 0.17313252690659864, 0.2181210623452451, 0.18211245792852881, 0.17593021720644042, 0.2575688992048183, 0.17598010302047717, 0.21601371218743404, 0.20105096699516767, 0.08975723326508211, 0.09239388675381766, 0.034349397387709146, 0.13419076747165926, 0.1114066095476095, 9.999999999998899e-05, 0.10630998163346506, 0.06884202772550685, 0.06609155026985258, 0.10072953964953701, 0.1622754412156857, 0.1262222600058398, 0.15298960362581382, 0.18204120463234874, 0.10201825208796977, 0.3308102212862182, 0.14101589590641583, 0.2246751709362762, 0.06336512987603715, 0.04041002295809881, 0.048438708853979384, 0.07946512619376189, 0.14871690651162894, 0.10716296066380604, 0.21539431744958115, 0.16313247449949997, 0.11910122229056053, 0.20255228212006882, 0.3108672102657559, 0.20987986883045762, 0.2265500836615051, 0.21316669525871168, 0.20087774170227102, 0.15590024451742523, 0.25675536599651916, 0.2940833445211576, 0.5833709180254236, 0.4867373160788445, 0.5044455180056651, 0.5496858525603504, 0.5164852628725893, 0.5578966100819542, 0.6386466858314751, 0.5603539862625029, 0.5300540560377568, 0.09440296577878848, 0.12911452582508987, 0.13816896302502413, 0.12813061752065447, 0.15371640517034268, 0.1138089063941834, 0.09417135226151163, 0.11354982719397344, 0.17743382238250271, 0.2005207299132803, 0.22851244893174316, 0.22120013497437074, 0.2576023456848553, 0.2778749291409638, 0.16280980851965965, 0.19848537278276057, 0.19733220090497305, 0.4970368758279965, 0.4687534210372144, 0.4396082469443765, 0.3306210282517851, 0.44297699355844766, 0.3650753732412483, 0.44260051124573097, 0.40272918681031655, 0.3814940422725849, 0.4094825914824536, 0.23747713092963385, 0.24998451993749726, 0.3084799356819051, 0.3806395165456746, 0.2611150768053523, 0.40140088627323744, 0.25283039285098585, 0.2851346912897579, 0.31031869213907515, 0.23441994105657282, 0.22537854752498665, 0.24490309516185826, 0.22973350885756372, 0.19754722452289097, 0.2635702618357477, 0.22809622568131838, 0.2314431357644633, 0.19390967767247103, 0.22012758484015815, 0.20618868318113437, 0.2039341834573486, 0.6747001601069101, 0.2412913194422247, 0.20491303511867887, 0.2223133041789338, 0.186251653164898, 0.2472057779547412, 0.1123640047886143, 0.8765629776517387, 0.15267478383366162, 0.8063030669421941, 0.19991508667384839, 0.19785683802525167, 0.16635177088253617, 0.20887625903643925, 0.20721947909624916, 0.805746932810694, 0.203806371242649, 0.5015894487018445, 0.1507493666096834, 0.3963357650461443, 0.16846653555676583, 0.12603704835662843, 0.2064303041927713, 0.21154011642880977, 0.18629183098534663, 0.20182475556691704, 0.20241952208991065, 0.1871057778709898, 0.22384036438300037, 0.1880747272053317, 0.19814310638530863, 0.1879278991990061, 0.19443913630975518, 0.0933723055856659, 0.10215385568462165, 0.10382623492806231, 0.1149030065285388, 0.1401780461958826, 0.08985571891596211, 0.1012164186833745, 0.09930138651534504, 0.09844410297489647]}, "mutation_prompt": null}
{"id": "f8d9875e-a1cc-4035-926a-693895fe0552", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "de21442d-ab22-48d6-914b-c00e639e4b88", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "6b946be9-be95-4fd2-969f-2bd1249c4e21", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "43d07c4f-6fb8-4c79-87b0-f1f930390b0a", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        crossover_rates = np.full(self.pop_size, self.CR)  # Initialize crossover rates\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive crossover probability\n                self.CR = crossover_rates[i] if np.random.rand() < 0.5 else 0.5 + 0.5 * np.random.rand()\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                    crossover_rates[i] = min(crossover_rates[i] + 0.05, 1.0)  # Increase crossover rate\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                    crossover_rates[i] = max(crossover_rates[i] - 0.05, 0.1)  # Decrease crossover rate\n                \n                if evals >= self.budget:\n                    break\n                \n                # Learning mechanism: explore around best individual\n                if evals < self.budget:\n                    best_idx = np.argmin(fitness)\n                    learning_perturb = np.random.normal(0, 0.1, self.dim) * (1.0 - evals / self.budget)\n                    local_trial = pop[best_idx] + learning_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[best_idx]:\n                        pop[best_idx] = local_trial\n                        fitness[best_idx] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm enhances diversity through adaptive crossover rates and integrates a simple learning mechanism to emphasize promising areas of the search space.", "configspace": "", "generation": 48, "fitness": 0.30322565839712856, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7289102991789895, 0.7224065654188904, 0.7444186857452544, 0.7289738506506551, 0.7084620059489923, 0.7100340739492492, 0.7248812331113303, 0.7057023896327494, 0.7236597357722728, 0.40302385230248083, 0.38827232837777326, 0.39021411180442866, 0.4171299696515094, 0.3881154328055878, 0.42911553977689176, 0.3650689897233321, 0.374589202614827, 0.3808296721727332, 0.24859666836303884, 0.263997619181351, 0.28739179370259016, 0.1936677498108711, 0.31573331020033446, 0.24830129700444992, 0.2041464776884735, 0.21559107180736714, 0.2687096446477788, 0.166023757536938, 0.1457064534475654, 0.1488015024655298, 0.13462034845796866, 0.10407477427156153, 0.14406907727990315, 0.13211697935791455, 0.149358937600649, 0.27255871015859645, 0.9448671060140443, 0.9313238985915139, 0.9285845736770846, 0.9435804815079111, 0.9206904867183826, 0.9166727334664829, 0.9257694038646874, 0.9311814675272473, 0.9212136360588175, 0.3968346160835732, 0.39094965175488106, 0.3867307550215501, 0.46278327992446777, 0.3984338039587607, 0.3836417926685666, 0.39795939534770797, 0.40367604002794033, 0.4007063743040121, 0.20569853649780678, 0.22014137719946458, 0.21735885818333867, 0.7868355585276638, 0.2696293725902167, 0.7335715765897206, 0.16803050386284035, 0.20295873596438152, 0.6571867971505302, 0.35647477278438655, 0.18870539902458672, 0.18243459572732146, 0.17809956215208023, 0.19623555074812327, 0.2664615590486906, 0.22846262256975136, 0.25210284593687193, 0.19301201268318158, 0.21171667623582502, 0.20213135073171729, 0.3240441875838753, 0.2051274712788289, 0.19476609549328538, 0.20468816295941983, 0.18405965053735585, 0.2764171276780024, 0.12440340424351326, 9.999999999998899e-05, 0.043935681636609325, 0.06576390043716074, 0.02906484257629438, 0.09312589876294586, 9.999999999998899e-05, 0.017957523152707155, 9.999999999998899e-05, 9.999999999998899e-05, 0.1650469301543328, 0.07589011220295083, 0.14856906739712372, 0.08146896862251163, 0.1070211789789437, 0.06759147734773518, 0.12524504441581918, 0.09894742822804636, 0.10319738182030846, 0.058282755782584905, 0.038941615601966295, 0.022964036516399222, 0.022413777095651843, 0.04716875362300399, 0.02106642464230557, 0.09993269260623161, 0.05484329722530834, 0.03536652474442292, 0.1846254671109202, 0.1004611915483189, 0.14957777809231554, 0.12983011089833563, 0.13745212186289812, 0.17032465830059318, 0.15565398311465484, 0.15433483950972315, 0.13152990367082473, 0.48205442507375607, 0.5122301172622771, 0.542642448377104, 0.5144096913699785, 0.4947211084121894, 0.4880167719674119, 0.5162246357951288, 0.5057219893881575, 0.5123111433974646, 0.11149492079742873, 0.13435694632502015, 0.1340674748308076, 0.12183680404775055, 0.13441449120013238, 0.10065451611419762, 0.11896872805133984, 0.1376712184727874, 0.1305547332283129, 0.15383672876986965, 0.25632930573410084, 0.2176631792835707, 0.3646286079015113, 0.3484111243460799, 0.1962641463391468, 0.2721203072996099, 0.1922780013952473, 0.36293132566884834, 0.2814784656003839, 0.32403068615031083, 0.32306284465545465, 0.33920377150696723, 0.35942820857468893, 0.3341241946897474, 0.3627588079597972, 0.34466953596216543, 0.3231645916765866, 0.2440358936302247, 0.25724736061693476, 0.21934041364693835, 0.27041597401131523, 0.23890113094494114, 0.24123588633202708, 0.25488428598629376, 0.23351401454160192, 0.22315736332588254, 0.21639356171692792, 0.21067328739947966, 0.22759202770323195, 0.20014561266848085, 0.20747003704663436, 0.1922724206558586, 0.20642180502039886, 0.19054067751455084, 0.1975524756688808, 0.202832895402841, 0.21186483530236655, 0.3241082839331425, 0.22305695503938106, 0.19740238571818347, 0.3130669628649414, 0.3413947901855189, 0.20737404341794563, 0.22863819821499087, 0.17918577104645228, 0.807251568010958, 0.8252117194871083, 0.7523730411778803, 0.7261991322771921, 0.6878981119572877, 0.1819255967285539, 0.711040535450163, 0.6491975147348695, 0.6918281281767324, 0.21466176195442654, 0.6971721865305884, 0.21376545644365463, 0.1669250308767054, 0.6441311996256065, 0.21275535172037352, 0.5837022343158014, 0.6051585509625099, 0.18999549493532186, 0.18839486984727793, 0.19611094795099548, 0.1950694243550446, 0.1889613362458037, 0.19095884475088676, 0.2196752114566194, 0.19610048300895255, 0.19045229765065896, 0.0929081830722609, 0.1260764686502971, 0.0883371559466497, 0.0842282674210606, 0.08041655741173048, 0.09443796169186358, 0.08528892827310297, 0.09005969078614018, 0.086994282911795]}, "mutation_prompt": null}
{"id": "8138ed24-4dd4-48b8-bbe6-34e737ae77a1", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "6cb2c2d5-6cc2-461c-b39b-b5c1ab8dec26", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "494d877d-b363-4fa7-ab0a-c825b6b259e3", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "6b11f6b4-a4a4-40ae-933c-abb44f7754fe", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "ac8194f7-3677-4265-86d0-62a220a07630", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "2e93919d-8745-4e62-8e83-44fd704ee846", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                self.CR = 0.9 - 0.7 * (evals / self.budget)  # Adaptive crossover probability\n                mutant = np.clip(a + np.random.uniform(0.5, self.F) * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "Enhances dynamic adaptation by incorporating adaptive crossover probability and modifying the mutation strategy to improve convergence speed.", "configspace": "", "generation": 54, "fitness": 0.2725757731539203, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7071289763992648, 0.6893373754744208, 0.663707455878843, 0.6709948149187576, 0.6809463537014055, 0.6967535372002251, 0.6958955702263462, 0.6723227941219116, 0.6805924071023441, 0.355150615378082, 0.3923572279108103, 0.37582916235334507, 0.39984013551392883, 0.354841029807338, 0.3689440604767519, 0.3784600216318773, 0.38084337691354786, 0.4088712833731374, 0.1851956588142315, 0.1896088006848542, 0.15761380843525696, 0.19341838541546408, 0.16583450976599667, 0.14454165058053425, 0.19327996414592108, 0.15715810202039115, 0.20191408130121846, 0.1856421830824343, 0.17677689900320093, 0.14803461409379493, 0.15096196168778164, 0.12871744767942095, 0.1366283082573544, 0.1291141836261237, 0.16227731165726578, 0.1727333424877735, 0.8871072989635993, 0.9022814642163524, 0.8726039750163578, 0.89076653047853, 0.896209976303845, 0.8937279761237382, 0.8909421584716687, 0.9088190112474078, 0.8757753722746144, 0.3068819133347297, 0.3146123217111848, 0.2908834272232843, 0.2894980565426728, 0.2788554928059376, 0.27556268390726313, 0.2949952546190182, 0.2826484857279521, 0.2896742479608746, 0.5678291363153134, 0.47859545347198196, 0.32107637146120205, 0.5642349433442744, 0.6908395930862311, 0.640478492254478, 0.6450570614556301, 0.31564353315260585, 0.5990818166853602, 0.1917978595196803, 0.1827721367595675, 0.20369820933054084, 0.18709079737919432, 0.1584731481604298, 0.21591615233559447, 0.20668203250208195, 0.21724452073866163, 0.22730794605055293, 0.2258517176178766, 0.16137824004028822, 0.18375068289693453, 0.16119654575909936, 0.13316254664362837, 0.21109240612804014, 0.16485799166328907, 0.19307327703838228, 0.16744110352841057, 0.057423931258070326, 0.05842190046811224, 9.999999999998899e-05, 0.07836501763538761, 0.03351707507260726, 0.028406100682318747, 0.09578912697170561, 0.028868946790868932, 0.06424839529994208, 0.19821717876102907, 0.2066000634599453, 0.18193064528423641, 0.08484505243323259, 0.1333355350240747, 0.16453859183027286, 0.19512483761153931, 0.12983660973367384, 0.16942288667453687, 0.020042587100733034, 0.017371224543095587, 0.016691980032854214, 0.01414494846041503, 0.010958172088112561, 0.016730976736327507, 0.023380681019425698, 0.022084320623625198, 0.023046622150510343, 0.1311938250898309, 0.13563373246088029, 0.1448416537567595, 0.13547488830065357, 0.13405167509539517, 0.14464589271610095, 0.14392185673795843, 0.13419449011360762, 0.12861980831864261, 0.46043221912680987, 0.45134925382326607, 0.4518172524097208, 0.4738465022389152, 0.47077746634570694, 0.4444138203368352, 0.47752943368914025, 0.4413603701250377, 0.44733162462649034, 0.11954794280662828, 0.11701560323727023, 0.12187453645046298, 0.13464118717579188, 0.12818196616629918, 0.1482048073108303, 0.125344933089941, 0.10465662251932772, 0.1542934167881025, 0.23785332768647138, 0.23138498335376823, 0.19136520601563356, 0.2110086252473119, 0.17719166455801805, 0.23636944406756744, 0.21180895283814238, 0.21221022973627246, 0.19440054905502746, 0.27878704388723596, 0.296844076304411, 0.3398104024658425, 0.2966316481222774, 0.31803488946958935, 0.27019668817526554, 0.3126151608912149, 0.33009354109621303, 0.29711961792338837, 0.2252743513385742, 0.2503993026951359, 0.24150221844303932, 0.2430242593008316, 0.20366399678253133, 0.19262940040588727, 0.23444260949138673, 0.2538332125077426, 0.23638224174398137, 0.192533862425166, 0.19029392976540793, 0.20401819926813036, 0.19757070053209713, 0.1835491789426379, 0.20547726551746937, 0.22151950152033228, 0.2012904025497242, 0.23071691957344298, 0.23756034450499286, 0.2655100892838652, 0.24471423350823251, 0.22387751856783744, 0.21172506760316634, 0.24580256986107807, 0.2520046955175832, 0.25329556874001347, 0.21503474489860985, 0.18473121307405882, 0.17598799816156752, 0.24906820253543005, 0.5574770282405555, 0.344461852756362, 0.49263817486667305, 0.27141932042058414, 0.586301257200869, 0.18575336038070178, 0.4211315742019268, 0.20022865455659455, 0.471131386842613, 0.2507932659600015, 0.30961090674107283, 0.17883007822295038, 0.33425759846053305, 0.2024941540648597, 0.31839662770154353, 0.20122020981747912, 0.1881636988401787, 0.18031820979032276, 0.17903142337382016, 0.18710354803892837, 0.19504913585975625, 0.19453319891351994, 0.18844560896578333, 0.18586397012439104, 0.08685290918899768, 0.0816633007866987, 0.09156118835619886, 0.09208733911926792, 0.0796393685825626, 0.07843593719121511, 0.08021747953838965, 0.07976786983389628, 0.08195055238114879]}, "mutation_prompt": null}
{"id": "d3507693-a351-454a-a977-8721e75c198a", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "90720eed-6188-4e9b-b31f-589f7e210c06", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Initial crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        crossover_prob = np.ones(self.pop_size) * self.CR  # Adaptive crossover\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < crossover_prob[i] else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                    crossover_prob[i] = min(crossover_prob[i] + 0.05, 1.0)  # Adaptive crossover increase\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n                    crossover_prob[i] = max(crossover_prob[i] - 0.05, 0.1)  # Adaptive crossover decrease\n                \n                if evals >= self.budget:\n                    break\n                \n                # Gradient-based mutation\n                if evals < self.budget:\n                    grad_perturb = np.random.randn(self.dim) * 0.05  # Smaller perturbation\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "Incorporate adaptive crossover probability and gradient-based mutation to enhance convergence speed and robustness.", "configspace": "", "generation": 56, "fitness": 0.23754998856908696, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.6884686575517235, 0.6896889959462595, 0.7228304300976607, 0.6946759209727341, 0.6940884807636526, 0.6902098518662363, 0.703015956646736, 0.6831759315868018, 0.6731421910461107, 0.37467955898294836, 0.40374921172849265, 0.33731275328055277, 0.3396301351042116, 0.38211965280719473, 0.41876922620456325, 0.3416012390888282, 0.3567013773869263, 0.371422177058615, 0.29764613211344493, 0.18637190752387678, 0.20602563609949853, 0.24364252277066312, 0.2511015562157547, 0.1715015175019453, 0.19542651923939047, 0.21134548786208285, 0.2005609955985066, 0.14980287481072652, 0.139306787459459, 0.170840154232631, 0.18122301161158605, 0.22422911820842317, 0.17437636583950022, 0.18818063327781265, 0.14357072899154644, 0.1810094327624554, 0.8732406298410283, 0.8485780285906612, 0.8849122125611342, 0.8480417956955415, 0.8554584332888048, 0.8463905521049897, 0.891090351695514, 0.8152314363386961, 0.8925120383224904, 0.22226609627852145, 0.2079563539411955, 0.21934898431182015, 0.2380816110461943, 0.22742166028471122, 0.19063832076616805, 0.16918530410717392, 0.16045791582445257, 0.1900830570206845, 0.19978049670375575, 0.20050426675869126, 0.16986656328512129, 0.33093036689825117, 0.23343370024214494, 0.26420923293741383, 0.26735170100315087, 0.282425899417314, 0.2058857836728073, 0.18888014542290732, 0.19476622120825315, 0.18963567831383732, 0.18797716203823722, 0.1874277883379165, 0.16486938125491013, 0.21177627928842213, 0.1620844860842191, 0.1557025862497139, 0.12081867402353197, 0.11857269095893519, 0.18817151785370212, 0.16405142944055207, 0.14693739983995058, 0.1272087420846254, 0.1751387267295057, 0.13438594972514362, 0.149810164076707, 9.999999999998899e-05, 0.022625333845332385, 0.019812134534204273, 0.007050126631690912, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05069898252062843, 0.10094080585565901, 0.09674632778808723, 0.10174580505620034, 0.06207598780645729, 0.07116100941000736, 0.1181659713391, 0.07938279958422301, 0.10554263865923463, 0.08129516481679344, 9.999999999998899e-05, 0.004869053404115586, 9.999999999998899e-05, 9.999999999998899e-05, 0.004634731881590914, 0.001864737162745267, 0.007685799202502341, 9.999999999998899e-05, 9.999999999998899e-05, 0.10214968512075484, 0.1235842554325507, 0.08395161693177888, 0.13324718413382475, 0.08666719483101748, 0.10169254868023359, 0.10290939150798861, 0.10814730272617035, 0.11038276141806214, 0.4297592234019685, 0.4371110299223441, 0.41754185904799446, 0.41760524357504636, 0.43420359095758876, 0.4064110030954948, 0.42879384613669524, 0.43759896115358476, 0.4292992856585629, 0.10318536595042005, 0.12732470653715244, 0.09456257849005578, 0.1291051961781855, 0.13564612653217611, 0.10100861910953884, 0.1309587887337178, 0.11916921215983622, 0.10220764192600906, 0.16722557245571423, 0.17273468571798223, 0.17332579024295214, 0.19564303083672374, 0.20323064524151357, 0.18021010430471884, 0.19260234363131945, 0.17941202377128251, 0.19499787202185093, 0.2405280550235599, 0.22622520581695915, 0.2644425964886201, 0.22068393042584578, 0.2621307815772127, 0.23275880187126596, 0.30457676217905916, 0.3006866776822781, 0.2680044460529112, 0.18476394172344035, 0.15586267267921194, 0.19778783732979222, 0.15524594528865654, 0.18517041071007012, 0.20190782311242494, 0.21709478445583819, 0.21390290715762394, 0.15834274507997548, 0.19165808491568326, 0.187644611661546, 0.18768730160445268, 0.21830001173670444, 0.19115854252547082, 0.196788872468882, 0.1782182978464225, 0.2083165045817008, 0.1924311937344122, 0.22341566767632237, 0.21212195048754856, 0.20927203617976342, 0.2411683378377707, 0.24466082288148105, 0.22110006198042553, 0.21835445704591794, 0.21436777391734507, 0.2625249953882066, 0.3415547630035073, 0.23688555692694702, 0.3459015229577532, 0.41540191306097063, 0.23706717724311321, 0.32449535567056664, 0.21236398552782787, 0.2015251016272961, 0.16898033740927731, 0.24166646936265013, 0.20504454577232378, 0.22158449891840803, 0.18370735402201677, 0.1774266997649676, 0.29829820832111187, 0.38687870329984375, 0.3710376039981136, 0.2986071432869605, 0.17311248747956165, 0.1921950721204102, 0.17797979596103564, 0.18562758374941513, 0.18782176985655152, 0.1788953811887377, 0.20009795667100816, 0.20201977160304518, 0.198114976249386, 0.08819188539529732, 0.07679485240905448, 0.08351630019348866, 0.07695074567124627, 0.10712330557068672, 0.07542072997873295, 0.07216297119347725, 0.08317576234213009, 0.07801875081062426]}, "mutation_prompt": null}
{"id": "88bf057f-345a-47f3-b675-ac8a64a8a958", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "6761afd7-b124-4256-b5a0-dfeab0e9d721", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "fe9581aa-51b3-47ea-bd36-d1ea063256e4", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "213d80b9-dd43-4311-8f8f-e2f1c337d0d7", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "5f84aa68-4438-4d18-95ce-f9b8a709c68e", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "ea95f58d-0bc3-4fb8-be60-3ad16258151a", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "cf7603e6-e836-4d8b-b059-3998b14e62c8", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def levy_flight(self, L=1.5):\n        u = np.random.normal(scale=0.6966, size=self.dim)\n        v = np.random.normal(scale=1.0, size=self.dim)\n        step = u / np.power(np.abs(v), 1/L)\n        return 0.01 * step\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n                # Lévy flight for random exploration\n                if evals < self.budget:\n                    levy_step = self.levy_flight()\n                    levy_trial = pop[i] + levy_step\n                    levy_trial = np.clip(levy_trial, self.lower_bound, self.upper_bound)\n                    levy_fitness = func(levy_trial)\n                    evals += 1\n\n                    if levy_fitness < fitness[i]:\n                        pop[i] = levy_trial\n                        fitness[i] = levy_fitness\n\n            # Update crossover probability adaptively\n            self.CR = 0.7 + 0.2 * np.random.rand()\n\n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "Enhance exploration by introducing Lévy flights and adaptively adjusting the crossover probability.", "configspace": "", "generation": 63, "fitness": 0.2731939960938012, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.19.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.6072917004583382, 0.6298242558626321, 0.6355335123101253, 0.6020356747075662, 0.5949151090330789, 0.5999252221255218, 0.6303975533586139, 0.6197058911631312, 0.5876461368334047, 0.2948571959400441, 0.30766702438593363, 0.27472942590877336, 0.2621486709515075, 0.28565484421719556, 0.2620699173489607, 0.2936597488632541, 0.27716811807491837, 0.26703451876742457, 0.20072183898363538, 0.13620876305930674, 0.29143825925332545, 0.15329022647112356, 0.26769905093847224, 0.16807950955915385, 0.27190495150731964, 0.16456954068867014, 0.13399534326512763, 0.17773723883449621, 0.1336742277252515, 0.1648858365566488, 0.17741082994226276, 0.1282780670302811, 0.13336043399299813, 0.18049447580207323, 0.22978959002443422, 0.10493393271559104, 0.7997585541886385, 0.8256155306239719, 0.8524615472665343, 0.8177731501719527, 0.8137945896567239, 0.8834695811200453, 0.9452854748459141, 0.8223797743472443, 0.8362604819863172, 0.2546425329078099, 0.29770359993819107, 0.2893059999462979, 0.26079224454555794, 0.29650723405413293, 0.25117758023301195, 0.2850465376302672, 0.27597864946971584, 0.26451956815327804, 0.5143518998622689, 0.687178777772044, 0.19616150932744314, 0.6065600853300195, 0.578597248944745, 0.6400288016356931, 0.22689994165000138, 0.6021655646162655, 0.21617418445088887, 0.17130119465401716, 0.26949742451392544, 0.16949376265185168, 0.17408002316922289, 0.2290669063963987, 0.24105288195821672, 0.14497378573896347, 0.2662232291314732, 0.14236463837317637, 0.33804023989207144, 0.1551428481871362, 0.19293272623716662, 0.27048716040346865, 0.15586175313853567, 0.19635185527126153, 0.18114051515876983, 0.1375718911945767, 0.1725241976633488, 0.11004092208365801, 0.04198189158934351, 0.12358462189093056, 0.08569995134268482, 0.010630804493192758, 0.05544592426315664, 0.08222553285855716, 0.08414113307455884, 0.06603979399148063, 0.16117181837147787, 0.12826772235301176, 0.12686698621562242, 0.10040670294462284, 0.19080268776125764, 0.09479295975910318, 0.18532359971742585, 0.16832936326112702, 0.1638073202534882, 0.09253473305997484, 0.05616169760259804, 0.039243952810672944, 0.08004596108434703, 0.05047773923803289, 0.13795134082592708, 0.06653097127408458, 0.07346923279669137, 0.044442392339829384, 0.14375201551731043, 0.14656041650723295, 0.16950780595376258, 0.14855556245610135, 0.1601317789181852, 0.17563519575993958, 0.16436909197003746, 0.15538922438602276, 0.09493583357891455, 0.44829053575925526, 0.47436046413186184, 0.47068798246405763, 0.4642820283498438, 0.4482214631262519, 0.4222487104133059, 0.4707028651283607, 0.43912604087165596, 0.4583447446499934, 0.12999820620181157, 0.1031962700285356, 0.13596574106561876, 0.1208703707175659, 0.11748959079525989, 0.1211070668108648, 0.12187263561642014, 0.1325753944561071, 0.1344977767071639, 0.20889761084912573, 0.2178219871715199, 0.18728605754209493, 0.199587774883633, 0.27495818130489447, 0.17658461507292744, 0.2660436934413314, 0.21033868279557144, 0.2397843199516363, 0.3216694653854708, 0.3054296807940815, 0.31612711259569937, 0.2852567766901287, 0.29222065253111007, 0.24845483882669428, 0.30864153317856147, 0.32935683818725003, 0.287667293738059, 0.23080977549804294, 0.2371726009042603, 0.2609727073180049, 0.19680310900201303, 0.24614066082519415, 0.1904351924582075, 0.2165244724551192, 0.2582569437969642, 0.1946582768673435, 0.2097512175045374, 0.20786252248841097, 0.2105768407478854, 0.19587399193187738, 0.2514849304579386, 0.2264396343444679, 0.2185847030005793, 0.21251650160600966, 0.21655650111819003, 0.33418048227779296, 0.20554001283124745, 0.20325294137748517, 0.20788901509591173, 0.21272079673941968, 0.24179539560221552, 0.21257221909741097, 0.30649173928754914, 0.3067537255640477, 0.6417604960809258, 0.6811415094043294, 0.4333041101189239, 0.5511831673533603, 0.19535848912558684, 0.6585844153893421, 0.5729444040825796, 0.2146651526558666, 0.6801158078408389, 0.30613025125208626, 0.1895862403316413, 0.38831982763880024, 0.39433470968901096, 0.1647195905467015, 0.19455202788986015, 0.29914133657206843, 0.18542130950383062, 0.2583436847131598, 0.20978042522698748, 0.21179311465066464, 0.21898783679334033, 0.21403123498610144, 0.2023080307715982, 0.20937532203936438, 0.20505778695313415, 0.22968948681298096, 0.2102444675441174, 0.1061480722728626, 0.08601424347598441, 0.09138785903596214, 0.08002051339907157, 0.0895131533868071, 0.08893910584720655, 0.0970370950285917, 0.07712580646516565, 0.09157216157683501]}, "mutation_prompt": null}
{"id": "c9d95e40-1c3a-4882-954c-71a6f2a6f2d9", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a self-adaptive mutation strategy with crowding distance-based selection to balance exploration and exploitation dynamically.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7294746952755597, 0.7194495050066468, 0.7215921649042067, 0.7326024977554864, 0.7216705299893217, 0.7158426647997613, 0.7285562797190308, 0.7145857364504199, 0.6900002609334646, 0.436555572276242, 0.44653833356227257, 0.45950089449242726, 0.4334424345202489, 0.46116271462568026, 0.5030323395751082, 0.44740270334567633, 0.44364697759591376, 0.4293076861250278, 0.16000230260944848, 0.1564938271769506, 0.14045982880370533, 0.3339370354407566, 0.1442692947096006, 0.14101644053440454, 0.14306736410780263, 0.3429957255723999, 0.16192934247769553, 0.15828031971438938, 0.3077015310839566, 0.2868693137381617, 0.16114061168087357, 0.1398805915930842, 0.13946691219836704, 0.15366542021809781, 0.1323099254802872, 0.11993077718937073, 0.9115411701800977, 0.873086298381529, 0.8463608767366468, 0.8669208149444093, 0.9322423740404797, 0.9387777595821192, 0.9685513932301042, 0.8900520843562426, 0.916992771835943, 0.34333303124083736, 0.35334081515366744, 0.37121902286989095, 0.3440554308690681, 0.34201219459406773, 0.3506426425105602, 0.333906216464681, 0.3398650802118517, 0.3542468102771521, 0.3637355337472463, 0.6876342390851481, 0.2098400091263254, 0.7322980546023692, 0.7742394954462593, 0.2637023039573141, 0.3575512200572273, 0.6768922529720531, 0.7481692984842043, 0.1809371700682766, 0.3963793727676287, 0.1839787051829861, 0.15414093068954082, 0.3985287656841753, 0.1650214114915054, 0.1785272119468857, 0.17868959613976243, 0.21523105444249824, 0.20268043289954918, 0.14537185122732066, 0.28261589764488815, 0.19165861138226892, 0.4690876369080408, 0.12400602865308064, 0.12106643686326557, 0.19609907983084096, 0.17103710872090583, 0.09651642382682735, 0.1233151257651296, 0.025655558581396343, 0.05577182820742832, 0.1754329235311628, 0.04661226110857497, 0.1588086584877476, 0.0974056689647066, 0.15760676047914535, 0.1678166323783602, 0.321026120257495, 0.1973911660590627, 0.08913124951805496, 0.14408159740888804, 0.152640278621214, 0.23193346812187743, 0.21584956054705118, 0.16845000348740946, 0.12332018935942035, 0.06466551758967087, 0.10087046497490426, 0.15364823549033668, 0.07178480630866602, 0.0954099827054693, 0.1306637904399659, 0.13254084016154355, 0.17178883389050148, 0.19751490085487222, 0.15246848040200622, 0.21573064047337398, 0.21093316133599338, 0.1917644701058484, 0.18631189724803476, 0.2128178667925812, 0.16623249388927364, 0.2027366919275282, 0.5616806539139269, 0.4845903731415526, 0.5102076147822505, 0.4863140789171111, 0.5349701798591155, 0.5009073376022615, 0.5679427625145075, 0.5033581752331998, 0.46534827702666215, 0.14126510599400444, 0.1332925249289858, 0.12206753847076801, 0.5253729661036592, 0.13662560995084527, 0.12613478413840062, 0.14161953027269103, 0.36310556614490297, 0.16571238495148244, 0.23695066834614364, 0.29376476445972366, 0.3520345798368901, 0.352279819605949, 0.3014235606455896, 0.2479360284315617, 0.3340985826146162, 0.26068208229894274, 0.17760260024912145, 0.3773522468487617, 0.23733505588479564, 0.37268153973246143, 0.3549670132988869, 0.40367777813044836, 0.3207005362294323, 0.4140988987595374, 0.47756674407905675, 0.4117108334443542, 0.23931080182446018, 0.25536245347806896, 0.27807796955110864, 0.34266728489945586, 0.29870175782677055, 0.27169053037906365, 0.34409490588641245, 0.3050842455101581, 0.23278481894417968, 0.21298328165591662, 0.2179806760347206, 0.2116283324579471, 0.20827802617559532, 0.1864587094801191, 0.19797137258219544, 0.21179665798456593, 0.1891295167697623, 0.1981052437575157, 0.19191103123438857, 0.20856540928584133, 0.218993414516779, 0.2260928186124157, 0.5965263372160381, 0.20155882552621496, 0.23019213494445834, 0.20665771054385007, 0.2351459517228519, 0.8043056116253169, 0.7878014106482493, 0.7298983515746769, 0.7360124134763868, 0.7537694615470603, 0.7231842706992273, 0.6878715940912659, 0.7398581286362429, 0.7649679156378035, 0.47932736128781606, 0.20678527766910237, 0.38829538747340375, 0.1998649899603434, 0.1616715066057477, 0.203949100764948, 0.20419087780420775, 0.20187721967031147, 0.7866047790735518, 0.18899533763388543, 0.19320463133292398, 0.1961971714385916, 0.20024259308021342, 0.1926593526837309, 0.1904038869977377, 0.1945497174071047, 0.19908152369002896, 0.18498258141053103, 0.0853989947018976, 0.09413282543759705, 0.09368223294369038, 0.10325230508539918, 0.09813064409046779, 0.10845004584635809, 0.08801867219109993, 0.09469253167606406, 0.08802083176350717]}, "mutation_prompt": null}
{"id": "aff30c37-710b-48fb-80be-b2db16dc4656", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def logistic_map(self, r, x):\n        return r * x * (1 - x)\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5  # Initialize mutation factors\n        \n        chaos_factor = np.random.rand(self.pop_size) * 0.5  # Chaotic factor\n        r_values = np.random.uniform(3.57, 4.0, self.pop_size)  # Chaotic control parameter\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Use individual mutation factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)  # Increase mutation factor\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)  # Decrease mutation factor\n                \n                if evals >= self.budget:\n                    break\n                \n                # Crowding distance-based local search\n                if evals < self.budget:\n                    chaos_factor[i] = self.logistic_map(r_values[i], chaos_factor[i])\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget) + chaos_factor[i] * 0.1\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates self-adaptive mutation strategies and introduces a diversity-enhancing mechanism using chaotic sequences to explore diverse areas of the search space effectively.", "configspace": "", "generation": 65, "fitness": 0.31004743150633335, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.7271082385703576, 0.7246438007018127, 0.7255759909928807, 0.7381981101672144, 0.7166075708277981, 0.7236706455313686, 0.7376419337552711, 0.7403644455591198, 0.699191241151145, 0.502122181428744, 0.45120641280985885, 0.4842517736399946, 0.43137636297441284, 0.4182277207142604, 0.4405612019359685, 0.4969376514449241, 0.44253867993836027, 0.4425627496239579, 0.16286980160609288, 0.1423858437448694, 0.16914120038469804, 0.1571463975378381, 0.4081660538872801, 0.3894990044137604, 0.4249166525866891, 0.23833601454854392, 0.17289808662331163, 0.17570436959797808, 0.13466666133353933, 0.12467422065474076, 0.1365871375811606, 0.1510631418872601, 0.12226505853118685, 0.1186828325660827, 0.1559550785444902, 0.1326889613236505, 0.8658998368181988, 0.8594843102534073, 0.9214986868226146, 0.8563260590496542, 0.8970821226306747, 0.8883501365288811, 0.8671725264461341, 0.8727303790213576, 0.9277043662618051, 0.3176466716091483, 0.319990499621743, 0.34545929338638326, 0.3154698455997197, 0.3728658578856312, 0.4195457179095401, 0.32990153372322095, 0.2995846069400684, 0.3173706678355701, 0.7752822673442975, 0.7368715805346829, 0.7674840602695034, 0.4918704234287108, 0.6569590703017449, 0.7674431934567951, 0.7420673564095779, 0.6940220554073852, 0.2326744654012911, 0.3035314091752661, 0.15164613246250025, 0.17737815941216228, 0.16773726615052142, 0.15984736074966477, 0.14874906779305674, 0.17771730837490107, 0.25959697069370635, 0.17479809395749601, 0.16833608587820004, 0.14424928598359854, 0.14518582754408726, 0.16097592700101282, 0.12890626978867314, 0.19293804339722054, 0.3274333845558436, 0.22506547540698296, 0.17743867738160557, 0.07607742095362169, 0.10149728596992169, 0.045043600034771814, 0.12222904109354726, 0.11936752679859997, 0.1077932518270025, 0.10606231046763803, 0.1167710631078297, 0.049119049565593875, 0.13979176571115026, 0.16046655933300935, 0.20080764872203738, 0.09806717433807932, 0.055970958302120954, 0.11620633003555336, 0.19874952835486814, 0.16381795700748847, 0.18546789164838562, 0.07017850343525356, 0.17215087774756177, 0.051109670904327165, 0.1922067397554682, 0.06765425027058425, 0.11933659757123682, 0.161779599852514, 0.12471844818925015, 0.08501374403545214, 0.18654975856771905, 0.18009758301607148, 0.1619438791266553, 0.20513890554474568, 0.19501257421706586, 0.1938527386919583, 0.1784340251643729, 0.21724234549318355, 0.24532306552477035, 0.5861265127279951, 0.47853337049942823, 0.5350380666543635, 0.5065504366711409, 0.540259185543697, 0.49614989103232454, 0.5148085539381225, 0.5333882137160393, 0.48238781739485714, 0.12358700034076087, 0.1587863687179586, 0.1254120909052806, 0.15762293821397655, 0.1417637178331288, 0.12741712345711398, 0.10366479924021421, 0.14138311876118625, 0.15734457031023907, 0.25480364655842536, 0.26598001136561245, 0.26604954317591767, 0.27818929302191087, 0.2630804233656512, 0.19415703631450576, 0.3381475687417562, 0.4200112448976704, 0.29744215439852506, 0.3004184143192652, 0.2773687579308176, 0.4094286638151482, 0.3592475667183569, 0.3798172167261801, 0.3238961392169163, 0.33489540725537204, 0.4538726654235249, 0.3990895073011851, 0.25214891986540877, 0.26913848374587857, 0.24198874029739015, 0.2656260740803269, 0.32792546852609206, 0.3612145451233544, 0.32037532791721923, 0.32117216374382107, 0.23099628196713717, 0.19863472711676666, 0.19549190183590515, 0.1990757707623103, 0.19504608132347956, 0.22148092745333847, 0.20850460974971974, 0.22048732025395534, 0.22988308620882136, 0.18591223660628076, 0.46655871847322683, 0.4404561767794506, 0.2078816423522445, 0.23003960684748104, 0.19859075339908727, 0.19607268361965102, 0.21083947354838117, 0.20065495180370285, 0.21033943923876597, 0.7790327127856848, 0.6654181389077318, 0.7870836837890544, 0.19370959820754363, 0.20761992920541783, 0.19284433058193806, 0.18313304664817265, 0.17085951227631047, 0.20608815485171295, 0.5720244725611654, 0.4793747347928182, 0.4661056798018266, 0.2096153411570716, 0.20000936929167978, 0.3135930097650569, 0.2054506306794357, 0.3903905842843034, 0.3776035227847032, 0.19127040483964408, 0.19568169708712768, 0.18290392032137326, 0.17836980501207167, 0.2084926901895774, 0.18211479652603213, 0.18643985354282977, 0.1779852538958283, 0.18301552888990902, 0.08535731363043941, 0.08250252671631664, 0.08681353975941586, 0.08156716203234449, 0.08834990811592602, 0.08214767627026143, 0.08812217877126005, 0.09421815676681178, 0.08050995538116079]}, "mutation_prompt": null}
{"id": "cbd22914-912a-4b00-a351-90f9ae6f55f4", "solution": "import numpy as np\n\nclass ImprovedHybridOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim  # Population size\n        self.F = 0.8  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.sigma = 0.1  # Perturbation factor for diversity\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            # Stochastic ranking for selection\n            ranked_indices = np.argsort(fitness + self.sigma * np.random.rand(self.pop_size))\n            for i in ranked_indices:\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                self.F = mutation_factor[i]  # Adaptive scaling\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n                \n                if evals >= self.budget:\n                    break\n\n                # Improved local search with adaptive perturbation\n                if evals < self.budget:\n                    perturbation_size = 0.05 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    \n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "ImprovedHybridOptimization", "description": "The algorithm integrates a stochastic ranking mechanism with adaptive scaling to enhance convergence speed and robustness.", "configspace": "", "generation": 66, "fitness": 0.32012409888194854, "feedback": "The algorithm ImprovedHybridOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.731592555502515, 0.7209274055630512, 0.7141895698965175, 0.718708108992125, 0.717053485565193, 0.716513223924158, 0.7413590530775673, 0.710809707133037, 0.7494725766349636, 0.43662169877015544, 0.4351848305671804, 0.4880891620361718, 0.43978466879851075, 0.48028522834730636, 0.37754866849878155, 0.43740061669304087, 0.4790246855756167, 0.47859955094715856, 0.15699322810056582, 0.15977604801093026, 0.44440832048951706, 0.16043019423926708, 0.3508381325893223, 0.344511662512034, 0.384496119164756, 0.14467100555119194, 0.16049885868606528, 0.15522256310556226, 0.3091659863949092, 0.15061608865954534, 0.14286372479740495, 0.1336083682138549, 0.2368461385447318, 0.1372876729276561, 0.12315510842711863, 0.13310448098790761, 0.8715990987720468, 0.8587428741588744, 0.7659448582413455, 0.8461230088977932, 0.8553109475886693, 0.86794198671972, 0.832031904207057, 0.8336703171913711, 0.8205107615427001, 0.36750718081576095, 0.3275454338985665, 0.2997604215748908, 0.31212379995394657, 0.3352317577373377, 0.3112084847511325, 0.33957906128248094, 0.34634690807029755, 0.2519946122595089, 0.7740141607172213, 0.2428733636640642, 0.7950841797119955, 0.6942279127140496, 0.7849158619230336, 0.33318242040884394, 0.7476770486119058, 0.7136570226890165, 0.6782260531390387, 0.21566713899684942, 0.11429514691673304, 0.16838117057425128, 0.161596343559963, 0.1957593036615325, 0.40822054054988544, 0.1677500936436117, 0.15370453580100474, 0.1547673199417523, 0.15801250000319467, 0.1106383571063474, 0.14729560641496953, 0.17060697060551233, 0.17108832238485827, 0.21954482808448417, 0.23451305788285048, 0.2728479617906685, 0.3078236780713606, 0.004024098279178934, 0.0668079289779775, 0.0649446294314997, 0.034695667243107575, 0.08454603609115707, 9.999999999998899e-05, 0.12590381732262557, 0.011206512371043531, 0.2582200448403008, 0.3510857745488146, 0.21802401075117128, 0.14221912588810082, 0.06969357868664028, 0.15349617917053726, 0.11404875491730382, 0.227483452736585, 0.2800790709484515, 0.1385179389211798, 0.08327548048209732, 0.049987569241730645, 0.14767493970627255, 0.1380680335761315, 0.07523566431878226, 0.10236859287851274, 0.08817324316672948, 0.14025406374465166, 0.10203631060726148, 0.20732995769357032, 0.1619426472573281, 0.1293207823962479, 0.2036336884664579, 0.1691895999629165, 0.17996907896400194, 0.18844318507179492, 0.18327453460921905, 0.2338294741360719, 0.4997205541259443, 0.5689865338657432, 0.4630848653613542, 0.4848246147876051, 0.4834053251057827, 0.5469885321019958, 0.4802521865928595, 0.47888977118647336, 0.5402432061487654, 0.12908754475227902, 0.1255771682050918, 0.12730406509937897, 0.10993025184902416, 0.15323966994219718, 0.13621277313615177, 0.16122690993413658, 0.14554540616437373, 0.11542011257753404, 0.2595791368190652, 0.39749707313935656, 0.21118891188759403, 0.277158752803785, 0.21038887074195622, 0.2941284301623418, 0.21897191651231362, 0.2761287822511783, 0.2079091118088885, 0.40557719306934903, 0.34407212447395974, 0.4375167510985366, 0.26875406033044935, 0.39885271078840634, 0.37324878413888196, 0.4255919640560306, 0.35511698646865464, 0.42084601079192197, 0.2153158543353878, 0.28244486983330797, 0.28826050167027284, 0.25194405723589774, 0.2009628638781209, 0.3825484732179245, 0.28108230015482716, 0.3696582280561964, 0.3702693504139868, 0.2331142418143317, 0.18543060816396872, 0.18931670739732231, 0.21922617470124062, 0.2213482327644969, 0.22361448164464137, 0.23155041310497304, 0.22056026443561283, 0.2173295569303364, 0.22315414320940374, 0.22289111817133733, 0.22347728384871912, 0.1884298724808584, 0.2346448494752964, 0.21264547659806365, 0.20282220870133727, 0.3628611441068037, 0.5582711511556956, 0.6743764156230402, 0.832597927613874, 0.6668742946513082, 0.8103662223846088, 0.1953115392784155, 0.7058653227625078, 0.8028720611820024, 0.7827774099195304, 0.1665970266440816, 0.3816321208125666, 0.1992749441274535, 0.5170254327887038, 0.6384931141082151, 0.19484661602491793, 0.44958660975574594, 0.2008377235353851, 0.14546783692678944, 0.47295004943908614, 0.19989047500200363, 0.20269602813322785, 0.1896239864096092, 0.2073242665756504, 0.21120650494192905, 0.20332658625641775, 0.19834272655718255, 0.2018360034074994, 0.20601201846781136, 0.0764802988349782, 0.09703841218948306, 0.08222551147416235, 0.12294671594785123, 0.0898184544896603, 0.11446195801433401, 0.11696228927641972, 0.0772366358191433, 0.09567604678222796]}, "mutation_prompt": null}
{"id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 67, "fitness": 0.343093400773745, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "1cc87840-05b1-417a-8fdd-31d3d2876e64", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "242e12d7-54a1-4de9-8cba-95edf5606498", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "efeb3976-bcc3-4b5b-93a2-14753bc2e6c0", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "8cc035c7-2559-4e15-9b45-8b723da121b0", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "f62c3aab-3934-4141-89c3-46c767b3e3f5", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n    \n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n            if evals % (self.budget // 10) == 0:  # Dynamic population resizing\n                adaptive_size = max(5, int(self.pop_size * (1 - evals / self.budget)))\n                pop, fitness = pop[:adaptive_size], fitness[:adaptive_size]\n                self.pop_size = adaptive_size\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Incorporates dynamic population resizing and adaptive learning rates for intensified exploration and exploitation balance.", "configspace": "", "generation": 71, "fitness": 0.343093400773745, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "6ce12879-feea-4c95-bba3-78cbcd6913d4", "solution": "import numpy as np\n\nclass AdaptiveCrowdingDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                # Top-k random replacement for additional diversity\n                if np.random.rand() < 0.2:\n                    k = int(0.1 * self.pop_size)\n                    random_indices = np.random.choice(self.pop_size, k, replace=False)\n                    replacement = pop[random_indices[np.argmin(fitness[random_indices])]]\n                    pop[i] = replacement\n                    fitness[i] = func(pop[i])\n                    evals += 1\n\n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "AdaptiveCrowdingDifferentialEvolution", "description": "AdaptiveCrowdingDifferentialEvolution: Enhances diversity by introducing adaptive parameters and stochastic top-k replacements based on non-dominance.", "configspace": "", "generation": 72, "fitness": 0.2243570022262203, "feedback": "The algorithm AdaptiveCrowdingDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.5542447821173451, 0.4261723994962816, 0.6454174576068499, 0.6463515064924019, 0.6577861211009736, 0.8030367853766287, 0.5886966552159598, 0.4466066853347316, 0.6155694881286284, 0.38188279614539455, 0.2534743588263546, 0.3901825288267644, 0.2556395512293723, 0.17530253689516162, 0.26058229583849457, 0.2241467119386802, 0.38609565328917783, 0.12350389069848644, 0.07654981932345306, 0.08219124421474477, 0.0922622859260287, 0.05521879539250307, 0.11936221197693342, 0.0932793962982893, 0.09718247605022678, 0.10795437305632383, 0.08948662627973791, 0.0454441460086209, 0.04232599036980733, 0.0830044628746065, 0.11081859213593759, 0.04691484462895912, 0.032481090382002864, 0.06387453832462675, 0.03833807556648239, 0.04895418249368888, 0.9686573969034046, 0.9713297588688642, 0.9383455743190028, 0.7749526416355783, 0.9703238183737647, 0.9477473688537058, 0.9781756275166534, 0.9608746584696654, 0.971341766472597, 0.06365003357961718, 0.29003912385479047, 0.13185518024505472, 0.11401656028141516, 0.2833925699040195, 0.1522178613243692, 0.13254363720618856, 0.06955439254884954, 0.20352338328594843, 0.2168131634369086, 0.2121599445701543, 0.386478488602088, 0.27531131328331515, 0.15823381941004333, 0.11597354460330134, 0.297123029410033, 0.1773383811456417, 0.22959766172781604, 0.3666676177495213, 0.11086394542282163, 0.12995764440782243, 0.21361388219745747, 0.1409160309701929, 0.12224143436642443, 0.1298038203922981, 0.14109012816366207, 0.2041961100980868, 0.009991902819689091, 0.12494790507467568, 0.1311304848662479, 0.20506261576104623, 0.12771388705041498, 0.2895137442899315, 0.2001401106008438, 0.1373778102241977, 0.12873797230288853, 0.2215982353751258, 0.0871087579469817, 0.07626057730528923, 0.15285184094642956, 0.02076415600167092, 9.999999999998899e-05, 0.01401923430253793, 0.12727736985057891, 0.07613080349869361, 0.19779281831556483, 0.10212617125332768, 0.12033518920271036, 0.08483344247036662, 0.01702342725503625, 0.15689010466079378, 0.15855077961834818, 0.30276484853704, 0.11698290573675807, 0.045894483401858865, 0.05859354969776376, 0.15119372865196568, 0.07235712996178878, 0.09268490297517806, 0.1500167896747453, 0.16144294940738202, 0.09360204677703221, 0.08763670388724987, 0.2105393545030877, 0.1641760170066926, 0.1630193732467402, 0.14011614540182293, 0.08806088513143528, 0.127461847705024, 0.28767004844704447, 0.18727529062075132, 0.11485068710900848, 0.3624890249244568, 0.4315023204149484, 0.38275600076165783, 0.4604518462616577, 0.4777296913091692, 0.3512860871701232, 0.4462711194650728, 0.50378119269003, 0.46751245006322684, 0.07667222118453498, 0.10065829087714662, 0.09412992075514992, 0.11330628811916155, 0.07348370299788098, 0.08107816983278315, 0.1241043017084057, 0.10704836549392371, 0.12096668756907802, 0.11997168074005127, 0.14080530147952597, 0.13413145941422933, 0.15505932761101449, 0.15519524041992006, 0.13402083667874953, 0.1648470002974316, 0.13976704213863633, 0.17116840217003682, 0.17644573975067301, 0.22226003986418819, 0.19373528189207323, 0.18139158951114365, 0.18851455427414832, 0.19557521830507774, 0.2489351985220547, 0.17377774300845283, 0.2552666846883044, 0.11147394339114702, 0.13425055098339267, 0.17513070205489745, 0.28228926383980557, 0.20362768589970281, 0.1772348889597235, 0.16303972599968308, 0.20107462444797253, 0.25921235226486294, 0.1640390375334949, 0.17604926711331104, 0.13345086981233123, 0.16728951978951156, 0.1614023208214589, 0.1783242300032324, 0.17337094048664492, 0.1499908314347278, 0.1642283713729068, 0.16133093661133768, 0.2020364579890499, 0.18562190350654195, 0.19893432465022665, 0.16320746349700965, 0.21024678653564244, 0.17729941967696305, 0.17519140184448623, 0.18823675118333083, 0.16755017842628128, 0.1840522167470845, 0.15129828454583583, 0.5527546840785569, 0.5316387964424079, 0.18586921970768078, 0.1684934978277579, 0.16662387542970047, 0.8112233665505941, 0.6316937658617814, 0.1998656565805933, 0.16573137018282502, 0.16596119551652466, 0.1629259638568954, 0.12231350743683522, 0.4972412797143779, 0.21113486641312285, 0.21112881793957972, 0.1386248042157886, 0.14602602357663286, 0.17127106633544575, 0.1506421812554778, 0.15182075989148103, 0.16328549112603874, 0.15723923208673674, 0.1691141397059227, 0.14689007985489466, 0.08340399441232671, 0.09717456803706004, 0.04445885778703473, 0.047938922440757925, 0.04226900108910925, 0.05942799659759135, 0.03286101235107164, 0.038304229588055905, 0.07330328485070836]}, "mutation_prompt": null}
{"id": "f9c114f2-eab1-40f3-b22d-0f1b70a28c51", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "0a5322cd-2988-4123-90c9-0f7ab5c46736", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "06f1120a-1e70-433e-89a6-9209a6b00f06", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                candidates = np.random.choice(idxs, 5, replace=False)  # Select 5 candidates\n                a, b, c = pop[candidates[:3]]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Introduces a multi-candidate selection strategy with enhanced mutation diversity using a Gaussian perturbation approach.", "configspace": "", "generation": 75, "fitness": 0.343093400773745, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "912c9ad3-38af-4efe-882e-84420e492b90", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "256df203-34cc-4d9a-bbe1-347d1bbaf4f5", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            # Clustering to promote diversity\n            num_clusters = max(2, self.pop_size // 10)\n            kmeans = KMeans(n_clusters=num_clusters, n_init=1).fit(pop)\n            cluster_labels = kmeans.labels_\n            \n            for i in range(self.pop_size):\n                cluster_idxs = np.where(cluster_labels == cluster_labels[i])[0]\n                if len(cluster_idxs) > 1:\n                    idxs = [idx for idx in cluster_idxs if idx != i]\n                else:\n                    idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Introduces diversity preservation through clustering and adaptive mutation step-size for robust convergence.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'sklearn'\").", "error": "ModuleNotFoundError(\"No module named 'sklearn'\")", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {}, "mutation_prompt": null}
{"id": "51f4dc38-020e-4999-9438-698757d85096", "solution": "import numpy as np\n\nclass AdaptiveCrowdDifferential:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                # Gradient-based local search with adaptive scaling\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.normal(scale=perturbation_size, size=self.dim)\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n            if evals >= self.budget:\n                break\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "AdaptiveCrowdDifferential", "description": "AdaptiveCrowdDifferential: Introduces adaptive mutation with gradient-based local search for enhanced exploration and exploitation.", "configspace": "", "generation": 78, "fitness": 0.343093400773745, "feedback": "The algorithm AdaptiveCrowdDifferential got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "27c82074-4002-4dc3-a5da-551c77611af5", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "955f7746-f54a-4029-846b-98a46b01a58d", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutationAdaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        historical_best = np.inf  # Track historical best fitness\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                adaptive_factor = 1.0 if fitness[i] < historical_best else 0.5\n                self.F = mutation_factor[i] * crowding_factor * adaptive_factor\n                self.CR = 0.9 * crowding_factor\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                    historical_best = min(historical_best, trial_fitness)  # Update historical best\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.05 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutationAdaptive", "description": "Integrate adaptive learning based on historical search patterns to enhance exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.3026878049745409, "feedback": "The algorithm EnhancedCrowdingMutationAdaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.21.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.7478519705930513, 0.772516735045702, 0.7347146171338081, 0.6180958149139713, 0.6759458960507065, 0.779035639377655, 0.7643517395129954, 0.7509057591345066, 0.738054544986404, 0.15347934339825775, 0.5081246119824969, 0.1309005857034763, 0.24593567091349366, 0.5418432745191515, 0.2276112253531971, 0.37303038503761876, 0.4219447497193689, 0.12832510029045552, 0.12994406873287845, 0.16958860086354421, 0.12506539336435885, 0.14931882853824063, 0.13929473051702934, 0.14625896127805937, 0.10225759103650289, 0.11730820096627326, 0.172750074536001, 0.09880505384639238, 0.16002432938962352, 0.11874586664280817, 0.1294894751284288, 0.06420368179850944, 0.11788561523579755, 0.13068134942020737, 0.11844475199499738, 0.057122790449115945, 0.6296049118972289, 0.5827900219521447, 0.7110351662563127, 0.5396036247672278, 0.7685095412381864, 0.8134228083018484, 0.702166631919438, 0.8380781421292326, 0.7945845327557214, 0.35648660512062547, 0.28473528219391053, 0.30674983166851644, 0.24831038064498856, 0.20840702748378226, 0.3491612478083139, 0.3893425492446737, 0.35365808718284175, 0.38990569072827763, 0.37587416700498977, 0.6916328592672496, 0.7466635982366099, 0.23734686948690065, 0.7584419742937129, 0.8462169164097518, 0.14589253836189875, 0.8405455052697662, 0.15364097296544565, 0.3524758979500304, 0.12052162592500515, 0.1103316189261444, 0.1712804992900706, 0.30178444259328985, 0.26358794466050217, 0.18540229071941172, 0.23693927575336415, 0.23712033699178758, 0.226002802657283, 0.14903352162296468, 0.34460878854372146, 0.2983399369802838, 0.16730177174131822, 0.16818070799198725, 0.23918492947530645, 0.17126241372482764, 0.21367812745063797, 0.16862057813306186, 0.5655495218884432, 0.1794421930108101, 0.4709935230868816, 0.15992347483818703, 0.22408231443902416, 0.22427977470256844, 0.3167675326382028, 0.17538221295958212, 0.6745352698862193, 0.16537783881343548, 0.554993192391366, 0.1695150688824809, 0.39494098835996305, 0.08767094322825375, 0.31118305660773427, 0.5953833485770592, 0.2035292736437735, 0.12861768261776474, 0.20822809084937666, 0.12190733570385015, 0.15774659770917354, 0.1689751328440845, 0.1682383603819393, 0.19608933683391128, 0.13385637623787494, 0.08996640712419468, 0.15839862924704107, 0.2878962740240014, 0.22100730480289799, 0.23582542547311947, 0.3251180459565487, 0.29787084321731117, 0.24257710715573932, 0.2601514849718852, 0.2993688193664219, 0.6588201891510368, 0.7176912092401985, 0.6639086840991724, 0.6048890321416238, 0.4658122305740584, 0.4899964492391601, 0.5136386172728292, 0.5707624777751285, 0.5146515152004463, 0.11193640285667794, 0.07979017105306374, 0.08033345470830022, 0.1741773266014779, 0.1305222165215355, 0.1386006198272769, 0.10620304679202819, 0.11346641176222294, 0.14902524440285592, 0.24815377426870955, 0.17845291460092616, 0.3137881922808273, 0.2213461807253555, 0.2521902741524714, 0.21848544537668824, 0.2928277415914261, 0.24759830154335005, 0.17118965141998088, 0.3266310563419117, 0.17386620914030604, 0.34046151523954893, 0.28327422527873636, 0.218738352763575, 0.2066199248786924, 0.23354829613211325, 0.33560985483201666, 0.2626834840056792, 0.14881466464868476, 0.2218431221953382, 0.29341664854218463, 0.3096743502610372, 0.21395604459884088, 0.24197368349488702, 0.24441787534162296, 0.2500148064222585, 0.17469408554550914, 0.23553227619698647, 0.20561402037633503, 0.21486122470124114, 0.24423095819154161, 0.20808149674641108, 0.25588949703451724, 0.23514857831913605, 0.19533001011740703, 0.2090219409576869, 0.1930358568731575, 0.20182708693303142, 0.20371923030930117, 0.19620744230478981, 0.19241792369008148, 0.1845203547694485, 0.21100703424811296, 0.19001761080679713, 0.1869713009889078, 0.1831900533709634, 0.1656737950532744, 0.683744356628888, 0.17062545532706574, 0.8835360092950304, 0.7659992919101921, 0.18202442561700916, 0.16756296751018507, 0.6789552468535893, 0.7254740623782308, 0.20021132132958885, 0.5381126158612398, 0.2092486786023514, 0.1637162698831104, 0.16373598465294004, 0.15128232018166365, 0.8778586056423521, 0.1240473188599519, 0.19539256472764677, 0.20041472730922272, 0.20115408325237516, 0.19991262027152634, 0.195177839436535, 0.18980171285272374, 0.2139372595760073, 0.19743160764475376, 0.19979949222272164, 0.15919518811626965, 0.09647464390770033, 0.0854544824942739, 0.11657295657905342, 0.08933268304073094, 0.09382140331690514, 0.11519263658970758, 0.1011280510219762, 0.09973251917962211]}, "mutation_prompt": null}
{"id": "79d95c0c-0677-4f83-94b7-0a467c04b4a0", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "a21644a1-558e-41c1-945d-83c46ff1c790", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        \n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor  # Adjust crossover rate\n\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else pop[i][j] for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "EnhancedCrowdingMutation: Introduces adaptive crowding distance with dynamic mutation and crossover rates for improved convergence.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.6512461147189149, 0.7293759779032283, 0.7221214911953593, 0.6969196360978362, 0.6707141430145119, 0.7189030802964175, 0.6610254274405944, 0.7237948448248239, 0.7079385608002592, 0.3502202016872543, 0.31443711816207964, 0.42957850653164964, 0.4568656664479951, 0.38460855428957397, 0.28100355859624326, 0.3759549133228689, 0.38529533182631515, 0.37698391199344206, 0.16611670283706859, 0.14926381665432686, 0.1407118901660075, 0.1409025259520027, 0.12775078416970642, 0.13725314018318657, 0.12004252502496748, 0.15612083454426628, 0.1369536226053628, 0.1113896391098782, 0.09857345697452746, 0.1373880196480155, 0.09995694838049018, 0.07769286781418627, 0.10700276683037668, 0.12064415070467371, 0.08410776834218081, 0.09870115433614246, 0.8031895530237845, 0.7735768856805004, 0.9358191634431698, 0.8566592829180905, 0.7852992190082704, 0.914893537942783, 0.8695716380297384, 0.828057815677306, 0.9329290551375459, 0.35484918678908495, 0.3065860644734755, 0.3422032231387915, 0.35672850791636745, 0.31014517780372497, 0.34256694117842856, 0.3149950610205017, 0.3324029728898097, 0.322065972467817, 0.7838219105609974, 0.8082382303796138, 0.7688753725933775, 0.7751789612019484, 0.785683936009728, 0.7586955707876564, 0.8096863011369241, 0.7562625180164577, 0.7829536070172404, 0.20608169848021196, 0.2647394416895721, 0.20681943437132266, 0.18428415402780485, 0.20616094708694566, 0.11151546600253803, 0.47553785315120045, 0.17385018227045002, 0.21669662539712253, 0.12090414280215223, 0.17249393812120328, 0.29421232584835455, 0.19565483709729714, 0.1894874229076442, 0.324551796299799, 0.19985825297502813, 0.21869382884625865, 0.1787375894600629, 0.06722125637142817, 0.3375337074461765, 0.47720266448998405, 0.3969125856630843, 0.37634088078485173, 0.4631785510943569, 0.33121863523331363, 0.3037224899327624, 0.436710094731917, 0.4284144360497536, 0.4630293323398559, 0.23999996922013755, 0.598435967845154, 0.5219238359513059, 0.46108785056724333, 0.48834378691490665, 0.427352219333205, 0.5406416326336532, 0.2070630764877165, 0.10322509257376389, 0.11698417626748792, 0.18766210315642662, 0.17809386873323552, 0.1599586271204182, 0.12591511206678863, 0.13336978646273767, 0.2399800063876405, 0.30753112731741883, 0.30772068328756863, 0.2708570014995496, 0.28158971399367927, 0.2790484725014607, 0.2665032219401623, 0.3049624450040793, 0.28624044708459795, 0.2805056931585912, 0.5956680644320629, 0.5471587798883654, 0.5871439210320901, 0.4725140213470699, 0.6953839701940425, 0.4989331627770641, 0.5236129990291517, 0.645161074801919, 0.6321864746265942, 0.11781838204052841, 0.12784245236024594, 0.13305927311286414, 0.14589338747883573, 0.13964619708214865, 0.16178426945669366, 0.13114947549765277, 0.14444356025232574, 0.12519895360209632, 0.31699340313543933, 0.22337400272349173, 0.2326829533718432, 0.2402377661065831, 0.36455584031121213, 0.24584269484622645, 0.34459329418343176, 0.3264019630500382, 0.3309264884511577, 0.3404304169657212, 0.3555891272984466, 0.369592278050749, 0.31760204750071686, 0.34759717534878287, 0.26444314693449045, 0.35664947520596557, 0.3600105873203776, 0.42386849125516457, 0.28044868844855564, 0.2050442888695556, 0.30384868182813285, 0.30581936213267247, 0.2398003874647645, 0.2966458041219484, 0.31745198758059556, 0.20087876841823527, 0.21727828488876488, 0.21916997882853262, 0.19271881319687467, 0.20335990564713513, 0.2118153065360071, 0.20845393270217638, 0.20510149973911984, 0.22141373315175483, 0.2274163061395983, 0.20853419717981525, 0.42750073140975076, 0.1950823781711981, 0.4257994734407421, 0.1868801940987893, 0.2091160514300141, 0.22168530550045806, 0.18298135049320519, 0.188945954146703, 0.17178756230304348, 0.76642526178551, 0.16707560384025832, 0.7126858581799015, 0.16802843475173035, 0.18495813628028668, 0.788374565983013, 0.18350058519717527, 0.834880980421771, 0.7495810832946781, 0.20144211256398525, 0.20362594245663346, 0.20627405092343987, 0.46118266520594153, 0.5783899223671559, 0.15802098198641712, 0.20634471089537887, 0.7833090736605225, 0.7081748803436294, 0.18721527913380032, 0.1917126019300298, 0.1858263382031221, 0.1935809785021022, 0.1849388759278886, 0.18707665417076869, 0.18737612734657072, 0.19018916110627138, 0.18368544266283116, 0.0850624374390283, 0.0843157378339956, 0.09602460711840155, 0.09364964307768875, 0.08109624346143463, 0.08436560536101101, 0.0829767388261845, 0.09662606656232298, 0.09295687123706065]}, "mutation_prompt": null}
{"id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Hybrid crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / 2 for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "HybridCrowdingMutation: Introduces adaptive crowding distance with a hybrid crossover strategy and dynamic mutation rates for enhanced exploration and exploitation.", "configspace": "", "generation": 83, "fitness": 0.3501542382733991, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "a0e7a819-cbaf-4a01-8029-3c435a9280e9", "metadata": {"aucs": [0.7456305958713778, 0.70011742874287, 0.729799374884712, 0.7179315440115495, 0.6787903138502902, 0.7378747093666922, 0.706226049378544, 0.5512382021223181, 0.7174401041664695, 0.3141593525297729, 0.4055941126031867, 0.29539105925382814, 0.40471581072117513, 0.4486105911449181, 0.47267003227407534, 0.08389195794893589, 0.4634615733200932, 0.38373064787298705, 0.12418809918705864, 0.10449515362600614, 0.1253191538400653, 0.16186665321674376, 0.12765109308012412, 0.14307283082064626, 0.12820910136029628, 0.16038496096663568, 0.1691722550786715, 0.13482905195731198, 0.11539445017674566, 0.08183474147424386, 0.09095329529379581, 0.08708105310222836, 0.10387945050265646, 0.08465757692883524, 0.06410912918557876, 0.10101520183453483, 0.8219491682942794, 0.7524953816566489, 0.9357271420985923, 0.8658224863682007, 0.8028134900259283, 0.8446223446916304, 0.7945191589039015, 0.8543384715167308, 0.8902635134413044, 0.33498326962094405, 0.33282204184021924, 0.32001034840385423, 0.3573871017946594, 0.3258865729449131, 0.3545538174688839, 0.35000505132458515, 0.34967774087130643, 0.3352985386249375, 0.7530950407828834, 0.8063817240887505, 0.7885646678088469, 0.7791012180645698, 0.6879438942948897, 0.7557872137305881, 0.795909796900536, 0.7558114634202803, 0.7657877760342164, 0.20513745776377112, 0.18103726078781435, 0.1912427086818883, 0.18516181777478258, 0.17164777238037443, 0.1851239132151351, 0.2303444425271397, 0.2045143311572658, 0.12125747331975456, 0.17226840879119065, 0.37152602005859603, 0.22994172294601556, 0.4328279492880941, 0.45825029918119153, 0.5472082357085257, 0.11456360078678429, 0.2597183041549086, 0.24907405560203333, 0.4420478233864217, 0.1333574216543939, 0.2606082224867676, 0.39054978599220025, 0.3952867354460805, 0.23808139802973305, 0.1923943478953678, 0.10012331069311753, 0.40577611668343205, 0.5125618429630777, 0.5166763093172408, 0.4444590494662668, 0.4611939960138922, 0.5959735220322234, 0.6056193258276388, 0.13843190718449772, 0.5128770280669239, 0.3899434732027517, 0.04385940477271122, 0.059491502479840475, 0.14403330617969057, 0.22396456079850213, 0.23480949056157852, 0.1551698049007697, 0.18998152192579032, 0.1219506803809991, 0.23234957988539062, 0.2470944902671136, 0.305898832175313, 0.3238757415746304, 0.2654265432159315, 0.28072498735390095, 0.2787884772759154, 0.2952528746479388, 0.30060287197905644, 0.3061644427662572, 0.5313911674263323, 0.6298892060327728, 0.6307775535474895, 0.6549603673010527, 0.6388897915443599, 0.5833002739314805, 0.6748620965647159, 0.633832685604062, 0.6390265877667392, 0.10703411600222135, 0.13971206119301083, 0.1197579048377082, 0.12806692796815555, 0.13680400212638433, 0.1440523129079735, 0.14245222536065305, 0.12197723857887455, 0.14719032992031567, 0.3269656536412926, 0.21408227645467426, 0.3178885955904307, 0.2044626839603949, 0.29665951298338944, 0.18111875150320944, 0.3586358582740774, 0.36023749435660124, 0.3350013739898199, 0.3330601990313249, 0.35054280872285737, 0.402401873948815, 0.33276791233519876, 0.4156056128905833, 0.38552696770854766, 0.32847582233934713, 0.34932797031587803, 0.25573276572712844, 0.3188302859545895, 0.38501177451400825, 0.29066364902638697, 0.32077396797834157, 0.3541864917446148, 0.2671778286969405, 0.3756616731534186, 0.25389441799977885, 0.21383223555697273, 0.20858956421069985, 0.19336985419072938, 0.19806320332671257, 0.19980428166564224, 0.19697075050875112, 0.19142177677537442, 0.19901189609201064, 0.23600277255966073, 0.21943692825247285, 0.19852416143073004, 0.1893139204180151, 0.1848092394666372, 0.21194771249359645, 0.19017979122264694, 0.18608115606346431, 0.18817809795593998, 0.19601337393308016, 0.23511804797470348, 0.7620957284089246, 0.17884960563542007, 0.7902608114673737, 0.7871244498928938, 0.7787678792672064, 0.7942425219959957, 0.18344075196758214, 0.7565507281725977, 0.8040266730160733, 0.6874154678149309, 0.20668665677955356, 0.7151914975909457, 0.5433385419407624, 0.45734014024137737, 0.15640951208601306, 0.20738450859201663, 0.7810882852977132, 0.15058904698268438, 0.18299889267029035, 0.19602932891869473, 0.1929678664648321, 0.18198114063540305, 0.19613531545940255, 0.19304731305883993, 0.18738952261206054, 0.1854198862831935, 0.1940526149700833, 0.09680678657434438, 0.08473169752469878, 0.0973700513050717, 0.08213820472657296, 0.06842813219518862, 0.08791565472085061, 0.08861689521214411, 0.09031796080812005, 0.09763390988887533]}, "mutation_prompt": null}
{"id": "ca425132-afd9-46f9-9f84-619e7ff5baa0", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.elite_archive_size = 0.1 * self.pop_size\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        elite_archive = np.empty((0, self.dim))\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / 2 for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                    elite_archive = np.vstack((elite_archive, trial))\n                    if len(elite_archive) > self.elite_archive_size:\n                        elite_archive = elite_archive[np.argsort([func(e) for e in elite_archive])[:self.elite_archive_size]]\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n            if evals >= self.budget:\n                break\n            \n            if len(elite_archive) > 0:\n                random_index = np.random.choice(len(elite_archive))\n                random_elite = elite_archive[random_index]\n                pop[np.random.randint(self.pop_size)] = random_elite\n\n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Utilizes a memory-based elite archive to upscale diversity and convergence by reintroducing historical successful candidates into the population.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('slice indices must be integers or None or have an __index__ method').", "error": "TypeError('slice indices must be integers or None or have an __index__ method')", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {}, "mutation_prompt": null}
{"id": "ac269ecf-6b1a-465c-82a1-7cfb40d79045", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            # Probabilistic selection mechanism\n            selected_indices = np.random.choice(self.pop_size, self.pop_size // 2, replace=False, p=crowding/np.sum(crowding))\n\n            for i in selected_indices:\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / 2 for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Introduces a probabilistic selection mechanism for adaptive diversity control and mutation strategy adjustment to enhance exploration capabilities.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {}, "mutation_prompt": null}
{"id": "cc26df56-4a4f-445e-8561-ab67e6864697", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Hybrid crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / 2 for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    adaptive_factor = np.exp(-10.0 * (evals / self.budget))\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size * adaptive_factor\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n\n            if evals % (self.budget // 10) == 0:\n                self.pop_size = max(10, self.pop_size // 2)\n                pop = pop[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n                mutation_factor = mutation_factor[:self.pop_size]\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Introducing Adaptive Gradient Perturbation with Dynamic Population Resizing to facilitate convergence towards the optimum.", "configspace": "", "generation": 86, "fitness": 0.323806704787223, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.21.", "error": "", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {"aucs": [0.7246967512280087, 0.6938108754949053, 0.7450594463699609, 0.703338023226018, 0.6840094714988896, 0.7393053617255939, 0.7362573971719844, 0.7296409319541282, 0.7167088440368655, 0.456224122087576, 0.49584470044758333, 0.49882101179217075, 0.48298762737151724, 0.47558549299077835, 0.47237687472612766, 0.4874381439729053, 0.4770799273749772, 0.486395855000049, 0.1411302617207657, 0.12242160863237384, 0.11476247309269294, 0.1192365896262485, 0.11194804111459256, 0.12177701528443063, 0.1613955893668404, 0.1371042633144729, 0.11846841804386476, 0.11035706456811278, 0.11012385386251466, 0.08251309253421257, 0.08920495694016495, 0.07456819011586013, 0.09982980725859236, 0.07457910807285029, 0.08297224642315326, 0.06795282658684809, 0.6538848763596353, 0.17066073742242538, 0.9356383267455788, 0.797599488243792, 0.481886339492515, 0.8139870407080096, 0.3223259126694381, 0.8935953570379941, 0.8915494568407799, 0.19596960342089909, 0.15858827608844572, 0.13977515595885703, 0.16931336974179578, 0.21270039082463732, 0.13005013786743091, 0.1813056989853582, 0.2825870058040104, 0.21433161405721635, 0.22775883206033687, 0.7727359389744468, 0.29651550127928106, 0.3134120734772923, 0.7207132045729563, 0.762302979723636, 0.7856509900133858, 0.22397694173881277, 0.33870316496262753, 0.12717965236235307, 0.25421530809753046, 0.1691224228372894, 0.11878142949663595, 0.4977580490434733, 0.11594994143599868, 0.15503637594278386, 0.3637802914839735, 0.15010793242920883, 0.12860609009150215, 0.3409987749682194, 0.117782649142126, 0.5956165344392623, 0.5624520007312195, 0.1185676706914599, 0.26137950409943, 0.14484254561761356, 0.11673136964124109, 0.5095180025427293, 0.46391659732598645, 0.49926259585524013, 0.30098293878826, 0.5205663807581637, 0.5162047584577166, 0.5076916516436527, 0.5203614553303739, 0.47194862736211085, 0.5967002964888775, 0.5595909201769301, 0.5882092016192335, 0.4348138049323066, 0.5967657472742607, 0.46561600396994884, 0.47496584441640266, 0.5602854246517355, 0.6031325667964387, 0.11842244140124236, 0.19096900720537557, 0.22963937019539593, 0.35647588859620494, 0.3579110772167915, 0.34913498014668776, 0.17546106060395228, 0.1361966811032298, 0.1194622336920953, 0.3492245120150992, 0.31790481700269035, 0.32281389866366006, 0.3312553791843259, 0.31200616121547387, 0.3228919020752915, 0.18573333711345763, 0.3190024244096793, 0.19411646726377607, 0.6643396433822726, 0.6730090284728332, 0.6990849107639622, 0.6787175938878975, 0.6344621168738128, 0.6349516174475563, 0.6628707585202002, 0.4518933272890596, 0.44191297598393653, 0.08706212987901363, 0.13754392890642264, 0.10009991809469143, 0.13827927628225412, 0.12107787049929486, 0.1094112879888145, 0.11840141631365309, 0.11485140310705122, 0.15329359512874996, 0.21370884290694936, 0.3249388649371793, 0.17745141598571557, 0.2054587710715955, 0.1882959296255553, 0.19709844839398694, 0.19475794158269355, 0.19197526080998173, 0.20863880248239586, 0.28479606836905447, 0.2809283984342229, 0.29595232532687665, 0.2884347357570841, 0.3594065881055899, 0.23970774962580998, 0.2982426039997772, 0.35032981629568394, 0.25112347699537163, 0.42207916235671805, 0.27222544574700425, 0.25540321575322544, 0.20365077532166076, 0.24628631363301312, 0.2533034981258978, 0.34417057034730925, 0.24839385049133167, 0.18883069029120692, 0.23181524176668444, 0.2477380707847654, 0.22877785975910758, 0.24874801698294746, 0.25730400222000316, 0.2379646325392769, 0.22127692976830804, 0.23571528432230038, 0.23314426395491994, 0.1740223808083612, 0.1814937074749272, 0.19005492030670423, 0.19390354094079587, 0.1957265669687389, 0.1819410254994187, 0.18794327519363552, 0.2137863382013706, 0.17780507155869252, 0.19351665453338807, 0.16041755836159022, 0.5984270843746636, 0.19308403147620756, 0.741052092215424, 0.7711416229203227, 0.18329252453163913, 0.23176179029500277, 0.6119147298352017, 0.7500509505599563, 0.20313996914828214, 0.48339813776745855, 0.36080459890593053, 0.3825336548549112, 0.15657609240735315, 0.20735750232383066, 0.20452000534379, 0.15113770066253274, 0.21502693732540623, 0.23160572921657763, 0.21792544565922456, 0.2078977006648095, 0.23473708901964874, 0.23379498410432364, 0.24311065126600218, 0.22563818366407506, 0.2360225856089202, 0.09231611002356899, 0.08348320059121284, 0.10648656679261981, 0.08596746118925769, 0.0905076098248283, 0.08672216917699538, 0.09018609435679659, 0.09043391972684967, 0.08873792451987916]}, "mutation_prompt": null}
{"id": "a8e32696-f429-4677-850b-99584e9f2665", "solution": "import numpy as np\n\nclass AdaptiveHybridMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                \n                # Introduce adaptive mutation factor based on convergence\n                self.F = mutation_factor[i] * (1 + np.var(fitness) / np.mean(fitness))\n                self.CR = 0.7 + 0.3 * (1 - evals / self.budget)  # Dynamic crossover\n                \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Hybrid crossover: blend crossover with weighted sum crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (0.3 * pop[i][j] + 0.7 * mutant[j]) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "AdaptiveHybridMutation", "description": "AdaptiveHybridMutation: Enhances exploration by adjusting mutation factors based on diversity and convergence rate while incorporating a novel adaptive hybrid crossover mechanism.", "configspace": "", "generation": 87, "fitness": 0.22410760446455616, "feedback": "The algorithm AdaptiveHybridMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.25.", "error": "", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {"aucs": [0.7142900392721075, 0.7394459831182874, 0.7450860771023666, 0.7297357231080368, 0.740842701450281, 0.7309058266433542, 0.7222082246948056, 0.7232021154419265, 0.7288828013216657, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11750986492721927, 0.08347428539656243, 0.09019153197221697, 0.11055935061700695, 0.12442854081133425, 0.13514334929523597, 0.10117744853168609, 0.15000004826589597, 0.2664314796647922, 0.024163358844138005, 0.01238092928542922, 0.018422312057636003, 0.05920901327096928, 0.03377077466634182, 0.04495120049048096, 0.047995942500996924, 0.06872732785617808, 0.04131330659840282, 0.9944554176538108, 0.9659015886114941, 0.9921418677106574, 0.8987384758383121, 0.8512555558219658, 0.768360029020956, 0.9699593810475393, 0.9014976321397491, 0.9947835795987611, 0.11682795483202102, 0.0627668462702966, 0.05967731690357836, 0.205302619577155, 0.1770896801674655, 0.12972275049325277, 0.015235068372495664, 0.040185520702971766, 0.05580583675432316, 0.5447182350102372, 0.6633890059354915, 0.6197368565363699, 0.6347145826304976, 0.6824723268989346, 0.704191960280854, 0.5555380939938905, 0.17730590874550467, 0.43878527926614475, 0.09798258140820326, 0.080059755697511, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004521366716620845, 0.052793888243940046, 0.01574599596114712, 0.03069778706473103, 0.004920472961373323, 0.0577873293189336, 0.002556787549572448, 9.999999999998899e-05, 0.03622815463759521, 0.02694692497029627, 9.999999999998899e-05, 0.05136482164374179, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07552558174323021, 0.058836814250616265, 0.09601377057527427, 0.06576726811127087, 0.06448775649226068, 0.08545800903886502, 0.08172353961090173, 0.09177939925271927, 0.0676840760962778, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03137572397122568, 0.013473026338791882, 0.02656917903714706, 0.002735892738612522, 0.017686780513820666, 0.010364447623989359, 0.03757635118642244, 0.015136690136585251, 0.037150742888138466, 0.44483097832654717, 0.524050561729949, 0.5235199828617179, 0.5722976822105796, 0.4604605415306392, 0.4909195431182891, 0.5172407600245161, 0.567310946773542, 0.5179024525891414, 0.0999555719513956, 0.11872392735601334, 0.14142952963318745, 0.14064151192945828, 0.13626849575321343, 0.13793311632973604, 0.05271784431006421, 0.0774754227839507, 0.06731161485191117, 0.29772446548120457, 0.27408820774155807, 0.15315907211056567, 0.33097567025001573, 0.1999012126180032, 0.3037840854058741, 0.252454509153887, 0.3086514587357272, 0.24219240482434012, 0.4523256207982991, 0.20704139046847136, 0.3582846462044471, 0.42953677632898857, 0.24599793410164505, 0.3388738658888174, 0.36935495387257256, 0.35225590506029836, 0.3433566207721549, 0.12615186529556943, 0.1308227452462255, 0.12871314166616832, 0.3765697523859942, 0.1996041088981777, 0.27945840477732586, 0.2185269974337648, 0.2802990960086248, 0.28587762756499147, 0.21338352694470653, 0.2077071028357267, 0.19636400953695632, 0.22431919543780054, 0.18794525404745754, 0.1845000355429287, 0.2099139805291116, 0.21074101382196397, 0.22283755478080725, 0.13490055651841537, 0.11476192832725862, 0.13828529524172828, 0.14827640129312492, 0.03624540423706024, 0.09968323823653646, 0.0796311619922404, 0.0895924011131003, 0.09058451805343937, 0.7648176501528454, 0.17737091012429662, 0.14877176375222867, 0.5912343094643423, 0.4082570875839404, 0.19087464389875863, 0.1597701449519453, 0.166165736062309, 0.17500030471035588, 0.8667218965383732, 0.3134458911275255, 0.37314009958818184, 0.20493276151849427, 0.32850279636742785, 0.7151522964933787, 0.20004687817516864, 0.1922790435167926, 0.3678187572308944, 0.20075587683391727, 0.21323073759681066, 0.18250882370632304, 0.19939996188123588, 0.19958694865153193, 0.19385151199322004, 0.19593797694974224, 0.19261561852685904, 0.19225983843713423, 0.09768380623743345, 0.0777669609708952, 0.08213924144126106, 0.07691405789152284, 0.08731252578849757, 0.08817781020016169, 0.07885286652561352, 0.08254390370603648, 0.08549568030085208]}, "mutation_prompt": null}
{"id": "83e18654-20cb-4924-a1a7-4396bee371c7", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        learning_rate = np.ones(self.pop_size) * 0.1  # New learning rate initialization\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / 2 for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + learning_rate[i], 1.0)  # Adaptive mutation factor update\n                    learning_rate[i] *= 1.2  # Increase learning rate on success\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - learning_rate[i], 0.1)\n                    learning_rate[i] *= 0.8  # Decrease learning rate on failure\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Introduces adaptive learning rates and crowding radius adjustment for enhanced convergence speed and diversity maintenance.", "configspace": "", "generation": 88, "fitness": 0.30191160377147075, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.21.", "error": "", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {"aucs": [0.5623515081447119, 0.5414556564203834, 0.6633674869603583, 0.5554116837735493, 0.5132801485440138, 0.5684794342965614, 0.5511434966056685, 0.5880849820429459, 0.5529216658980471, 0.2332713132808253, 0.19779413370749932, 0.26711362363866187, 0.27375847622429283, 0.3025168631573424, 0.22373136390582737, 0.2756317066841881, 0.30249474885156824, 0.3354542593747064, 0.1619524792964303, 0.1592781839983921, 0.1064589515779586, 0.14316459251985858, 0.1428094569166366, 0.14235021337811782, 0.11911094355512197, 0.15557779886999656, 0.2526119732500607, 0.12239330753221833, 0.10680643111890809, 0.10133824477223319, 0.08712912092746994, 0.055861217995298085, 0.09312376623734231, 0.09689787914817594, 0.05936389297628719, 0.13552792098980915, 0.7999594367728525, 0.5840931021039051, 0.9358143694958505, 0.8588881227869061, 0.7047596522332524, 0.8840423115973937, 0.8033832937116286, 0.8894836508833271, 0.8512390159509529, 0.3406018580275485, 0.34320474233370546, 0.3624955432260445, 0.3409080049203558, 0.3049176843043935, 0.3263901214751641, 0.34309822931581635, 0.3318145334913454, 0.3396085405439363, 0.2337851678458185, 0.3598015970933065, 0.7714464226907929, 0.7895485678481401, 0.7553633362885388, 0.8227925795103468, 0.7769181813148045, 0.2369818164533133, 0.7909758076454557, 0.21746823785301006, 0.157327293788452, 0.18581887456814083, 0.1678926849711908, 0.17202404396006354, 0.18626520101355737, 0.36448063611297665, 0.2872236358991389, 0.16202657054786118, 0.113537024199591, 0.1504204262351324, 0.29609699888031915, 0.24590581743187867, 0.18383039993012695, 0.17830767611961562, 0.18940857360278174, 0.21892940133828265, 0.21183253173003902, 0.2014726104074639, 0.2891905302217055, 0.16159740067114747, 0.20389551519620486, 0.14349148668242395, 0.17039515857703647, 0.2555371221498365, 0.136090553967672, 0.16471825158502873, 0.48817920250298275, 0.297375794919417, 0.2813130918348191, 0.3434911098137431, 0.2986777605356089, 0.5282350422409665, 0.3591693881289032, 0.22173755819450147, 0.1755212604475439, 0.053652770753098045, 0.052291058672044866, 0.09996656734055742, 0.09226098449941256, 0.09879869769570471, 0.08223458419828511, 0.08852677152865329, 0.12133120087155747, 0.09838953664221006, 0.2823225152562723, 0.23337049754847883, 0.1820052938082949, 0.17606946148009228, 0.24349579686826528, 0.2147056850703215, 0.17610211578340118, 0.20038834995326738, 0.21332827061145432, 0.459908123348705, 0.45862147586280866, 0.4994582061781413, 0.46828659067674516, 0.49166030435671126, 0.46388983111313387, 0.5395389768463452, 0.5490128784803145, 0.4710788007389647, 0.13201886711540023, 0.1377037283210022, 0.12963533517442716, 0.10118942023949984, 0.1545935778519424, 0.12766902213605935, 0.1437768757849306, 0.14077586149857146, 0.12261423863393395, 0.21484634274844217, 0.25295981019030156, 0.3231338705620267, 0.3381474819166447, 0.25016957519406957, 0.2191420438633208, 0.33387687144177103, 0.26511916940995484, 0.31168686719999583, 0.3458643743217831, 0.2643772970884316, 0.3484188475435782, 0.3220700487029986, 0.23252363580559865, 0.33806168586350194, 0.3213550077855343, 0.36619191744468704, 0.33378964352858853, 0.25443008118122556, 0.1982673444367381, 0.25359091861462135, 0.25130834569759464, 0.24327536983670262, 0.24161761380571933, 0.28893122998425136, 0.25543093508808445, 0.20041063558601058, 0.2054446821552267, 0.22872760144328752, 0.22046714109533516, 0.24063727352061637, 0.20783960222759335, 0.20448910000292408, 0.2187587245834256, 0.19936917152684663, 0.1971743907143495, 0.20130435735110952, 0.19741727438042422, 0.19725996805156276, 0.21021559430723014, 0.19198046241414524, 0.19188318170512852, 0.1936149552301526, 0.19023038812790827, 0.19810016757964133, 0.6677371971018171, 0.1800809085982813, 0.8123790490061991, 0.7402507454465128, 0.598884490259833, 0.7791885572075369, 0.7942526778349543, 0.8005900927343754, 0.6262604472643072, 0.7146563303745357, 0.20612172414029017, 0.20132181914970138, 0.27583384244025644, 0.6274824913217003, 0.5346495167648906, 0.20737820507646376, 0.2046826265853603, 0.14906918509426448, 0.19212564220655615, 0.18423431249665778, 0.18785295206291175, 0.18362659861679764, 0.1798372528629847, 0.19112836374522535, 0.19594936309288424, 0.18673304515445366, 0.20093896741603734, 0.09601689848022688, 0.08120115820460416, 0.08568222287550376, 0.10455043863764091, 0.08562220814186006, 0.08844400761723248, 0.08348372585948816, 0.0795992379596, 0.0792573559121238]}, "mutation_prompt": null}
{"id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Adaptive Gradient Crowding Mutation: Enhances exploration with adaptive gradient-driven mutations augmented by crowding distance and variable crossover strategies.", "configspace": "", "generation": 89, "fitness": 0.3589290433455745, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "c8fef3f1-8743-4a1e-b33d-3c1949ca2904", "metadata": {"aucs": [0.6855348644799795, 0.6335065132607716, 0.6410082997066162, 0.6131727052125243, 0.6909075500661166, 0.5455190964856734, 0.7036100993337477, 0.7094317418565781, 0.6957228870257064, 0.4172952333280219, 0.40948813554551433, 0.44146488317503496, 0.43699085140320526, 0.43225781489068305, 0.1515846983679252, 0.20794035697453916, 0.4367194806871304, 0.46505001771579046, 0.1452539320122318, 0.13309601724905884, 0.13838082746186486, 0.09529589686914097, 0.15513957998384753, 0.1243272027583957, 0.13965416392872654, 0.16074351886550609, 0.14598242281645868, 0.09200480089147989, 0.11858966286052242, 0.10530348502278997, 0.10351591942965166, 0.07301931311617116, 0.09753198890791503, 0.10275435260787436, 0.08124743494372122, 0.13523103845697138, 0.78423374144953, 0.7794473596840074, 0.8830198093384967, 0.8545765167909533, 0.7807514612559856, 0.8420436264435227, 0.7986241218187335, 0.861124981582141, 0.8043071975089305, 0.3848768465030523, 0.33181850041352434, 0.3251291453174825, 0.31316761040694563, 0.331589327375569, 0.3277343848926304, 0.3239825102981535, 0.3388244087996125, 0.31928657346443823, 0.7714436518766229, 0.7556345421804938, 0.7717802108302856, 0.7466310466043038, 0.7898764001569506, 0.8117178252842936, 0.8005112242973562, 0.8010091498669889, 0.7514830260815188, 0.18989075433697966, 0.20604136618172975, 0.49164755559338724, 0.17144626003030627, 0.22198981355066005, 0.1913033339919087, 0.2869878068843513, 0.22732735506004287, 0.23281724752217736, 0.2344284187120531, 0.2473984941446592, 0.20353251825482, 0.19681720920597268, 0.2001003438657729, 0.2118983350340965, 0.18699274468315763, 0.22461819473663602, 0.18510440372983783, 0.39330876547184435, 0.2961566200450686, 0.3393139270058868, 0.35626911424575847, 0.43281090308763437, 0.4406821232271563, 0.1796772262276598, 0.40920986806717563, 0.378073859192951, 0.5810627344273358, 0.5936422848865495, 0.43224107280145585, 0.3172195107767338, 0.4803943150666391, 0.5731801876135606, 0.5415247497800728, 0.5559312143685777, 0.6327467256758116, 0.052937915891434706, 0.14725004560238575, 0.08072157609210495, 0.19444504064662715, 0.19911879314964553, 0.13323877381825022, 0.07169904719826592, 0.15519440287690467, 0.11028443929281817, 0.3035317032513193, 0.3124953182454754, 0.29081836309136866, 0.21020705446549082, 0.3240141185649863, 0.3002871286667862, 0.2924470951650987, 0.286381865380293, 0.2761520469328437, 0.6536819208061146, 0.6267900605720229, 0.5510839870732043, 0.6414225112322087, 0.549542759975777, 0.6495038095700898, 0.6629265698735656, 0.5840180489206421, 0.6713965879945696, 0.12692671901368446, 0.13017794350996248, 0.13265048408919133, 0.13170090678744784, 0.11888456429986238, 0.1319347553740312, 0.1007592081333385, 0.13487109444366174, 0.11621389963492479, 0.18218186912277334, 0.3079146757845387, 0.3313691159155425, 0.30894683156602587, 0.2696620741139746, 0.28664338865395134, 0.3098070461245498, 0.226699988618001, 0.22170074887588298, 0.30817133333092783, 0.25049163772747796, 0.33332362144320926, 0.3248049254656761, 0.35421034590118183, 0.32012421136695157, 0.3414028499524421, 0.355307318447868, 0.3330674153485058, 0.29520903264322895, 0.31587604964916105, 0.2906814171638219, 0.24919637751943824, 0.28273319499791105, 0.3323057597573107, 0.35925474434320614, 0.35578722994889145, 0.30318712451709073, 0.2057956513428929, 0.2002770094798727, 0.20965006417308507, 0.225624790651192, 0.1872280594225777, 0.19082003799392866, 0.21139095450611356, 0.2554684782646063, 0.19931243507164997, 0.17800584579960865, 0.22361919682975517, 0.20804553212526966, 0.1922467117388318, 0.19820427415643838, 0.20007864577297418, 0.19570832122072124, 0.2002802680432637, 0.18404439155556096, 0.19273984736538974, 0.7205162292835166, 0.7923755583297503, 0.7584275395377451, 0.7339150326790116, 0.8068489745694144, 0.8103232838689396, 0.7567198447732217, 0.7910377153667597, 0.7157959485469765, 0.20892084538226074, 0.7645712628421242, 0.5430350156743047, 0.7691063377139198, 0.7906923946102817, 0.2090106165530956, 0.755620689318245, 0.7058006034276713, 0.1762471323900805, 0.2036262001758965, 0.214551277376256, 0.19196648805807748, 0.19130657683348795, 0.1900593628060171, 0.1882699380620505, 0.1901729113964611, 0.1797265964470709, 0.09703591751083118, 0.09285840540457924, 0.08470889233862056, 0.09194288167289144, 0.07549677406039679, 0.08988543979071095, 0.09714130176495495, 0.10144020281415356, 0.08251842210782867]}, "mutation_prompt": null}
{"id": "7b21f850-19e7-4cdf-9137-eb56d2d034de", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.elite_ratio = 0.1  # Ratio of elite solutions to retain\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            elite_size = int(self.elite_ratio * self.pop_size)\n            elite_indices = np.argsort(fitness)[:elite_size]\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                if i in elite_indices:\n                    continue  # Retain elite solutions\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget and i not in elite_indices:  # Add elite check\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Enhanced Crowding Mutation with Adaptive Gradient and Elite Retention: Improves exploration and optimization using adaptive crowding, mutation strategy, and retaining elite solutions for enhanced convergence.", "configspace": "", "generation": 90, "fitness": 0.34644021077274234, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.23.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6708865627574334, 0.6950041663868574, 0.7468405879889769, 0.7034839711122377, 0.7164689180369178, 0.6465596092191349, 0.7045157057942582, 0.7183354995853837, 0.7125476370730158, 0.3004678023691446, 0.2826111554668398, 0.3580039858748528, 0.46198111055540403, 0.4286076968748799, 0.3393804203430123, 0.4391493681653672, 0.33814125313019605, 0.39229120236297654, 0.10823647869989783, 0.1605858263138723, 0.1172269547013326, 0.14103981872670024, 0.1564005637109076, 0.10898082161608125, 0.1429153022537235, 0.16748861060032016, 0.1444372690006478, 0.09810945992219078, 0.08285704926224813, 0.13778220998408341, 0.1251977554225696, 0.09585900176146556, 0.10088605105621229, 0.08069330018510135, 0.07246082370807305, 0.07783325202074998, 0.8342112595207609, 0.7517648924795507, 0.7876599645494207, 0.8518647803324462, 0.842240440006206, 0.8780090404044798, 0.8133546852168577, 0.8852673629504371, 0.9247382790861475, 0.31901542585808684, 0.34557379643312947, 0.34660108207209783, 0.34243765031406204, 0.31014347517077157, 0.3397850399256306, 0.31664072495997586, 0.3182303023484636, 0.3323121136393238, 0.7546158281864412, 0.7937660333543143, 0.7556075725898366, 0.7520874906019831, 0.7350530162141624, 0.7147907512816847, 0.799930041013238, 0.7312212782333105, 0.7768140906469846, 0.17318093067014184, 0.21488380012025732, 0.2520143822500791, 0.17211943718076417, 0.16786815456314963, 0.21665497428369185, 0.2274814611047038, 0.1954777752878667, 0.22458506688597213, 0.2420799431006846, 0.4849688331669939, 0.19371301613926817, 0.22525063210496665, 0.22536167824643016, 0.21796002711135753, 0.20225257078601677, 0.20174686096482108, 0.1882458723997108, 0.18860621586303317, 0.4128511058434068, 0.44608436822550346, 0.4798327831247675, 0.41465556795090686, 0.3742057450948453, 0.4571279120306776, 0.5284457701309593, 0.43171740764435074, 0.5236471510169701, 0.40031957213931746, 0.4943630714088689, 0.3786361975671604, 0.3895380066863646, 0.1764915428662196, 0.5452875700761131, 0.5689447396006055, 0.5737050272860422, 0.1735289788776172, 0.23747981402829188, 0.133143080901304, 0.22109920896465618, 0.23943053350647647, 0.2750891523025172, 0.10638167736357496, 0.15694999549679467, 0.10848048733968285, 0.18980724734414545, 0.2983434332723707, 0.31638935104924293, 0.30394635465292363, 0.30045130303810674, 0.2383990270659324, 0.25011580061176797, 0.2896148705543212, 0.2880877630120663, 0.6801941774801588, 0.6307839401924525, 0.5515180557449071, 0.6237542787637232, 0.672136290309437, 0.6640066380433884, 0.6185836544649179, 0.6421009903953309, 0.6348674705029429, 0.12161623598538063, 0.11632720720829925, 0.1293378749505677, 0.14173689311894866, 0.14248746949658142, 0.09423035848077288, 0.1500874745217048, 0.13920837820886645, 0.16375368443178717, 0.310068107720752, 0.19990362955388108, 0.25401796200231963, 0.3886664563842517, 0.2654937946149002, 0.2394814156320606, 0.3770998975503873, 0.24901324072111297, 0.24924027340644317, 0.4825432740921529, 0.3932480920082362, 0.358651635951605, 0.34698541750443945, 0.3945161665006557, 0.3499057201631156, 0.3185100680670354, 0.39258914028762537, 0.22935370705580815, 0.338814948449351, 0.2706730649854704, 0.26757521706007525, 0.27339109105719217, 0.3034458247455981, 0.23604998308023772, 0.2290008066741348, 0.28699929098400334, 0.3244593420620032, 0.20252209621121897, 0.22239524504233144, 0.22550938423836797, 0.19826561713402202, 0.20141850632770752, 0.21563708330056675, 0.2209961551569649, 0.19843926187405436, 0.20218348181703527, 0.1886115777045324, 0.39638808772308354, 0.18044319043221768, 0.21676772038883496, 0.21763718418487854, 0.23258689363760487, 0.19026745841222303, 0.1914245529366574, 0.62250680651882, 0.19155615871129794, 0.1821854833836577, 0.776995708124878, 0.7639878112187709, 0.19458980992676556, 0.7996654495848049, 0.1937814613450426, 0.16628052336689103, 0.7741738025528968, 0.7673203519705593, 0.1990827649845458, 0.7206880404559428, 0.6319853313483923, 0.15985693836956383, 0.16042122566627082, 0.2082329656530294, 0.20658692193403938, 0.5951178210003079, 0.22330139562294615, 0.18359436442305466, 0.1965636853600663, 0.18835034699544018, 0.20134203673373063, 0.18530142119991277, 0.19015991461332726, 0.19022678486457667, 0.18047344293512868, 0.08436074892356848, 0.09214011190944038, 0.0845648329916896, 0.07483729993139565, 0.08764050577081872, 0.08780276176714596, 0.08917619150254918, 0.08419631065378341, 0.0790689877223284]}, "mutation_prompt": null}
{"id": "910faec6-7ee4-486e-a90a-0745e2b459c1", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            fitness_std = np.std(fitness)  # Calculate fitness standard deviation\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor * (1 + fitness_std)\n                self.CR = 0.9 * crowding_factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.05 * (1.0 - evals / self.budget)  # Reduced perturbation size\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Enhanced Adaptive Gradient Crowding Mutation: Introduces dynamic mutation and crossover strategies based on fitness diversity and population convergence.", "configspace": "", "generation": 91, "fitness": 0.1752145487887365, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.24.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.5352616932198752, 0.46634633930034974, 0.5192059426814724, 0.5457764610945072, 0.6693461197249871, 0.6243986161529383, 0.6026231582632073, 0.6049007351146498, 0.578053840927996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019964468023127457, 0.028878715785135123, 0.03629538871906901, 0.03558669396713321, 0.07224523691702978, 0.06822449291559896, 0.069316012343408, 0.09720635137231126, 0.03470291132312142, 0.01136858160863885, 0.006262835420942747, 0.01154130013188348, 0.06011348667893912, 0.025508960645625467, 0.010704215233190872, 0.024179566706425848, 0.05182588918323727, 0.0022651285455587145, 0.9944553997015196, 0.994041223705691, 0.9921418677106574, 0.9918720306375324, 0.995036720658333, 0.9535468952998213, 0.9915289597133115, 0.9389931543340634, 0.9947835795987611, 0.08137117509532166, 0.038835581799977814, 0.029239914632071318, 0.04526119591558886, 0.015821760732152357, 0.03907028661921652, 9.999999999998899e-05, 0.026722466555119118, 0.022258189141062368, 0.11052505683762759, 0.1273286205815113, 0.0769594619756181, 0.17392101540719795, 0.1281119815701326, 0.09029555682612023, 0.10554882069577975, 0.11546464392814926, 0.11674218039196826, 0.04133148336203518, 0.03031425703991575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005906902968126904, 9.999999999998899e-05, 0.04869168556411407, 9.999999999998899e-05, 0.014409781129436805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0383982859641252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08476416520039998, 0.046205761287075764, 0.05831700707471377, 0.06275820150712552, 0.038294666023913515, 0.046236505150812124, 0.005529817405711013, 0.06448517362370243, 0.058048693362338755, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034954175814185806, 9.999999999998899e-05, 0.0023720559484187165, 9.999999999998899e-05, 9.999999999998899e-05, 0.002658951246634067, 0.0008940658734838403, 0.00031441221167116673, 0.00042589313586505195, 0.5676293354499795, 0.47843254364479404, 0.5720263318037528, 0.5560591878077774, 0.4800539452255592, 0.5293434650732572, 0.6247257124773272, 0.6143036062132846, 0.6013660329241866, 0.07476800855998844, 0.0717202962482919, 0.07339806842763374, 0.0748264423654531, 0.03139393848640448, 0.06586868090470421, 0.047910299375251264, 0.049251829544966874, 0.06300537960353081, 0.15586446285405475, 0.24161750821682415, 0.18030134711884527, 0.29012379871114646, 0.3647020083286978, 0.38723524781966767, 0.21010792359108943, 0.251181345688649, 0.19318707017030834, 0.31601899978132975, 0.27889045940317847, 0.2952096048303017, 0.3482257381963153, 0.3844417496323983, 0.3555975175870618, 0.3385135599977167, 0.3408123677782512, 0.3398795464092049, 0.1329979044574664, 0.13430944274286682, 0.16838191192880037, 0.2196719192812573, 0.18851000041199029, 0.23599198360073526, 0.149928082851306, 0.23757813137108563, 0.16329625357813782, 0.1888001901882692, 0.19438842959143332, 0.1950626112557936, 0.20228231506656835, 0.18550051935720235, 0.19638868214075544, 0.2010242287395001, 0.17810758555482242, 0.1876550258753482, 0.10904268368666092, 0.08536296993453485, 0.10653329257129096, 0.13095604819837703, 9.999999999998899e-05, 0.08765205967105028, 0.03952690131679304, 0.013997928585710362, 0.0008022173034710756, 0.6817915248227417, 0.14882259709316803, 0.14740112043465325, 0.17766150840323136, 0.18369651595627978, 0.17609462422367417, 0.17091006716455992, 0.16619318750537693, 0.15408443854040832, 0.36814527591176205, 0.1649238225791978, 0.1398559161410733, 0.12867670104874374, 0.1630882253814645, 0.11047928889842373, 0.2009111144837672, 0.5818628708073671, 0.19899475719309045, 0.184534996684235, 0.19183857278171412, 0.18788065530568543, 0.21001956350548157, 0.21197217802759372, 0.21389501638579522, 0.21484296783284995, 0.2641562691017366, 0.24702654377947897, 0.04590124908939541, 0.04484848955355336, 0.04790900332147108, 0.04961289507739497, 0.04858839470242238, 0.04815128362400556, 0.045663470011247265, 0.04705475124320069, 0.042192150184037214]}, "mutation_prompt": null}
{"id": "1a8611ad-5cfc-49f1-8c72-b52fcfb365ff", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            diversity = np.mean(np.std(pop, axis=0))  # Calculate diversity\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor * (1 + diversity)  # Dynamic mutation\n                self.CR = 0.9 * crowding_factor * (1 - diversity)  # Dynamic crossover\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Dynamic Mutation and Crossover: Introduces dynamic scaling for mutation factors and crossover rates based on population diversity to enhance convergence stability and efficiency.", "configspace": "", "generation": 92, "fitness": 0.18349161493760477, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6931978193759989, 0.626390432073294, 0.6457055228714642, 0.3127852447897017, 0.2148585356237681, 0.26056927642392846, 0.5129190510495647, 0.4452540207006972, 0.493138945478512, 0.04256951699749356, 9.999999999998899e-05, 0.1823448444376743, 0.3726971967480649, 0.32424349102695516, 0.3139311431373205, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07769575825013986, 0.07250292525426305, 0.07025985325938178, 0.06115018484731405, 0.07763630232562624, 0.08746222887348154, 0.05284424076094729, 0.10396209803683742, 0.04475783482706752, 0.08116948465195528, 0.07757050299526347, 0.07094862328254326, 0.07583491200343362, 0.08652667853256912, 0.06178866586230558, 0.08976201208162837, 0.08496498278146014, 0.06760527562822749, 0.06905105391968336, 0.06811500409210913, 0.062157389859020085, 0.0628381158658704, 0.06540201764904052, 0.05897994325913192, 0.07755860263490721, 0.06527072592402705, 0.05600704624258146, 0.09206297827523136, 0.08694316475284247, 0.16534435505749512, 0.21041032122002845, 0.2238685719579181, 0.2677871510078559, 0.04667182622472088, 0.07442255104263273, 0.09758618211626968, 0.22051708301388706, 0.6864050099996651, 0.2204080703179636, 0.2204539360317308, 0.13049068883923787, 0.09500177735318283, 0.12348159228617295, 0.14421727001906826, 0.1063633116663002, 0.4002210899395865, 0.22310557662917885, 0.46725282924542677, 0.12456685122707822, 0.12523442308396393, 0.14849590059299678, 0.24408378855500612, 0.19473977284934108, 0.1896134417583587, 0.3855729471761239, 0.3199951938900446, 0.2496390657134192, 0.4510088566463982, 0.46360588407197034, 0.21097805286970406, 0.2579755189971824, 0.3609747814669749, 0.28916358407609866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014824007636574765, 9.999999999998899e-05, 0.06572786465519054, 0.01706548052238499, 0.13079118808904255, 0.1421658137013273, 0.10508848364427126, 0.11046499636671492, 0.055101248737497, 0.08120345473831436, 0.08905640368589463, 0.1084252325964351, 0.10300025469294527, 0.11747563132105043, 0.11732357024887974, 0.011856367378942023, 0.010600431699699597, 0.012612511784715896, 9.999999999998899e-05, 0.02533288011878454, 9.999999999998899e-05, 9.999999999998899e-05, 0.021240681358510094, 0.1423598093776658, 0.14901684607083365, 0.13963493090743773, 9.999999999998899e-05, 0.018422509871580783, 0.03701660722926159, 9.999999999998899e-05, 0.003667012030363903, 0.0672257661711213, 0.5145288605869494, 0.5683412549889537, 0.4993855868347409, 0.40715180630790815, 0.4876999877973529, 0.33340032249515594, 0.6340743704833635, 0.6332180030951837, 0.5762382847390746, 0.065012976516856, 0.020958285034589963, 0.045029379175364426, 0.08343264310896525, 0.06617638818445681, 0.05657055396899269, 0.07465503692579345, 0.06905746951189284, 0.07894138110742843, 0.195856481321112, 0.23901727524610106, 0.1758661607177231, 0.1961883966536686, 0.21023936165365775, 0.21062350340455693, 0.19505427585702662, 0.18726267082691495, 0.17974745186519447, 0.17352593345033585, 0.17248404771154435, 0.18866445377199148, 0.3459192343570079, 0.3267805427135221, 0.41085773841293716, 0.16543977403616206, 0.18051855533742622, 0.1644033150419384, 0.10326237235682745, 0.0923132835664714, 0.10783274858377667, 0.2948259122280631, 0.3119931997577765, 0.3160797715674737, 0.1192023061308719, 0.12996692685268352, 0.10239322744944945, 0.24489845014776612, 0.2749616626181156, 0.25375026303335335, 0.2804434247057518, 0.23074575912909634, 0.2732403682804503, 0.2577388940091291, 0.24311421168318226, 0.24223467067166082, 0.1817011144386652, 0.17508433583971872, 0.17793753919521804, 0.18392792652150514, 0.18350836821515548, 0.18914745547088185, 0.17951786987730123, 0.1784269084228003, 0.1820276886772234, 0.20453768938928063, 0.18566954613097963, 0.23491722364530876, 0.15229400150684447, 0.23464541175884435, 0.20326809364231935, 0.35811102212485657, 0.236533871146694, 0.4691947168300832, 0.31893207926456246, 0.3087894034875692, 0.46908844460152843, 0.4411810017970408, 0.300783360715985, 0.1471655612911451, 0.1919654160342611, 0.24063475003280077, 0.22442998497883104, 0.17353643558442777, 0.18291196660261932, 0.1869967952627981, 0.18700161476619848, 0.18935301631666857, 0.179539719705183, 0.18989138662803506, 0.1865429049997478, 0.18178839880329123, 0.07193933559709931, 0.10076877646629112, 0.08492619639009213, 0.07739900735048899, 0.08671760541418772, 0.09359435730288423, 0.08565482527952573, 0.11088025829977011, 0.11281533566042468]}, "mutation_prompt": null}
{"id": "f615df24-06c9-4053-bc50-1624847a47c0", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                social_influence = np.random.choice(pop, p=fitness/fitness.sum())  # Social learning\n                self.F = mutation_factor[i] * crowding_factor * (1 + np.random.rand() * 0.3)\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c) + 0.5 * (social_influence - a), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Dynamic Social Learning with Adaptive Mutation: Introduces social learning dynamics and adaptive mutation scaling to enhance exploration and exploitation balance in complex landscapes.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {}, "mutation_prompt": null}
{"id": "0f58bde0-5182-4900-9bf8-b408c54a5680", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Quantum-inspired rotation for mutation\n                quantum_angle = np.pi * np.random.rand(self.dim)\n                quantum_mutant = np.cos(quantum_angle) * mutant + np.sin(quantum_angle) * np.roll(mutant, 1)\n                quantum_mutant = np.clip(quantum_mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.array([quantum_mutant[j] if np.random.rand() < self.CR else \n                                  (pop[i][j] + quantum_mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Adaptive Quantum-Inspired Mutation: Integrates adaptive strategies with quantum-inspired rotations to refine exploration and convergence.", "configspace": "", "generation": 94, "fitness": 0.1491202444765529, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.33847068717874096, 0.3475334864630246, 0.3486128564735088, 0.18761842127559014, 0.22576489590575932, 0.2180257824068108, 0.33239342237345526, 0.31568512077508093, 0.3800706663026432, 0.011987359040113055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000428248500653039, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010030356850476707, 9.999999999998899e-05, 0.08364796463532342, 0.0714333533944389, 0.09098116881888507, 0.05900415062417741, 0.05475328975386351, 0.06731724590845334, 0.08048417670256003, 0.08299360345783391, 0.0739252056777937, 0.08419878548552429, 0.07723872502811391, 0.08528431035765827, 0.07576470050196693, 0.08530982552971578, 0.06439523931754698, 0.06596778289500926, 0.07411759505064186, 0.07691909866004643, 0.10046955447357064, 0.0726601878130908, 0.16353394185480696, 0.10561392343842324, 0.12747387139140687, 0.09436744250172524, 0.12081083801452264, 0.14686214345962145, 0.10192260043456614, 0.10173503327705402, 0.10034258431736343, 0.11427322230329806, 0.07690531009249968, 0.06835598892545114, 0.1379551485767886, 0.11057946791251383, 0.13959069052109663, 0.17391003123917836, 0.21436104255476807, 0.21078416692059732, 0.1625968947801757, 0.20328508092208453, 0.1700522567944055, 0.1858334121076236, 0.1137651415417511, 0.14947525445960086, 0.13369305279719157, 0.1229651627306424, 0.12420538134907655, 0.14918691776928938, 0.11804490231417752, 0.08725828317927098, 0.08433401096197268, 0.10804654146531845, 0.14128184791511778, 0.14348515584867894, 0.21663027772593202, 0.19315620679576206, 0.20767496135437424, 0.2114449436316339, 0.19205656434794438, 0.18213430647260354, 0.20552874180691105, 0.19327461787630895, 0.1893159705801013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01011870590229158, 9.999999999998899e-05, 0.0001805716007926561, 9.999999999998899e-05, 0.02108733890283987, 0.10288163006082596, 0.11102345958563253, 0.11743963383532041, 0.0985977545080301, 0.0837031829241448, 0.08402947536912175, 0.10782182278469443, 0.10530311740013243, 0.11433110374687716, 9.999999999998899e-05, 0.0010178347358130724, 0.00037450418279039166, 9.999999999998899e-05, 0.0018414918156864912, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006129760216467162, 9.999999999998899e-05, 0.017180706207261753, 0.0452916017674152, 0.0720140540425317, 0.0422012872020352, 0.01821462586871525, 0.0008690583279218345, 0.014363300658500111, 0.3043689979427243, 0.3347350603606536, 0.32502662625956547, 0.2530425857594547, 0.3076510558714506, 0.28180573631576855, 0.32693976583352846, 0.3351053004900344, 0.30038577088004714, 0.09933417182614046, 0.07590096294280824, 0.061759555771555674, 0.11425789778109652, 0.10155211877815506, 0.09732875761955351, 0.09560933623533563, 0.09101732058148371, 0.08100224268119982, 0.19911184350511546, 0.16715791003251612, 0.1915249292779274, 0.2081949637581162, 0.19480610208986804, 0.1876449765313538, 0.20820367952957308, 0.18404319134971825, 0.25532127769384916, 0.19055156820096864, 0.18229129470661132, 0.21867665964727534, 0.21025282865468142, 0.23558334280087545, 0.20576689225245215, 0.1795147258229326, 0.18598774431532772, 0.1815389505291558, 0.19186754679550444, 0.13280563155029945, 0.13852843026166362, 0.1603625319423383, 0.1715596086309843, 0.1341388720661273, 0.15054042530742406, 0.13428838621950578, 0.14048164850810385, 0.2071577920105514, 0.232032362856743, 0.23803080970590296, 0.24498069533372413, 0.22214261121043777, 0.20032896076541584, 0.2240134723504399, 0.2511616066083987, 0.24827377219998803, 0.1801863336784585, 0.17717090686224402, 0.17651798377269, 0.17491372187141607, 0.19144316708406828, 0.17963909021295144, 0.2095920722860437, 0.17980918366444276, 0.18057382569974578, 0.2721098045209267, 0.23927939808780052, 0.29676775795162513, 0.31143221913417674, 0.2666201422338128, 0.4405833427584057, 0.3595919963525922, 0.2314767628306459, 0.5424590832757477, 0.29352312049589, 0.28101802681024546, 0.3441584145552733, 0.34190530934926333, 0.27636578138509327, 0.3581508350241096, 0.2641348977305754, 0.3192550276366347, 0.3631408662855047, 0.17939694628609082, 0.18375425883138619, 0.19888883329446239, 0.1841681137814749, 0.1980336924142152, 0.17873779301875115, 0.1844839317113951, 0.19608756075758593, 0.17728210513173004, 0.08153332880620678, 0.08635425926929985, 0.08803451020947828, 0.07548592972302393, 0.0822535414617358, 0.09797835880392436, 0.09011500065702471, 0.07446662438182106, 0.09583106663344365]}, "mutation_prompt": null}
{"id": "3cfe2602-70a9-462e-be58-35b3aabb36ab", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            neighbors_count = 3 + int(self.budget / 1000)  \n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                nearest_idxs = np.argsort(np.linalg.norm(pop[idxs] - pop[i], axis=1))[:neighbors_count]\n                a, b, c = pop[idxs][nearest_idxs[:3]]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Dynamic Neighborhood Search Mutation: Introduces dynamic neighborhood-based perturbations with adaptive exploration strategies to boost convergence and diversity.", "configspace": "", "generation": 95, "fitness": 0.17720425120175592, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.4131193526620638, 0.39285828841012815, 0.4072438586691216, 0.37903429088974216, 0.39148299145412624, 0.4040505227793376, 0.40263806196934115, 0.3732174095477885, 0.37520511992931216, 0.02625016771127142, 0.0320411614009789, 0.04065760928314466, 0.0820196270553839, 0.0784424347094016, 0.03469938017494567, 9.999999999998899e-05, 0.035428142031754595, 0.00226906403162741, 0.0789078732318278, 0.08381424940234394, 0.09063696225205053, 0.10547986937929599, 0.05815716410387972, 0.07075993375145195, 0.07623703591482067, 0.09108807042403455, 0.09738406034156633, 0.05667690253427626, 0.06836924908208242, 0.06058337714921491, 0.08916876882896663, 0.0827621599625501, 0.06348713910216885, 0.08622537018225063, 0.06576245082627596, 0.06352542735243771, 0.2697502664688207, 0.8571017918423556, 0.810480021773901, 0.7446551818815874, 0.19176258358645082, 0.3753653391418328, 0.18557139778523368, 0.9507376113696026, 0.734112503554701, 0.1953495652009769, 0.13431875379753178, 0.19195481468860165, 0.19075569595056263, 0.2901063560245295, 0.22523539985645746, 0.19271471920239602, 0.2398978632198665, 0.13492620521849208, 0.16812985867563623, 0.22651872521107785, 0.20045462612788656, 0.19496345037255103, 0.20436268796158497, 0.17694087610793108, 0.14632213868069777, 0.11149926586702963, 0.11615438296712077, 0.19072790046460864, 0.13637993934321568, 0.14918593254608226, 0.13039219954490378, 0.14647713109933924, 0.15949904094983614, 0.22111480739179112, 0.18486571098744342, 0.1835526070293274, 0.2119116894747345, 0.17062042996512938, 0.19196210938085778, 0.22744834451088425, 0.19312307789845795, 0.22270488420927748, 0.1507018284598438, 0.1706530331569307, 0.1803184691403802, 9.999999999998899e-05, 9.999999999998899e-05, 0.006417341575326252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01630914852883525, 9.999999999998899e-05, 0.0014358496146007482, 0.11930634699675025, 0.08280660833053766, 0.079307836516046, 0.06539918896658181, 0.08785142384966149, 0.07264558032830515, 0.20085295221708943, 0.08740886973523598, 0.08937726702326654, 0.006842240041555647, 0.005731498077939934, 0.00473974363833729, 0.004388878838119115, 0.008301254910788702, 0.015024528565816375, 0.011289318266558768, 0.0037208194623699065, 0.007026125304658071, 0.07356167538464087, 0.07387638821553533, 0.07503037142369628, 0.09292912397793207, 0.0542707638190264, 0.11043081197728222, 0.05423962696514695, 0.07218058939549499, 0.07070593478997778, 0.36195087065311904, 0.35733250595499966, 0.3476788177591278, 0.3625101359928413, 0.3292114293566426, 0.347502484622522, 0.3953858917739663, 0.3787085928865941, 0.38514126424832396, 0.05869849669101879, 0.06672825203010524, 0.05377492196568512, 0.06892406316830202, 0.06163090142582073, 0.06665884827897917, 0.06586823440997791, 0.058909258214760674, 0.08161107051438354, 0.16872712360905062, 0.21683202095728693, 0.1799256890853843, 0.20869295919165975, 0.18155384527525753, 0.2479772830817537, 0.19667395146507105, 0.20714409001484313, 0.205726967293967, 0.1376234095172425, 0.15553047265446696, 0.21096307264213188, 0.17729327214626178, 0.17790869243663388, 0.18961058241500583, 0.18992206999891614, 0.19990146571407574, 0.1526921437903811, 0.17423783237560708, 0.09436932016127064, 0.14441454613396054, 0.20240339750594194, 0.1154461396605353, 0.15250991872239306, 0.11558029581299667, 0.12035214363524449, 0.1584139599390263, 0.1773737131801385, 0.1905996667905232, 0.18470295459746078, 0.18060945133288864, 0.1878862776865109, 0.19510082415334074, 0.19641083439681595, 0.2080481523719676, 0.17401767368348342, 0.18223764413555987, 0.17919174673279026, 0.1748504836124295, 0.19572558999044498, 0.17964072249638596, 0.1839790159624074, 0.18611602083234324, 0.17640520598156906, 0.17880274944163643, 0.31167203318346715, 0.2536337680871721, 0.6099800665504442, 0.6367303526163107, 0.3697542388557232, 0.21475349786597442, 0.20854426262101333, 0.1679552604534028, 0.4699225687780805, 0.3300742623972973, 0.3069012412698654, 0.22187272821465587, 0.45596466947631187, 0.14950935066752302, 0.20807026381766314, 0.1860401762263626, 0.19708696884857058, 0.200144487658087, 0.1884725923651559, 0.18624339295934977, 0.18942947632679963, 0.20486239862622835, 0.1978230159957739, 0.1805721346497936, 0.19844128473817169, 0.18574710776671877, 0.19471113521144456, 0.060084995906870775, 0.05609148187147872, 0.06682645798748488, 0.055319577511724116, 0.0712723887748079, 0.06833733481450932, 0.07136679971038429, 0.07177237916407231, 0.07220980369181684]}, "mutation_prompt": null}
{"id": "6d2851a5-d889-4f60-be01-c0122db4493b", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n        success_count = np.zeros(self.pop_size)\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                \n                # Dynamic adaptation of mutation factor\n                success_rate = success_count[i] / max(1, evals)\n                self.F = mutation_factor[i] * (0.5 + success_rate)\n                \n                self.CR = 0.9 * crowding_factor\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                    success_count[i] += 1\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Dynamic Differential Evolution with Adaptive Crowding Mutation: Introduces dynamic adaptation of mutation and crossover rates based on success metrics, leveraging crowding distance for improved exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": 0.2601120966545455, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.19.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6118344002774425, 0.7104726207305823, 0.5252621596886323, 0.6503752282655589, 0.5616413457357247, 0.5749201356677247, 0.5596704578320931, 0.6078872474947601, 0.5072667450011348, 0.3793456000629044, 0.17578657972264378, 0.14155874454307815, 0.11484042831703101, 0.2538351136371435, 9.999999999998899e-05, 0.3560552268537768, 0.07930182265479724, 0.019858625063011837, 0.10969522092999706, 0.10787253475308878, 0.13221462489924884, 0.14477356366104455, 0.14233890747877342, 0.10900902885804131, 0.09214229200579649, 0.16755245893766402, 0.1356977198945104, 0.12131144089271406, 0.0908470756888099, 0.1135551835054881, 0.1312053876744279, 0.10752652151226794, 0.06404507601140308, 0.10428407729994593, 0.09811289264302836, 0.05688725782373294, 0.601511934700026, 0.7477321827377437, 0.7351888143834409, 0.12717437915783336, 0.7175354341371794, 0.7628430308745772, 0.7788357656725053, 0.8150468993069552, 0.7982748827370911, 0.35063465398351024, 0.34547946112242056, 0.28658619595635204, 0.28999970544395914, 0.29090719748014304, 0.3350337340484635, 0.32788489478496763, 0.3434573402678399, 0.3393294943557774, 0.372025204961402, 0.7834126560560053, 0.36912322051831825, 0.2169176119633397, 0.8319221354836757, 0.6568048088829894, 0.21106025497312508, 0.36509904722965714, 0.8020024100519518, 0.2266141636113742, 0.33630589263808874, 0.17819161792823612, 0.1634019502879046, 0.14572257114488407, 0.1642356784755612, 0.18798991435678647, 0.2047991108456828, 0.19705965483873233, 0.18093939052239183, 0.3076873525526558, 0.19418078064028588, 0.3057902345810679, 0.1493430275101617, 0.31131415088063563, 0.20932066386178594, 0.27714582136831556, 0.20364676291644934, 0.12898464379230534, 0.13870105891692452, 0.017479803815190986, 0.25051709331685856, 0.13292823040834556, 0.03172323588643555, 0.03597370521256926, 0.11481712203816807, 0.12868796559903528, 0.15747509545045668, 0.22908071492691107, 0.23411637924603157, 0.11901519637763958, 0.15829256855922447, 0.13789310844280622, 0.15177345214436977, 0.27530590075095374, 0.37783198257136796, 0.08451054306753791, 0.04301114835972475, 0.1732491544618162, 0.13339861199805914, 0.09632628071096005, 0.24550836358062766, 0.09927747000929488, 0.28895538671082377, 0.06510372699709299, 0.19307773455988486, 0.1981120758987427, 0.1916312335766236, 0.15018166448104842, 0.12873503940286368, 0.15175254063603594, 0.1400429352788386, 0.22296980440561387, 0.13959919461289594, 0.5272136856592665, 0.48921154847931125, 0.5422119193246115, 0.5731485957447928, 0.4795833655436622, 0.5336584276949798, 0.5152965322357725, 0.5418055436082153, 0.46736789654001865, 0.13150851929938212, 0.06371201200581234, 0.12559694497058993, 0.11725451580618118, 0.0969682432827138, 0.12960600405928213, 0.07853827894659826, 0.109650111198066, 0.12580807827747598, 0.2100011557766326, 0.19231645353114968, 0.20170826616218418, 0.30750121605994796, 0.3385488062328955, 0.3077079554348532, 0.3552219680202471, 0.22994072763589724, 0.30912761042772285, 0.2499242003532096, 0.33122363966487434, 0.34124308859162433, 0.262519970163127, 0.3265071832348284, 0.3418746461659019, 0.20526267604735382, 0.3104844866864024, 0.3225890139738906, 0.16849349693069848, 0.23420274681784425, 0.2691421131087234, 0.22441677475192068, 0.1743690407788253, 0.2129167281421922, 0.22439536857336728, 0.22696693332199191, 0.21614608077482012, 0.24012651186508616, 0.18099240348268864, 0.2211727106858592, 0.2079859571281275, 0.21130557259096994, 0.2748318311166129, 0.21500640082199385, 0.20900667264170303, 0.254374731622494, 0.21994624863404044, 0.21439228244112207, 0.1872046044359822, 0.21853897658718024, 0.20360609306500488, 0.1887879660478059, 0.17996196999857816, 0.2422102721460888, 0.20686987833831028, 0.18512721016700973, 0.18302988076438553, 0.19069983996900397, 0.7805235025705575, 0.19698519273664894, 0.19578286195467043, 0.15227970884764286, 0.17465534850008613, 0.17486002068537276, 0.5295290320761834, 0.20442857833726624, 0.38327156454831735, 0.2093661292521436, 0.1650108830470315, 0.16405748040724488, 0.14682766996890917, 0.8469678387845927, 0.15187816023838385, 0.18914410510186053, 0.20423565802196297, 0.19313094940794495, 0.19049168188620091, 0.17379212385416154, 0.199784041076297, 0.18647190954095105, 0.20588283385158135, 0.191795637265868, 0.12198887174339745, 0.07804293378631078, 0.09727396141903977, 0.08856467342009966, 0.09367777587861414, 0.08949479591647191, 0.06701122533352954, 0.09092811047817118, 0.0973710304000549]}, "mutation_prompt": null}
{"id": "ec6ec2f0-90f6-4e81-8ccd-699e86cad1ea", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Adaptive Gradient Crowding Mutation: Enhances exploration with adaptive gradient-driven mutations augmented by crowding distance and variable crossover strategies.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6855348644799795, 0.6335065132607716, 0.6410082997066162, 0.6131727052125243, 0.6909075500661166, 0.5455190964856734, 0.7036100993337477, 0.7094317418565781, 0.6957228870257064, 0.4172952333280219, 0.40948813554551433, 0.44146488317503496, 0.43699085140320526, 0.43225781489068305, 0.1515846983679252, 0.20794035697453916, 0.4367194806871304, 0.46505001771579046, 0.1452539320122318, 0.13309601724905884, 0.13838082746186486, 0.09529589686914097, 0.15513957998384753, 0.1243272027583957, 0.13965416392872654, 0.16074351886550609, 0.14598242281645868, 0.09200480089147989, 0.11858966286052242, 0.10530348502278997, 0.10351591942965166, 0.07301931311617116, 0.09753198890791503, 0.10275435260787436, 0.08124743494372122, 0.13523103845697138, 0.78423374144953, 0.7794473596840074, 0.8830198093384967, 0.8545765167909533, 0.7807514612559856, 0.8420436264435227, 0.7986241218187335, 0.861124981582141, 0.8043071975089305, 0.3848768465030523, 0.33181850041352434, 0.3251291453174825, 0.31316761040694563, 0.331589327375569, 0.3277343848926304, 0.3239825102981535, 0.3388244087996125, 0.31928657346443823, 0.7714436518766229, 0.7556345421804938, 0.7717802108302856, 0.7466310466043038, 0.7898764001569506, 0.8117178252842936, 0.8005112242973562, 0.8010091498669889, 0.7514830260815188, 0.18989075433697966, 0.20604136618172975, 0.49164755559338724, 0.17144626003030627, 0.22198981355066005, 0.1913033339919087, 0.2869878068843513, 0.22732735506004287, 0.23281724752217736, 0.2344284187120531, 0.2473984941446592, 0.20353251825482, 0.19681720920597268, 0.2001003438657729, 0.2118983350340965, 0.18699274468315763, 0.22461819473663602, 0.18510440372983783, 0.39330876547184435, 0.2961566200450686, 0.3393139270058868, 0.35626911424575847, 0.43281090308763437, 0.4406821232271563, 0.1796772262276598, 0.40920986806717563, 0.378073859192951, 0.5810627344273358, 0.5936422848865495, 0.43224107280145585, 0.3172195107767338, 0.4803943150666391, 0.5731801876135606, 0.5415247497800728, 0.5559312143685777, 0.6327467256758116, 0.052937915891434706, 0.14725004560238575, 0.08072157609210495, 0.19444504064662715, 0.19911879314964553, 0.13323877381825022, 0.07169904719826592, 0.15519440287690467, 0.11028443929281817, 0.3035317032513193, 0.3124953182454754, 0.29081836309136866, 0.21020705446549082, 0.3240141185649863, 0.3002871286667862, 0.2924470951650987, 0.286381865380293, 0.2761520469328437, 0.6536819208061146, 0.6267900605720229, 0.5510839870732043, 0.6414225112322087, 0.549542759975777, 0.6495038095700898, 0.6629265698735656, 0.5840180489206421, 0.6713965879945696, 0.12692671901368446, 0.13017794350996248, 0.13265048408919133, 0.13170090678744784, 0.11888456429986238, 0.1319347553740312, 0.1007592081333385, 0.13487109444366174, 0.11621389963492479, 0.18218186912277334, 0.3079146757845387, 0.3313691159155425, 0.30894683156602587, 0.2696620741139746, 0.28664338865395134, 0.3098070461245498, 0.226699988618001, 0.22170074887588298, 0.30817133333092783, 0.25049163772747796, 0.33332362144320926, 0.3248049254656761, 0.35421034590118183, 0.32012421136695157, 0.3414028499524421, 0.355307318447868, 0.3330674153485058, 0.29520903264322895, 0.31587604964916105, 0.2906814171638219, 0.24919637751943824, 0.28273319499791105, 0.3323057597573107, 0.35925474434320614, 0.35578722994889145, 0.30318712451709073, 0.2057956513428929, 0.2002770094798727, 0.20965006417308507, 0.225624790651192, 0.1872280594225777, 0.19082003799392866, 0.21139095450611356, 0.2554684782646063, 0.19931243507164997, 0.17800584579960865, 0.22361919682975517, 0.20804553212526966, 0.1922467117388318, 0.19820427415643838, 0.20007864577297418, 0.19570832122072124, 0.2002802680432637, 0.18404439155556096, 0.19273984736538974, 0.7205162292835166, 0.7923755583297503, 0.7584275395377451, 0.7339150326790116, 0.8068489745694144, 0.8103232838689396, 0.7567198447732217, 0.7910377153667597, 0.7157959485469765, 0.20892084538226074, 0.7645712628421242, 0.5430350156743047, 0.7691063377139198, 0.7906923946102817, 0.2090106165530956, 0.755620689318245, 0.7058006034276713, 0.1762471323900805, 0.2036262001758965, 0.214551277376256, 0.19196648805807748, 0.19130657683348795, 0.1900593628060171, 0.1882699380620505, 0.1901729113964611, 0.1797265964470709, 0.09703591751083118, 0.09285840540457924, 0.08470889233862056, 0.09194288167289144, 0.07549677406039679, 0.08988543979071095, 0.09714130176495495, 0.10144020281415356, 0.08251842210782867]}, "mutation_prompt": null}
{"id": "8f9ae510-5a8d-4800-8b90-a8620588db5a", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget)\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Adaptive Gradient Crowding Mutation: Enhances exploration with adaptive gradient-driven mutations augmented by crowding distance and variable crossover strategies.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6855348644799795, 0.6335065132607716, 0.6410082997066162, 0.6131727052125243, 0.6909075500661166, 0.5455190964856734, 0.7036100993337477, 0.7094317418565781, 0.6957228870257064, 0.4172952333280219, 0.40948813554551433, 0.44146488317503496, 0.43699085140320526, 0.43225781489068305, 0.1515846983679252, 0.20794035697453916, 0.4367194806871304, 0.46505001771579046, 0.1452539320122318, 0.13309601724905884, 0.13838082746186486, 0.09529589686914097, 0.15513957998384753, 0.1243272027583957, 0.13965416392872654, 0.16074351886550609, 0.14598242281645868, 0.09200480089147989, 0.11858966286052242, 0.10530348502278997, 0.10351591942965166, 0.07301931311617116, 0.09753198890791503, 0.10275435260787436, 0.08124743494372122, 0.13523103845697138, 0.78423374144953, 0.7794473596840074, 0.8830198093384967, 0.8545765167909533, 0.7807514612559856, 0.8420436264435227, 0.7986241218187335, 0.861124981582141, 0.8043071975089305, 0.3848768465030523, 0.33181850041352434, 0.3251291453174825, 0.31316761040694563, 0.331589327375569, 0.3277343848926304, 0.3239825102981535, 0.3388244087996125, 0.31928657346443823, 0.7714436518766229, 0.7556345421804938, 0.7717802108302856, 0.7466310466043038, 0.7898764001569506, 0.8117178252842936, 0.8005112242973562, 0.8010091498669889, 0.7514830260815188, 0.18989075433697966, 0.20604136618172975, 0.49164755559338724, 0.17144626003030627, 0.22198981355066005, 0.1913033339919087, 0.2869878068843513, 0.22732735506004287, 0.23281724752217736, 0.2344284187120531, 0.2473984941446592, 0.20353251825482, 0.19681720920597268, 0.2001003438657729, 0.2118983350340965, 0.18699274468315763, 0.22461819473663602, 0.18510440372983783, 0.39330876547184435, 0.2961566200450686, 0.3393139270058868, 0.35626911424575847, 0.43281090308763437, 0.4406821232271563, 0.1796772262276598, 0.40920986806717563, 0.378073859192951, 0.5810627344273358, 0.5936422848865495, 0.43224107280145585, 0.3172195107767338, 0.4803943150666391, 0.5731801876135606, 0.5415247497800728, 0.5559312143685777, 0.6327467256758116, 0.052937915891434706, 0.14725004560238575, 0.08072157609210495, 0.19444504064662715, 0.19911879314964553, 0.13323877381825022, 0.07169904719826592, 0.15519440287690467, 0.11028443929281817, 0.3035317032513193, 0.3124953182454754, 0.29081836309136866, 0.21020705446549082, 0.3240141185649863, 0.3002871286667862, 0.2924470951650987, 0.286381865380293, 0.2761520469328437, 0.6536819208061146, 0.6267900605720229, 0.5510839870732043, 0.6414225112322087, 0.549542759975777, 0.6495038095700898, 0.6629265698735656, 0.5840180489206421, 0.6713965879945696, 0.12692671901368446, 0.13017794350996248, 0.13265048408919133, 0.13170090678744784, 0.11888456429986238, 0.1319347553740312, 0.1007592081333385, 0.13487109444366174, 0.11621389963492479, 0.18218186912277334, 0.3079146757845387, 0.3313691159155425, 0.30894683156602587, 0.2696620741139746, 0.28664338865395134, 0.3098070461245498, 0.226699988618001, 0.22170074887588298, 0.30817133333092783, 0.25049163772747796, 0.33332362144320926, 0.3248049254656761, 0.35421034590118183, 0.32012421136695157, 0.3414028499524421, 0.355307318447868, 0.3330674153485058, 0.29520903264322895, 0.31587604964916105, 0.2906814171638219, 0.24919637751943824, 0.28273319499791105, 0.3323057597573107, 0.35925474434320614, 0.35578722994889145, 0.30318712451709073, 0.2057956513428929, 0.2002770094798727, 0.20965006417308507, 0.225624790651192, 0.1872280594225777, 0.19082003799392866, 0.21139095450611356, 0.2554684782646063, 0.19931243507164997, 0.17800584579960865, 0.22361919682975517, 0.20804553212526966, 0.1922467117388318, 0.19820427415643838, 0.20007864577297418, 0.19570832122072124, 0.2002802680432637, 0.18404439155556096, 0.19273984736538974, 0.7205162292835166, 0.7923755583297503, 0.7584275395377451, 0.7339150326790116, 0.8068489745694144, 0.8103232838689396, 0.7567198447732217, 0.7910377153667597, 0.7157959485469765, 0.20892084538226074, 0.7645712628421242, 0.5430350156743047, 0.7691063377139198, 0.7906923946102817, 0.2090106165530956, 0.755620689318245, 0.7058006034276713, 0.1762471323900805, 0.2036262001758965, 0.214551277376256, 0.19196648805807748, 0.19130657683348795, 0.1900593628060171, 0.1882699380620505, 0.1901729113964611, 0.1797265964470709, 0.09703591751083118, 0.09285840540457924, 0.08470889233862056, 0.09194288167289144, 0.07549677406039679, 0.08988543979071095, 0.09714130176495495, 0.10144020281415356, 0.08251842210782867]}, "mutation_prompt": null}
{"id": "9cad673c-d937-426f-9742-648fea1182f1", "solution": "import numpy as np\n\nclass EnhancedCrowdingMutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 10 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evals = self.pop_size\n        mutation_factor = np.ones(self.pop_size) * 0.5\n\n        while evals < self.budget:\n            crowding = np.zeros(self.pop_size)  # Initialize crowding distances\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                distances = np.linalg.norm(pop[idxs] - pop[i], axis=1)\n                crowding[i] = np.sum(distances)  # Update crowding distance\n\n            # Calculate fitness diversity\n            min_fit, max_fit = np.min(fitness), np.max(fitness)\n            fit_diversity = (max_fit - min_fit) / (max_fit + 1e-9)  # Avoid division by zero\n\n            for i in range(self.pop_size):\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                crowding_factor = 1 + (np.max(crowding) - crowding[i]) / np.max(crowding)\n                self.F = mutation_factor[i] * crowding_factor\n                self.CR = 0.9 * crowding_factor \n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover: blend crossover with uniform crossover\n                trial = np.array([mutant[j] if np.random.rand() < self.CR else\n                                  (pop[i][j] + mutant[j]) / (2 + crowding_factor) for j in range(self.dim)])\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    mutation_factor[i] = min(mutation_factor[i] + 0.1 * crowding_factor, 1.0)\n                else:\n                    mutation_factor[i] = max(mutation_factor[i] - 0.1 * crowding_factor, 0.1)\n\n                if evals >= self.budget:\n                    break\n\n                if evals < self.budget:\n                    perturbation_size = 0.1 * (1.0 - evals / self.budget * (1 + fit_diversity))\n                    grad_perturb = np.random.randn(self.dim) * perturbation_size\n                    local_trial = pop[i] + grad_perturb * crowding_factor\n                    local_trial = np.clip(local_trial, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n\n                    if local_fitness < fitness[i]:\n                        pop[i] = local_trial\n                        fitness[i] = local_fitness\n            \n            if evals >= self.budget:\n                break\n        \n        best_idx = np.argmin(fitness)\n        return pop[best_idx], fitness[best_idx]", "name": "EnhancedCrowdingMutation", "description": "Adaptive Gradient Crowding Mutation with Fitness Diversity: Integrates fitness diversity-based adaptations into gradient-driven mutations to enhance exploration and convergence.", "configspace": "", "generation": 99, "fitness": 0.35743467021584735, "feedback": "The algorithm EnhancedCrowdingMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.23.", "error": "", "parent_id": "cbc7ed64-5993-462d-a1de-c3e54ad7a684", "metadata": {"aucs": [0.6764794926060413, 0.7168905287469429, 0.662959119296407, 0.6798742082994402, 0.6836081854201914, 0.6983060228711304, 0.6710064589199678, 0.6952903178723377, 0.7333060769929929, 0.4182021080382202, 0.4292037358261972, 0.45981422368253266, 0.3790267834139506, 0.40335189099137037, 0.4475355536989174, 0.37105747077276696, 0.496158469763459, 0.40804163230754986, 0.1277543330621802, 0.24581496404894465, 0.1059376452278038, 0.11356343214687092, 0.14628298308330745, 0.12331988953501116, 0.11887934411795764, 0.1397142724681426, 0.13058731779524202, 0.12632716841277247, 0.12152728103724153, 0.11019485360834225, 0.1292036131461498, 0.0739124068293, 0.09309148556465174, 0.1304407606603516, 0.08616421360552229, 0.0904206583849071, 0.7822422555994553, 0.791373810342333, 0.884388695554471, 0.8545635470292509, 0.7645952365882452, 0.8091807555647201, 0.7982300286634709, 0.8610085313132088, 0.8068977806587376, 0.33062222936187624, 0.32604649443655376, 0.3217923710211711, 0.33534303906840823, 0.3122262377565521, 0.3746826332322487, 0.3200705949075422, 0.397155644420391, 0.31107893762748917, 0.7675490041141623, 0.8114877047108443, 0.772467611688332, 0.8059061787829577, 0.794373714646571, 0.25840508603245094, 0.7838841391568399, 0.7242488592610421, 0.6372519999397032, 0.23118749636830926, 0.19114736513331843, 0.5127915092182154, 0.15794747449009539, 0.20415369115378246, 0.20129369124208873, 0.20237297315632707, 0.3439920666714301, 0.21508921246606794, 0.17912210153208963, 0.19591229568789303, 0.17270034831502923, 0.2371457262132669, 0.30288045788041984, 0.15867761252438717, 0.19296634676724156, 0.17701420177468286, 0.281587419923087, 0.3134775653475881, 0.391707898090612, 0.4206175150732927, 0.28610408927135667, 0.40573412418968813, 0.4127467930687676, 0.2803436436619662, 0.3650283664030344, 0.3519554412767144, 0.4653633573427254, 0.5942475183655195, 0.5388899407287646, 0.5792731936605355, 0.3154704882539514, 0.43214868016273333, 0.5695408648298714, 0.4648359592143043, 0.5120551285891304, 0.10849651600494215, 0.08319942665960955, 0.2347925959095032, 0.20866629582358642, 0.22390860375021338, 0.13039650835107863, 0.1319795066844932, 0.15700436490106606, 0.22198655254088828, 0.21778137665426567, 0.2879670958941285, 0.2732223264875101, 0.26168585816654866, 0.24904401875529425, 0.3160173645596359, 0.22818864024235452, 0.2862144117805836, 0.2532145804108661, 0.6706159143645678, 0.657283377171489, 0.6982502478223405, 0.6104374465429916, 0.6349610374125649, 0.6311841106823378, 0.5642230916972342, 0.6792734921300037, 0.5258411133932187, 0.1117233413570532, 0.13170344811282553, 0.1441766269651178, 0.14095753780370812, 0.12621804842893292, 0.12826762810556958, 0.13478034410892392, 0.2161570120089299, 0.11600766125176543, 0.2651436758257064, 0.273629022122301, 0.29996442450879746, 0.2051631369404533, 0.29899627005254326, 0.32189426305247226, 0.31497851232712115, 0.19428836166759333, 0.24051247898244088, 0.33071932265854553, 0.3521698428030089, 0.3547052001105082, 0.32971017164135397, 0.1994465138682795, 0.32967293510141593, 0.3867772557457003, 0.43791527544386954, 0.358993538646352, 0.24589974745028376, 0.2889243139928762, 0.27098875869676475, 0.2644610079466624, 0.25118932293570984, 0.3006753199483838, 0.312456586122667, 0.3042463238306494, 0.26610470932780594, 0.2116375644776497, 0.21200873461606906, 0.21643713329158598, 0.22500033065388858, 0.19991220241304652, 0.20783917838960853, 0.22061351505549975, 0.20434659484319073, 0.18811916975892684, 0.19467647112476727, 0.20710079383577606, 0.20981246453183677, 0.2139495076708946, 0.18914749479315363, 0.19039808891385834, 0.2018887239126842, 0.22523539006996274, 0.1882672697309542, 0.1926355082340181, 0.781941903412475, 0.7837296440664883, 0.7358725539893687, 0.7299939306945665, 0.809841195879126, 0.8288042638211275, 0.7107007994533117, 0.7675941879363208, 0.6493863963485562, 0.20891224048818935, 0.7485621009122709, 0.20456660540210814, 0.7706493914973812, 0.7225009950798444, 0.20899378720528494, 0.7340642305782703, 0.6725975550957592, 0.1928141789377712, 0.1845778459716022, 0.19380766369371472, 0.21538758055025886, 0.19456181214206225, 0.2053562162297642, 0.1877164998262817, 0.19684339607790913, 0.1995526669284241, 0.09696904887508351, 0.0947469105234372, 0.08425035668371583, 0.09001204615694647, 0.08516299216719558, 0.0922271861798164, 0.11224374849901397, 0.09784726429087931, 0.08077503824249033]}, "mutation_prompt": null}
