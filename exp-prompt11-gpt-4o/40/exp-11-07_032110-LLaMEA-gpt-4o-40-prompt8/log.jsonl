{"id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2823952912087924, "feedback": "The algorithm NovelPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "e5105767-43e5-445f-b9d1-aebea2213bdc", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "295294e9-fb42-459d-9948-70ff7cd03108", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "9dc4d32d-4dc6-48c1-9b54-578402880e53", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "39a6e58d-d4fa-41d4-b244-d6cf38172a4f", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "cfb06ca1-d9d1-4dd6-a1f2-df07a241addd", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "4a6da0a0-97df-4979-9cf5-7ae0162f0568", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "80df65e1-f8ad-4207-897b-859ba1e837ae", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "2c266ca4-d0d3-4bd2-9c02-9e564c946d8b", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "8d084d8a-e944-44ee-929f-89e6eee3ca34", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "f8fc8f9c-e1b6-4ae4-b1ba-f1901b199ce5", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "12b5997a-1964-4d7a-852a-aee720a16d35", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "ba6d53cb-c5f4-4971-b1bc-25a187c5c9c4", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "2290fb3a-dd2b-4809-9345-09d72d5bcc46", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "ced35d7c-cb6c-4585-abf3-a748f56bf27d", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "4d6b55ce-1703-4239-a8cf-41cad842a3c0", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "0fcaddc9-a4aa-44ce-ad7c-e2d97f2b8744", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "f1acc142-33a1-4ed0-80ae-6514ef5020a6", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "b05581e4-1064-4ce0-9c6b-240c6dc34881", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "fd38e8f0-0bff-4fe4-9258-d87f24c34449", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "9c8756da-9c41-4814-9a3f-9ce99b034cf6", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "d500b330-7db2-4801-a2e5-bda6e4311fc4", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "844a6454-4980-4698-bee8-b7fbfbb8381e", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "0fd29900-c31d-41fd-817b-b1c599b817f1", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "469c935d-289a-4bfc-8c9d-3fb918bdcb4c", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "5ce6dd79-08bc-49ad-8e53-4465206c2b80", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "56ca032b-dea5-4be5-bf15-ef22a9fd061b", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "e1dcd1e8-e77d-4579-b798-2a2b64315329", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "894d7f8e-2e1a-4a52-af02-73f8507b669f", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "44062895-1ca0-4314-801e-bd1d899b2a92", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "670ad056-7a84-48e0-a424-8645ef0cd2c7", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "317f1229-f480-418b-bdcd-5242df695289", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "e43e1d3d-e9ac-488f-8719-3011ad0cd4e7", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "485b5b50-c6c9-42e5-b6e1-2621077757e9", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "47b180b0-a65a-4669-b12d-85b19c4acdaf", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "3d21362b-bb6c-4308-a653-8ccf882b5b09", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "c8a6a711-f7a1-40a6-9370-b700c8bc99c0", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "d76090f8-5c07-4be7-a77c-1dfd1432875a", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "18c0e268-5ab6-4781-a3fb-0db66cf4c98e", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "0d53076b-dd34-44b7-a072-524790e1f886", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "71f0011e-5d59-44fe-ba52-df3063f4495d", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "4ed524fa-2657-4d2d-b5b5-de5ef6f40d99", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += len(scores)\n\n            # Update personal and global bests\n            better_scores = scores < self.personal_best_scores\n            self.personal_best_scores[better_scores] = scores[better_scores]\n            self.personal_best_positions[better_scores] = self.particles[better_scores]\n\n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < self.global_best_score:\n                self.global_best_score = scores[min_score_idx]\n                self.global_best_position = self.particles[min_score_idx]\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_component = self.cognitive_const * r1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * r2 * (self.global_best_position - self.particles)\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n\n            # Ensure velocities and update particle positions\n            self.velocities = np.clip(self.velocities, -1, 1)\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, -5, 5)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "An optimized particle swarm optimization algorithm with reduced redundancy and efficient boundary checks for improved runtime performance.", "configspace": "", "generation": 41, "fitness": 0.24794291775704644, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7033404047091295, 0.404002227649224, 0.538486400617487, 0.43224029554288046, 0.6721395082545194, 0.613161167182398, 0.6379920623691632, 0.4096858182923925, 0.6792478050912354, 0.2478842044926448, 0.034850393189382545, 9.999999999998899e-05, 0.3755289829682309, 0.040587571214407925, 9.999999999998899e-05, 0.30857253986331357, 0.41454003807224726, 0.25748430914457, 0.12004093524817638, 0.110673190534605, 0.12870196773650255, 0.11366636038951583, 0.13553397980928872, 0.13871287467766147, 0.11378367300679126, 0.19384528522384925, 0.14860549169034953, 0.10460976533470856, 0.1075248547891321, 0.12058685989482221, 0.103667112575489, 0.08095696560237409, 0.10506030236623032, 0.09182244478884805, 0.11881466945433372, 0.10566091951483303, 0.96041354384927, 0.949098437085378, 0.9562137597251177, 0.957368128829958, 0.9454757919419527, 0.9499873912758152, 0.9575145863970994, 0.941922809751328, 0.9563028438457627, 0.33281529981975955, 0.4142210271773996, 0.3227873257917643, 0.42457608599115426, 0.4009057036880098, 0.2917643199945009, 0.3685551650667338, 0.08771698938148931, 0.3312508054989225, 0.32026535737168493, 0.2953628111418617, 0.2208907974652945, 0.21472389378213186, 0.37291869821422674, 0.193546121043065, 0.2355523834550033, 0.11880915211800147, 0.608049819653274, 0.12207420957034687, 0.2451690695862897, 0.12824967464402248, 0.15566500290228846, 0.18984377557647736, 0.15956090339282314, 0.178642762297336, 0.1495100719771072, 0.15313839628647452, 0.1567704091307136, 0.19580240117000114, 0.13235969100024725, 0.11600494109026382, 0.19651456967584247, 0.16106621606427218, 0.20484806192644178, 0.18492723144486367, 0.19774267978104532, 0.04826575866894678, 0.06181459657626254, 0.04993503575975777, 0.03721811205402192, 0.00046097748011086903, 9.999999999998899e-05, 0.036196446220798095, 9.999999999998899e-05, 0.004043089394606847, 0.14274238162202801, 0.11635666108831244, 0.1385915513110354, 0.08487300429623579, 0.032142082512777725, 0.049372810551120194, 0.13426284933865207, 0.08501704501158891, 0.0621517142534469, 0.010110092042920571, 0.09751812525373083, 0.09418380215754352, 0.1533977979459652, 0.10575401196091261, 0.09793311141522731, 0.054299371505079574, 9.999999999998899e-05, 0.04400827827233611, 0.03514770004919521, 0.09045846448186623, 0.12978323387296098, 0.041075561775844815, 0.26583874388679163, 0.12575438574320374, 0.08102517067675274, 0.09579606068701452, 0.06958897174892575, 0.4906291670810695, 0.44237487767403394, 0.4213833933618163, 0.4796738209077187, 0.4781115436568707, 0.4660756020733483, 0.4889460439891946, 0.4946821854303709, 0.46985432516194914, 0.08900177470145387, 0.10461013823852539, 0.07424347084015759, 0.13052076613942387, 0.09283196667875782, 0.12755403423325684, 0.09523269772222065, 0.1197116040040912, 0.11117167628425684, 0.20046588011404942, 0.1418275530988934, 0.28779505982650166, 0.2796906785092057, 0.19279753365088548, 0.22119893335922602, 0.1590685288967757, 0.2178531005765868, 0.29426966547684463, 0.3658265602879027, 0.26668692312689046, 0.30807755222043165, 0.2637788444463124, 0.3577133890524661, 0.29613171953399076, 0.26560627446899243, 0.3732380305898858, 0.2540272604717424, 0.15494372123333122, 0.23598155878505522, 0.24443640362844898, 0.243320930404051, 0.2015485613035609, 0.32431154232081916, 0.1791515925185304, 0.22642566413854714, 0.2060331063403491, 0.2056102669047366, 0.22103029461240553, 0.20851940551279458, 0.22332393458157385, 0.2176178652420362, 0.21701923999244832, 0.2349443518319605, 0.22209525062327673, 0.20291298067832442, 0.226286144984981, 0.18625619731609966, 0.19461730150481127, 0.3245269648145115, 0.17905423962121003, 0.22350017113997578, 0.19178700295634887, 0.2202543297609144, 0.20987637888907007, 0.7086828936055185, 0.1869247520041919, 0.1767747366310074, 0.7203740223277347, 0.2003206316370082, 0.19540925402252207, 0.14212291084491413, 0.83344787253811, 0.7815143107773217, 0.4684667105247158, 0.21347199256148552, 0.5598366595201123, 0.2121066993427334, 0.16911334655470422, 0.15464959684537338, 0.10517364893317716, 0.1038550092756122, 0.6093619548012422, 0.19177583091378825, 0.19438460654608958, 0.1873795311117753, 0.19120748725960035, 0.18605648761872373, 0.1919900509242699, 0.17630086635236786, 0.1921467739006253, 0.18122363243158757, 0.06615805455374846, 0.06278174645511558, 0.09525397863585583, 0.1006675989707363, 0.09396935635591597, 0.08634724325437981, 0.06172116005537098, 0.07946078365097142, 0.08266256847782338]}, "mutation_prompt": null}
{"id": "ff354d02-eea3-4e42-8b6f-0297a8a91b9c", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "b6d79089-9ef4-44e0-9718-c41373d0e688", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use NumPy's random generator for efficiency\n        update_cycle = 5  # Decide upon a less frequent full update cycle\n\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles[:min(self.population_size, self.budget - self.evaluations)])\n            self.evaluations += len(scores)\n\n            # Update personal and global bests\n            improved = scores < self.personal_best_scores[:len(scores)]\n            self.personal_best_scores[:len(scores)][improved] = scores[improved]\n            self.personal_best_positions[:len(scores)][improved] = self.particles[:len(scores)][improved]\n\n            if np.min(scores) < self.global_best_score:\n                self.global_best_score = np.min(scores)\n                self.global_best_position = self.particles[np.argmin(scores)]\n\n            # Update velocities and positions every update_cycle iterations\n            if self.evaluations % update_cycle == 0 or self.evaluations >= self.budget:\n                cognitive_component = self.cognitive_const * rng.random((self.population_size, self.dim)) * (self.personal_best_positions - self.particles)\n                social_component = self.social_const * rng.random((self.population_size, self.dim)) * (self.global_best_position - self.particles)\n\n                self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n                self.velocities = np.clip(self.velocities, -1, 1)\n\n                self.particles += self.velocities\n                self.particles = np.clip(self.particles, -5, 5)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "An optimized particle swarm optimization algorithm with streamlined computations and enhanced loop efficiency for better runtime performance.", "configspace": "", "generation": 43, "fitness": 0.2523180585723822, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.5801008380560619, 0.7107120759359149, 0.5413815736858927, 0.6398252850972193, 0.5888914198449477, 0.790188337149726, 0.7118764343431901, 0.3580355346332542, 0.6717338218028233, 0.06586850254997079, 0.17767135937082223, 0.30097134612121024, 0.1666871151543481, 0.027530209628676694, 0.31056781006948764, 0.2718212993482745, 0.2917317442732783, 0.3618880374581408, 0.09541798243942046, 0.11373000673376932, 0.141761699140026, 0.10103338952165397, 0.13604164219190729, 0.11865816921894967, 0.10691224911634833, 0.14521041395492318, 0.1372779873588844, 0.10004940163113185, 0.11691794666610344, 0.1236429177378906, 0.10353721685416772, 0.1535892949567782, 0.11049133144822532, 0.08047838652555639, 0.09545379001829368, 0.10325031260721551, 0.9530547561709989, 0.9596059202094607, 0.9544487252455248, 0.9595477466173798, 0.934969180887663, 0.9532956043335957, 0.9644262491004448, 0.9425260118466818, 0.9568988541596846, 0.41106707097119277, 0.4050389172953335, 0.3168941541745014, 0.33225759628027685, 0.4031893129834355, 0.240191605026585, 0.4095539587287971, 0.41258032351835805, 0.4759694346901088, 0.6897959045772439, 0.2191527498720669, 0.5669762951860359, 0.19321018836150727, 0.2180386472892576, 0.19290670643218466, 0.6090982667569699, 0.12612592204141726, 0.23475140657985438, 0.1831336171700334, 0.12390309037469682, 0.17050355541196127, 0.21120161767515533, 0.1957940450310467, 0.15891965702990074, 0.1921485835524056, 0.18637651865937155, 0.1710743047175336, 0.20140352419741125, 0.21675844671748834, 0.3541205681364802, 0.21855510407586076, 0.2402051511073019, 0.18915401964471745, 0.21323590557066008, 0.1697022827104222, 0.11491464963904696, 9.999999999998899e-05, 0.046529824243379925, 0.0015473848736433649, 0.014368005471783518, 0.03171382863287309, 9.999999999998899e-05, 0.09081184875428339, 0.002151220590199787, 9.999999999998899e-05, 0.16427114681388266, 0.060404741690228136, 0.1518929376278424, 0.0583419189169786, 0.03925924404426573, 0.03653236037582197, 0.0860822857896475, 0.06698260247596954, 0.0882631372474807, 9.999999999998899e-05, 0.048439261163104486, 0.05815583261402557, 0.06674125666298392, 0.09164550108527514, 0.019292998663770433, 9.999999999998899e-05, 0.03459570845501325, 0.03751269183748229, 0.08856456060549767, 0.16355521126807215, 0.09745852647801456, 0.11126773094885489, 0.10212682903453674, 0.09087412802791783, 0.17780684877685948, 0.08209126169300018, 0.07049593946886179, 0.4215230721098747, 0.4484691457257698, 0.4120877558957563, 0.4324291965598044, 0.47100707378778894, 0.39881069380700085, 0.5097774073737344, 0.3668208347531925, 0.48836337773357663, 0.08612424251566753, 0.09757782934066306, 0.07000384068356325, 0.10851047449978357, 0.10298635190181593, 0.13186001817148973, 0.10658500729813913, 0.1385711560830588, 0.0975414883478607, 0.2976538074638392, 0.29598491666791304, 0.1945206122629144, 0.3321959902613145, 0.17542074616260128, 0.3474711191293254, 0.24280854018116393, 0.2486356237900439, 0.12384907398141154, 0.3505828781941823, 0.23482361123459738, 0.33994105442123856, 0.21471400512324268, 0.24330551095370911, 0.317050335164607, 0.16921003676171387, 0.2871445299546229, 0.328648970973191, 0.20076713254537681, 0.2241671352697573, 0.16717747459730126, 0.2115054605732133, 0.19612939813919128, 0.25337658014942355, 0.20162802248658573, 0.2583965914964581, 0.2183770474863599, 0.2134738510315891, 0.1852041056598851, 0.2253218304779533, 0.22615783408225665, 0.26423193286986646, 0.22608634567740182, 0.24471518994693708, 0.22237713839240525, 0.20210997824284416, 0.21282236193845994, 0.24844526222139562, 0.21096211119391572, 0.1974064778161242, 0.20410677224218698, 0.18824998504364032, 0.23046274845809533, 0.2188682384814039, 0.20158788494218638, 0.8892970733572897, 0.1741540050844933, 0.15356855515019596, 0.6838490077750786, 0.20017098574195924, 0.1991532612498772, 0.1414874297465849, 0.1690148238769621, 0.826100241238036, 0.5858454803838431, 0.21098459400338865, 0.47290179124822274, 0.20826487053065035, 0.15371897213594143, 0.1525541166238218, 0.10488452168197859, 0.1037324096421236, 0.5971734891578822, 0.18128887313006448, 0.19530657464884904, 0.17823210292358815, 0.19585024947042262, 0.1849910400156839, 0.18651247431007056, 0.19088537134326933, 0.1771290572608294, 0.19076670127358497, 0.10502041104166582, 0.08348803848660113, 0.09133681818526729, 0.09697195660740232, 0.08320150903446688, 0.1247148677957528, 0.08445762470481133, 0.08588490993806808, 0.07279141436934644]}, "mutation_prompt": null}
{"id": "c677209b-da0c-4396-ab7e-2f8fd84dea1d", "solution": "import numpy as np\n\nclass NovelPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729  # inertia weight\n        self.cognitive_const = 1.49445  # cognitive constant\n        self.social_const = 1.49445  # social constant\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Evaluate the fitness of each particle\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.particles[i]\n\n            # Update velocities and positions\n            for i in range(self.population_size):\n                cognitive_component = (self.cognitive_const * \n                                       np.random.rand(self.dim) * \n                                       (self.personal_best_positions[i] - self.particles[i]))\n                social_component = (self.social_const * \n                                    np.random.rand(self.dim) * \n                                    (self.global_best_position - self.particles[i]))\n\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] + \n                    cognitive_component + \n                    social_component\n                )\n\n                # Ensure velocities are within bounds\n                self.velocities[i] = np.clip(self.velocities[i], -1, 1)\n\n                # Update particle positions\n                self.particles[i] += self.velocities[i]\n\n                # Ensure particles are within bounds\n                self.particles[i] = np.clip(self.particles[i], -5, 5)\n\n        # Return the best found solution\n        return self.global_best_position, self.global_best_score", "name": "NovelPSO", "description": "A cooperative particle swarm optimization with adaptive velocity control and dynamic neighborhood structures for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.7112243441085659, 0.7000775119685063, 0.6214849606907009, 0.7628565950843881, 0.6990230994667381, 0.6556106955127033, 0.6272414848666434, 0.6813071103427477, 0.654260811121864, 0.30400790108584475, 0.2297199348410779, 0.2765887857130329, 0.29881658106007036, 0.18170177824821954, 0.289482222512466, 0.11656834248162085, 0.37706972136539096, 0.3017971538407229, 0.16412236836885097, 0.1284944665665747, 0.18016205187199885, 0.1520863946772235, 0.15130446657486574, 0.11783299529571145, 0.09201398693771734, 0.15781391897704455, 0.24728763203507864, 0.11456912433798383, 0.11215683665124165, 0.1124508541437339, 0.14916954471397326, 0.10406599050103837, 0.09914533586705876, 0.10730537036015486, 0.13910497362071816, 0.10476541893571234, 0.9597893079815969, 0.9549175428846023, 0.9514356957773417, 0.9572677889077912, 0.9520416779380165, 0.9652719540050657, 0.9642134027950662, 0.9463405912443769, 0.9559869473271978, 0.3944505581020513, 0.42123330165532313, 0.4012486489623276, 0.32781235772136375, 0.4593109140276671, 0.3333365058855774, 0.38527471243180844, 0.43121080472059925, 0.43640535191603425, 0.35250974432752213, 0.3680479497061404, 0.5389928498894333, 0.21195702378447323, 0.3580481576047242, 0.19733427715414786, 0.5901773632170281, 0.6296065252605301, 0.23319136177078037, 0.19563230906554518, 0.12023554548899551, 0.16379355301122456, 0.1334380082634511, 0.13221282697046643, 0.16047651014692543, 0.17527262624357665, 0.2677366989771527, 0.1715124325353652, 0.1829550263111941, 0.19802459908011594, 0.1303305891845703, 0.1737740837444911, 0.1520576170172384, 0.2095106761137685, 0.19720537638569535, 0.21925863467196383, 0.1954305910190648, 0.04827800903206003, 0.12433168735370548, 0.0662795671466967, 0.03996886651241549, 0.0010325922603132698, 9.999999999998899e-05, 0.05439830021212588, 9.999999999998899e-05, 0.001653685881447542, 0.2102042101985222, 0.03855413495601423, 0.11536169963526699, 0.1111771179894746, 0.030999485140103755, 0.04161172737871732, 0.12053294799040126, 0.12482346156419122, 0.062437958496402324, 0.07349020675828577, 0.18002085424678738, 0.12562281274253528, 0.10452885870491302, 0.0490703133419127, 0.13754958924291127, 0.052156786925041665, 0.07154851145595187, 0.13700194853317593, 0.13939139734313188, 0.06094305574874381, 0.1823676976834655, 0.0795939123780266, 0.13256621559853043, 0.13221661814711894, 0.08229091902808028, 0.17291500889397504, 0.07719234993976076, 0.46161560821649505, 0.5468992583714284, 0.49948491539840134, 0.4778777398292201, 0.5181745342871671, 0.4874895057462195, 0.5609759759657478, 0.4631668244513305, 0.507921597389728, 0.11103813682841679, 0.10962435239828061, 0.1273049154782111, 0.14652483123688376, 0.16486137151078017, 0.15559093533281976, 0.15646938691032897, 0.1313428824606252, 0.1255118391053225, 0.194329322627384, 0.2700714557136026, 0.20588727631131376, 0.2565221642050405, 0.40655759358740085, 0.22765600946210174, 0.25188728847270847, 0.24117586369525612, 0.29904118828133397, 0.3745112482514549, 0.3313134187342409, 0.3758561826542415, 0.24631474926569796, 0.22904269807903, 0.3692674951924889, 0.37866793391596176, 0.3786161943053238, 0.24688830178957522, 0.2400360937157685, 0.24934150543134548, 0.21469236241333334, 0.20630043155114886, 0.23527326233179247, 0.27081848829191957, 0.27875918198461613, 0.3084376885768825, 0.20417826316399734, 0.24547478470312567, 0.21851840284255553, 0.200951930398115, 0.2526038186564199, 0.2047704660685904, 0.2274966195491468, 0.21314848945993392, 0.19320537549278416, 0.23965237497622216, 0.1979818759955354, 0.22297475023793556, 0.23704284802141673, 0.2006490564787088, 0.22979355920427325, 0.23831163505127484, 0.2229886661759929, 0.34436379818326357, 0.24950587846684125, 0.18699622384408698, 0.17647307271353896, 0.1536894556623909, 0.788073993262464, 0.19960744153020915, 0.19952904590396525, 0.855524967693581, 0.8402882660920207, 0.8278616068519249, 0.5558024336146627, 0.21301644371308115, 0.6832878898483874, 0.6497035164497778, 0.1682530046627162, 0.15187890972062468, 0.10510380853355095, 0.667486661684301, 0.5618908343013286, 0.20563959357807404, 0.224832562546728, 0.21311155961731731, 0.1875663204348177, 0.19323281212507804, 0.18647232613468356, 0.19548055705200673, 0.19300439025212857, 0.2062050534501234, 0.09620280806017434, 0.0984433317417901, 0.08527386871555664, 0.09704914841603263, 0.09786211779161547, 0.09133370794359585, 0.09783701849691484, 0.1128544467923126, 0.08648680454551827]}, "mutation_prompt": null}
{"id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 45, "fitness": 0.31155142986056994, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "c74a9a14-6952-4e2d-8979-e6c842e23ed9", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "dce96f42-1b3b-423d-8ca5-ea1f76d4861a", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "48335ea3-8fd2-4473-a936-4a5b02e36064", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "fad8ca5b-c9ad-486c-9680-1fbde3b9550d", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.max_velocity = 0.1 * (5 - (-5))\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores = np.where(better_mask, scores, self.personal_best_scores)\n            self.personal_best_positions = np.where(better_mask[:, None], self.particles, self.personal_best_positions)\n\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = np.copy(self.particles[min_score_index])\n\n            random_matrix = np.random.rand(self.population_size, self.dim)\n            cognitive_component = (self.cognitive_const * random_matrix *\n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix *\n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities +\n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -self.max_velocity, self.max_velocity, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "An enhanced PSO with dynamic velocity limits and precomputed random components for improved efficiency.", "configspace": "", "generation": 48, "fitness": 0.2839408882023296, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.7383160159679341, 0.7534399844555703, 0.7176311591836225, 0.7428416084405984, 0.736481432298035, 0.7114439938826977, 0.7424850582070233, 0.7397403897199089, 0.7662288017395741, 0.36387141794557976, 0.09981598220201593, 0.3556108011545178, 0.3240000107997226, 0.33669284207428807, 0.27724747096810076, 0.35885003545824523, 0.3288194328126055, 0.3240720160083289, 0.14496045190155837, 0.16560860504487118, 0.11794152332125463, 0.14100594475596395, 0.14533080320973712, 0.20905257636221264, 0.11016667357429977, 0.13977696028345088, 0.13822367064426855, 0.11577763389684237, 0.07298349764269785, 0.15801666434852268, 0.11344650195851158, 0.11184496213274375, 0.11873648042079787, 0.11474642152157355, 0.11808188714665957, 0.12584454333926953, 0.9532892398794978, 0.9567428677522345, 0.9595091594525006, 0.9541000022768299, 0.9523631667291063, 0.9327412786189787, 0.9539117091390819, 0.9354609155190147, 0.9567546573609104, 0.45086182395403496, 0.4742532022054775, 0.4341499586026406, 0.4558611949505996, 0.3982956992742859, 0.42111755731049927, 0.42953800073161075, 0.4594351422202695, 0.38482796438106026, 0.7281718236004435, 0.1710466872518589, 0.7905543673797037, 0.22047762622647749, 0.27821592393775285, 0.19330920730246803, 0.23128277684756904, 0.1517587379255041, 0.23656832324126353, 0.19593684985760207, 0.17081740037087, 0.1739858912315151, 0.17651487895884, 0.1945310949400627, 0.21712879311972488, 0.17574412697755448, 0.17479226872667675, 0.1810013551488605, 0.19911886444499216, 0.1747800970097254, 0.13083168643865994, 0.12935005756935025, 0.18718438332951126, 0.2135698076401854, 0.2180326621260339, 0.21490610039824154, 0.20745247743823636, 0.03605949881679804, 9.999999999998899e-05, 0.054053100048359726, 0.05556360572427621, 9.999999999998899e-05, 9.999999999998899e-05, 0.008079446375225285, 0.14576162564305817, 0.043691757916171636, 0.1353889086621417, 0.10994377602432304, 0.0763564357365274, 0.07636657508903244, 0.0247084073916094, 0.0252670571842164, 0.12369476677803848, 0.1164640791300795, 0.05660509428735727, 0.10937422094505145, 0.06726930423479971, 0.11704448154410352, 0.07835083146710531, 0.13819843089207573, 0.12739276203999705, 0.12288679257103863, 0.10403352327911075, 0.12917393536464528, 0.14343578030960202, 0.12382278804165292, 0.224798340288221, 0.06684938027783305, 0.11769503100737622, 0.06134446951289041, 0.18098704858091996, 0.1445833720223869, 0.08115500950068599, 0.4895276655504961, 0.49193926442976077, 0.46703027593221225, 0.48788226435423165, 0.5441445758432959, 0.5225667589042515, 0.4793805791947131, 0.5343977029987728, 0.537488046852348, 0.10857109823309052, 0.11208464694075715, 0.07678296811215946, 0.13772120820339473, 0.1474246879049329, 0.10306593340690451, 0.11635713667364034, 0.14239413628258613, 0.10436917000918888, 0.13277899078167088, 0.31979696922774814, 0.2201069043861016, 0.3181950573546708, 0.2260677560409492, 0.3611972288695585, 0.19715276469775678, 0.38293038755582787, 0.20371420484851543, 0.2697753775413607, 0.36356012082412104, 0.39402209237394803, 0.3236842523747028, 0.35710493563572443, 0.36610670549700775, 0.3470225294347715, 0.4143595082917818, 0.26738982909193987, 0.2036789608674019, 0.3009149835819104, 0.23477494035003665, 0.2981857931834, 0.21635970191053422, 0.29800670020494935, 0.23083559900215256, 0.33237111494527394, 0.25914054979541334, 0.23222514470179922, 0.23655022783900426, 0.24224391256747346, 0.23674410034746518, 0.22353232315270066, 0.2184914964252146, 0.22343292214537325, 0.21657402978391727, 0.22484251060051852, 0.20612717894618737, 0.1951248261992342, 0.22042779547206226, 0.46918972754522725, 0.20669829145342256, 0.19708569358508798, 0.23961500674641745, 0.22332151306239145, 0.4686064881536134, 0.1263900599029083, 0.1784095469992073, 0.1869523927227077, 0.9039686026806978, 0.20093145973781013, 0.8641997660761377, 0.14276807652737045, 0.8854732047820013, 0.15402231966828728, 0.5268963245302998, 0.21253160892627532, 0.7922534971741381, 0.5715638558590179, 0.1692431966341279, 0.15527353515234077, 0.10463245039748326, 0.1666757497267316, 0.718390149791696, 0.1970384594538923, 0.17921865966428197, 0.18413567148058252, 0.16895759951204148, 0.1883313557521863, 0.1873174317988019, 0.19659262523910948, 0.18965070292297737, 0.18271234011142456, 0.09867256439513117, 0.14554782002959366, 0.10511676216390753, 0.08549425219152895, 0.0840213370348265, 0.07733576287466037, 0.11424584310909436, 0.07070316034621116, 0.08625673780199539]}, "mutation_prompt": null}
{"id": "83e53ed8-a5b0-4972-a47d-3cc117eab3f6", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "2b0be784-b8c4-4482-8645-49b126f2466b", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "0309bda6-d249-4fc7-86f4-b1af2c7195e2", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "f149aff0-c5a3-4428-b164-7bebf7536366", "solution": "import numpy as np\n\nclass StreamlinedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30  # Reduced population size\n        self.inertia_weight = 0.7  # Slightly adjusted inertia weight\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        # Initialize particles using a more efficient method\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def update_particles(self, func):\n        scores = np.apply_along_axis(func, 1, self.particles)\n        self.evaluations += self.population_size\n\n        better_mask = scores < self.personal_best_scores\n        np.copyto(self.personal_best_scores, scores, where=better_mask)\n        np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n\n        min_score_index = np.argmin(scores)\n        if scores[min_score_index] < self.global_best_score:\n            self.global_best_score = scores[min_score_index]\n            self.global_best_position[:] = self.particles[min_score_index]\n\n        return scores\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = self.update_particles(func)\n\n            cognitive_component = self.cognitive_const * random_matrix[:, :, 0] * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix[:, :, 1] * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n            # Local search integration to enhance exploitation\n            if self.evaluations < self.budget:\n                local_best_pos = self.particles[np.argmin(scores)]\n                self.particles = np.clip(self.particles + np.random.uniform(-0.1, 0.1, self.particles.shape), -5, 5)\n                self.particles[:, :] = np.where(scores[:, None] < self.personal_best_scores[:, None], local_best_pos, self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "StreamlinedPSO", "description": "A streamlined particle swarm optimization with enhanced efficiency through local search integration and reduced redundancy.", "configspace": "", "generation": 52, "fitness": 0.24070340134479432, "feedback": "The algorithm StreamlinedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.48398513717464886, 0.4738867062487846, 0.5333008857113699, 0.47941309234610585, 0.492050455588639, 0.4977571810803335, 0.47707453009726364, 0.5037918046837874, 0.4997609215551796, 0.011467288715286128, 0.03548892672951587, 0.03020649724559976, 0.05562009997129369, 0.08388940718185933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10658525077977121, 0.11761013861485081, 0.10172490795530242, 0.11706046065216646, 0.10788552693385267, 0.1140206900614168, 0.1048091364459307, 0.17385418794026974, 0.08167961742559748, 0.1107085987385692, 0.053037506227697095, 0.06780487380737776, 0.11210572891602932, 0.06870111884430696, 0.10263828836133959, 0.10592885342270275, 0.06151173977633917, 0.08872237478595613, 0.9510534526963887, 0.9618501508928698, 0.9472736979972592, 0.9290065526432507, 0.9617733435605877, 0.949509120828224, 0.9623994523185273, 0.9302246040105857, 0.9433441429463546, 0.36087718434919447, 0.3382011454672885, 0.3448347135039226, 0.33964506839651987, 0.3373563724136417, 0.33840091810081696, 0.3283557680286565, 0.32155832356831093, 0.3256059805893061, 0.6024337413782288, 0.16377694048985736, 0.1671805593371355, 0.7491406067845292, 0.4625592554531187, 0.15638196570613694, 0.17888810722242365, 0.17881323966094154, 0.16744495571484985, 0.18433663311561133, 0.15250537189441726, 0.15001873552346623, 0.16947783168138753, 0.12122096838064611, 0.17925427224053092, 0.2421812091566038, 0.1346891095386774, 0.19377848259476427, 0.18798222206078508, 0.22656497098245376, 0.2679034119571895, 0.17054380651386547, 0.13243330957805755, 0.21141270626631226, 0.22170862583349882, 0.19673977166360612, 0.19860782523797393, 9.999999999998899e-05, 0.02144120714297404, 0.015520198631578053, 0.07320234753825605, 0.0347398900283904, 9.999999999998899e-05, 0.004939306302288227, 9.999999999998899e-05, 0.043165841384755765, 0.12559383117198486, 0.06053058956921409, 0.10469292394537011, 0.06249549027092294, 0.013107215102137748, 0.003360830571182638, 0.15654913872892207, 0.08313820825240581, 0.08344571416872626, 0.004827644926684971, 9.999999999998899e-05, 0.0030328107304435914, 9.999999999998899e-05, 9.999999999998899e-05, 0.024704573090493787, 0.01180387131074545, 9.999999999998899e-05, 9.999999999998899e-05, 0.10216136570111212, 0.10881911873068839, 0.12421079943292757, 0.09146992136266052, 0.05599803043773499, 0.0882173901785831, 0.12825797953039397, 0.10314122396667369, 0.09578254538135023, 0.44157981460294027, 0.44746638843824427, 0.43831223031928557, 0.4415371623186971, 0.44438541749898564, 0.418022172779414, 0.46196221089554923, 0.44752166784348824, 0.4401287386991727, 0.08968069010770685, 0.13066911552026028, 0.08223653985218826, 0.13246593822232366, 0.08751710302910065, 0.08604327690042479, 0.11482845260813213, 0.13304400258498827, 0.11475588453440089, 0.22092318480317918, 0.12943274006785754, 0.18928134232242755, 0.1867310362501695, 0.25154050690441576, 0.2652792581275327, 0.2995185698944931, 0.23305369859796032, 0.17706286804735005, 0.24736018681380878, 0.26936655521239783, 0.31626645620921445, 0.32714655131629944, 0.23687156960117672, 0.3178458140576934, 0.24240821044732175, 0.3109162391125483, 0.23692244212460623, 0.22923114504135622, 0.21957323831027775, 0.23417068464655721, 0.26816491913649265, 0.21982088905135466, 0.22714069153817507, 0.2064329525639188, 0.24380101601011117, 0.16023414708795003, 0.20639512405508387, 0.1830421443906214, 0.26933237278862965, 0.23449621963126033, 0.2492148343564199, 0.1966407299324222, 0.21962382074102882, 0.24848332225016456, 0.17655070642944082, 0.19536460017105572, 0.20786491000904395, 0.18301330336653876, 0.19908355495891472, 0.19643423338357213, 0.1992774445848059, 0.20225602995872605, 0.30203374379495473, 0.19890264878803499, 0.749173239947125, 0.12615209050097398, 0.15345913918658627, 0.7245060779268918, 0.6522056617486294, 0.7661924278038119, 0.7591488585040405, 0.6494077178325193, 0.7298380752711859, 0.5634921383495064, 0.15657911434748062, 0.5864130746212564, 0.10477525894332596, 0.1545621882303152, 0.640993307736098, 0.4510869917389442, 0.1685206895692809, 0.16838539046135614, 0.17944164426024256, 0.19649282540610458, 0.19162993196678357, 0.17988387689860463, 0.1783211816079222, 0.19329146147925957, 0.18557420278704018, 0.17182603624025228, 0.18902426808745687, 0.07673933430032032, 0.08323594565733405, 0.07419343438900705, 0.07670280976206922, 0.0726560209316478, 0.07720141106826883, 0.08378074938281133, 0.07877581388802046, 0.08872826611292128]}, "mutation_prompt": null}
{"id": "7f9886bf-60a7-434a-acf4-f4602e41ffb3", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "80f5f809-99e4-4444-8622-5041e4707356", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "5458565a-7f2c-4d52-84d6-156304d65493", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "ff7da824-309c-4f6d-8c16-0dfee6c7de68", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "ded91b2e-af31-4984-8d90-f65d66f087fd", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "e18dcd5c-9ecf-4ad0-be03-609c868fb764", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "f9afe7b5-7a63-46dd-8290-14ca22f49793", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "ef1c4245-f7d6-4749-8691-8999cca59f64", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "08fdc146-89c2-47bc-8d7a-4cefe4f6b734", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "cbaa7751-439f-4195-90d4-00519f411c2e", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "89849d7a-9783-469d-bfee-420d0966e79c", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "f878869a-50f4-4f5a-bfba-e8db148dc4f5", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "d093307b-02aa-43c9-8444-914decc629dc", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "52302940-35b1-402d-98cc-928be046aebd", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix = np.random.rand(self.population_size, self.dim, 2)\n\n    def __call__(self, func):\n        score_evaluation_batch = np.zeros(self.population_size)\n        while self.evaluations < self.budget:\n            # Batch score evaluation for efficiency\n            for i in range(self.population_size):\n                score_evaluation_batch[i] = func(self.particles[i])\n            scores = score_evaluation_batch\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            # Unrolling cognitive and social update to avoid repeated computations\n            cognitive_component = (self.cognitive_const * self.random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * self.random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "An enhanced particle swarm optimization variant using precomputed matrices and loop unrolling for improved efficiency.", "configspace": "", "generation": 66, "fitness": 0.31155142986056994, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "4385b353-536f-48e1-bc27-e2d835276039", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim)).astype(np.float32)\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim)).astype(np.float32)\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf, dtype=np.float32)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        scores = np.full(self.population_size, np.inf, dtype=np.float32)\n        while self.evaluations < self.budget:\n            np.apply_along_axis(func, 1, self.particles, out=scores)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores = np.where(better_mask, scores, self.personal_best_scores)\n            self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.particles, self.personal_best_positions)\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = np.copy(self.particles[min_score_index])\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A refined PSO variant utilizing efficient memory operations and vectorized calculations for optimal runtime performance.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, array([ 0.48813504,  2.1518936 ,  1.0276338 ,  0.44883183, -0.763452  ],\\n      dtype=float32); kwargs: out=array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf], dtype=float32)').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, array([ 0.48813504,  2.1518936 ,  1.0276338 ,  0.44883183, -0.763452  ],\\n      dtype=float32); kwargs: out=array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\\n       inf], dtype=float32)')", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {}, "mutation_prompt": null}
{"id": "4a40d0bc-6d77-44f8-8785-e1e6c09ae0e4", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        random_matrix = np.random.rand(self.population_size, self.dim, 2)\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask[:, None])\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position[:] = self.particles[min_score_index]\n\n            cognitive_component = (self.cognitive_const * random_matrix[:, :, 0] * \n                                   (self.personal_best_positions - self.particles))\n            social_component = (self.social_const * random_matrix[:, :, 1] * \n                                (self.global_best_position - self.particles))\n\n            self.velocities = (self.inertia_weight * self.velocities + \n                               cognitive_component + \n                               social_component)\n\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "A particle swarm optimization variant with optimized loop structures and reduced redundant operations for enhanced runtime efficiency.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8965822387683062, 0.9040100754589017, 0.9008805137585804, 0.901617972028957, 0.8940128371359288, 0.8936583740168113, 0.8980201775546489, 0.8999465235407959, 0.8929043657060342, 0.7206795588213475, 0.7339043557744991, 0.7298871519486534, 0.7178185334882224, 0.7592327807860713, 0.7169905901599518, 0.6783965669707185, 0.742114426592849, 0.7550142645282356, 0.1420915869404047, 0.1169578696402106, 0.11377255314443502, 0.158697693738298, 0.16406464503544882, 0.1188581812171493, 0.11601863375777377, 0.08601739056721602, 0.0643620305068342, 0.0843452935799498, 0.11621213026118626, 0.07690916115125312, 0.10069923706830541, 0.07932635126991316, 0.14295729292857595, 0.1440667365061914, 0.15897017935369162, 0.13345323784242302, 0.9568855766914471, 0.9322541428505269, 0.9576217696246248, 0.9467485354765415, 0.9390388785181041, 0.9472656826217588, 0.9572641556855789, 0.9489062441186215, 0.9563604705643903, 0.5410910379692317, 0.3678207174027568, 0.5957553008437217, 0.5251443750606833, 0.7289022958343732, 0.803972540493448, 0.6359074475836541, 0.31982072236486325, 0.7623519941024784, 0.24335887586079563, 0.22931262993856405, 0.17153605006418238, 0.28045589304378593, 0.2772902088158212, 0.19396637088174584, 0.2360424471051057, 0.1773967841154861, 0.2380894648445836, 0.4648767612167458, 0.11990554762576144, 0.20978036359486796, 0.1832043143538803, 0.3105665134647455, 0.19788353164742944, 0.19867294319895368, 0.2644194465100833, 0.20690250612840477, 0.2027668254831546, 0.21542262052582606, 0.4421115455707122, 0.2268850040853182, 0.23579405246026808, 0.20861906836181765, 0.13171506737407612, 0.25623215557664647, 0.19367757524786033, 0.004147412193235556, 9.999999999998899e-05, 0.051355265352406976, 0.042377253004366344, 0.039505901811873856, 9.999999999998899e-05, 0.13440146010184695, 9.999999999998899e-05, 9.999999999998899e-05, 0.1716283445216994, 0.05888163937380109, 0.06860794531095815, 0.04081877720515459, 0.021680038318530714, 0.02463158243532304, 0.07419034500773536, 0.08592529240006352, 0.08616313564072264, 0.1791935948501634, 0.11228191667494813, 0.07971891087310001, 0.3013715669049227, 0.08739335607251064, 0.09470591856318622, 0.10171804182624333, 0.11647424117822958, 0.15206420910622687, 0.3716468812132493, 0.1307336704077776, 0.07160061249319893, 0.04178832891698181, 0.07354156867763073, 0.2629250600390285, 0.0898291880369888, 0.22837895490959093, 0.1849371833671637, 0.5302961204109163, 0.5284318410143134, 0.5424908593501981, 0.5493476631756946, 0.5240675175092913, 0.5620651959081919, 0.616958529582937, 0.5498803477718561, 0.599279410894048, 0.0699030456838724, 0.08679637119779349, 0.08924708469572784, 0.13424785777120885, 0.14262896215075194, 0.11139025657932744, 0.15791046031395983, 0.16020069248591695, 0.07839808413452376, 0.19554342664942848, 0.26260543195885966, 0.2034830436773154, 0.2996268942874415, 0.23581932954913776, 0.31061704100285725, 0.2127174852452547, 0.17644338594241904, 0.15821480516160613, 0.2567176368627615, 0.3560573704659754, 0.2736871355377152, 0.3083367709439233, 0.38232929956319417, 0.3244149579356892, 0.3928219983781617, 0.36146601788686594, 0.3131718263388541, 0.19447269623769858, 0.26816564666780895, 0.2636600235969556, 0.23566420475581973, 0.20665184101771972, 0.2937879531084643, 0.3324934876944379, 0.29211478951919134, 0.2312614451465813, 0.2774424057845557, 0.21524875066397386, 0.2017715302890618, 0.27304233074085327, 0.24056718400737986, 0.21705295009057213, 0.21839955435443126, 0.22361006881527, 0.20097492405173156, 0.21083683573723533, 0.19104770099813007, 0.19298477642384715, 0.25308673901859646, 0.20146703630617668, 0.2258180176540292, 0.19186687510067257, 0.21041548192920012, 0.18431234986636602, 0.12608301973502845, 0.1214876766720101, 0.17676052618169802, 0.9382274249085636, 0.20111983209264617, 0.9305309968577979, 0.14279734622277662, 0.9166350667596503, 0.9434668330353867, 0.6325850186421866, 0.21297782497972717, 0.6308905699611627, 0.20942704966406223, 0.1554674647918557, 0.1542066536435004, 0.10506638113245315, 0.1048441506209723, 0.16823058344716935, 0.16999192529008034, 0.23429112833951582, 0.22253412468826372, 0.1752929634335877, 0.1801945306485424, 0.20129757599752152, 0.18149123136730705, 0.2524682274694048, 0.1917024045453215, 0.0857160618849353, 0.0999327077051918, 0.09126701192111253, 0.08514569981690112, 0.10909400858441809, 0.09154433536379913, 0.0946077481630555, 0.07479532853409987, 0.0986400959455952]}, "mutation_prompt": null}
{"id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 69, "fitness": 0.32347043208406523, "feedback": "The algorithm EnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "43e365fb-6472-4adf-b27f-ecaeba0cf1e7", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "17deaf29-dfe7-4a23-9803-637a705a7eec", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "ab36e719-1139-4c0b-a90a-02cce7c5b030", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "633cf54d-fd0b-4c47-b3ff-3be261b3d3e4", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.inertia_start = 0.9\n        self.inertia_end = 0.4\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluation_count = 0\n\n    def update_inertia(self, iteration, max_iterations):\n        return self.inertia_start - (self.inertia_start - self.inertia_end) * (iteration / max_iterations)\n\n    def __call__(self, func):\n        iterations = self.budget // self.pop_size\n        for iteration in range(iterations):\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluation_count += self.pop_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            inertia_weight = self.update_inertia(iteration, iterations)\n            random_coeffs = np.random.rand(self.pop_size, self.dim, 2)\n\n            cognitive_component = self.cognitive_const * random_coeffs[:, :, 0] * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_coeffs[:, :, 1] * (self.global_best_position - self.particles)\n\n            self.velocities = inertia_weight * self.velocities + cognitive_component + social_component\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization using adaptive inertia and streamlined update operations for enhanced runtime efficiency.", "configspace": "", "generation": 72, "fitness": 0.2559662932522456, "feedback": "The algorithm OptimizedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.739744470357989, 0.7272925495934184, 0.7135007915760974, 0.19061420085442193, 0.7480987875079417, 0.7664432394458917, 0.1745331163650934, 0.7600231085376747, 0.18152201523446043, 0.05951907622226771, 0.39573466590583317, 0.32377346369559223, 0.038230055687575426, 0.03714384627060918, 0.054624111630069305, 0.40312669476414453, 0.4361812611605894, 0.326180659641775, 0.46867484738229315, 0.1680052300218462, 0.1250431602557237, 0.11896327819968588, 0.12640256023512197, 0.15194487458600692, 0.21950259017487084, 0.12195110586853042, 0.2504626235017471, 0.11684943077732057, 0.40401629142197304, 0.10951382021491662, 0.10501290283721232, 0.13852032454322505, 0.12683817311988166, 0.12513204686529988, 0.1287474285111373, 0.1419061442291646, 0.9882655345472184, 0.9890688306540051, 0.9886658159324999, 0.9780812841931313, 0.9878251710282295, 0.9887355731605542, 0.9842496046836561, 0.9854851221301021, 0.9883141820116186, 0.5105026903987073, 0.5475627651624532, 0.05824981712983679, 0.3527437291518072, 0.15900073971432394, 0.14625216258722173, 0.11045074833858037, 0.4918777366924788, 0.5523062274406741, 0.3428166083121379, 0.4908604121550183, 0.20121672558243853, 0.2603783456188896, 0.19048163891941827, 0.19187907839740614, 0.12844928627556929, 0.7147380204479992, 0.2665549053623557, 0.17910451910567948, 0.1914830630200659, 0.10647488135369643, 0.11713658854676379, 0.1793043690670607, 0.15602740535659032, 0.2353043795631724, 0.13112162705072694, 0.18079552797139042, 0.22331933701178053, 0.19306401187075994, 0.11139540472027742, 0.12068599202139574, 0.18237580615998528, 0.1968838598922814, 0.18279479749173633, 0.11907928715396843, 0.07648356069933471, 0.0016017436127981899, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010897759497197068, 0.005618860793013436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06924358786774953, 0.021529545840399456, 0.04114604403687949, 0.056930844873699815, 0.011785051067479846, 0.08983157670486797, 0.09276157262862894, 0.09792055081047069, 0.02895785754671598, 9.999999999998899e-05, 0.02928016287317803, 0.032414846296144995, 0.06985425693013236, 0.06643432502180602, 0.10401980738305106, 0.07642647087812693, 0.05487045376986244, 0.08297889537943848, 0.10355004849081195, 0.11189960616690309, 0.00847001299915151, 0.027528627967432495, 0.22284357403878452, 0.07604927513433923, 0.12966357714362753, 0.04678364494244014, 0.07752570823910887, 0.4969246491219729, 0.4680586669956961, 0.4845693370814461, 0.4655205265107011, 0.4773390402451102, 0.4873853548607032, 0.48440318613226485, 0.4806382138809231, 0.5054716444417208, 0.08344973744237705, 0.1423438551433157, 0.06284545106480077, 0.12847406710024933, 0.03917865722799885, 0.10396908898834734, 0.10190012322749187, 0.08410192897952817, 0.16457297222107736, 0.23863757740706348, 0.2000162366894791, 0.2271946496426448, 0.21997658347345195, 0.21680452432619235, 0.21562500862060863, 0.2951042923300936, 0.1818641180208338, 0.2185317261211014, 0.36507701279382154, 0.18449201907477375, 0.27457855467586567, 0.3173159829032326, 0.28560969294298233, 0.31257631299457034, 0.2689391218101672, 0.5092151785795676, 0.522742377248234, 0.1924678095553899, 0.20242192396580005, 0.24300213264925408, 0.22159262285341508, 0.18361719529917664, 0.20217744695145723, 0.28072119407258544, 0.25413148646653194, 0.24790468317390868, 0.20101501600993588, 0.14915689505852536, 0.2320271930392087, 0.20469413820540705, 0.17797186113109387, 0.20811002244275956, 0.21611718787121703, 0.20198078680813758, 0.2242127345427226, 0.20314850862578182, 0.19808528542807102, 0.2081238075126811, 0.23922962889098043, 0.20185500389916355, 0.19551588442093448, 0.22466959869468028, 0.5220622030349643, 0.20017674583878264, 0.8558078941098084, 0.6523428666849356, 0.15450317843844297, 0.8081181973332434, 0.1974385574946098, 0.19757467689476715, 0.13821303232805926, 0.16961707459213626, 0.7827824330821223, 0.5149577911432331, 0.20527764946694904, 0.4361433044373647, 0.47196250022954234, 0.16763619033701138, 0.23239513577155124, 0.1833843322232741, 0.10426756379809832, 0.5855354422444832, 0.19165581947241883, 0.18493908956922178, 0.20805152755171274, 0.21487851872447605, 0.20345131818409767, 0.17697826750918433, 0.19352458985180787, 0.18699296043604152, 0.19488089242039763, 0.09102791370533536, 0.09283122048773762, 0.08919673298367958, 0.09555560382033423, 0.08576834052354809, 0.0632818456107338, 0.08114426842525901, 0.08988849343550231, 0.09472802408654135]}, "mutation_prompt": null}
{"id": "ec214a3e-6fa2-47f8-b3e9-92eece0b66fb", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "724726b9-4c50-4151-88fe-ce9699ccd033", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "8cd5a503-232c-4a65-83ae-e85d3a882703", "solution": "import numpy as np\n\nclass OptimizedEnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_factors = np.random.rand(self.population_size, self.dim, 2)\n            cognitive_component = self.cognitive_const * random_factors[:, :, 0] * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_factors[:, :, 1] * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedEnhancedPSO", "description": "Optimized Enhanced PSO with adaptive parameter control for improved convergence and efficiency.", "configspace": "", "generation": 75, "fitness": 0.2876378551959454, "feedback": "The algorithm OptimizedEnhancedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.820648065320754, 0.8100852751904752, 0.8474438324877612, 0.8356214655004977, 0.8208856806082329, 0.1905839990195468, 0.8283700413128255, 0.8454825288939011, 0.836349291856952, 0.5975930618829668, 0.5777243732063106, 0.6181052838167184, 9.999999999998899e-05, 0.03244833568418892, 0.5300354480020523, 0.0500655356613775, 0.6114366251205186, 0.6106139271872768, 0.16964120002957317, 0.10229832281524409, 0.18499676710315438, 0.4413993837833906, 0.15717553037265442, 0.15694968798833775, 0.27254760868477923, 0.17715681134965866, 0.1421161348885196, 0.14040123705224228, 0.12436055677464353, 0.1353877180517169, 0.1455266382127074, 0.12901911033088231, 0.09410761691972325, 0.1237322120332961, 0.17509316167486, 0.16562065166961437, 0.9878210149205991, 0.984935872692683, 0.9879662822715854, 0.9854821627721337, 0.9877196263387307, 0.98148167823207, 0.9855120175854083, 0.9868866735151934, 0.9860662840506221, 0.5872612744867198, 0.5205082861792036, 0.5373064675522194, 0.5886688341364865, 0.5604046120292581, 0.5504963798743052, 0.5770319270937159, 0.5533819996432026, 0.5176130727833681, 0.17062474679194473, 0.37370330153348763, 0.6646100548424982, 0.2156941877088887, 0.2187805343430067, 0.19256837254664627, 0.17587637028205205, 0.32544782069202616, 0.3109865590412578, 0.18578644995790128, 0.2030920875569745, 0.1943794919406847, 0.18528850909328476, 0.19493444428017304, 0.12324187734165826, 0.22189817232078834, 0.19775471105898945, 0.20670469833004523, 0.2210408941078238, 0.20779262152601263, 0.2027520971787481, 0.1387048004442213, 0.1835318345691025, 0.2123620110947223, 0.0939953527472841, 0.14051385296120567, 0.10044136628985967, 9.999999999998899e-05, 9.999999999998899e-05, 0.011654538499089595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013667196378824853, 0.0016781833889781828, 0.035677526561313844, 0.08313370813510301, 0.06353001866165653, 0.07230336185877917, 0.07494688018733409, 0.009450511938577488, 0.07893690076144044, 0.02107485682280641, 0.10363746757191472, 0.050442043899919686, 0.04721646786230671, 0.10705518150313387, 0.16199827669043643, 0.0729008073773002, 0.08498190702364516, 0.07256079068489985, 0.09390580085351685, 0.06441105859097884, 0.09936542170869211, 0.15432897536229562, 0.04070622832655213, 0.2088700610148586, 0.07088913852311562, 0.0686981969515289, 0.19274447193011857, 0.08108501624026809, 0.19875922159073767, 0.08187989639351323, 0.5400993893743202, 0.5337113698709856, 0.5411184431720548, 0.5465512663833174, 0.5128427707480353, 0.20869034903449735, 0.5358675981507779, 0.5165488425629714, 0.5794608166653662, 0.12454428675694729, 0.08854233799508315, 0.08272350170057963, 0.18117958741043672, 0.1070256634492438, 0.09988722118882198, 0.1432134465085554, 0.08633751085660346, 0.13037017115448013, 0.3192130713217576, 0.26031610157743157, 0.22454068339990574, 0.3142879622633955, 0.2330358144976341, 0.14292774445536593, 0.228831964130376, 0.19339515401978813, 0.20642703697290055, 0.2963675294290913, 0.23443245934784496, 0.45271366625148335, 0.4028184515543105, 0.40819744100425737, 0.35066214389217754, 0.341501757398457, 0.4646510484494545, 0.4848823034306122, 0.24075141664362187, 0.18327616523584123, 0.3909657685806047, 0.1659855747670932, 0.16900910745718178, 0.33187438001417835, 0.15877627943844796, 0.2735173848387821, 0.20009406211878822, 0.20646609636258983, 0.16045941878063408, 0.21155529633782122, 0.18848352631346055, 0.2621815446722505, 0.16299960019988535, 0.19917623812704732, 0.2231658274419236, 0.21367243799683588, 0.5729639551677348, 0.191249700468486, 0.19103012283970544, 0.2521221740370324, 0.5652394438606319, 0.20351606522352172, 0.21319050858485866, 0.5666573500695231, 0.24413768835867078, 0.26425303414363366, 0.16823416777898925, 0.15440479956982767, 0.8757255750671136, 0.20046286931606105, 0.20044647052731257, 0.18569515080007204, 0.16384674620475848, 0.20505276499222547, 0.7487975862023677, 0.2139259088952501, 0.8526925742192877, 0.2101134630248933, 0.16915870846668002, 0.1550639387836087, 0.2113451320841494, 0.10388748884631571, 0.6037146821589561, 0.19044664742764472, 0.18798712773330217, 0.19659232205557853, 0.20560010920342298, 0.21088505679175762, 0.20419106292654876, 0.18997404512000338, 0.18148828649429338, 0.2017967374780838, 0.08915969888835207, 0.08485969980728347, 0.11416041931066723, 0.09014785196873631, 0.08135199562762574, 0.09664228997368063, 0.11665188561102457, 0.09339044693297438, 0.10633149379642459]}, "mutation_prompt": null}
{"id": "82815809-7ec0-4ff3-8d1d-2dc606d8ebb0", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "91b4a4e2-d443-4ea6-9498-4139e792c611", "solution": "import numpy as np\n\nclass OptimizedEnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(30, self.budget // 10)  # Adapt particle count to budget\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))  # Start with zero velocities\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            np.copyto(self.personal_best_scores, scores, where=better_mask)\n            np.copyto(self.personal_best_positions, self.particles, where=better_mask)\n\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = np.copy(self.particles[min_score_index])\n\n            rand1, rand2 = np.random.rand(2, self.population_size, self.dim)\n\n            self.velocities = (\n                self.inertia_weight * self.velocities +\n                self.cognitive_const * rand1 * (self.personal_best_positions - self.particles) +\n                self.social_const * rand2 * (self.global_best_position - self.particles)\n            )\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedEnhancedPSO", "description": "Optimized Enhanced PSO with adaptive particle counts and simplified velocity updates for increased efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('could not broadcast where mask from shape (30,) into shape (30,5)').", "error": "ValueError('could not broadcast where mask from shape (30,) into shape (30,5)')", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {}, "mutation_prompt": null}
{"id": "7720f4f6-66ac-4880-9474-d031665c5fec", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "06b2c636-3d98-454d-ac38-1c6a84203340", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "7e54ec43-1636-48a1-ad22-b115858fee45", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "c0fdcbd0-95aa-4b63-b4e5-00ef54f65440", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "c283c103-6e7b-4b76-ba8d-ce8e6eb92b99", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "36f60687-e3b9-4765-8845-15bad9cc8a31", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "0af0a238-07ce-47a6-a9d5-6289c21b1a0b", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "5db8190f-c0bb-4f2e-9189-f2c78583eef1", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.inf * np.ones(self.population_size)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = np.where(better_mask, scores, self.personal_best_scores)\n            self.personal_best_positions = np.where(better_mask[:, None], self.particles, self.personal_best_positions)\n\n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            \n            # Vectorized component update\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n            \n            self.velocities = (self.inertia_weight * self.velocities + cognitive_component + social_component)\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedPSO", "description": "Optimized Enhanced Particle Swarm Optimization by minimizing redundant operations and using vectorized updates for improved runtime efficiency.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('NumPy boolean array indexing assignment cannot assign 40 input values to the 39 output values where the mask is true').", "error": "ValueError('NumPy boolean array indexing assignment cannot assign 40 input values to the 39 output values where the mask is true')", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {}, "mutation_prompt": null}
{"id": "7ac3acad-6c2d-40e9-9796-c573ace9119b", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "499e80c2-a812-42cf-ac68-59b7bce1c6d2", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "5f474a07-8a8d-444c-b115-8094a474c523", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "bd809ce7-1db7-423b-ad9d-2b4956b06859", "solution": "import numpy as np\n\nclass OptimizedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Reduced initial population size\n        self.inertia_weight = 0.7\n        self.cognitive_const = 1.5\n        self.social_const = 1.5\n        self.particles = np.random.uniform(-5, 5, (self.initial_population_size, self.dim))\n        self.velocities = np.zeros((self.initial_population_size, self.dim))  # Initialize velocities to zero\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += len(self.particles)\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            if self.global_best_score < 1e-8:  # Early stopping condition\n                break\n\n            random_matrix1, random_matrix2 = np.random.rand(self.initial_population_size, self.dim), np.random.rand(self.initial_population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n            # Adaptive population resizing\n            if self.evaluations < self.budget * 0.5:\n                self.adapt_population_size()\n\n        return self.global_best_position, self.global_best_score\n\n    def adapt_population_size(self):\n        new_size = min(self.initial_population_size * 2, int(self.budget / 10))\n        if new_size > len(self.particles):\n            additional_particles = np.random.uniform(-5, 5, (new_size - len(self.particles), self.dim))\n            self.particles = np.vstack((self.particles, additional_particles))\n            self.velocities = np.vstack((self.velocities, np.zeros((new_size - len(self.velocities), self.dim))))\n            self.personal_best_positions = np.vstack((self.personal_best_positions, additional_particles))\n            self.personal_best_scores = np.append(self.personal_best_scores, np.full(new_size - len(self.personal_best_scores), np.inf))", "name": "OptimizedPSO", "description": "Optimized Particle Swarm Optimization with adaptive population size and early stopping for faster convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (30,5) (60,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (30,5) (60,5) ')", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {}, "mutation_prompt": null}
{"id": "cde69283-ee54-4af8-8957-cdf220efd082", "solution": "import numpy as np\n\nclass EnhancedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            better_mask = scores < self.personal_best_scores\n            self.personal_best_scores[better_mask] = scores[better_mask]\n            self.personal_best_positions[better_mask] = self.particles[better_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            random_matrix1, random_matrix2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities = self.inertia_weight * self.velocities + cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedPSO", "description": "Enhanced Particle Swarm Optimization with dynamic parameters and simplified operations for improved runtime efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8653528456343275, 0.8532151964066828, 0.8581877885562713, 0.8467247774495974, 0.8408580308295713, 0.8365380343314652, 0.8437151211236933, 0.8588306133122876, 0.8572715205334908, 0.6321053870807769, 0.6265208550764227, 0.623625821067604, 0.6047251250708288, 0.6246232964846692, 0.5799943394297997, 0.6138987174780799, 0.6162979209340684, 0.5808173783102605, 0.15633352216213947, 0.17874176903492356, 0.16646575042857947, 0.13106078597083382, 0.13053758713254626, 0.17637499991337713, 0.14142471678821655, 0.15802331833295724, 0.14833973182281224, 0.1168008193733383, 0.08468794374932387, 0.11444347889508522, 0.13275235904880156, 0.10250268009720054, 0.1125232333418631, 0.14412110904250897, 0.09860991693814325, 0.11202043554994057, 0.96041354384927, 0.9630012983478803, 0.9593487918979147, 0.9573065266131513, 0.9485262743080806, 0.9499873912758152, 0.9606678858988722, 0.9420798848389633, 0.9563028438457627, 0.6418245680490156, 0.6548524682112913, 0.5840985074915153, 0.6450474438225122, 0.6268738382337886, 0.6481151190593337, 0.6036816995894116, 0.5769060333622402, 0.635870710764897, 0.6417735189102827, 0.22890354492963338, 0.17155888124254615, 0.9107863526301446, 0.27728475015877496, 0.2761673595811245, 0.39029291019387, 0.13086244550708648, 0.23849443391792136, 0.12811894648417022, 0.12217814954945205, 0.22877500511874294, 0.2607832994501258, 0.1330713646396, 0.2877435546124678, 0.19940129497580905, 0.21445366935521937, 0.2010377996798156, 0.19185334395502918, 0.22544581743311687, 0.22034748567527063, 0.21445918873516878, 0.21955895509098755, 0.20606743919118065, 0.22974314536622198, 0.22644124057244774, 0.2252122603129123, 0.06690351962607433, 9.999999999998899e-05, 0.12356187022721299, 0.0424492493464832, 9.999999999998899e-05, 9.999999999998899e-05, 0.049572416179280654, 0.0015923078243791355, 0.005489004239260464, 0.2250795991703618, 0.06717750012717005, 0.1114291380318686, 0.09630486163925467, 0.041852527774805415, 0.02302748383062203, 0.12685683512227974, 0.10391235870771998, 0.05437640731959714, 0.19514265630772776, 0.10633308165546274, 0.12862500904623952, 0.12457547007223979, 0.16657569295754548, 0.07334458346972972, 0.387337938200899, 0.21729698171929623, 0.0735576345617619, 0.20501092300205848, 0.09631413548099665, 0.2039681141375077, 0.04366933147271812, 0.12085990240197009, 0.08934339002629532, 0.18771748664779786, 0.10438872193091864, 0.0827014762048508, 0.5531846765779498, 0.5391423978316214, 0.5677832422412508, 0.5840052801311375, 0.5788798089383251, 0.5315252261707641, 0.5710873922708496, 0.6265308254683423, 0.5680205231863094, 0.11329936837914933, 0.11530160742678397, 0.09117374364995268, 0.09727375803099891, 0.08127087862784099, 0.08924872389186878, 0.12073259319702445, 0.17341090785858038, 0.12610630786352017, 0.34656716153680134, 0.1736300293738372, 0.45340945952427214, 0.31732568926757154, 0.34818563696170757, 0.47386328335222905, 0.1842711329932174, 0.1799778969866056, 0.3238757289396883, 0.3904851025060464, 0.3349823996354435, 0.3981637696101138, 0.2499228622566626, 0.41670194877452715, 0.2812760306198293, 0.29992709977476906, 0.3945020157575855, 0.27457454536332815, 0.16221007892716355, 0.34688126781283424, 0.25144508621899264, 0.2837820747186236, 0.24377260320984773, 0.25248587297346914, 0.24141142732880583, 0.26329997555552365, 0.19445743343571753, 0.22587209865863667, 0.22090460516044164, 0.1946350775711534, 0.2697176743335842, 0.22951383388562185, 0.2675229900307201, 0.21864903229631738, 0.2300401225719858, 0.2227397792169301, 0.20847694182329102, 0.1998067121947532, 0.1860638868874549, 0.24998813027852862, 0.18344433896553491, 0.17767806586079715, 0.19086001854149404, 0.2233819419436689, 0.2507415921039967, 0.9216385723739989, 0.1876458381287266, 0.17739800605880895, 0.9188879313439626, 0.2011700645337834, 0.20042696726700937, 0.14266594175998415, 0.9284966136204751, 0.9064576781382656, 0.8508659207236602, 0.21395802079025805, 0.7781613537146164, 0.7470198275510687, 0.16938684141445592, 0.15590431529960191, 0.10526848827062296, 0.10493485427818217, 0.8221904937051873, 0.18069426662493027, 0.1913375914260952, 0.19305240041192318, 0.21966214555348818, 0.19194155565972892, 0.20328417690047262, 0.1869655308931436, 0.2314446860888537, 0.20175059020436215, 0.08048351873119464, 0.07726786350002879, 0.07003855761974387, 0.09975974358108886, 0.10358348729143285, 0.10148394099368219, 0.12024061765641514, 0.10271672126925546, 0.09059096737347738]}, "mutation_prompt": null}
{"id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 91, "fitness": 0.3405044189378974, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "4d9e2e28-e5f8-41b9-a8f5-0c3b0d8dd60d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "96ac331a-99b9-428d-8eee-6022a317d9c0", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "303d79a5-f12f-403c-8eb1-834be9854736", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "6941a8ea-2237-4557-995c-43c854f9c918", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "a0e71d99-6b54-468c-9a23-a5ed9267d00b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "f1669727-5980-4f9b-9854-4a6494f435f5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "3665cc4a-6b28-4076-adc4-dc9b4ce44b40", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "a2e1603d-da05-467f-97c5-a2ea36348e4c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
{"id": "b4413601-42a1-4a02-9424-7331aef94e1b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.inertia_weight = 0.729\n        self.cognitive_const = 1.49445\n        self.social_const = 1.49445\n        self.particles = np.random.uniform(-5, 5, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        self.personal_best_positions = np.copy(self.particles)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = np.copy(self.particles[0])\n        self.global_best_score = np.inf\n        self.evaluations = 0\n        self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n        self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            scores = np.array([func(p) for p in self.particles])\n            self.evaluations += self.population_size\n\n            update_mask = scores < self.personal_best_scores\n            self.personal_best_scores[update_mask] = scores[update_mask]\n            self.personal_best_positions[update_mask] = self.particles[update_mask]\n            \n            min_score_index = np.argmin(scores)\n            if scores[min_score_index] < self.global_best_score:\n                self.global_best_score = scores[min_score_index]\n                self.global_best_position = self.particles[min_score_index].copy()\n\n            self.random_matrix1 = np.random.rand(self.population_size, self.dim)\n            self.random_matrix2 = np.random.rand(self.population_size, self.dim)\n\n            cognitive_component = self.cognitive_const * self.random_matrix1 * (self.personal_best_positions - self.particles)\n            social_component = self.social_const * self.random_matrix2 * (self.global_best_position - self.particles)\n\n            self.velocities *= self.inertia_weight\n            self.velocities += cognitive_component + social_component\n            np.clip(self.velocities, -1, 1, out=self.velocities)\n            self.particles += self.velocities\n            np.clip(self.particles, -5, 5, out=self.particles)\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptivePSO", "description": "Adaptive Particle Swarm Optimization with improved parameter tuning and efficient computation for enhanced performance.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6ccd7c0-c9c7-4eb6-8d82-3b5a82440d5d", "metadata": {"aucs": [0.8551139278584127, 0.8679209403108481, 0.8576314081485514, 0.8424721060069691, 0.8594143892033863, 0.8451749770956645, 0.8474049656217588, 0.8603272114488629, 0.842803795272533, 0.5737015984072813, 0.6441510882561488, 0.6371312741895683, 0.6156223255982701, 0.6288806453454024, 0.6388494661461452, 0.6416030522925329, 0.6077319468015201, 0.6154028161132649, 0.6506385700443775, 0.18381590000073855, 0.5775111916515488, 0.1469090408516489, 0.13955303818065223, 0.6613957702329983, 0.16357889662856173, 0.1731684442148539, 0.1410218229173701, 0.11405862779026266, 0.1311253836891898, 0.1337650009372865, 0.13593678168094991, 0.09672494235769047, 0.1245936971785171, 0.10615962753960817, 0.11538113631853975, 0.17320416510816283, 0.96010557183488, 0.9635602215981783, 0.9557377125374535, 0.9677614556491012, 0.9433941046791354, 0.947144166678674, 0.9506684111952455, 0.9311460302420312, 0.9575147882301388, 0.6178258354183972, 0.6590618056495682, 0.654987688043924, 0.6656996764185557, 0.15322358399624814, 0.6030918061025103, 0.6195527707599333, 0.5992922362148538, 0.6574415080505729, 0.8908417177754094, 0.8673386530662626, 0.22847127256777988, 0.28037633281574403, 0.21955894906397289, 0.21854432178513616, 0.23642723417687517, 0.22131737845533583, 0.7687875986518662, 0.3786360252585912, 0.20172436474065392, 0.19626938038457986, 0.13464412900503453, 0.21510286215208285, 0.5209202046132407, 0.20540360337011976, 0.21141802502713214, 0.22172568712109286, 0.1338543579081064, 0.2206608133850394, 0.2149155948829522, 0.2107264075540246, 0.1337488708883009, 0.21063948511978348, 0.24110528038275592, 0.24023507548407086, 0.2026743508161305, 0.0017123119590390923, 0.013622795386484032, 0.13172181668847438, 0.050989570851027954, 0.011862660363511024, 9.999999999998899e-05, 0.0626345141701411, 9.999999999998899e-05, 0.005024251365805643, 0.12364272100243323, 0.06362709823576207, 0.10893071224063644, 0.06815226759833026, 0.011389374482571157, 0.04083662934518073, 0.07761951635670106, 0.14239919415140734, 0.07051005396794441, 0.12823337007011393, 0.12697116316388524, 0.15800181513828915, 0.13127779068187007, 0.13552289530535222, 0.13490477708650228, 0.09373081880334577, 0.14561358020667392, 0.09146624368423928, 0.27454637530007997, 0.12221053965963768, 0.14694878067903372, 0.11937219709557845, 0.2936191540337073, 0.10600139838050437, 0.2557448258907282, 0.1740438511243283, 0.08309341251332392, 0.5156743738684049, 0.5313193216249168, 0.522445415815727, 0.5611168974152256, 0.5639161119540158, 0.5803976285858947, 0.5751464629096277, 0.555940924725927, 0.549275161599377, 0.1407359487043106, 0.15379644830013772, 0.07619911730835283, 0.17359859668717403, 0.079208085051795, 0.11724211579261412, 0.14345137031624366, 0.14369360099890272, 0.08031443310127784, 0.2549993059705846, 0.3186875220658848, 0.39111560164209525, 0.27011739248701816, 0.34096637951280706, 0.2556078254716936, 0.2083137843736924, 0.1759612548871542, 0.4440426403092038, 0.3375973100877607, 0.4636912127707674, 0.44399488510791596, 0.2956737875427, 0.27510362360686325, 0.43442813498346355, 0.27425826012537113, 0.5714596144428776, 0.26559212473672655, 0.23667072555467217, 0.1326843663639531, 0.23957047623490968, 0.2945537449892165, 0.2526478902824004, 0.2896726517420928, 0.21028813950019343, 0.2946324491659724, 0.2562468732588745, 0.21567451716616892, 0.22104291631613515, 0.19496417207165284, 0.22131073727499617, 0.21504680866596537, 0.21056500548865176, 0.23794397913814336, 0.2188110897404354, 0.22899368003284604, 0.18444138449307979, 0.6531333386622382, 0.18096553743986954, 0.7406722774391832, 0.22397211044509924, 0.19607154002111604, 0.20072668480641276, 0.18599368835969676, 0.19687253439072927, 0.9046967407718028, 0.1781065199191093, 0.14754864753168928, 0.9208114729446858, 0.1688616504917838, 0.9252322604069899, 0.14284193060591566, 0.8821656387223197, 0.907405089066105, 0.6896673935729802, 0.21287823649745619, 0.902861119166178, 0.2106614607407652, 0.16901546661002953, 0.15598283661597157, 0.7460252839634822, 0.10482267191881511, 0.7046703948461235, 0.20119914551033424, 0.1966630101432345, 0.19317771871175615, 0.19204309091098382, 0.18695023451965243, 0.20724051452453618, 0.19759826861246854, 0.1819756159437792, 0.1959248250926633, 0.1429372114676173, 0.13882633146832946, 0.08415228136067432, 0.09533435631992526, 0.08982948357094955, 0.07850969319977852, 0.11510753615493108, 0.08416636896741625, 0.08447619761120462]}, "mutation_prompt": null}
