{"id": "9d8dca63-b5cc-4a49-8dbc-673ba6f85bbb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50  # Population size\n        self.c1 = 2.05  # Cognitive factor\n        self.c2 = 2.05  # Social factor\n        self.w = 0.7    # Inertia weight\n        self.f = 0.5    # DE mutation factor\n        self.cr = 0.9   # DE crossover rate\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            for i in range(self.pop_size):\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = pop[i]\n                    pbest_fitness[i] = fitness[i]\n                    if pbest_fitness[i] < gbest_fitness:\n                        gbest = pbest[i]\n                        gbest_fitness = pbest_fitness[i]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return gbest", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm leveraging swarm intelligence and mutation crossover for efficient exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2727433712960299, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "fe65c952-242a-49bf-9035-19fa312797ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50  # Population size\n        self.c1 = 2.05  # Cognitive factor\n        self.c2 = 2.05  # Social factor\n        self.w = 0.7    # Inertia weight\n        self.f = 0.5    # DE mutation factor\n        self.cr = 0.9   # DE crossover rate\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            for i in range(self.pop_size):\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = pop[i]\n                    pbest_fitness[i] = fitness[i]\n                    if pbest_fitness[i] < gbest_fitness:\n                        gbest = pbest[i]\n                        gbest_fitness = pbest_fitness[i]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return gbest", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm leveraging swarm intelligence and mutation crossover for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d8dca63-b5cc-4a49-8dbc-673ba6f85bbb", "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "3ceb423b-865c-44b0-ad1c-4e11c4382993", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50  # Population size\n        self.c1 = 2.05  # Cognitive factor\n        self.c2 = 2.05  # Social factor\n        self.w = 0.7    # Inertia weight\n        self.f = 0.5    # DE mutation factor\n        self.cr = 0.9   # DE crossover rate\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            for i in range(self.pop_size):\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = pop[i]\n                    pbest_fitness[i] = fitness[i]\n                    if pbest_fitness[i] < gbest_fitness:\n                        gbest = pbest[i]\n                        gbest_fitness = pbest_fitness[i]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return gbest", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm leveraging swarm intelligence and mutation crossover for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d8dca63-b5cc-4a49-8dbc-673ba6f85bbb", "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "e36e23a6-0194-4795-a5c3-33b4bbadc044", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50  # Population size\n        self.c1 = 2.05  # Cognitive factor\n        self.c2 = 2.05  # Social factor\n        self.w = 0.7    # Inertia weight\n        self.f = 0.5    # DE mutation factor\n        self.cr = 0.9   # DE crossover rate\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = pop + velocities\n            pop = np.clip(pop, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            for i in range(self.pop_size):\n                if fitness[i] < pbest_fitness[i]:\n                    pbest[i] = pop[i]\n                    pbest_fitness[i] = fitness[i]\n                    if pbest_fitness[i] < gbest_fitness:\n                        gbest = pbest[i]\n                        gbest_fitness = pbest_fitness[i]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n                \n                if evaluations >= self.budget:\n                    break\n        \n        return gbest", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm leveraging swarm intelligence and mutation crossover for efficient exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9d8dca63-b5cc-4a49-8dbc-673ba6f85bbb", "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "7ded6da1-4296-4e0c-9045-410732dbe994", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 4, "fitness": 0.33435176960099333, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "9d8dca63-b5cc-4a49-8dbc-673ba6f85bbb", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3d00d53c-98b4-4149-8e7d-c4cfd5903a8a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "171fb28f-b350-452b-840f-922c85d798e8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "cbe99185-ad07-40cd-b30e-4d81737bec72", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "0470884c-5006-4a24-96cf-178e53dae60b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "00445803-d070-4947-a768-292fd194f4bb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "de4f5621-308f-40ee-bdc0-c9223368eebb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "112b1979-df4a-4496-bf75-1548120d3d77", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "25a72724-e7ed-46df-9d9e-1d235c451658", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "5b066479-510e-4094-9626-cf4bd9306e36", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "9f14e12c-ff5d-4875-90ee-a658863ed4e0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "2b410876-9d71-43b4-8bcd-8d91b9a2b093", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "071e74c3-c0d4-4db9-9804-4cfc7180ee2b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "e1ff7c7b-745a-4aa0-a3c4-b2ed589fd886", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3d143786-96d2-4d62-8352-9b2e125de310", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.zeros((self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            np.clip(velocities, -1, 1, out=velocities)\n            pop += velocities\n            np.clip(pop, self.lb, self.ub, out=pop)\n            \n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.copy(pop[i])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial[crossover] = mutant[crossover]\n\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with optimized memory usage and computation by restructuring velocity updates and mitigating unnecessary recalculations.", "configspace": "", "generation": 18, "fitness": 0.3252891010775721, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.23.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.6582367035568514, 0.6656312260812823, 0.643566706809894, 0.6435332642022669, 0.6405455432892577, 0.6531056466652416, 0.6569367659108944, 0.632938917321707, 0.6483079105310371, 0.3217529314188242, 0.3347320448995922, 0.3243430017334419, 0.30856257391990927, 0.3077285984039363, 0.3551127341014577, 0.31222772002847665, 0.29164943188483505, 0.31751774553045875, 0.14418885429023287, 0.11746942506905667, 0.14055102583812817, 0.11544823995575171, 0.1051904824567208, 0.1343987938098844, 0.13121937244242832, 0.13152156641125312, 0.11285502984230966, 0.10024746832745657, 0.11009898785658256, 0.0971504085500996, 0.11016495916624303, 0.11022909387412583, 0.11006655205118354, 0.11255494372188224, 0.09627076856752248, 0.10775112991646674, 0.9374228179638855, 0.9082158826613662, 0.9210918448868184, 0.9204890231849086, 0.8973598977458164, 0.9230201525429197, 0.9024954039374695, 0.8932006445354722, 0.9107959494635216, 0.3697057876611758, 0.349339524464944, 0.33760578489407156, 0.34506851324392296, 0.3555350605304588, 0.3568741959082623, 0.3653244006573453, 0.3279175414370137, 0.3305517089462594, 0.6130451030399778, 0.7212514231658445, 0.7119496916191819, 0.748646850505075, 0.7037473066795964, 0.7181824282765745, 0.7965558445134505, 0.7358558763200138, 0.6810334576623414, 0.2575203925118029, 0.3595303336541624, 0.1904214261711431, 0.1946641435739993, 0.2210604447659451, 0.21122138289003256, 0.18728242511430004, 0.20521761867926724, 0.21133459896412488, 0.21926988403673864, 0.23494271870799288, 0.20439365983405644, 0.202728627649725, 0.25436703065919086, 0.23937863832750816, 0.2004265897667371, 0.2970083494780975, 0.2295785124519527, 0.2205716945183781, 0.22346125902557312, 0.21738443581119704, 0.1205872865642097, 0.21773172297897814, 0.20316516090767212, 0.2508743243691196, 0.21870682185281864, 0.26208000989473346, 0.3808461758713131, 0.3548467751761477, 0.35382976184479653, 0.34605865320968576, 0.29853858636322894, 0.3031736946451521, 0.31237141520213707, 0.3444203618841897, 0.36510893733438055, 0.08493036150146616, 0.07707529410628378, 0.05420004832743275, 0.12446095961272152, 0.062342931600174456, 0.11087446582910232, 0.10414427672634907, 0.08972811471792885, 0.10618633278054002, 0.20419559769333673, 0.20451470145231676, 0.2139949901060414, 0.20906809298196927, 0.19998194768203403, 0.21111679480909895, 0.2184662396803525, 0.212995246291783, 0.18489822062626737, 0.5564786386731029, 0.5651152854580315, 0.5728758917938659, 0.5444152550876618, 0.5380187162281955, 0.541410451877464, 0.5894135911798438, 0.546921630897123, 0.5516049453878555, 0.1204131184602727, 0.10978041734402721, 0.10211435544829706, 0.12102868054069427, 0.10252068992923524, 0.11086798235676887, 0.09824715066989265, 0.11105870249453076, 0.11459173628389674, 0.1475674814471315, 0.1566617122443884, 0.2841917925151253, 0.3078029582333237, 0.25654377899461556, 0.16406638944466578, 0.175165165747589, 0.20703877402382942, 0.17280542991751158, 0.3338691350807913, 0.3374705803109167, 0.35338664018341415, 0.358005259872759, 0.3304818003056089, 0.3339987488850661, 0.34648980511941807, 0.3369684775986904, 0.3225326435676448, 0.26913716851611924, 0.27034368589424707, 0.27491699482245135, 0.2762154797550692, 0.23440126863365207, 0.27694526440989253, 0.2831700103290523, 0.25705260241928596, 0.2525827124212884, 0.22822249475975198, 0.24489096761972584, 0.26874700633898096, 0.22512321950360814, 0.21565744250572716, 0.21865193183063558, 0.249260616774567, 0.22482367240421774, 0.2228130856221826, 0.20346424160075138, 0.23646236515938213, 0.20175859143440789, 0.22437393555552276, 0.2072085247942851, 0.19705460452660395, 0.22757473477368717, 0.3553475460842369, 0.2168297172088729, 0.1851974097834015, 0.18359683691862638, 0.7465531321337466, 0.19651397995142184, 0.7250150703292104, 0.825424041076083, 0.8012652465565373, 0.1602664777684134, 0.8486443947654128, 0.7999832619974128, 0.21067703996719023, 0.7712798031751943, 0.786616411758239, 0.16691956959409204, 0.15351806190265394, 0.7012287154045022, 0.7738343042981235, 0.767795006956155, 0.19290344891054378, 0.19666386258468183, 0.19895280346780586, 0.18744203037306384, 0.1885790867911208, 0.18231622567324202, 0.21260509226890656, 0.18497289534025885, 0.19416521743846604, 0.09485579212779927, 0.08207569060255104, 0.15480874135413925, 0.08834738884589755, 0.08655201910361576, 0.08843109805925453, 0.09017410054050701, 0.09077781233409477, 0.08517290720168946]}, "mutation_prompt": null}
{"id": "d64cecab-59ff-492d-9013-412c47884c20", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "6dd0c102-1e25-4973-b781-8e6d9bf8c5a4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "c4df2ebc-ca3b-4139-bdd5-26317086e12f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "54233516-cac7-46be-b311-a6c7c0736105", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "2c21c776-46db-4e09-9ae3-29acde3bb449", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "b7fd6cf2-6ab1-4dc7-b5f1-8b4b9a5f353d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "39c82c82-204d-4ee2-89cb-45b83cf29923", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "bc0767dc-08e3-4df6-abd5-2a1829645df8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            # Update velocities and positions (PSO)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - pop) + self.c2 * r2 * (gbest - pop)\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            np.copyto(pbest, pop, where=improved[:, None])\n            np.copyto(pbest_fitness, fitness, where=improved)\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with improved memory usage and computational efficiency by refactoring velocity calculations and condition checks.", "configspace": "", "generation": 26, "fitness": 0.2725348007765619, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5875302072047395, 0.5355084461699532, 0.5367603022072214, 0.5876330205212925, 0.5406220688518134, 0.5569165759014851, 0.5813015003521396, 0.6031154443312976, 0.5612529112191585, 0.23654560589864915, 0.26605246022540263, 0.24389652564290598, 0.23206516674116262, 0.3222636776102584, 0.24625913901868446, 0.2561307405694412, 0.27706015960249986, 0.2221116048428311, 0.08887656545035794, 0.09096275764936912, 0.09301200127815501, 0.10260662477064253, 0.09096117756227484, 0.11792525749213423, 0.08556175844410885, 0.08395088089362546, 0.09067821784862062, 0.10608575644677076, 0.08183163413317507, 0.08306648902544622, 0.08764493527164163, 0.09552110829027682, 0.08811701610607792, 0.09629202946713156, 0.08643190586462679, 0.08380287963757005, 0.9847436823777858, 0.9775558278918466, 0.9859752429055006, 0.9596935427301002, 0.985383966485673, 0.9776514665786393, 0.9859787592300999, 0.9832283830230756, 0.977349261443846, 0.27751093731369325, 0.2683864209943412, 0.24662033969726982, 0.2767657522781166, 0.2863043132035292, 0.2793253875528031, 0.2703486446338208, 0.22568959065891114, 0.27620530879850724, 0.5458343089123245, 0.569491790188273, 0.5260773677803663, 0.6468484460105748, 0.7105091501382739, 0.6999995028288614, 0.5574177273537824, 0.520570907556658, 0.5572718833744951, 0.1513397770990258, 0.11907389238041488, 0.18006326886962976, 0.15104641602436308, 0.15286065531648052, 0.1400373437199922, 0.14064613442639307, 0.15718010781527791, 0.19958207818842777, 0.14766917533489488, 0.16164923872152426, 0.14229439543740685, 0.17163370152238855, 0.1379131375089543, 0.23080137680965462, 0.1688431279502487, 0.09239587120939363, 0.17584275325369725, 0.14922444237473953, 0.20570790540749384, 0.1831205967014723, 0.2217230383677783, 0.1468202982323661, 0.1772094666456665, 0.18405486224563572, 0.19780830858787668, 0.20099981053636007, 0.3156430875476597, 0.1813146442275314, 0.34187230721199136, 0.25457584321261095, 0.22161409671772203, 0.23568207592380264, 0.29373518717239233, 0.33883935233672735, 0.20393733813696147, 0.058318559484138666, 0.03907638318120976, 0.05009254525325191, 0.11245339292219292, 0.07960941038145808, 0.10028394548430919, 0.08464391639489077, 0.0593877220378477, 0.07289201100616738, 0.16800962452026402, 0.1404147868153074, 0.16706017689992547, 0.1787624524813458, 0.17154522386587323, 0.18815259938911222, 0.19786188505782076, 0.18249192761102362, 0.13912927478121195, 0.4549744110263786, 0.48327187907638347, 0.48686019161660254, 0.4772184195250183, 0.5031081081326305, 0.49615742382916017, 0.47545032192355363, 0.4755284780140605, 0.46652567852078775, 0.09308452686549895, 0.09780672362619047, 0.09233127072255976, 0.10735556243950284, 0.08824892473196089, 0.0871321363052604, 0.09351443796390357, 0.08126679924226232, 0.0765295765636913, 0.16884726175472675, 0.22269082097065673, 0.16045213392556634, 0.3321597811387994, 0.17441401549857782, 0.1372055580346736, 0.2117699902344652, 0.13359384187636025, 0.15324364869852636, 0.30407734325468105, 0.2683304004128647, 0.3063723246524507, 0.29273769162928254, 0.28164490059653513, 0.2695463917813591, 0.3145320846094487, 0.32600504646531037, 0.2980619127913481, 0.23903424514581706, 0.22808280067294795, 0.24963564359155388, 0.23689300249410272, 0.22954003113898003, 0.2380471416528952, 0.22933582423676524, 0.23482443617371607, 0.24796003578247305, 0.18750227374986905, 0.16952180218689628, 0.18196565355458583, 0.1875912294313432, 0.1843898219676856, 0.18454984750673487, 0.1776859842854085, 0.1921552684392328, 0.18580651811104099, 0.1796517905231474, 0.1850227648561522, 0.19306638417984978, 0.1745399275350502, 0.18064174829646895, 0.17104289725414457, 0.17720602806531005, 0.17346467574475755, 0.17569380662759793, 0.6526152217068468, 0.16535975481980636, 0.15391518260313364, 0.35422125052286124, 0.6206836909256979, 0.19342854461117176, 0.6774430974312186, 0.5360056061068341, 0.7071282322325065, 0.7098751810653464, 0.20836062919147624, 0.5546903497253837, 0.20601328833641008, 0.48369483482303166, 0.1488868662285251, 0.20699489092357015, 0.20512971924333534, 0.15173195511466542, 0.1742230402569137, 0.18094887060225384, 0.1944873182172111, 0.18121845754450694, 0.18681730924536633, 0.18762633785817617, 0.18999603717155777, 0.1806178650556045, 0.19603897381255087, 0.07186879718445871, 0.06954059158326031, 0.08124962633490429, 0.07129913143190736, 0.0729533262062152, 0.07418385519078874, 0.08554642217478481, 0.08440184947537932, 0.09138584589772958]}, "mutation_prompt": null}
{"id": "8738c04a-cf23-40f1-87b3-86f2001bf708", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "43b78453-0c94-4d01-8716-0ae825b670e2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "9de6f5bd-4567-45df-8cc6-c3739cdcbc74", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "9ec11baa-7c6e-4a1c-8465-a6ab2b4f20e4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "99f34389-4494-45d6-ae03-ed9c9fa4b0b8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "f433e296-9b52-48da-b201-7e0ec51cad2f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "d551cedb-28de-49ed-b3fc-157723706e36", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "683b67c0-ea47-4091-b0c6-6aefec0c13c4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "603c432a-9b25-4b5f-836b-34ba545b61a8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "6986bc8d-5de2-40a1-bd77-6d59d6be8361", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "31cda993-5fa9-4d62-8a16-1bfd095a1b91", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Generate random coefficients once per iteration\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            \n            # Update velocities and positions in vectorized form\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.apply_along_axis(func, 1, pop)\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            np.copyto(pbest, pop, where=improved[:, np.newaxis])\n            np.copyto(pbest_fitness, fitness, where=improved)\n            \n            min_idx = np.argmin(pbest_fitness)\n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step in a batch mode\n            indices = np.array([np.random.choice(self.pop_size, 3, replace=False) for _ in range(self.pop_size)])\n            a, b, c = indices[:, 0], indices[:, 1], indices[:, 2]\n            mutants = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n            \n            cross_points = np.random.rand(self.pop_size, self.dim) < self.cr\n            trials = np.where(cross_points, mutants, pop)\n            trial_fitness = np.apply_along_axis(func, 1, trials)\n            evaluations += self.pop_size\n            \n            # Update based on trial fitness\n            improved_trials = trial_fitness < pbest_fitness\n            np.copyto(pbest, trials, where=improved_trials[:, np.newaxis])\n            np.copyto(pbest_fitness, trial_fitness, where=improved_trials)\n\n            # Update global best\n            trial_min_idx = np.argmin(trial_fitness)\n            if trial_fitness[trial_min_idx] < gbest_fitness:\n                gbest = trials[trial_min_idx]\n                gbest_fitness = trial_fitness[trial_min_idx]\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved runtime efficiency through vectorized operations and reduced redundancy in population updates.", "configspace": "", "generation": 37, "fitness": 0.2559379217838109, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5122843249050986, 0.47138516547179066, 0.4937629485344667, 0.5458041794316775, 0.5310021254625782, 0.5061285656584653, 0.548175770607485, 0.5191836847279823, 0.5145909383141575, 0.21014368664159078, 0.20972390658142537, 0.21826318930573563, 0.19224313280852934, 0.18928312785282564, 0.18691240452028646, 0.19876582134806542, 0.220238413981243, 0.21605969675303893, 0.09746880144889147, 0.10314666251047988, 0.09729039977050546, 0.08861375902338586, 0.08641328746583676, 0.09848326511253436, 0.09212075157911293, 0.0930390973092603, 0.08654113389954421, 0.08359283873114798, 0.07876066017187588, 0.08051159051627543, 0.08320626163356615, 0.09112664116388736, 0.0800634613172968, 0.08034906176980516, 0.08757994396845348, 0.07725059781614241, 0.9848461975303102, 0.9779080072709969, 0.9840259029277963, 0.9769353923748674, 0.9761845051392033, 0.9772742937445641, 0.9776234387456929, 0.9833755656182239, 0.9739565099455441, 0.28254131721659537, 0.27069077308246947, 0.22549736044083535, 0.24204468284172453, 0.23802395449977254, 0.23782070200953753, 0.2616455673844331, 0.2529718824436049, 0.2408975738621456, 0.557615926089684, 0.6349512031038897, 0.5470063801005877, 0.5425030012281308, 0.5811199969020805, 0.4972414852173238, 0.5509864371201028, 0.550181714696558, 0.5525045103310798, 0.16081900189218468, 0.13761284671752672, 0.140133035900201, 0.14020173128106128, 0.1639894136823088, 0.13191447440002957, 0.15196736009367684, 0.14152521731851997, 0.14721152850922403, 0.14642919827787337, 0.1687197493969428, 0.1439940846573725, 0.1641809401710027, 0.15541907450778236, 0.1346644645027425, 0.1597612782874317, 0.14737614235436558, 0.15154955169910556, 0.1629454841416933, 0.17049028519260723, 0.13739856653208915, 0.138820305997994, 0.13124134007438693, 0.10745985315138418, 0.11904620532320265, 0.13517378359872123, 0.13992733631516696, 0.2692702334605116, 0.25713718366788785, 0.24699988909809822, 0.2506034348368231, 0.22725556741158148, 0.1509654090873579, 0.24383278415498588, 0.2765960119190246, 0.2934380785374393, 0.03546654767988111, 0.03480524052421874, 0.03601589920315995, 0.02022552906436126, 0.03483093177834684, 0.046820613242118836, 0.0489531016999315, 0.034129408161837294, 0.04643824985397327, 0.14295496134328756, 0.14263488239504496, 0.14546768438483815, 0.1409649103571885, 0.150876681920609, 0.16549963430385883, 0.1532986569408451, 0.16346388548196522, 0.16543045081655905, 0.4425509177455357, 0.46351150126416707, 0.46171191062048667, 0.44841752791362144, 0.44932617276118747, 0.4444016217011345, 0.46259916986194294, 0.44458264346222753, 0.4450455639526284, 0.08889366445861446, 0.09225300945834569, 0.08047071928541283, 0.09245142537524875, 0.08656714257436104, 0.09195252875398396, 0.08627179550246744, 0.0994991289332654, 0.093355484519839, 0.1496500984287713, 0.18847904141991856, 0.15506674502705553, 0.13447751983907996, 0.1731450706179819, 0.16202795914269408, 0.19062807735380172, 0.19832862444076726, 0.32664239313944166, 0.2837229436556289, 0.26210685673999257, 0.2711334238311447, 0.28494063539168857, 0.2705113099252441, 0.2545134869902528, 0.2948968101138203, 0.290845784348329, 0.28703948345446206, 0.2401269616517725, 0.23309395836193236, 0.2198159744555248, 0.22074254706608476, 0.20744486358684466, 0.22104299248581993, 0.2072520247900772, 0.2438389035955174, 0.22654422607457703, 0.19078507840279613, 0.17329462593895473, 0.21666354108236774, 0.18737342946868107, 0.198071549927624, 0.20462256906790754, 0.1816283858008575, 0.19213103898074668, 0.21439903787595738, 0.19833784904884255, 0.17197417116719482, 0.17770983249769923, 0.17495020605059142, 0.17998494383892594, 0.17582234075698688, 0.17769380835499193, 0.18476720889635367, 0.17341090174488272, 0.7027347167050909, 0.1656260127665049, 0.15358442138663286, 0.5428842642907856, 0.5857710189016698, 0.188131953750732, 0.13946781060719182, 0.5124782504175708, 0.3562622037927021, 0.7046647519122742, 0.2047531201736158, 0.16052270799640267, 0.3610733699104728, 0.3014339396539967, 0.4976923386151251, 0.20646327506425677, 0.20612651906557145, 0.4979265967033716, 0.18032937146218342, 0.17571791040365592, 0.20308362193877816, 0.18595805390879228, 0.18261743852680223, 0.18208231796817798, 0.18454522338699475, 0.18655574085933602, 0.18886799286579592, 0.07278052121174583, 0.07303392154023391, 0.07750464547800562, 0.07962757501624673, 0.07775311237724158, 0.06750613992339438, 0.06906627826756773, 0.07914154526657602, 0.08104956492806992]}, "mutation_prompt": null}
{"id": "940d6a1f-1ef2-40fd-82ee-187351dec3d3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "19591f37-eea0-4a9c-bd2b-83a634eb810b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "1a6c12af-f9b9-4973-9573-9d8b69aad5de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "4b723e2e-90c5-41bb-976c-d5439d25b2a6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n\n            # Update velocities and positions (PSO)\n            velocities *= self.w\n            velocities += self.c1 * r1 * (pbest - pop) + self.c2 * r2 * (gbest - pop)\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            np.copyto(pbest[improved], pop[improved])\n            np.copyto(pbest_fitness[improved], fitness[improved])\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            if evaluations < self.budget:\n                for i in range(self.pop_size):\n                    if evaluations >= self.budget:\n                        break\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                    while i in indices:\n                        indices = np.random.choice(self.pop_size, 3, replace=False)\n                    a, b, c = indices\n                    mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                    trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                    \n                    trial_fitness = func(trial)\n                    evaluations += 1\n                    \n                    if trial_fitness < pbest_fitness[i]:\n                        pbest[i] = trial\n                        pbest_fitness[i] = trial_fitness\n                        if trial_fitness < gbest_fitness:\n                            gbest = trial\n                            gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with enhanced runtime efficiency by removing redundant operations, restructuring loops, and optimizing random number generation.", "configspace": "", "generation": 41, "fitness": 0.2510380061431281, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.45813988855914467, 0.5386348737554827, 0.5106208554679208, 0.553828957598592, 0.5077445257456995, 0.5435132271752585, 0.49808766854303665, 0.5173648168370234, 0.5335180637476492, 0.22318421071826455, 0.2598898511325096, 0.2210131790819121, 0.22325511606720783, 0.2189102264744196, 0.2356368205356838, 0.25255595019485966, 0.2569576609591585, 0.2750043810520352, 0.10192424210630346, 0.08410957829244614, 0.08877970472259544, 0.08755317576032517, 0.09976139915460047, 0.08982881256899522, 0.08679820442976449, 0.08126152240484064, 0.08267641697008787, 0.06865142285820891, 0.08766794879459816, 0.07087446114941032, 0.08089092376612439, 0.09097649654328799, 0.08714454267560412, 0.08038255045810716, 0.09974667734181608, 0.07672278784092612, 0.9316903785053618, 0.9597986335211103, 0.9819511176118569, 0.9637870467920605, 0.9821831704481162, 0.9455748209993756, 0.9614398368665839, 0.9685088350946266, 0.9661237912088769, 0.22966304767484214, 0.2432291122045458, 0.23477362324535633, 0.25249950331921667, 0.25602606671338424, 0.23449210689392408, 0.22069692202560443, 0.24026785604010137, 0.2042372244677878, 0.552329663463379, 0.5569162394391237, 0.6278008935520683, 0.5626773945971604, 0.5957832037167929, 0.5846612480242369, 0.6179971024089235, 0.5750981167946995, 0.5817078971323268, 0.11254516527736702, 0.14175019159048374, 0.16088912441923253, 0.1535737139370369, 0.12891486543297614, 0.18672935467353013, 0.15461081820503664, 0.13478555196403175, 0.16953548466439028, 0.215113512869606, 0.17773468484546973, 0.1703911335909144, 0.1402820380705596, 0.1574466298245195, 0.12771585317339773, 0.15183779888203985, 0.12738361752785454, 0.11497706460014123, 0.16387947017468418, 0.1369538860307814, 0.17612308309243685, 0.1876036322820046, 0.1393837755765408, 0.1492298618193174, 0.18105073193791754, 0.16174431884117402, 0.18239397661717005, 0.34622620360401857, 0.251394058173806, 0.3109442393058003, 0.2853019999536459, 0.2476593206859785, 0.2731900355406738, 0.31422880225130434, 0.27472800777858486, 0.2907326846567817, 0.03795058004778562, 0.03717042282029037, 0.055735962317029375, 0.07635468236678311, 0.06825458617862823, 0.08846335019328877, 0.0688358939270125, 0.05366868751104015, 0.02555756476137272, 0.15839329660342083, 0.15417288832400022, 0.16696498554413552, 0.1440474571496725, 0.15578734261805172, 0.16232361762295167, 0.15484057431118858, 0.15254626036098273, 0.1524560509107118, 0.4861720733339032, 0.4588248250188336, 0.481788482171139, 0.45233957012394643, 0.4780783464105749, 0.4762203538919467, 0.456038564513471, 0.4633467866378863, 0.45612579593369795, 0.09170116591371458, 0.0987256257601764, 0.08286914478891017, 0.08103989768769915, 0.0896157399734464, 0.10206680533477142, 0.09333614106519128, 0.09889722059231265, 0.0812631961189163, 0.17461361392968955, 0.15573966114549698, 0.16019625137931925, 0.14036623193003683, 0.1668346179564647, 0.12920722977901022, 0.13845992355900416, 0.13586184698038473, 0.16398885943786445, 0.26618812052258234, 0.2807381437338309, 0.28131980412856805, 0.29217426172307337, 0.2584652897604939, 0.27529461427240676, 0.28182397002039217, 0.30703000465375707, 0.3077594699805434, 0.22767029543476835, 0.2154242790087737, 0.21954262165385907, 0.22080726222741243, 0.20190076922824396, 0.23145199143105333, 0.1938661474785065, 0.2278203743218884, 0.23416560686028043, 0.19472551244700043, 0.17739608958520026, 0.18646212876418666, 0.20409437843473566, 0.183744501437745, 0.19915254542102434, 0.20404549094464364, 0.18627642807340794, 0.17967500098092748, 0.17014453333220714, 0.17322124459349109, 0.1739080681682572, 0.17818412182263144, 0.17742654960704385, 0.1713605537172852, 0.176026588687068, 0.1690604318081117, 0.17596263102001664, 0.1895339725697276, 0.14504041941746926, 0.5269249445059727, 0.3839357772049813, 0.20727194108408786, 0.23376901239232506, 0.25431769250452885, 0.2579516424503626, 0.2347484442924409, 0.37165656901727073, 0.16260207823368977, 0.3383480629364626, 0.28408470707419153, 0.16517697160346267, 0.16291316999739702, 0.2030627961930208, 0.20699551614792844, 0.20512371705471355, 0.18371618662258582, 0.17508615826596963, 0.17977407518901345, 0.17905105661231335, 0.18733765159536775, 0.18742798918628822, 0.20048032017809714, 0.19280628608889838, 0.20184949901468985, 0.08260710745968336, 0.06945629211970095, 0.0768868017358314, 0.07578270066767023, 0.08428047455854082, 0.07370236018597676, 0.07906287564211012, 0.07213841657098241, 0.0732429542037949]}, "mutation_prompt": null}
{"id": "afb7a365-0ec6-4350-8d7b-0fcf35a2cfc4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "0059a46f-a054-4081-a771-e122c845f970", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "778c6a1d-ca8f-4406-bd70-ad597454fda4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "7d102152-5d66-462e-972c-7f0630dd1bc3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        evaluations = self.pop_size\n        rng = np.random.default_rng()\n\n        while evaluations < self.budget:\n            r1 = rng.random((self.pop_size, self.dim))\n            r2 = rng.random((self.pop_size, self.dim))\n            \n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.apply_along_axis(func, 1, pop)\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n\n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = rng.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = rng.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(rng.random(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved random number generation and vectorized computations to boost efficiency.", "configspace": "", "generation": 45, "fitness": 0.26967055973659193, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5809468941925794, 0.5529075607899955, 0.5723311431115545, 0.5504339796884108, 0.5898977957706835, 0.5912962840080738, 0.58591569679405, 0.5764421737926164, 0.5585819673976449, 0.2533848945197841, 0.2544936158215496, 0.25207357085703497, 0.2666726131449406, 0.24329386989232193, 0.2329706114789245, 0.2379591447854913, 0.2508254527876912, 0.302605461245799, 0.10839964590123996, 0.0890139762284895, 0.09710261355842542, 0.08880973203171494, 0.0863272194743806, 0.08100524560157851, 0.08785257051108453, 0.08789107644887717, 0.09171767834150779, 0.08021958278429175, 0.09796837959196669, 0.10808116904838438, 0.0883936692195273, 0.08780390214484668, 0.09430125348784735, 0.0901568294356031, 0.0723246339335969, 0.10734637897445864, 0.9833786554402869, 0.9840412983997077, 0.985065432290975, 0.9766646874855209, 0.9748099250609942, 0.977112610113932, 0.9833714476006612, 0.9830302241408712, 0.985276433060096, 0.24701842471364388, 0.2525791583879039, 0.247035374640301, 0.2593493355854105, 0.2592103898248117, 0.2893723290078135, 0.28521297208798124, 0.24767052888759777, 0.2810587101277491, 0.5977149577426714, 0.6244791010860475, 0.5571300775212766, 0.6374842050842985, 0.6093505058766093, 0.5472917862461142, 0.6123986242361841, 0.5682482869420882, 0.5135729515944867, 0.14622612471367025, 0.14736498976700352, 0.18977788958994646, 0.21967382403174274, 0.15351597095014913, 0.14903634495218543, 0.14012440209468002, 0.15515871824139593, 0.18388297765706063, 0.15769460881600283, 0.16063624075058647, 0.1395209960326299, 0.15269291357958714, 0.15921581588209777, 0.15573648282992714, 0.17723108802925058, 0.1269789405490912, 0.15434932644636068, 0.21463497521802133, 0.15240635520002765, 0.1627596065749951, 0.11289644266126198, 0.2171381867445521, 0.04229097720496755, 0.18035490392274256, 0.13773153552135298, 0.16789215420745718, 0.27813787774821064, 0.25676168444368885, 0.30239056675035647, 0.36780481695379075, 0.3205077882213403, 0.2418149089775996, 0.3095722931389058, 0.3365277228238246, 0.3115744609142779, 0.05535650454284913, 0.06991189134362175, 0.039540404500863935, 0.05508716284940551, 0.05955110161641808, 0.07342850738683004, 0.07012079315836273, 0.0392298576482375, 0.04685410563608294, 0.17983042760134738, 0.17046097504379687, 0.16596934580638134, 0.042999511589288386, 0.1874435066861463, 0.1925834169584023, 0.1852679422455128, 0.16149772883309854, 0.17321851083707807, 0.4656132752450496, 0.4765329667656176, 0.4842760910822155, 0.49593905716162767, 0.49539870693541854, 0.4760767736326227, 0.5021502969286405, 0.4563098942078134, 0.49326082528682735, 0.07390698952625085, 0.08981972707904129, 0.08846498388152124, 0.096290643365601, 0.08647668528569719, 0.10108461252363943, 0.10743728689190934, 0.11422098934171176, 0.0954920496627526, 0.20342737089099072, 0.19286571906193006, 0.15601897138256404, 0.14215401875188804, 0.23980472530901786, 0.1438032555067068, 0.14293383561290962, 0.16638667428741905, 0.19367850970514, 0.2878691613209339, 0.299554468367086, 0.30757104313871997, 0.2829861641545679, 0.2779672775272135, 0.2924660324511148, 0.2957288693655228, 0.30417568838361153, 0.2960471248087131, 0.2323524422374592, 0.22339107921993895, 0.2361960087043653, 0.24326275885384918, 0.21815335826675408, 0.20545054204845403, 0.23550365853519273, 0.2597793477336914, 0.23762445704111246, 0.19607776391956733, 0.19883269366082135, 0.1965496468497805, 0.19996945786168963, 0.19825395749050556, 0.20073394051495497, 0.19704277401458137, 0.18673717126259137, 0.2130900327480516, 0.18668391029413756, 0.18667545659013407, 0.180594358375202, 0.1852023325131431, 0.18374616789666343, 0.17886118815500196, 0.17841337182157913, 0.23050340418410198, 0.17962026682471566, 0.7343369527548802, 0.17886298266944756, 0.14152632414533584, 0.8034772153355996, 0.196294228151779, 0.18612684268586555, 0.14053788314560478, 0.16308297432008367, 0.7026443471399906, 0.7187939759186603, 0.21040380935049807, 0.16011826786479155, 0.2675473590686479, 0.4179196919696896, 0.47030910667683046, 0.20969426167945016, 0.4553001857543655, 0.2113147796522168, 0.20034728080891206, 0.18214350047647987, 0.1788047509476557, 0.17878689530534353, 0.1825721743663058, 0.18678457150329086, 0.19999886669748412, 0.1798436575336736, 0.18082943777333527, 0.07737951524817599, 0.07964915159911945, 0.07456949515255107, 0.08246204194537621, 0.07036917414929977, 0.07780707452613189, 0.07320405043492939, 0.08471673798877033, 0.07974569950777133]}, "mutation_prompt": null}
{"id": "86da0ea0-4d2d-45de-8b7c-74b10fe4973c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "6904f808-66be-47f6-938b-24c3d7d551e4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n    \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r = np.random.rand(self.pop_size, self.dim, 2)\n            r1, r2 = r[:, :, 0], r[:, :, 1]\n\n            # Update velocities and positions (PSO)\n            velocities = self.w * velocities + self.c1 * r1 * (pbest - pop) + self.c2 * r2 * (gbest - pop)\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved looping and vectorized operations for increased efficiency and reduced computational overhead.", "configspace": "", "generation": 47, "fitness": 0.2721913850583133, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5292896277612082, 0.5044274604522032, 0.5488174019029415, 0.5803058584311729, 0.5934991502319196, 0.5641473913393715, 0.5788183800076441, 0.5569772997865134, 0.5617673852789193, 0.25163758170251704, 0.2891342498242008, 0.2669301580163387, 0.2552751406566519, 0.24338687543798787, 0.25915041336314526, 0.22662472760282426, 0.2669385472158088, 0.2609352385233864, 0.08077281860733931, 0.113829063427075, 0.09073762359789739, 0.10343278577631554, 0.09379405278833297, 0.09396166327426292, 0.11054435835622967, 0.09218917904714619, 0.112276952655055, 0.09689934105677644, 0.08771722306578833, 0.08750358116988266, 0.08123548144670711, 0.08024664400245396, 0.0806848052318404, 0.07869733438145055, 0.07979837048634342, 0.07570229347186364, 0.9831221662364885, 0.9758259590168413, 0.9841301398140839, 0.9833634559936942, 0.9782893614760632, 0.9757387021315853, 0.9759058312373232, 0.979545332555425, 0.9849953920687206, 0.27466008617489657, 0.24927347134737265, 0.247021808841682, 0.26487192470202403, 0.24749450284098162, 0.27283678811197165, 0.26625634761099537, 0.272346133340842, 0.2901937448997669, 0.5782514580017504, 0.5697557776394577, 0.5150745699552499, 0.6028791460120633, 0.6246856403922676, 0.6019373622524629, 0.5846852608322838, 0.542875044349771, 0.5408626197238906, 0.14883309609833117, 0.13942315028802132, 0.15081052329198918, 0.13517929447879018, 0.16255062007924737, 0.1462086033303862, 0.13713187636734347, 0.17303854971788735, 0.21803214447560726, 0.16778447806229635, 0.2309782803686672, 0.0094213184433114, 0.16933081849691278, 0.15041705241044367, 0.21470396558406568, 0.15804536649158707, 0.11307684753290037, 0.1754792738756461, 0.13774535521455944, 0.18797105686239035, 0.18691132932814503, 0.20510378469367285, 0.15856760286295613, 0.2068188726545549, 0.15871078686628548, 0.19388252346720136, 0.2157402047073329, 0.2970228696951345, 0.26905446863781834, 0.34395288048775474, 0.27595205964083813, 0.26270591537214016, 0.2979171224733729, 0.24826604245638384, 0.30371092157456026, 0.3352071129249471, 0.04217114300960367, 0.07407202693904669, 0.09047352334089898, 0.09145264933896557, 0.06718723879605293, 0.06144063418433854, 0.10785200790019411, 0.043494497164273005, 0.05190959267446904, 0.16086295849356047, 0.15757377692579777, 0.16658860501760386, 0.1779085151318306, 0.15342969811565577, 0.16246599494690928, 0.15798433817093904, 0.17708224243518178, 0.15790417341106255, 0.4572772513229626, 0.4887594355182573, 0.48949903827635144, 0.4951652413850547, 0.46046971705631523, 0.5093970075715524, 0.48957389966234977, 0.4795545191226004, 0.4760726206727649, 0.10261789061444893, 0.08086244247786856, 0.09896560473475513, 0.09144610049053026, 0.09318071645931647, 0.10644198563145568, 0.08567111304919928, 0.11089107324257108, 0.08362568492876166, 0.18652436338567768, 0.1982917866968288, 0.14423253926567303, 0.15300038628985024, 0.20222675453420091, 0.16253575875186121, 0.18530645974323756, 0.1325522257733701, 0.2305178279233855, 0.31115084407870386, 0.2927398229603888, 0.2759280340156074, 0.28572805244525434, 0.2700404010649742, 0.27165624659738474, 0.28201403369099964, 0.3213684874430227, 0.32179622665469676, 0.23217354457219075, 0.22258075293375856, 0.23203078328346627, 0.23047950681063734, 0.22700321836095183, 0.23093234525251527, 0.24135658793687798, 0.24317529454083053, 0.2461008475298948, 0.18032401029643663, 0.17734726919064614, 0.1796536601440899, 0.18478211159973013, 0.19282106675231858, 0.19202305581124668, 0.18713939275337566, 0.18408575446177655, 0.204601068039184, 0.18364497619384468, 0.18855993324818832, 0.1836786962729059, 0.17558666579579818, 0.172424693100796, 0.18404546448829173, 0.2008049990147983, 0.21303079997303453, 0.175392968925696, 0.6690519366392964, 0.16731189018504666, 0.1525852070418603, 0.6795338094955498, 0.1948101998096995, 0.19300872630816746, 0.1409748878413848, 0.693491646540968, 0.6436863972795783, 0.7028873769787095, 0.21060412957463182, 0.1993819912086081, 0.7087310414563817, 0.5338220613004592, 0.15099313095902456, 0.21100316620252457, 0.5631113753884858, 0.20818210079218413, 0.18397069262060806, 0.17447326783135608, 0.18285555650851004, 0.18890721866608362, 0.19038586908350252, 0.18850355320985623, 0.18466829156680442, 0.1815844939030803, 0.18561800393230787, 0.07814116229784762, 0.07596393780492139, 0.08288271685608395, 0.0681422749521936, 0.07446187754378009, 0.07731455099933915, 0.07215194304234174, 0.07046769101420292, 0.084309662697444]}, "mutation_prompt": null}
{"id": "9b64d397-9866-4412-aad0-01d6bd854b2e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n\n        evaluations = self.pop_size\n\n        # Precompute random numbers to avoid redundant operations\n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n\n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n\n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n\n            # Update pbest and gbest\n            improved_mask = fitness < pbest_fitness\n            pbest[improved_mask] = pop[improved_mask]\n            pbest_fitness[improved_mask] = fitness[improved_mask]\n\n            min_idx = np.argmin(pbest_fitness)\n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n\n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with precomputed random vectors and improved looping structure for efficiency.", "configspace": "", "generation": 48, "fitness": 0.33435176960099333, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "7fc113f3-4dde-4508-9dc4-127e07e993a1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "2949e050-cf8c-433a-82c9-5f513e7604af", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "17260f00-a11e-4675-b733-8a1873823384", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            \n            # Vectorized update of velocities and positions\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                \n                # Vectorized trial generation\n                mask = np.random.rand(self.dim) < self.cr\n                trial = pop[i].copy()\n                trial[mask] = mutant[mask]\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by restructuring loop operations and optimizing vectorized calculations for improved runtime efficiency while retaining core functionality.", "configspace": "", "generation": 51, "fitness": 0.2725348007765619, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5875302072047395, 0.5355084461699532, 0.5367603022072214, 0.5876330205212925, 0.5406220688518134, 0.5569165759014851, 0.5813015003521396, 0.6031154443312976, 0.5612529112191585, 0.23654560589864915, 0.26605246022540263, 0.24389652564290598, 0.23206516674116262, 0.3222636776102584, 0.24625913901868446, 0.2561307405694412, 0.27706015960249986, 0.2221116048428311, 0.08887656545035794, 0.09096275764936912, 0.09301200127815501, 0.10260662477064253, 0.09096117756227484, 0.11792525749213423, 0.08556175844410885, 0.08395088089362546, 0.09067821784862062, 0.10608575644677076, 0.08183163413317507, 0.08306648902544622, 0.08764493527164163, 0.09552110829027682, 0.08811701610607792, 0.09629202946713156, 0.08643190586462679, 0.08380287963757005, 0.9847436823777858, 0.9775558278918466, 0.9859752429055006, 0.9596935427301002, 0.985383966485673, 0.9776514665786393, 0.9859787592300999, 0.9832283830230756, 0.977349261443846, 0.27751093731369325, 0.2683864209943412, 0.24662033969726982, 0.2767657522781166, 0.2863043132035292, 0.2793253875528031, 0.2703486446338208, 0.22568959065891114, 0.27620530879850724, 0.5458343089123245, 0.569491790188273, 0.5260773677803663, 0.6468484460105748, 0.7105091501382739, 0.6999995028288614, 0.5574177273537824, 0.520570907556658, 0.5572718833744951, 0.1513397770990258, 0.11907389238041488, 0.18006326886962976, 0.15104641602436308, 0.15286065531648052, 0.1400373437199922, 0.14064613442639307, 0.15718010781527791, 0.19958207818842777, 0.14766917533489488, 0.16164923872152426, 0.14229439543740685, 0.17163370152238855, 0.1379131375089543, 0.23080137680965462, 0.1688431279502487, 0.09239587120939363, 0.17584275325369725, 0.14922444237473953, 0.20570790540749384, 0.1831205967014723, 0.2217230383677783, 0.1468202982323661, 0.1772094666456665, 0.18405486224563572, 0.19780830858787668, 0.20099981053636007, 0.3156430875476597, 0.1813146442275314, 0.34187230721199136, 0.25457584321261095, 0.22161409671772203, 0.23568207592380264, 0.29373518717239233, 0.33883935233672735, 0.20393733813696147, 0.058318559484138666, 0.03907638318120976, 0.05009254525325191, 0.11245339292219292, 0.07960941038145808, 0.10028394548430919, 0.08464391639489077, 0.0593877220378477, 0.07289201100616738, 0.16800962452026402, 0.1404147868153074, 0.16706017689992547, 0.1787624524813458, 0.17154522386587323, 0.18815259938911222, 0.19786188505782076, 0.18249192761102362, 0.13912927478121195, 0.4549744110263786, 0.48327187907638347, 0.48686019161660254, 0.4772184195250183, 0.5031081081326305, 0.49615742382916017, 0.47545032192355363, 0.4755284780140605, 0.46652567852078775, 0.09308452686549895, 0.09780672362619047, 0.09233127072255976, 0.10735556243950284, 0.08824892473196089, 0.0871321363052604, 0.09351443796390357, 0.08126679924226232, 0.0765295765636913, 0.16884726175472675, 0.22269082097065673, 0.16045213392556634, 0.3321597811387994, 0.17441401549857782, 0.1372055580346736, 0.2117699902344652, 0.13359384187636025, 0.15324364869852636, 0.30407734325468105, 0.2683304004128647, 0.3063723246524507, 0.29273769162928254, 0.28164490059653513, 0.2695463917813591, 0.3145320846094487, 0.32600504646531037, 0.2980619127913481, 0.23903424514581706, 0.22808280067294795, 0.24963564359155388, 0.23689300249410272, 0.22954003113898003, 0.2380471416528952, 0.22933582423676524, 0.23482443617371607, 0.24796003578247305, 0.18750227374986905, 0.16952180218689628, 0.18196565355458583, 0.1875912294313432, 0.1843898219676856, 0.18454984750673487, 0.1776859842854085, 0.1921552684392328, 0.18580651811104099, 0.1796517905231474, 0.1850227648561522, 0.19306638417984978, 0.1745399275350502, 0.18064174829646895, 0.17104289725414457, 0.17720602806531005, 0.17346467574475755, 0.17569380662759793, 0.6526152217068468, 0.16535975481980636, 0.15391518260313364, 0.35422125052286124, 0.6206836909256979, 0.19342854461117176, 0.6774430974312186, 0.5360056061068341, 0.7071282322325065, 0.7098751810653464, 0.20836062919147624, 0.5546903497253837, 0.20601328833641008, 0.48369483482303166, 0.1488868662285251, 0.20699489092357015, 0.20512971924333534, 0.15173195511466542, 0.1742230402569137, 0.18094887060225384, 0.1944873182172111, 0.18121845754450694, 0.18681730924536633, 0.18762633785817617, 0.18999603717155777, 0.1806178650556045, 0.19603897381255087, 0.07186879718445871, 0.06954059158326031, 0.08124962633490429, 0.07129913143190736, 0.0729533262062152, 0.07418385519078874, 0.08554642217478481, 0.08440184947537932, 0.09138584589772958]}, "mutation_prompt": null}
{"id": "78d84de8-cd8e-411f-b872-fd7a48452bb3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "4a39df50-a831-42f4-9dc7-8d05fa351777", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3df37c78-6af6-4b02-a91a-c5e17df1bd51", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "b5c52c69-f3ad-4480-96c5-b705fc7ab060", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "57e4299c-c7e2-4599-9188-8434e61b7422", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "56b3cf7e-b7b1-4328-ae6f-7f5ce3ad1be2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "c1ddec8c-26a6-4ef8-bb44-529b3c534854", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Pre-generate random numbers\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            \n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest using vectorized operations\n            improved = fitness < pbest_fitness\n            pbest_fitness[improved] = fitness[improved]\n            pbest[improved] = pop[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                if i in indices:\n                    indices = (set(range(self.pop_size)) - set(indices)).pop()\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n\n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with memory and computational efficiency improvements using reduced random sampling and vectorized operations.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('cannot unpack non-iterable int object').", "error": "TypeError('cannot unpack non-iterable int object')", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {}, "mutation_prompt": null}
{"id": "59f0f9a2-33ce-4430-964d-b824675a1ae0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "e16ede10-e58c-47a8-829b-7d33143d157f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "383e3ccf-1d32-4e2a-9b7c-477ccabed42b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "55f58b12-ed85-4908-a3f7-b0ab6f049923", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "46e3fe16-9ba3-41a5-9749-0b876bf55d35", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "19f11820-249c-44ff-8568-5f2970795926", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "0671dbf1-435c-4dae-a6e3-bd1ea82c8cd0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "0d004fdb-4927-4fe8-8787-2880d7f784f0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "a5b137e7-3ce2-4ab4-ae59-b40a08d8554d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "572935cf-615e-407d-aa5b-d9d81225499f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "985e5dd8-9e1b-41a0-bedc-024dcfb7c289", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n\n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Pre-compute random matrices for efficiency\n            r1 = np.random.rand(self.pop_size, self.dim)\n            r2 = np.random.rand(self.pop_size, self.dim)\n            \n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            rand_indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=False)\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = rand_indices[i]\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved runtime efficiency through pre-computed random matrices, streamlined operations, and reduced redundant evaluations.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {}, "mutation_prompt": null}
{"id": "c60e4421-92cb-412c-a8c2-cbef219185c3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3b567236-60bc-4e84-ad22-f5aa20a91557", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "e127e910-5280-441e-b40d-dee1892665c4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.apply_along_axis(func, 1, pbest)\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO) using broadcasting\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.apply_along_axis(func, 1, pop)\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice([k for k in range(self.pop_size) if k != i], 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Streamlined HybridPSODE through vectorized operations and improved random sampling to enhance runtime efficiency.", "configspace": "", "generation": 72, "fitness": 0.2727433712960299, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "b63e3dfa-c989-4d6e-b888-371b12226afd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "1b31a18e-9d01-4467-bcf2-d3559bf8f536", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "44ea91c9-be93-4272-bc00-b5504a72c962", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "f543a32b-993e-4320-98be-53a16d6915f1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3a2c44cf-c81b-4a33-a7a8-61575a7433a9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "9c21c614-2242-4018-aa0d-9f7f10f5c70f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "1c295a1b-82d7-4698-89c0-3d15f1301a85", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "30807d65-7971-48dc-bb3c-472bad376cf8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "90f97131-317e-426a-85d1-11868f3f4f7f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "c7950b98-7a02-4524-8bd5-e9e1b30579ec", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "4e58ac3d-add6-4446-94a1-bf0f85f159c1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "39aecfa4-29bb-4f8d-944a-c86b8d6aa151", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "71da029b-0809-4377-9d77-7017275981ee", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "34a0b37d-2acb-4c81-a918-d3a7124d6b15", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "dcb5c4db-fb67-4429-bf33-49c62e0bdc5e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "751a1193-0daa-4de0-a0af-d17518696006", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "fc73e27f-f9b0-48bd-9505-e35e2dc75495", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "24e83d30-9cde-4671-9433-2dddb8b3fd75", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.fromiter((func(ind) for ind in pbest), dtype=float)\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            \n            # Update velocities and positions (PSO)\n            velocities = self.w * velocities + \\\n                         self.c1 * r1 * (pbest - pop) + \\\n                         self.c2 * r2 * (gbest - pop)\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.fromiter((func(ind) for ind in pop), dtype=float)\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(np.delete(np.arange(self.pop_size), i), 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with streamlined random number generation and optimized loop handling for improved runtime efficiency.", "configspace": "", "generation": 90, "fitness": 0.2727433712960299, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.5512221078132165, 0.5266573457185387, 0.5085473500517806, 0.5991827457633252, 0.5740129488005372, 0.5386015822811872, 0.5718174591832299, 0.5494267365561121, 0.5717837651870228, 0.2722974782642479, 0.25591395016275986, 0.24963578870012415, 0.24084967503392873, 0.2434643368245566, 0.266623605600781, 0.2440450611412176, 0.24617568014934033, 0.286258793795117, 0.09285789312904913, 0.09042941583512543, 0.09154933142181487, 0.10867810585645932, 0.08664204200537917, 0.09388477452867006, 0.08851659911481857, 0.10627695600267983, 0.0965955316659669, 0.08476220936115153, 0.08755324651558438, 0.08617171765772313, 0.08248690073122267, 0.07834028630502765, 0.08355353648061903, 0.09498622755134178, 0.08791283964467311, 0.08566298698114605, 0.9841836555998099, 0.977690055463707, 0.985939626127445, 0.9683239930519654, 0.9772139364056518, 0.9776018070340744, 0.9775555023197648, 0.985723705317936, 0.9771988511858289, 0.27259244141552874, 0.2776333067194896, 0.2573747815032692, 0.3026199072455459, 0.24650779171382975, 0.2573462096569067, 0.29041150218298406, 0.2564202641832365, 0.31415786218220565, 0.604377996222861, 0.6037956889795203, 0.6214018349206323, 0.6995872329469239, 0.6256371969505772, 0.1864455509541898, 0.5419682360404798, 0.6224396044194357, 0.6703501348334002, 0.15671596788618058, 0.15618440844517723, 0.20198585403493485, 0.15582392775522602, 0.149880066785955, 0.1396331721833841, 0.18753472902464763, 0.16527618818299472, 0.1383772478606301, 0.14592081575224725, 0.14262234144317187, 0.16064863842107402, 0.15291382635632422, 0.24582997762634629, 0.17111012715776264, 0.12132979144974942, 0.14508087494699606, 0.17881644573284994, 0.0800265955187357, 0.1552086762985424, 0.19008017688853407, 0.12194592926576475, 0.12920549304732687, 0.15401319230475763, 0.175855907112887, 0.09011243304551486, 0.19802744903491498, 0.3046162308476832, 0.28785367883835233, 0.33633163283205436, 0.28231600982089344, 0.2374635345899322, 0.2817936269473761, 0.29855161407414244, 0.3275677796884222, 0.3245600040421548, 0.04231113788921537, 0.03401226920751721, 0.06532689945984826, 0.07229696439340716, 0.05007464269130546, 0.05046791966852593, 0.05268433952631235, 0.06524723987828052, 0.04999950628841776, 0.17761401491695683, 0.16102014301007017, 0.15520376143850478, 0.17019650882541426, 0.18257398432527283, 0.18522881567093763, 0.18833417810676578, 0.18813052760568472, 0.13941367158941775, 0.49880817667206534, 0.4979612313608155, 0.4897649394550645, 0.4869941219936951, 0.49554131438341464, 0.4996913731472963, 0.5187086600567623, 0.4859531562566768, 0.5007637946179648, 0.0894369101839747, 0.08518806242872357, 0.09590487939449654, 0.07763712892666741, 0.08970618189127944, 0.09891503344283048, 0.08613659634204962, 0.08593304616311048, 0.0786548918135559, 0.32595013800578243, 0.1444017340122573, 0.18545790149991503, 0.2155837260841218, 0.16765771849918076, 0.17391776475711818, 0.1514722445067871, 0.13003997102118792, 0.19514257435587834, 0.2948052273459263, 0.3313940060565367, 0.31593404812206827, 0.2738218850108647, 0.28533385558497204, 0.26940236395927053, 0.3012877123490847, 0.3320352693497025, 0.30692235856096084, 0.21566858743001227, 0.23695301339186958, 0.25227315772093184, 0.23733846589512364, 0.23293630942701793, 0.23267663788468285, 0.22536651186265866, 0.2628972503521989, 0.24971929160437123, 0.18399216201119184, 0.17897748735857744, 0.1999725353022721, 0.19705346884836228, 0.1933846523837034, 0.19322477851340658, 0.185203683837586, 0.1954371842551348, 0.19637884381356485, 0.18689213008127814, 0.18678348677909096, 0.17230961152012825, 0.20405151450917813, 0.18553006149899043, 0.1840928642443438, 0.1853867459604216, 0.19531920532845304, 0.18738596586837308, 0.6886103910695072, 0.16172915359681084, 0.15359061273286456, 0.7406678048003079, 0.6319153356040078, 0.1924672071974306, 0.5538099398470475, 0.4273224577083331, 0.5577139009263108, 0.6363037108511772, 0.20675398528797473, 0.2024312064350523, 0.5942552455917114, 0.47885704138183005, 0.12320820779566055, 0.2067216524777924, 0.21008314474680467, 0.19897386528542782, 0.17601141931713538, 0.20730429366754444, 0.19181604626388327, 0.2032944364470748, 0.19201112874674953, 0.1939203964420655, 0.18861525617160546, 0.1780797337653246, 0.1808604149249552, 0.081007057464758, 0.07047854594619762, 0.07890857668248463, 0.08261842926306762, 0.0777551997440965, 0.08580604625889154, 0.07508540579437084, 0.08175724699983644, 0.07513152028320236]}, "mutation_prompt": null}
{"id": "e4422e0c-9204-4643-97af-09152b984dcb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "987f481f-9f3a-425e-9e06-320995c0137c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "4d8c29e5-dfd4-433f-b993-1eab82bf391e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "deaa7cd9-52b3-4a5c-8b89-c41fd503c326", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "3bb51f9e-8e46-441b-a294-ef5a5a418b65", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "92fd68cc-cd07-4137-a24c-f9d46b0de494", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "b6085daf-ac0d-41b1-9022-8fc5d39b11fd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "74b80130-bf10-45f8-93aa-661d4d2c445b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
{"id": "032fe3ee-3ba6-4ec7-9cc5-7938134896c8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 50\n        self.c1 = 2.05\n        self.c2 = 2.05\n        self.w = 0.7\n        self.f = 0.5\n        self.cr = 0.9\n        \n    def __call__(self, func):\n        pop = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        pbest = pop.copy()\n        pbest_fitness = np.array([func(ind) for ind in pbest])\n        gbest_idx = np.argmin(pbest_fitness)\n        gbest = pbest[gbest_idx]\n        gbest_fitness = pbest_fitness[gbest_idx]\n        \n        evaluations = self.pop_size\n        \n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions (PSO)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (pbest - pop) +\n                          self.c2 * r2 * (gbest - pop))\n            pop = np.clip(pop + velocities, self.lb, self.ub)\n            \n            # Evaluate new population\n            fitness = np.array([func(ind) for ind in pop])\n            evaluations += self.pop_size\n            \n            # Update pbest and gbest\n            improved = fitness < pbest_fitness\n            pbest[improved] = pop[improved]\n            pbest_fitness[improved] = fitness[improved]\n            min_idx = np.argmin(pbest_fitness)\n            \n            if pbest_fitness[min_idx] < gbest_fitness:\n                gbest = pbest[min_idx]\n                gbest_fitness = pbest_fitness[min_idx]\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if evaluations >= self.budget:\n                    break\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(pbest[a] + self.f * (pbest[b] - pbest[c]), self.lb, self.ub)\n                trial = np.where(np.random.rand(self.dim) < self.cr, mutant, pop[i])\n                \n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                if trial_fitness < pbest_fitness[i]:\n                    pbest[i] = trial\n                    pbest_fitness[i] = trial_fitness\n                    if trial_fitness < gbest_fitness:\n                        gbest = trial\n                        gbest_fitness = trial_fitness\n        \n        return gbest", "name": "HybridPSODE", "description": "Optimized HybridPSODE with reduced redundancy and enhanced efficiency through streamlined operations and loop restructuring.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ded6da1-4296-4e0c-9045-410732dbe994", "metadata": {"aucs": [0.7169158661966702, 0.691181552998942, 0.6853854184204878, 0.7204916506866947, 0.7087202497666207, 0.7086042661340199, 0.716782576081415, 0.7072537073238563, 0.710762620261904, 0.39387496532047894, 0.4073011720270573, 0.3961804011597434, 0.364860149019008, 0.41311401046539664, 0.40419299437179523, 0.329919796195425, 0.3961905228793846, 0.403147519363269, 0.11803704967669437, 0.18334870647758394, 0.1505440128251978, 0.19509514740734435, 0.1299504212335333, 0.1588911734412699, 0.14113093327340742, 0.15341279476064085, 0.15188235583121745, 0.10906557248661886, 0.11715909045619777, 0.1274614210304671, 0.12608895036434276, 0.10234111783231725, 0.11306470831309745, 0.1368789423732416, 0.10633710470204938, 0.13083962492720858, 0.9848008867666508, 0.9823965890231058, 0.9855530464288305, 0.976973839532344, 0.9854102631473131, 0.978058359054928, 0.984470279069418, 0.983360575303806, 0.9773878060097824, 0.44302182475180285, 0.3981744235437572, 0.4438596400251419, 0.4426877100526593, 0.4548665395104594, 0.4501061772486822, 0.43108876968376686, 0.4542091666242324, 0.465434960022325, 0.7144688726432469, 0.7777216422740076, 0.6792746826315994, 0.7129678908895862, 0.712347788807774, 0.7093024351561708, 0.6642339534119719, 0.641757090836987, 0.7279660740012472, 0.3682360288217418, 0.1590310427874232, 0.32295857260042893, 0.18225673493189676, 0.2285551430805829, 0.23591189438197757, 0.2526789112922947, 0.2010424806058415, 0.2615379792134447, 0.22426608337560638, 0.21178858588563154, 0.2593113200972905, 0.27972548452351786, 0.22514965050669367, 0.16670482804449094, 0.22401318636303535, 0.10023187328669103, 0.2706182353400203, 0.07218711486412577, 0.2104573505385786, 0.17912704700113313, 0.22885562963933903, 0.2030637517711742, 0.17547462633263367, 0.1898033696099043, 0.1801582172119075, 0.17973391969905939, 0.3705284149155492, 0.3061727699138399, 0.31961495892054825, 0.37019474640602323, 0.2965711279670581, 0.3002343072816106, 0.34703956280713677, 0.2983781977918172, 0.3307731803296263, 0.06608738703996153, 0.04364530989602622, 0.05018596162634603, 0.06098157882847732, 0.11866280508202731, 0.12786472203610033, 0.08083882644385831, 0.0780898191284135, 0.09099949005713825, 0.18139256381234525, 0.2042688189694437, 0.18578327061722044, 0.19935706445413948, 0.20515901307901163, 0.2125041848340944, 0.20428572934408673, 0.21482468793797915, 0.18306599596043638, 0.5544224775514703, 0.583760840330243, 0.5695268231097736, 0.5543204220749548, 0.568869334278812, 0.5556242962194142, 0.5682646370531746, 0.5389552892810809, 0.5601737363560261, 0.08860017262610165, 0.10242271297313532, 0.11008766276484527, 0.13823535769169704, 0.1382472858619671, 0.1709840080845565, 0.10673226760128995, 0.14732307672379408, 0.11939284846801579, 0.1558876157055913, 0.21520888337026622, 0.15973903089525354, 0.17060946346401085, 0.30401274102532494, 0.2385351317005865, 0.4756232332890472, 0.25853713804451584, 0.18300517768405666, 0.3667346772346868, 0.3976159891693358, 0.4076408070499944, 0.36782932082078745, 0.41222140070611213, 0.39033554055800357, 0.37793094362856594, 0.39379175988381254, 0.40864037974545475, 0.3092769150952176, 0.2858228862179911, 0.3157653472910975, 0.26894508995030975, 0.2913828586858165, 0.2912124780022316, 0.3265068468824778, 0.34024048353893244, 0.31509347545807476, 0.19562236216740148, 0.21719595172581818, 0.19994154666607455, 0.2082615459203664, 0.1961670735397366, 0.20559593578512636, 0.2369776240226551, 0.18752471575154717, 0.19861782480735102, 0.192148353315042, 0.22744601356246164, 0.20815997058974278, 0.21452207342217533, 0.3805161778012556, 0.18887797019526642, 0.20254003512737007, 0.2384555743064103, 0.19303327252371305, 0.8100294726912438, 0.18059081888286177, 0.15386912987750145, 0.7558484884599309, 0.7645172133928647, 0.19591765576333198, 0.7775806232964174, 0.6734382512706201, 0.8275911121419984, 0.7781086542535095, 0.21078480249161535, 0.6570779742448016, 0.7383829374665539, 0.16778131878488134, 0.16584405284150272, 0.2090381367625349, 0.20770677768215084, 0.15377306063567087, 0.1858103200085216, 0.19764614826479454, 0.1840763993888772, 0.19626047696069837, 0.21298466417254036, 0.19866223367344338, 0.19482431657141241, 0.21116264691030306, 0.18999247640129102, 0.08963753392673757, 0.07993167488779251, 0.08570183361275452, 0.0882442082756747, 0.09356668916481703, 0.10038208793965953, 0.0796568115111379, 0.09525455887722833, 0.08392037712649858]}, "mutation_prompt": null}
