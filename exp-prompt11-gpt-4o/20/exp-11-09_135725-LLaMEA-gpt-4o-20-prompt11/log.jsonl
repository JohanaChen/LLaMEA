{"id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.3006039987843951, "feedback": "The algorithm HybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "b466a7e5-472e-4eb0-9c3f-f91b758c0cd5", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "0f53eb35-477e-43f3-8259-e86678559aaf", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "7bea9eae-e928-4fb7-b717-b18d2d4e568a", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "e8d33498-9569-4abf-8122-4eeb8b9ef795", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "cd377426-dbcd-48c0-bcbb-27983a910dc6", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "5bc08824-55df-4572-9990-7cfdddbe3815", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "090c05d7-0bf3-451f-9e8c-5fddad88c862", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "cc149a50-24a0-4d1e-a51b-bc91dfaf9355", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "5d3b36eb-1525-4919-bfbe-f8f88c1abb54", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "19a3d829-ca6e-46a0-8cf9-4c1cadebaa51", "solution": "import numpy as np\n\nclass EnhancedHybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_initial = 0.9\n        self.inertia_final = 0.4\n        self.cognitive_weight = 2.0\n        self.social_weight = 2.0\n        self.elite_fraction = 0.2\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive inertia weight\n            inertia_weight = self.inertia_final + (self.inertia_initial - self.inertia_final) * (1 - evaluations / self.budget)\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Elite selection and evolutionary mutation\n            elite_size = int(self.pop_size * self.elite_fraction)\n            elite_indices = np.argsort(self.personal_best_scores)[:elite_size]\n            \n            for i in elite_indices:\n                if np.random.rand() < 0.15:  # Increased mutation probability for elites\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridEvoSwarmOptimizer", "description": "Enhanced HybridEvoSwarmOptimizer with adaptive parameters and elite selection for improved convergence speed.", "configspace": "", "generation": 10, "fitness": 0.17716592605778161, "feedback": "The algorithm EnhancedHybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.41901213561696316, 0.2953363042002315, 0.38955291709375595, 0.33382939897567265, 0.4424963114964223, 0.3878487919066811, 0.41869479976105917, 0.4214187357621597, 0.3377520969182247, 0.025638232936684324, 0.04630984614530498, 0.04223376813447666, 0.06910042883552814, 0.0516453653493667, 0.023711914535401446, 0.01803710894781796, 0.030515800881780852, 0.07109595775325994, 0.08582877317094095, 0.126151120606527, 0.09313851977228438, 0.07222731876551425, 0.07783614204005429, 0.070106051800083, 0.09719294805376233, 0.08686250965472864, 0.09687692459825936, 0.08541659532443391, 0.05685102007326093, 0.07285851919089459, 0.0766914908533527, 0.09875218483433379, 0.07076123428064507, 0.08667465462530544, 0.06420901368184662, 0.09700340870661972, 0.9858099085655126, 0.9855542076197047, 0.9896292660858289, 0.9817099109413772, 0.9850460593748412, 0.9838165643770341, 0.9862791505963151, 0.9857869600595112, 0.9852007449096136, 0.15654577318470786, 0.22202735507334503, 0.14473943811395307, 0.15331689666836623, 0.18966508568399354, 0.12475368205826776, 0.13705629744621306, 0.21546810700575947, 0.16393008002450604, 0.16182343227043294, 0.15269675205589284, 0.21625797315789763, 0.18761423334333782, 0.15875966359029392, 0.16097711896055866, 0.11022194668592966, 0.20388033364493408, 0.13141222268760955, 0.09597497296703927, 0.08292826784517582, 0.06632085574928681, 0.07043922844069894, 0.093773317084768, 0.07383660764535849, 0.09270545853526235, 0.12257841044952333, 0.0715885876319986, 0.1294065577170581, 0.10259802661414796, 0.08093178150395486, 0.08406484681752968, 0.047936455583415194, 0.09348187275533815, 0.09145452828993561, 0.047563744009516795, 0.04067416821740821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07490522264605404, 0.06861872075383346, 0.03827090930578758, 0.04808267194512805, 0.01336723559685249, 0.03307855906885704, 0.05898034732790525, 0.030521751036835854, 0.03200346941367038, 0.010161625396300722, 0.008768949257660252, 0.006637333983420257, 0.005911877615087047, 0.012829688179007315, 0.016337813279401203, 0.028295132510733678, 0.011555954166574844, 0.023508968003827624, 0.03028540992354778, 0.020910872149622062, 0.050785422036994876, 0.06644819865489338, 0.04362243087689299, 0.0024898253307601426, 0.03534157880484767, 0.03854130121403154, 0.037957047896289065, 0.30693909954694953, 0.32782022531615596, 0.3532871640990052, 0.2795130280308701, 0.3414786644867136, 0.285868609068913, 0.31712778845198686, 0.3352148302912299, 0.32151439948996974, 0.06204147743687205, 0.07601933857327081, 0.05827650824531938, 0.10004812048505551, 0.07307757411948645, 0.07976889472317872, 0.07140595057000831, 0.07141922240711207, 0.08957685641333812, 0.17037964456665777, 0.1481825505312292, 0.16210344640905328, 0.1770757402174622, 0.2063500071845651, 0.21341279476822295, 0.16922922241527572, 0.1720379433531809, 0.19988318045665376, 0.18778413438714137, 0.22018969030471924, 0.2123128465382721, 0.17570062564515665, 0.18740931306876585, 0.20118108245002708, 0.24012656253315878, 0.24574620060835273, 0.23377581814486126, 0.1509908013787844, 0.16328739254533142, 0.14930766946140117, 0.15101569564835005, 0.15999938688343485, 0.19437733681030112, 0.1703088195282546, 0.16986905506317018, 0.19554524433194342, 0.1670765143678089, 0.13185488198832596, 0.17249828189494543, 0.1866385285557246, 0.1694531292589918, 0.17175575876058025, 0.18356834465761573, 0.16908382821893642, 0.1926885755388308, 0.17539423397328047, 0.18584792177061782, 0.17539884727955468, 0.18001221595070382, 0.15734551611734482, 0.19347302526934995, 0.18785776667744836, 0.15488924690495665, 0.16857559238285447, 0.5662143646780403, 0.15541736591330935, 0.14850241002088882, 0.4830157532142524, 0.5257816791663403, 0.1786682135573423, 0.13727152384833863, 0.13961390027113885, 0.41260077541685347, 0.4059092217181607, 0.18160434344546295, 0.15858988117836648, 0.24210195188319583, 0.20758269203258128, 0.1639157031320252, 0.1987369223138591, 0.20256803976803228, 0.19946379782291757, 0.1896944166579484, 0.18570255509818412, 0.19683431186681588, 0.19707298448653054, 0.18738635614339438, 0.18499169180887276, 0.19147299215046654, 0.18502220007715375, 0.1854560679137176, 0.06659866543997739, 0.06179670598216269, 0.06722738492600144, 0.0692141225188092, 0.067640313439573, 0.06153195078883322, 0.09035959891360612, 0.06959273547046774, 0.0642707551585665]}, "mutation_prompt": null}
{"id": "6f3b6e4e-2f5b-41bd-aad2-2e13e2758354", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.9  # Increased inertia weight for better exploration\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.min_inertia = 0.4  # Adaptive inertia weight bounds\n        self.max_inertia = 0.9\n\n    def __call__(self, func):\n        evaluations = 0\n        iter_count = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive weight based on iteration\n            self.inertia_weight = self.max_inertia - ((self.max_inertia - self.min_inertia) * (evaluations / self.budget))\n            \n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform selective evolutionary mutation with adjusted probability\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.05:  # Reduced mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.05)  # Smaller mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Enhanced HybridEvoSwarmOptimizer with adaptive weights and selective mutation for improved convergence speed.", "configspace": "", "generation": 11, "fitness": 0.2277658912066834, "feedback": "The algorithm HybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.4827254103448154, 0.47934040240713705, 0.5122927300048828, 0.588242258917115, 0.5386559836317524, 0.49749306260292747, 0.515042546371387, 0.48119610237043486, 0.4441720975795096, 0.22034943334214918, 0.17991676154706548, 0.11956915646329014, 0.13791382976196165, 0.27730988961682956, 0.22104617145679095, 0.23666375024588426, 0.18203726757833916, 0.21693803547329882, 0.0994445125844744, 0.23221213425667053, 0.10936843914239947, 0.12308432146390569, 0.13361758982885186, 0.13161561626221463, 0.1371255096402203, 0.12035893736082215, 0.09768088005650422, 0.08942833482241241, 0.09922067236514631, 0.12439483113327354, 0.11155394609611835, 0.08247636633738997, 0.10533843826610012, 0.10533286068537995, 0.10061294918813524, 0.1081896485044983, 0.9852345209424632, 0.9810126888605868, 0.986048254484986, 0.9817812779770909, 0.9852693394060439, 0.9793049025879026, 0.985353774660415, 0.9813077154997726, 0.9849177216302221, 0.31464687592140306, 0.2556114901739557, 0.2751572490314803, 0.2744952518619399, 0.2835783124362605, 0.2652641981002767, 0.328963891055261, 0.2718648616349497, 0.31365848901536164, 0.20877362107798692, 0.3482383066259267, 0.3511395735631512, 0.20314730057549946, 0.2392162842784139, 0.30417945478824526, 0.4019894855530656, 0.18771701632354876, 0.18493367063425425, 0.13636528370806666, 0.06937505890117923, 0.12499204707511014, 0.09195082541824473, 0.124012726895123, 0.09923677111916951, 0.1334805364582451, 0.15320246307550556, 0.13715338180969627, 0.11491641065945113, 0.12395520016953232, 0.09108429805009477, 0.15598579384139588, 0.10325565623099242, 0.15864793778083564, 0.15566813505645494, 0.06651188717346845, 0.10043357705829459, 9.999999999998899e-05, 9.999999999998899e-05, 0.02076079166318745, 0.023487464449893358, 9.999999999998899e-05, 0.06033025928545399, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016848029215288385, 0.04467926763389729, 0.01993561978470404, 0.07955098107455083, 0.08382262321874112, 0.010029041558379914, 0.01162050948143356, 0.04344448209462448, 0.0434086592174896, 0.03641761872971916, 0.016310302085967288, 0.016660938289488558, 0.026487494936979217, 0.07415934474265873, 0.03611279138859336, 0.028267395909978177, 0.04991644658326844, 0.07125138350950111, 0.03525839690066135, 0.15702106114545933, 0.028787801550291592, 0.1912402618742779, 0.06032124598378086, 0.14200224969949504, 0.03853215524388254, 0.06381244427698507, 0.046807206095434206, 0.06662604129537308, 0.4001394814029693, 0.4075269416888052, 0.4122130475175779, 0.4276513582954157, 0.42813502465419273, 0.37858865587520274, 0.41040872367320613, 0.38027962648196134, 0.43355586982866534, 0.07414126719083691, 0.09525075317091525, 0.10032991187701135, 0.10641976546463117, 0.10823076714143609, 0.08105973989176396, 0.09959009747613201, 0.07891199302162843, 0.07772635226093827, 0.15755653015643456, 0.3004919157117105, 0.2012019719768553, 0.22330549036295666, 0.26237867783403257, 0.14327578268627716, 0.206119480600786, 0.14351010921696505, 0.1965626469142585, 0.2873045258916316, 0.23255777678946066, 0.2970555370596749, 0.2730514585017898, 0.19751511069826277, 0.3224988569240287, 0.31148462647621644, 0.35519620782601546, 0.32985112785827675, 0.20738918431643982, 0.20262654942370328, 0.2065951523580346, 0.20358524335025985, 0.23598724887877964, 0.23271079339471312, 0.21994824396496093, 0.25668538473793334, 0.27132948526371437, 0.20058871931400124, 0.18480941901232562, 0.19158816394897904, 0.2288903669457113, 0.1846682850169381, 0.1891961444127187, 0.19572841242855776, 0.1844041433105894, 0.21772219689640593, 0.43604688448174656, 0.18849716708054853, 0.21177203566471536, 0.19511687704332703, 0.3644833687673338, 0.189724158737552, 0.3247982853089313, 0.20013976582420323, 0.18573071833691723, 0.7235572280789027, 0.1590482907908065, 0.1499160088094189, 0.6804516272529252, 0.5652207815382155, 0.572790728230187, 0.13841982954873833, 0.17608713783638974, 0.18523330513468916, 0.273960178507609, 0.20179056541475515, 0.15933918155937976, 0.29838558438121665, 0.16407230663528405, 0.13469033995144686, 0.1912054075343257, 0.20357173086586322, 0.6088280656111185, 0.19345360686208324, 0.2024635284938291, 0.2001614941100014, 0.19406983664192956, 0.18046001390773914, 0.19888166156175102, 0.1847845738679078, 0.2138400694131839, 0.1933261129044188, 0.08799347068629249, 0.08450400087476606, 0.08266557729643831, 0.09616504160894279, 0.08468659704791548, 0.07448894036426723, 0.0690259611313968, 0.07488932607620824, 0.07043962460659037]}, "mutation_prompt": null}
{"id": "4a28581f-e484-4f38-91bd-3d8a02e38840", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "4d3a6ac6-d725-4a7c-a4c8-d7d2f50a32d4", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8c29001a-f3cc-4e2b-ac41-9a0f50861034", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "896f1322-ab31-4828-9811-ae990a115fd9", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "0344d4c6-eb4f-47ac-a9ba-5878e3820ee3", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3e78f1e6-65b6-40c9-a630-0d40b5b179a6", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "d7d288f9-4932-42c9-80e5-dae77e60764d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3c809454-bb2a-45d5-921e-6cbe6d15845e", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "f4a7797a-7fa9-4399-8e8b-4c69c85029bb", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "7c996a96-a313-4ffc-812f-ce18a5da82af", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "da5bbfc9-4b4e-4c51-a28e-1cb1fb3f65bf", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, self.dim))  # Initialized with small random velocities\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.9  # Start with a higher inertia weight\n        self.cognitive_weight = 1.4\n        self.social_weight = 1.6\n\n    def __call__(self, func):\n        evaluations = 0\n        dynamic_inertia_weight = self.inertia_weight\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            for i in range(self.pop_size):\n                dynamic_inertia_weight = 0.5 + 0.4 * (self.budget - evaluations) / self.budget  # Adaptive inertia weight\n                self.velocities[i] = (\n                    dynamic_inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.15:  # Increased mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.2)  # Larger mutation for more exploration\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Enhanced Hybrid Evo-Swarm Algorithm improving convergence speed by adjusting velocity update rules and adaptive parameter tuning.", "configspace": "", "generation": 22, "fitness": 0.1968009719269779, "feedback": "The algorithm HybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.38116077549005967, 0.4025229090190372, 0.36766526436121294, 0.40759742966092216, 0.4119514830923926, 0.39875473635941017, 0.43966764346946796, 0.46269723453072686, 0.4177364630714532, 0.05033333177789223, 0.04403905256065266, 0.056639966619577375, 0.0990867825991778, 0.0355447162337863, 0.0425970720098221, 0.05838102243338894, 0.10533991687094546, 0.11395870672627151, 0.12249305861188109, 0.10664016735148174, 0.08259790205990869, 0.11966488049469104, 0.08916695156937005, 0.0875577151229412, 0.09091374528724805, 0.09100849466302985, 0.11475422025783444, 0.09750413836204841, 0.08096319743311398, 0.09776752521005383, 0.11037354343314232, 0.0934450549586816, 0.07696163614481688, 0.11875274345505782, 0.09181520769400142, 0.07868904191793369, 0.9852131126467315, 0.9676545478915105, 0.9865781188984883, 0.984929873376667, 0.9838000265749302, 0.9808617391593579, 0.9815759541023893, 0.9854240431968615, 0.9853510692617601, 0.24930963773023618, 0.2725878150246843, 0.16829666426628842, 0.20725062942590555, 0.23097082326644525, 0.18544084048420872, 0.20172261534135894, 0.21491280445661365, 0.24479934101241874, 0.24890124337844544, 0.19700354603423798, 0.15420600389602113, 0.2191756047950938, 0.18042272034817108, 0.17901984208119226, 0.2011725316708125, 0.12490550445742299, 0.21819909551164185, 0.10617920910927947, 0.09768656846490831, 0.09372049715038988, 0.0678266056689294, 0.1248725191782869, 0.099183961678881, 0.11569693338758735, 0.12264616991413713, 0.09560258719814196, 0.11299574141674729, 0.10373815312031764, 0.09433407482294609, 0.07865689291779121, 0.10377305294548644, 0.09931677985106913, 0.1091842775871944, 0.0730815564907139, 0.13272045204153216, 9.999999999998899e-05, 0.022136895808559154, 9.999999999998899e-05, 0.030919145041644502, 0.05537812222540506, 9.999999999998899e-05, 0.000733289144144722, 0.023877690157435016, 9.999999999998899e-05, 0.04927381302346967, 0.04758983683589191, 0.05237160882486791, 0.007291231567230327, 0.00010119905905281446, 0.06047233528294671, 0.014281066205522053, 0.03934989226853902, 0.021961950601976032, 0.010998570386317463, 0.009697681043382866, 0.014240075960537779, 0.014070414690131816, 0.027404019583318062, 0.015392316380756, 0.017824197889424243, 0.01707895753916977, 0.023429173245642643, 0.023491858015215805, 0.03054591564190945, 0.0888299657924837, 0.07000430982686046, 0.06410779624972418, 0.034566713216138356, 0.042216095632863104, 0.05399418185643823, 0.08709373854174796, 0.3740328856019196, 0.34923027154615016, 0.37711432348072627, 0.3526917302204128, 0.3592720225864364, 0.3542186126991278, 0.39477914358477806, 0.3531578665552356, 0.3324569820924048, 0.0659119534449657, 0.08612369599615177, 0.1003267654826131, 0.09274324449370908, 0.10531674427875437, 0.07647337136683341, 0.08582477123031362, 0.08456585789953752, 0.08838105043758204, 0.1853598649860796, 0.17086201331936957, 0.17836493574222, 0.220034912888603, 0.18333469146101877, 0.16268392463281856, 0.1503009125319753, 0.15146002042223394, 0.17485225298081275, 0.2213771970495244, 0.26666089981894536, 0.262609300542189, 0.25595529703988973, 0.1894928685088868, 0.25949492029926624, 0.23177821533885123, 0.29956634313496533, 0.2711244589494616, 0.1937158479920903, 0.1760811584386529, 0.21418404319393802, 0.12959347133891375, 0.20280780148780375, 0.1522462746717489, 0.21480912215870573, 0.2266132829500218, 0.19656800504212746, 0.18173145313852423, 0.1483085055497213, 0.18632864224330037, 0.2032960633981844, 0.17248054149448233, 0.20016264688968044, 0.1843003415221166, 0.182971921033368, 0.17698912710608983, 0.20022084253140515, 0.1822437101115012, 0.2050499308116318, 0.1875652368440165, 0.1942184100225186, 0.1919986555078984, 0.18941847241827903, 0.1897770046991032, 0.18588901333655372, 0.4712147546545099, 0.154545450704758, 0.1494108299178072, 0.5501971304352258, 0.18970137534491627, 0.15451074065865955, 0.1782268295408327, 0.6009590669408131, 0.5793946582060603, 0.46853527940078077, 0.20146496751412302, 0.3174824836167295, 0.30639470049902895, 0.31305581608489386, 0.2982408946675471, 0.2031644554242692, 0.19960231308983634, 0.3860040325880967, 0.18094059901617998, 0.18219395428981322, 0.1830847854473302, 0.18039713039514338, 0.2170881113845614, 0.18286188570711082, 0.19735071423262485, 0.18685810659451285, 0.19252176479707672, 0.06962659373962998, 0.06102165803410575, 0.08234694169190204, 0.06779985356206852, 0.07421734419192871, 0.08101001055645252, 0.07880412894341138, 0.07602084935018338, 0.06648630674074718]}, "mutation_prompt": null}
{"id": "09b9805f-54c3-44c2-b3f2-6360ef4a3836", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "644d4688-3871-4e12-9c6e-8add836d4b0b", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "aa645966-804f-45a8-abca-07886c5ce214", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "c3f1c930-9d87-4a2e-8779-15b60e5da661", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.9  # Increased initial inertia\n        self.cognitive_weight = 1.2  # Adaptive cognitive weight\n        self.social_weight = 1.8  # Adaptive social weight\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive weights adjustment\n            if evaluations % (self.budget // 10) == 0:\n                self.inertia_weight *= 0.95\n                self.cognitive_weight += 0.05\n                self.social_weight -= 0.05\n            \n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation using tournament selection\n            selected_indices = np.random.choice(self.pop_size, size=self.pop_size//2, replace=False)\n            for idx in selected_indices:\n                candidate1, candidate2 = np.random.choice(self.pop_size, 2, replace=False)\n                if self.personal_best_scores[candidate1] < self.personal_best_scores[candidate2]:\n                    winner = candidate1\n                else:\n                    winner = candidate2\n                mutation_idx = np.random.randint(0, self.dim)\n                mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                self.positions[winner][mutation_idx] += mutation_step\n                self.positions[winner] = np.clip(self.positions[winner], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Enhanced HybridEvoSwarmOptimizer with adaptive weights and tournament selection to improve convergence speed.", "configspace": "", "generation": 26, "fitness": 0.18051487167907398, "feedback": "The algorithm HybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.39702917751691746, 0.3788066432500644, 0.3099249153359632, 0.34706696418670235, 0.3657918222280431, 0.3543990135270696, 0.33929774793186174, 0.33302728044376395, 0.3549035285610175, 0.03255742198574829, 0.011585553544103955, 0.00976495227456653, 0.027624137511277347, 0.030713481828501643, 0.02343910400598126, 0.009302089641524125, 0.009363476039937813, 0.01359355356475278, 0.08521930778399933, 0.11201985425618755, 0.06497100603370476, 0.08055359435401077, 0.061764928349216874, 0.08811061723407676, 0.10969056892416773, 0.0908039641022137, 0.09698295232829701, 0.08584961679014491, 0.07230658003252699, 0.07645872910346097, 0.08852167084303897, 0.06819295788238433, 0.07130767911442415, 0.08352346980762737, 0.07787392690310879, 0.0820296174759455, 0.9883446206919927, 0.9823155039352051, 0.9893999757968602, 0.9687338026241353, 0.9857138253892057, 0.9816461717318653, 0.9857683646100361, 0.9811752620418475, 0.9858072600259996, 0.190555123168058, 0.20011842757919163, 0.18829481192699382, 0.18073399413616298, 0.2015789766283449, 0.19706421347285163, 0.17523761890570044, 0.2233192349630665, 0.2148765397603427, 0.16888607897253405, 0.22173483976682706, 0.24973087601072297, 0.2002585175681284, 0.2061158495949067, 0.2694601204678372, 0.11604573757839332, 0.18112540417932876, 0.24859080586768767, 0.12096654609595547, 0.06724819781842639, 0.056361557580169364, 0.0803333477445789, 0.09115475089979042, 0.08766468671386007, 0.11430182260033872, 0.11138977158223773, 0.11172010467397908, 0.11058059548709531, 0.08822268120667809, 0.0832147216809146, 0.11762635762567675, 0.06248051203349425, 0.12102203781768583, 0.11864359140757663, 0.08972554570508906, 0.0889141849893158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08724124784360265, 0.01925518935075543, 0.047165046494235474, 0.06239401675211398, 9.999999999998899e-05, 0.021011357300477762, 0.01685072336202864, 0.04297122396616926, 0.007997226895099963, 9.999999999998899e-05, 0.0024033340430252847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0816342015629441, 0.02524185042726279, 0.06095086138363348, 0.08687420187729022, 0.05630748216786596, 0.033431653995897204, 0.03661925207226635, 0.040978678922986345, 0.09624104151432644, 0.3231736938928056, 0.33601639262510785, 0.34984528740749266, 0.29189855692805144, 0.29287947331352426, 0.32043589569142283, 0.3326329133110114, 0.31959798405754614, 0.3214604414938822, 0.06497381172810324, 0.08408720198906428, 0.07184825340444279, 0.09925660578969486, 0.09692102550075032, 0.09230511197890323, 0.0706191998047534, 0.07821023980379427, 0.08454642418750669, 0.2315882750581032, 0.16123125563367047, 0.16662730252172042, 0.1834917617756644, 0.1934162072401565, 0.15713167953826745, 0.1660418936443825, 0.14919368134962752, 0.1831449447655562, 0.21355577202665, 0.2599466658915063, 0.21535728550440714, 0.24317769400398515, 0.1842780399558025, 0.22675544616833188, 0.23407785496289668, 0.2698112877333827, 0.26184913666951215, 0.19046575080776584, 0.16952840375691924, 0.18394194373132455, 0.15998530210347695, 0.16436701169536516, 0.19403198045162207, 0.191848531363341, 0.16967488820629628, 0.18743993728614583, 0.17724372518048892, 0.1342949007962254, 0.19510815629396439, 0.17695863481992424, 0.18818032555185393, 0.16891149014963447, 0.1911919518057298, 0.1825094995646076, 0.1738819466159952, 0.18741594865206368, 0.1891054284400726, 0.2034243832610515, 0.16723016041838745, 0.25261231188213595, 0.20776428837709449, 0.17838052478889754, 0.17005408490371976, 0.15287036063418857, 0.500089681120629, 0.16590715856057137, 0.14834371155167303, 0.5558391717178125, 0.5038915565122025, 0.16727334150638673, 0.13553938908402574, 0.15274591370896573, 0.16649301667967098, 0.37140683640766514, 0.18642461842054137, 0.20696307710207662, 0.2805886379318525, 0.23021672740835664, 0.1372313913809885, 0.2008670465694764, 0.20397924275380297, 0.19874127647698814, 0.1901494876238372, 0.19454296399248583, 0.17843737163103868, 0.2230550512239723, 0.18550062418752433, 0.18001169213606605, 0.19087286981767382, 0.17607834374465714, 0.18794045500956336, 0.07652680000850232, 0.07584569510640904, 0.07132930103299262, 0.06799944724634022, 0.08358138650611158, 0.07077611101481451, 0.07221801829408703, 0.07441948663838283, 0.06363534799665882]}, "mutation_prompt": null}
{"id": "7f91e6c6-3b95-4ffb-b30d-a15498d7bd1a", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "9b6ef71a-8d80-47be-81ba-67871f9e8109", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "6d36a5aa-bde1-4e74-aa87-b0e985347f14", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "cdfdd7e8-6019-4a67-8d61-3e13ce973f76", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2397fda2-878f-480a-b5f8-2882a0522c94", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3be5b9f8-a8bc-4aed-b934-597c92ad670c", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2d8c6b3e-f683-4812-8f8e-7e5898b599eb", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "076c49bc-cd0a-47f1-b2a3-80b29f4a8067", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8d5e1442-7ba8-437e-afe9-4936f2b2003f", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "b530e8a9-92df-4b4a-b4b7-72b54158b960", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "05b69319-9726-45ed-9a51-d9572899ccd0", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "010e70f4-4bb8-4631-96e0-bb48a293d018", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "9ea3c2b8-aa20-4c08-b7fe-5df8a75b5e72", "solution": "import numpy as np\n\nclass EnhancedHybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.7  # Slightly increased cognitive weight\n        self.social_weight = 1.7  # Slightly increased social weight\n        self.mutation_probability = 0.05  # Reduced mutation probability\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptively adjust inertia weight\n            self.inertia_weight = 0.4 + 0.5 * (self.budget - evaluations) / self.budget\n\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            for i in range(self.pop_size):\n                if np.random.rand() < self.mutation_probability:\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.05)  # Smaller mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridEvoSwarmOptimizer", "description": "Enhanced Hybrid EvoSwarm Optimization algorithm incorporates adaptive inertia weight and reduced mutation probability for improved convergence speed.", "configspace": "", "generation": 39, "fitness": 0.2092805502982361, "feedback": "The algorithm EnhancedHybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.5304911434270275, 0.4768841305058371, 0.5249631466226403, 0.4556332719835313, 0.494858986784121, 0.5077695870336774, 0.44923324815345966, 0.4831146726560097, 0.42353350148832325, 0.07558257854813422, 0.06578944957890531, 0.1463194666014106, 0.15629552597071072, 0.15600398646478675, 0.14158861748057683, 0.1345896649023438, 0.10820280179550246, 0.17489582818155158, 0.11025943663921767, 0.09258506314367254, 0.10790578462454237, 0.09820560080048657, 0.07736505185826459, 0.1019000254481216, 0.11392350583694622, 0.10786399002727154, 0.09534295345498145, 0.07487570342360939, 0.09112429060733462, 0.08140997453476462, 0.08879902140201246, 0.08835507146646993, 0.0816595783913111, 0.11208868724555832, 0.0641581657818695, 0.11253242036134958, 0.9860601189335176, 0.9841383512504438, 0.9893872562136795, 0.975934108359261, 0.9854859143477036, 0.979376017502496, 0.9854622275310233, 0.9812904961866563, 0.9820524617008987, 0.2778659059954107, 0.2786339695506346, 0.2574076308602442, 0.22971108782837568, 0.20655716947307778, 0.2927481150602218, 0.1744663136390009, 0.23614562760316693, 0.20231930825180555, 0.22137970856064448, 0.2205869547862087, 0.45479552464689077, 0.2434606421075498, 0.2239360393003471, 0.25751470913543995, 0.12065233964747546, 0.4138173114408371, 0.17387744345883893, 0.11106318321121211, 0.07159606823749054, 0.1193733786814335, 0.0652123069124737, 0.11071823655927093, 0.06953573283172276, 0.1273373124874383, 0.1080230594557795, 0.11324334895276245, 0.12939039788673656, 0.14323114584938734, 0.07029520019058111, 0.1140956364763882, 0.07248116888764455, 0.2135753392988894, 0.1380016256809129, 0.054193924204995136, 0.059888954429042185, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119162362704046, 0.02975338571955022, 0.053778613720819934, 0.089411600776374, 0.001183562230662183, 0.0030801457293997414, 0.03350762704567367, 0.06371270747110047, 0.05752540426101549, 0.02151377871760418, 0.01959991740324729, 0.04509566138570753, 0.026583405780445157, 0.033251981545998066, 0.02214393238738832, 0.044966558816633584, 0.03233260292878115, 0.04248449585225389, 0.07869285164222894, 0.09073668271699442, 0.05206553647481982, 0.003632708323617395, 0.09757277689127264, 0.027688029103247747, 0.05896615892470203, 0.0411052008801327, 0.09833550898191334, 0.346216214289779, 0.37989327872094836, 0.3428949346298682, 0.361254431331796, 0.37909176144638945, 0.30659345601650156, 0.3667364755378214, 0.35446801539923256, 0.39749261329986607, 0.09678788018597984, 0.051910579569573345, 0.06806380188558359, 0.08682130195104398, 0.09152065577684931, 0.09628956269296263, 0.11618612163980124, 0.07693247856082586, 0.07727381680041523, 0.2236540402915551, 0.19522369497070613, 0.2618175658326617, 0.18224093151094134, 0.18021037686280417, 0.1510484779175869, 0.2943232833735874, 0.19884743815072803, 0.16905475368174594, 0.20205840487042404, 0.2775230851881838, 0.2948594624396176, 0.26510056882442057, 0.264043011553148, 0.2852500787651445, 0.2906130847681848, 0.29641291361991784, 0.2912612437355868, 0.2153836969230799, 0.2172226908053354, 0.19129177853211254, 0.20643840074068998, 0.155810415253825, 0.17468612609711398, 0.20722774163747215, 0.23341926866769558, 0.1849953882372678, 0.19745108334477945, 0.1404471493992442, 0.16886809295890814, 0.2041138602821555, 0.1781176007671016, 0.1769198031595115, 0.2002915133103288, 0.19701704563963707, 0.2423279392029445, 0.22196809747124813, 0.3208775084556341, 0.18179033364486952, 0.19840627314843418, 0.2015955366312584, 0.20803159575848085, 0.20518909923056672, 0.18115484671820348, 0.16979719458117137, 0.5590695746773622, 0.16364783619825518, 0.15079932364888937, 0.5301361398016724, 0.6316792846273669, 0.16202434050400238, 0.17960554740967183, 0.15141772476675652, 0.6293607682817146, 0.39406983479321467, 0.19261151010957533, 0.1908190855003784, 0.3156667192487568, 0.2520069719529996, 0.14497284873469962, 0.1946949507568021, 0.20072932674894095, 0.42901098033253715, 0.18218816105580626, 0.17434497622018863, 0.18744450223703346, 0.19277815487145122, 0.1789483537393708, 0.19653652925677234, 0.195943481152816, 0.20373995154959057, 0.19127618560408566, 0.07223161039949266, 0.07284989100727235, 0.07098789064378197, 0.07148988917365806, 0.07863433520361562, 0.07144715518082245, 0.07674595584666077, 0.06812236517638126, 0.07252166514437342]}, "mutation_prompt": null}
{"id": "0c129411-397e-436e-b488-f5e2b1dac3b5", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "687922cf-bb6f-4713-ba7e-0effc663e7fe", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8a69a4a5-3118-4649-a180-f21104f14f2a", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "c0abc3c7-565e-403e-94d1-a22105a3b84e", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "f64ceb6e-ae49-4606-a5ca-9693e1a5d378", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3c4a0cd7-cf81-4b36-b558-0b8ffc5c90c3", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "4c3c1796-af53-4882-ba35-d1c23e0b6473", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "83131029-e193-4539-9a8e-7be5041d0a5e", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "20498f9e-c426-4133-88bc-713be530ed28", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "c5ac2fe9-98c9-4771-a517-fae7b3640959", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3ea437d9-4291-4036-989a-c813aaa85e24", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "4ecccab9-263c-4287-885b-ec406b957231", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8320bf23-fd06-4975-a24f-5e53a47812a6", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "32d135af-5f20-43c6-9453-fb854cfb6f21", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "b3cd28cd-2a20-4d82-9d72-994309a1c076", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "cdbd411b-913a-4327-b9ae-17f02c2f6e05", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "ae79064e-ff95-4217-a37f-4b6a498c4c3d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "957fc24a-e476-4f02-83b8-d1c8ea7652e3", "solution": "import numpy as np\n\nclass EnhancedHybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.7  # Increased initial inertia for exploration\n        self.cognitive_weight = 1.2  # Reduced cognitive weight\n        self.social_weight = 1.8  # Increased social weight\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            adaptation_factor = 1 - (evaluations / self.budget)  # New adaptation factor\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i] * adaptation_factor\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation and crossover\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.15:  # Increased mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n                if np.random.rand() < 0.1:  # New crossover operation\n                    partner_idx = np.random.randint(0, self.pop_size)\n                    crossover_idx = np.random.randint(0, self.dim)\n                    self.positions[i][:crossover_idx] = self.personal_best_positions[partner_idx][:crossover_idx]\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridEvoSwarmOptimizer", "description": "Enhanced HybridEvoSwarmOptimizer with adaptive parameters for faster convergence by dynamically adjusting weights and introducing crossover.", "configspace": "", "generation": 57, "fitness": 0.2741567120309278, "feedback": "The algorithm EnhancedHybridEvoSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.7105601039483298, 0.6972016467216856, 0.7162715138804729, 0.7234716618600273, 0.7140544734386658, 0.7099144599412832, 0.7252478836529233, 0.7073790712420875, 0.7602415903755477, 0.34891998430744775, 0.42263285122258043, 0.4434418923042698, 0.40216454998472717, 0.44638582466816645, 0.4514387017328819, 0.42592469893530194, 0.3507665061966735, 0.3633862632738739, 0.07017007734025393, 0.14699355261182123, 0.11243181745876374, 0.41486562930101734, 0.14363382077422882, 0.14341336229586654, 0.15836466421310236, 0.14999693524994218, 0.1464890508767105, 0.13061451788336287, 0.11322725676120138, 0.12570795367009757, 0.14543521997675268, 0.1418300886631345, 0.1269852465832828, 0.1551566465245816, 0.1310247433946995, 0.09827233430889681, 0.9860107933390047, 0.9842116903140684, 0.9902360150986518, 0.9809473973882359, 0.9849061854570244, 0.9810412012555778, 0.9842013605779384, 0.9777814291288737, 0.9850914059710953, 0.49287457773837895, 0.38953997974729304, 0.46583549008035374, 0.4406008499210089, 0.46766411003164166, 0.4520985442606831, 0.4190430671426235, 0.42846062922028527, 0.42340936257429485, 0.7566112114510427, 0.2278671316253429, 0.321515640224704, 0.20903204256845154, 0.2702437819999838, 0.20693284729310224, 0.12381091450212411, 0.22322333430396013, 0.4920549897902913, 0.17649434266232744, 0.09286426647779134, 0.10354470497259338, 0.0990684319747801, 0.1276356818400225, 0.1144891226820095, 0.17806957690650793, 0.20864391486987655, 0.19956032624454179, 0.18221130133709074, 0.19460026623318394, 0.19295134812307702, 0.11713480908279217, 0.14572945843224439, 0.20855812369492577, 0.23808819079480792, 0.11553519235682053, 0.11966454635022405, 9.999999999998899e-05, 9.999999999998899e-05, 0.04662633498477786, 0.00911308713079051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000508811888942029, 0.059190691035324594, 0.06217150365279189, 0.07878731114568727, 0.1311210526991885, 0.0005716995482655252, 0.012805701270385383, 0.0367069562183131, 0.04918250086416265, 0.06932543456736584, 0.028890065981236668, 0.02844029568064088, 0.15682102412392762, 0.08105929962302383, 0.06276943247848576, 0.08549950479927027, 0.1152708524468622, 0.05862238170695544, 0.08039265382118843, 0.11673564493306021, 0.0396304416320139, 0.038526094201354444, 0.1120601963027863, 0.10906033680659566, 0.0352212632145813, 0.07403177063724375, 0.07706006260665677, 0.12399519753568689, 0.46832109499337005, 0.48084964835521904, 0.4801761277454061, 0.502185988985561, 0.4874385865245099, 0.4937332331631654, 0.50491411142254, 0.5301203177370184, 0.520271616648539, 0.08447732166000843, 0.06105911899353578, 0.12423759822636826, 0.09653978747488867, 0.10379584733284974, 0.09647514789686429, 0.12601533203582427, 0.1068748757154695, 0.1297951829634969, 0.19111971706696929, 0.2290484339978922, 0.20726214075759297, 0.3940323735656812, 0.3926896852981978, 0.3993071202882357, 0.1994517206493842, 0.1771144316244443, 0.2029033200782664, 0.42956796973730593, 0.3938172563930248, 0.38950106965171793, 0.39148363769930217, 0.21469721098016958, 0.3252372814256196, 0.20761233655486344, 0.4030248889743314, 0.23769957639892458, 0.24310039583470766, 0.18291916195337554, 0.2994534360245156, 0.308345704494146, 0.18101742507890306, 0.18569237759247248, 0.25735498119541544, 0.24288149919705537, 0.211146769733224, 0.2087335450176605, 0.15706201515020035, 0.20042854209936, 0.2093239194507941, 0.19737030413792622, 0.19228032593466204, 0.19907159781856298, 0.21223377628332496, 0.23111701766777837, 0.47520268550307465, 0.22515694225442417, 0.2032797771567656, 0.2116154146987559, 0.21376397999854913, 0.23970082207873344, 0.20077121102901907, 0.1950763193853653, 0.1921005011024668, 0.8003982375526022, 0.12566600380598447, 0.15228697280230863, 0.8202527981584447, 0.8321918065544573, 0.19136572109213335, 0.14126800065999923, 0.19002983439650356, 0.8128369228072381, 0.6819550157050456, 0.20762391311809691, 0.19546608215241845, 0.10481345843654621, 0.16774685224747554, 0.15078491422731222, 0.2051803138646926, 0.6449688316757968, 0.16476364408681765, 0.18538993248618085, 0.19132051958924812, 0.20311428521155317, 0.183565852762837, 0.19706757598402314, 0.17757873439992167, 0.21397565774650829, 0.1913033910742855, 0.19411625266639798, 0.07914968138097356, 0.07354577505876081, 0.0920232455192399, 0.09404409689720672, 0.0927876343595293, 0.08532532752145039, 0.0866613049183439, 0.09895853169297752, 0.09436733202540981]}, "mutation_prompt": null}
{"id": "d6e11c09-3445-4de9-8bd3-4b2da547bdd1", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2c10bd82-5e93-47a3-b405-45cf799239c4", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "eeb25c96-bb0d-4dd9-98ee-973a34d1f227", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "0574f0c8-9e37-45b0-9d00-62e52fb88571", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "9a1c9b2a-3e97-4e86-9af7-063e51b6262a", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "e7e075de-aa11-4806-9db9-e0a4d313c5c3", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "d7bc0db0-73ab-4643-ae06-6c42473eee23", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "7b779e38-21f3-44fd-b50b-d61143c3c100", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "11f3549c-98eb-486c-959b-a03ba8419c2d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "62522192-4bf2-4c77-bd78-ba493112493a", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "39353fbd-3788-40e6-8c19-0b4615727b21", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2aa5efcd-a558-429a-a93e-7eebd61a4512", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "357c677c-9e16-4d5c-8cff-c2767487df58", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "9a55e856-0926-4f8a-9ed2-220a58c363ab", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "edda1885-549a-4198-9e35-63047a6e58ad", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2d451ea7-3da1-422e-96cb-e1a28dcd822d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "511c2533-fe4c-490f-860e-c303fd566cfd", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "d9486510-c441-4815-9f25-d428f4a73984", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "b1147490-179d-4af3-a72a-35c742ba34f3", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "f3d44a92-0c91-4240-987f-c43a7b6329ca", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "57594846-5608-405f-8d14-1ca132fb1d5d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "5a57a7c5-dd92-439e-98da-9b935ef706c6", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "1b2135f8-88d5-4dd8-a0d9-c6c33e778f70", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "2ad3c662-bbc3-4549-89e8-2316ad1125ac", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "45235d57-2eef-4d31-8faf-c18789a34354", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "d05d7a7e-5eb7-4093-8feb-7bfbb426448d", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "6c101bdb-2b21-49b6-a8f2-724c00ce8fce", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "dd5088c7-6483-4cd5-aeee-8abbb6f52c76", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "29ceb0a3-46ff-45df-86de-ab35fc2a7a3c", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "3be3af04-e20f-44d7-9c0a-3e13ec5700ec", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "5767a784-aeeb-4d10-8968-cdd2f554e5c7", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8eadaeb3-8641-49ab-8ac8-83d4dd690358", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "7fbc3aa2-ef89-41b1-908b-39eda64dca5e", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "a7339869-8a1b-48a9-ba57-74feae6dfe7e", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "91e69a2b-9c12-43db-820f-45f3a990ceed", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "8531fb34-2278-400c-8254-40b0dbf12d28", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "6ae84c98-5212-46c8-9bf5-41491698b899", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "a425bb34-f412-41b2-b412-e9ab67a295d4", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "fa9ea2ba-8822-4dd7-8b9e-e0c5309f5c53", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "be78cc32-e30d-4414-a812-637690f486fb", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "71e1feb1-d627-4972-98e3-d6f6191d22ea", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
{"id": "f1f4badf-acd6-424a-bdf8-b0af56118377", "solution": "import numpy as np\n\nclass HybridEvoSwarmOptimizer:\n    def __init__(self, budget, dim, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.lb = -5.0\n        self.ub = 5.0\n        self.positions = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        self.velocities = np.zeros((self.pop_size, self.dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_scores = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n\n    def __call__(self, func):\n        evaluations = 0\n\n        while evaluations < self.budget:\n            # Evaluate fitness for each particle\n            for i in range(self.pop_size):\n                fitness = func(self.positions[i])\n                evaluations += 1\n                if fitness < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                if fitness < self.global_best_score:\n                    self.global_best_score = fitness\n                    self.global_best_position = self.positions[i]\n                if evaluations >= self.budget:\n                    break\n\n            # Update velocities and positions\n            for i in range(self.pop_size):\n                self.velocities[i] = (\n                    self.inertia_weight * self.velocities[i]\n                    + self.cognitive_weight * np.random.rand(self.dim) * (self.personal_best_positions[i] - self.positions[i])\n                    + self.social_weight * np.random.rand(self.dim) * (self.global_best_position - self.positions[i])\n                )\n                self.positions[i] += self.velocities[i]\n                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n            # Perform evolutionary mutation\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Mutation probability\n                    mutation_idx = np.random.randint(0, self.dim)\n                    mutation_step = np.random.normal(0, 0.1)  # Small mutation\n                    self.positions[i][mutation_idx] += mutation_step\n                    self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)\n\n        return self.global_best_position, self.global_best_score", "name": "HybridEvoSwarmOptimizer", "description": "Hybrid Evolutionary and Swarm Optimization algorithm combines evolutionary mutation strategies and swarm intelligent movements for robust exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "592422a0-a5c8-44bc-8dae-3df151ad304c", "metadata": {"aucs": [0.8049703209632788, 0.7298862335029386, 0.7715151151767989, 0.8025358873986195, 0.8288973935084808, 0.8107164032713157, 0.8198140173642344, 0.8205962778840299, 0.8059107438075022, 0.477325482371158, 0.4552923834217055, 0.36213641413143505, 0.37272176792267064, 0.5145686656212389, 0.3006540553345721, 0.511654248232406, 0.3724257974883133, 0.5819009629888392, 0.2655225661914714, 0.14433206676215882, 0.13675049345958956, 0.1410257570940474, 0.11743682341886974, 0.37648579007565197, 0.1040797958677282, 0.11205836349529219, 0.42771620980726144, 0.12570133458282018, 0.132328648344181, 0.12608134719470931, 0.09944345530022125, 0.10967536786005982, 0.14848035309289043, 0.13548617050301492, 0.1473451816580631, 0.1591217277097694, 0.9838958982843427, 0.9771160471957191, 0.9822330535554428, 0.9804016360056461, 0.9820115815969936, 0.973767115387033, 0.9815076287022259, 0.9767773611782464, 0.9807276586148163, 0.49963490947243383, 0.5102510059455804, 0.4706638822836907, 0.48002861522381424, 0.4835315609657622, 0.5746318682805366, 0.5109772702591329, 0.4623906334619776, 0.5053816387054959, 0.33456995674278367, 0.5859343014300579, 0.22899166675773253, 0.28146278153800897, 0.27996313346508883, 0.20708713314130256, 0.8527375275604586, 0.388670948405458, 0.23975863003800202, 0.25864621932647647, 0.12893427703813998, 0.19015356856259802, 0.17693781652481122, 0.12783635010350203, 0.12454009215709883, 0.20407218889411838, 0.16187582712085768, 0.21797829148814618, 0.24522905773106618, 0.20623193866621414, 0.18104431905061225, 0.2128639393778562, 0.19300880478273164, 0.22762419111915555, 0.13365616059790097, 0.09689807550535079, 0.15991453779172027, 0.0569786348863659, 0.02593439131355535, 0.05750660741068547, 0.02639117782683209, 9.999999999998899e-05, 9.999999999998899e-05, 0.011065146234912948, 9.999999999998899e-05, 0.05138428336750589, 0.035851985078089066, 0.07257398398094317, 0.07420832556217372, 0.062470576451226, 9.999999999998899e-05, 0.03244891508249126, 0.03812662219977936, 0.09480024276962162, 0.0365379779582552, 0.06872583124058307, 0.03405450925770326, 0.045558554980636434, 0.07602715324268305, 0.07376026542589986, 0.07420309670093395, 0.09492935645229428, 0.17164890012117973, 0.09646483197753553, 0.12261352141643711, 0.04166585814778534, 0.14094642035226557, 0.02537751738552363, 0.13875270055151845, 0.08239806206310074, 0.2352390421193341, 0.05940151994764187, 0.08194890327023607, 0.5403503799675299, 0.5244430302994562, 0.5178725650104617, 0.5479737656737458, 0.49268166687439785, 0.5644968506962309, 0.5360696470047688, 0.5679383332238696, 0.524133367036944, 0.10668641078751884, 0.08786012624842987, 0.08053878303958484, 0.10422795951947883, 0.13946994181172123, 0.15946308923571506, 0.14245266543227642, 0.10022640276622952, 0.13990444922351475, 0.1849105696469091, 0.4765952460622922, 0.22911337493924766, 0.2802365506084237, 0.2691382257306877, 0.20477997919161495, 0.3106821747799765, 0.3117226175442095, 0.31869144228970026, 0.20253769636647534, 0.3907556629354877, 0.36251482961894976, 0.20915682303504068, 0.2976601514507653, 0.16380381949917122, 0.467582752922837, 0.3726797149482505, 0.4231701018909755, 0.22339791012078591, 0.19494290772714007, 0.3066431423681836, 0.2170304841951184, 0.16007451570338094, 0.22904014948025353, 0.36345673843004733, 0.27873651773464914, 0.3218274444951794, 0.22535427394205576, 0.18173684169634896, 0.1767217692191725, 0.279994123277471, 0.24423013373655578, 0.2437843092872225, 0.22520141175735553, 0.20637213056303894, 0.2140091012834764, 0.19955953158360196, 0.2500607444486238, 0.21961376951717704, 0.20196461250668762, 0.2502624898054684, 0.21627390919924616, 0.18523744059214908, 0.2063346086573531, 0.2073248940138942, 0.9023498562883729, 0.12286630162235346, 0.15429721294430943, 0.9068225942495085, 0.20051899656918581, 0.16933373910171323, 0.8729536891705881, 0.16339152536258916, 0.907731120983503, 0.8841323788778548, 0.21208333005177116, 0.5088163128917214, 0.7520650478831578, 0.16856747603068156, 0.15567174611656864, 0.10470086859301209, 0.10507909674404758, 0.8204172344417474, 0.19285645854438593, 0.1943305422577235, 0.20354164905358518, 0.23554578671825155, 0.2065223286619443, 0.23319167122136408, 0.21523838424463526, 0.23626731670892054, 0.1907069117184269, 0.0997630983454223, 0.09061815452535538, 0.098628096568943, 0.08470510769333228, 0.09506918341569948, 0.10886600948381164, 0.12520100792956634, 0.08543890922552744, 0.0849278829160206]}, "mutation_prompt": null}
