{"id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 0, "fitness": 0.2633496909375232, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "0ebc14e7-3c12-46ab-a66b-c6b25cac6d9f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "c7231a69-b974-4493-ace9-7ddba1c19eea", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "08567a64-f526-4927-a164-81019d480c46", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "8dc660a7-853a-4894-aeb3-d375900752ab", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "767fe6a4-d05a-48ab-9d61-e7a3f8a56636", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n        rand_indices = np.arange(self.population_size)\n\n        while evaluations < self.budget:\n            np.random.shuffle(rand_indices)\n            for i in range(0, self.population_size, 3):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rand_indices[i:i+3]\n                if len(indices) < 3:  # Ensure we have at least 3 indices\n                    continue\n\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[indices[0]])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[indices[0]]:\n                    population[indices[0]] = trial_vector\n                    fitness[indices[0]] = trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized Adaptive Differential Evolution by reducing redundant calculations and restructuring loops for enhanced runtime efficiency.", "configspace": "", "generation": 5, "fitness": 0.18047023560287573, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.406511203406537, 0.39962237535094425, 0.4047859367483848, 0.4192903440022987, 0.39900115945040493, 0.3994855968367308, 0.4034428606393202, 0.38009899846021633, 0.3970305655697348, 0.09929182241230605, 0.12384938100247567, 0.11009684994067825, 0.10971406280219254, 0.1153885601629443, 0.11032962546722358, 0.10477651661641907, 0.09472158840986833, 0.102428758219137, 0.08777921663082033, 0.07976425509711094, 0.09055565625072137, 0.08142202995968306, 0.08232111418811616, 0.06773701542783006, 0.07767036975350605, 0.08478016273056588, 0.08476141344468646, 0.06253073109606522, 0.0653558616422566, 0.0634669934777885, 0.06533333376506978, 0.07126928565013446, 0.06344781962061807, 0.07735049040941977, 0.06417904988719891, 0.07064048170497228, 0.9604468970152562, 0.9592575548537673, 0.8654813609284987, 0.893206470748154, 0.9445644700499676, 0.9254931090435413, 0.9495966017037671, 0.9625144851660615, 0.965514527875959, 0.18899104560462288, 0.17314660446965302, 0.17821321374641597, 0.15521661015548305, 0.15711783931351042, 0.15313786663846962, 0.16624148488037704, 0.17717565574260097, 0.18063742556877782, 0.2362926668135571, 0.22307278843095069, 0.2383353134020444, 0.23786830055041142, 0.2504095151085165, 0.2608353281617306, 0.2414087413034074, 0.2194347717678038, 0.23825238102762902, 0.08624188268152977, 0.09170978176878763, 0.09516908651021949, 0.08931854609743017, 0.08518356108685543, 0.0850168244794437, 0.08727758929722296, 0.08936359637598412, 0.08767996124070154, 0.09932482375934981, 0.09209881714520174, 0.0783882995512758, 0.10000521491834502, 0.08232884505524585, 0.09153979502700715, 0.08374263051210362, 0.0894044494538373, 0.08265830754576997, 0.011455617996100731, 0.016342462128170365, 0.022597038659425528, 0.01334880127826632, 0.018018384068601345, 0.015320600022711739, 0.03848795451060982, 0.046134680741791945, 0.04455419116966752, 0.1307304039631232, 0.1330362581100475, 0.14406173956091428, 0.1369612438868627, 0.11145473075278167, 0.11751331238709484, 0.15516757535191283, 0.15847402724382553, 0.15731565924546975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0937747657471667, 0.08589772105769933, 0.08247797032258963, 0.09678501715953591, 0.08656500476558449, 0.09118015498371534, 0.08112096726381146, 0.09266310400851141, 0.0841391988236283, 0.3504672211261781, 0.35754630927622544, 0.34365473997181584, 0.35043209381981444, 0.35351068610979186, 0.34287291174549084, 0.349699475429319, 0.33810497490380753, 0.3588593401470308, 0.06827298892605016, 0.07072267271526611, 0.07707858379511234, 0.07087227772946336, 0.0693209571935055, 0.07402822672293574, 0.07614409285405432, 0.08175828681110231, 0.07100474948816027, 0.14293274914617105, 0.14354555226578303, 0.13580515219338685, 0.15227323855518993, 0.13723998781543012, 0.15876881074461124, 0.14139484127341806, 0.14287606465864844, 0.156408107618628, 0.19925874592903015, 0.19207236289325047, 0.19709532807850194, 0.20015178196954897, 0.18710012518240515, 0.19464528633952394, 0.1920206171655252, 0.19527497860696386, 0.19389397787664486, 0.13796523917963588, 0.13832325160051773, 0.13794633471887352, 0.14073781536370822, 0.1366209835598633, 0.12749066944416187, 0.14476199028029624, 0.15445167978926133, 0.15382220375699585, 0.17481174220228657, 0.20567056534824302, 0.17750880010617542, 0.1859474438309756, 0.16383005965538855, 0.16530449431137118, 0.22864437049017738, 0.1832151352762007, 0.18145369854551918, 0.1700427303356259, 0.18058230384012786, 0.1691273953285427, 0.1693165934335762, 0.16019461484709496, 0.16015000160805082, 0.17895868433759154, 0.16861081334577155, 0.16751615266504483, 0.1690615061260916, 0.1973993281619788, 0.2637799633234388, 0.19634405953290202, 0.22011545997679538, 0.18270024671400742, 0.21139874618539334, 0.16424559105380798, 0.17874981759390318, 0.19351244434089354, 0.18642123801349275, 0.18902532540602857, 0.14296066088667592, 0.20972801035352595, 0.2064506833770885, 0.20988011605150525, 0.19114170369236105, 0.20033089572689877, 0.18141011361389214, 0.18246981044942956, 0.20313272774844926, 0.17961283299067365, 0.17770721610628737, 0.1854062011668356, 0.18298002404586788, 0.1731133494254975, 0.18618759578632804, 0.060959069052538006, 0.08828516419074517, 0.06284875126610734, 0.06073735193361951, 0.07519740569079081, 0.06326280741402257, 0.07015439341209873, 0.06033439647017602, 0.05938670464090212]}, "mutation_prompt": null}
{"id": "899ef93d-f3d0-4e27-beda-b4f98d131643", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "55b4b908-aa86-42aa-8100-bb42a85def6b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "74a34c79-4b4e-453c-8317-40bdbca8b011", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "19d9bd0e-8d3f-45be-b031-5ba52c9e0827", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "d0312dab-ee07-4195-aa6f-6dcf62d32544", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "c7559a2f-2bcd-4459-94ee-6fbbb3247305", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "8761365e-f660-4b4d-af6b-4cdd75367209", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "74831ff7-f277-4d1a-82fc-f79719c2e386", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial_vector\n                    fitness[i] = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Crossover and Mutation Strategy to explore and exploit search spaces effectively.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.6085051492144853, 0.6162565141798665, 0.6419726723946156, 0.6477860782039992, 0.6570749174967317, 0.6603989636425047, 0.6482058957232064, 0.6642943864896116, 0.6406191879879739, 0.3967970210119639, 0.3966066580148825, 0.41957623713616565, 0.418997132399916, 0.38975116568647494, 0.3494991472477257, 0.3917527025473978, 0.41285722360755706, 0.40922831980065566, 0.08946476887152477, 0.10934328602757781, 0.09402766049079492, 0.08277369343696805, 0.08979954467020557, 0.09324049100182474, 0.09177631224331528, 0.1119129721233183, 0.1005139830999322, 0.087875928785205, 0.08490438557059277, 0.08982772519456195, 0.08281536553662405, 0.08486870008544578, 0.0978483374914475, 0.08752627286148962, 0.09081685118705518, 0.08389526694909577, 0.9518291332223363, 0.9594377194623217, 0.948040739546329, 0.9230756530222763, 0.9782056184055499, 0.939692521209274, 0.9216358770308949, 0.9180377081208175, 0.947772278948537, 0.273803429069872, 0.2987903902860479, 0.29059248890482636, 0.27612679724777944, 0.27583852476446313, 0.27554351781742703, 0.31470550726402946, 0.2830414738733745, 0.29731455841125654, 0.44840824418965053, 0.4248128569449764, 0.5405584425555325, 0.5510617432433971, 0.5213553836771204, 0.5383080885239876, 0.6099985477960679, 0.6094858254097113, 0.48651254729363225, 0.21528901315585025, 0.2083288669724569, 0.18148106807301867, 0.2352063216011523, 0.1427828696007819, 0.21473612867563552, 0.21268113459000082, 0.1889933180683392, 0.17280590913582305, 0.24586394163657832, 0.020465142014785997, 0.1953091605347288, 0.19421800442004056, 0.19725663593751086, 0.192285317724042, 0.17520615311911514, 0.16019948550098617, 0.18612238104401513, 0.12306680557736094, 0.1254040164042577, 0.12276091987170679, 0.14982362507823688, 0.12645252808505048, 0.13710953315315833, 0.11918403924381149, 0.11492647305531623, 0.1382662857164818, 0.2630022185136861, 0.2781848236861689, 0.23437387860087033, 0.22145494718506042, 0.2522788566370253, 0.2731606833628646, 0.26874623883545057, 0.2670563412404695, 0.27945566851414383, 0.017648032426149207, 0.05320880217024171, 0.031173879131299542, 0.033456304643037726, 0.05020906182436724, 0.04456290843734623, 0.03880897299464814, 0.04356810014077417, 0.04706680577365818, 0.1510452189739554, 0.15077125770737243, 0.1450883120394072, 0.16908364218105998, 0.1761795167698459, 0.1645620755427173, 0.15108806188041013, 0.15426941004554906, 0.15856911361899662, 0.4734569121052816, 0.47482904322974084, 0.5007781327407874, 0.4771669508406322, 0.48916159426432937, 0.46707687789402696, 0.48642307522762585, 0.4747520922493773, 0.4764262876339691, 0.08047406847429861, 0.08508328461734493, 0.07079825135106055, 0.09481160157979607, 0.07964006860640382, 0.0846797222462008, 0.0775949942190911, 0.08433511736460475, 0.07793805929608422, 0.1519278721633589, 0.12744105177721998, 0.1814915457071956, 0.18554126733024956, 0.14051714585674058, 0.1385235557216138, 0.24152357802480262, 0.21904581605111628, 0.14017675155314246, 0.27279425599326135, 0.27053542571788347, 0.26693013956554157, 0.2336067783960316, 0.2774704881591946, 0.24667283296446096, 0.27173594987932437, 0.2953694921129346, 0.26338235821755684, 0.19473767269872078, 0.21317921681401608, 0.2049178650214991, 0.20501337371514416, 0.19481216371500532, 0.18986436670739903, 0.21452506517621694, 0.21031777663665485, 0.22652183119788827, 0.16838353882325696, 0.17192344671808846, 0.17502985896743428, 0.1856489512496834, 0.16746920869183846, 0.17917155171849974, 0.1947532708976576, 0.17418866847018422, 0.19427498458427128, 0.18175260802548643, 0.18166347988484988, 0.1911767394878502, 0.17578918787036524, 0.17081322689365663, 0.17683771124874037, 0.1798340340100103, 0.17375805576755987, 0.19433481669396602, 0.29687119999587386, 0.18272769903295505, 0.4649201591779877, 0.18034687444605257, 0.1919630418852727, 0.18506337832333097, 0.1858378495495545, 0.16154166950504456, 0.6348446312710126, 0.6030549787840663, 0.20146238296303076, 0.16046263040898723, 0.3743331617842738, 0.19238062063149253, 0.44310935391100115, 0.20293392812114575, 0.19260042214390571, 0.20613934935288236, 0.1782650809956161, 0.1757711737673171, 0.1846057352913688, 0.19276599508537073, 0.17750743121572665, 0.19096449454982312, 0.1879698192558883, 0.1898101387995822, 0.18843993800478465, 0.06697855271682984, 0.08047115112299219, 0.08559736270231966, 0.06802111336510186, 0.06644174853889451, 0.06737626369645677, 0.07065983986949576, 0.06923743654763548, 0.06955677935269178]}, "mutation_prompt": null}
{"id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 14, "fitness": 0.2686907548130789, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "66143034-14f2-4b24-96ed-cb8e52b349d2", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "b43293a4-f09d-411f-90ac-00d5e9d9a037", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "e619f0a6-f9db-4fb9-96e8-2523282b12b6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "f303f676-3c3c-4c19-b9c8-fcb5a2213fd2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "b07c6347-b186-40f6-b206-ef93c46fe6ac", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "100654e7-16a9-436a-ac98-b03e9f52fa48", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "1b868f81-934c-4dc7-bc39-0bcd52066eba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "fa075019-bd7f-43d0-9305-45a7892fc0b9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "3a6943ec-2ec4-4970-9305-eda423805e3c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "147a6637-9535-4ad1-9513-ff132ddf9344", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "f6a452e9-ce5d-4920-a975-457366f483a1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "4fd8fcdc-f733-4e28-b8ef-a3ef7425a05c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "52a9d56d-bd2b-413a-8e6f-3560cc3aaac4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "d3a77f31-4a88-4ed4-b8ff-ce1e593926da", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "d576a0e0-b44f-4f5e-9f5c-f30cf0f2fd08", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "084ae35c-ec3b-4793-ae4e-f3534173b9d7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "2c0de42a-b9e7-4146-ac9c-2f937105dc7f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "55e9e0df-ac3b-4535-b7cc-87562995140a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "c9fc7cc7-e9c6-4182-9748-fb06480eccd8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "549644cb-aebd-49eb-b687-6215cf2935de", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "2b9e3939-aded-4a61-a7ae-20480940d4f2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "0d46b046-3819-4c8e-80b6-766207c86ead", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "4e671de1-9df7-438e-986f-b342354d8a95", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "24f771b5-07cf-45f3-b9fd-282c2cab0d90", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "3b6ff42d-e8bd-4f1e-89cb-b38dc2f8d2c5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "026a7ef0-3317-4e14-96f3-7f7e5bf1c5ba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "60db3257-155c-479c-9780-8ab686e22f87", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution by optimizing loop and memory usage for enhanced runtime efficiency.", "configspace": "", "generation": 15, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.5892084043014195, 0.6097997257441372, 0.6165272411503306, 0.5886208511590271, 0.6492085492874379, 0.6442353864788753, 0.6152634713973371, 0.6366536915408885, 0.6585680689442877, 0.3993207208254942, 0.37018920347525697, 0.4104340990747646, 0.36549058410304347, 0.38640809421601463, 0.41005834972379107, 0.39061656362925545, 0.3674675472193426, 0.41020816785873826, 0.09497978373465443, 0.09016100418154349, 0.09440800150344275, 0.09892853594782158, 0.10443392117438266, 0.09639673029200257, 0.08890640543821504, 0.11649315653010694, 0.09166094929741886, 0.08171138599201844, 0.0890621553160923, 0.10234995949549541, 0.0788936854400144, 0.09105179172739686, 0.08633229833095302, 0.08418951538005981, 0.08507118581234518, 0.0765114128546367, 0.960080792560194, 0.9709408841300696, 0.9586790231827037, 0.9625788767650716, 0.9698404264207222, 0.927270062101466, 0.9112831196074005, 0.9290813167298603, 0.9387153637339608, 0.2942197732865084, 0.31036839796055404, 0.2923190006053269, 0.2878536433097214, 0.27970903572160266, 0.27694323323069425, 0.3004398774594088, 0.2872828959211484, 0.30521839685195107, 0.5033216436690787, 0.49260281941035067, 0.5701032940417927, 0.5496079202171987, 0.5523653040522405, 0.5503600840152074, 0.5505729092313327, 0.528025795490805, 0.6143230587145309, 0.20155486644749898, 0.2126985899919439, 0.1880352882436117, 0.21776101444672336, 0.23247954822117978, 0.23745179812979522, 0.2092783972211315, 0.20069670534593975, 0.18639364850803508, 0.1751774915698836, 0.26745815512970217, 0.13122274423403524, 0.1836671205186059, 0.1727626653603055, 0.17132190390164848, 0.1914885357004178, 0.2028257970140891, 0.15183982371107707, 0.12246899697623481, 0.10084670449617572, 0.12939441743022617, 0.12081061844949892, 0.1489573892102779, 0.16516681949859047, 0.10871965361673941, 0.09592757297291987, 0.09786778275298835, 0.2325994086830141, 0.24762310878375615, 0.2685253219840301, 0.24885645199427597, 0.23743686077523785, 0.23393341785529387, 0.3298846748820743, 0.2935408504484506, 0.28142100322217833, 0.023749617100741305, 0.025956113416488513, 0.019139904212560732, 0.018652910834949576, 0.03683822807369075, 0.05803279966335373, 0.05164387593463904, 0.04548182596512884, 0.04323122895222953, 0.16317822095820134, 0.14817844389073798, 0.1454631528601219, 0.167904535774822, 0.16252765502600564, 0.16204825432383096, 0.1456695842298934, 0.16690290591621582, 0.15847705796512945, 0.4922101567350391, 0.506468008105063, 0.48768491575474304, 0.4804843539939605, 0.46939153092313013, 0.47029941623794536, 0.4824274946370364, 0.5026325838631815, 0.4986303915221808, 0.09918738735297661, 0.0850187849779015, 0.08664219358550129, 0.0892511412003485, 0.08849011284333719, 0.08385414382843026, 0.07883102962336219, 0.07687173468024688, 0.08290485334964814, 0.13934588361179945, 0.15164566947149682, 0.1861848326034783, 0.15118114849822162, 0.1330330173071137, 0.15157663495104812, 0.16225214986151004, 0.14275597084922698, 0.15360658215886125, 0.2867683618298945, 0.2597177488167155, 0.2931903624801152, 0.2767269746483636, 0.2660512346439037, 0.26580096107638473, 0.27507386658226574, 0.29425930467406636, 0.2871912881480745, 0.20553436080780707, 0.1905945737604271, 0.20678432162629123, 0.19426809132861478, 0.20710563770085078, 0.18773780335387136, 0.19554267053642627, 0.20756092609160437, 0.2264430576770966, 0.21029621342542648, 0.17473819839299864, 0.18860097172329537, 0.16837400563277838, 0.2144379362918818, 0.17503518911921545, 0.1899427264397795, 0.20669355061778039, 0.202782136614453, 0.17383093712638042, 0.17653158606173203, 0.18478990053125066, 0.18094688494705846, 0.17361310563522525, 0.1752608614127732, 0.18018961787359933, 0.17423841254184314, 0.18372398478084517, 0.46686417798590096, 0.6148896916893161, 0.536986498824795, 0.17184731252643126, 0.5515704782376529, 0.4476102686102037, 0.1713045779437401, 0.17553348990008455, 0.5677917718637087, 0.2012896489610786, 0.6381972566424932, 0.1630993357982512, 0.2757717839697168, 0.1835354344558625, 0.19338632276941004, 0.20695842214342153, 0.1482179062033505, 0.20014045489676013, 0.20767175694075968, 0.20779447243932891, 0.18287596624350455, 0.18924292041072555, 0.1731118769934552, 0.17790907561344482, 0.17261654345260158, 0.19214214832045695, 0.21759323097670502, 0.07365312111985145, 0.07133578479827851, 0.0751869818319526, 0.06966035006539828, 0.06999998098262405, 0.06821402200964088, 0.06881295657116226, 0.058596493905493485, 0.06745162622433931]}, "mutation_prompt": null}
{"id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 41, "fitness": 0.2690391190725712, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "65e7bbc2-7768-46ee-a786-eaf98ac79e88", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "d5cab431-6d28-42c2-a138-5dd125bc5b0c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "337c04e7-3f3c-4efb-beb0-660492a9033b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "ffc56606-4966-4731-b5c1-447bb0302a4f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "d6ee4d85-8075-4e94-9e6c-044cac4cb368", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "36838d82-b708-4717-bab1-e700ba88cc5c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "d75f4174-7859-4d7e-9c8d-eb38715b7c21", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "584b3335-c1ac-4aca-8256-aaa05d16e9c3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "6ae6a3ce-e821-45ec-a4a0-7dbfc0828dc2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "2436e234-ebd4-4046-8fb1-e63aee989c2b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "87dc3d4c-dda3-41a7-ac39-db5602b87ae7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "f759e6cb-74fb-478f-a2b6-66d1b4998a3f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "a09251ed-5434-4704-82aa-3888039e9268", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "53bdb326-3a6a-43d6-9cbf-422250bcce10", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "335913c7-2eb5-4fa3-a752-d65646387480", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "6ed49db4-c71b-4e63-b1a3-815466ce3880", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "e5c4dc41-5436-4570-829f-0037c50673e9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "25f61a1e-a2c0-463d-a97e-033fa487e766", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "1d033dfb-609e-47a0-97f1-12b4bef46f45", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "484c5df4-c796-4959-9810-b2c03b65aaaf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "b5c98a6f-39db-44d0-bc4f-8e5486465d20", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "566b8b1d-dfbc-4c7a-9fa2-a8614957978a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "9d848c05-4277-4859-9f45-fe61d3138a04", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "a7ca3625-632b-4cbb-8cb5-e7a08160a1e6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "7c7e69c0-265f-401a-ade9-426bfa31c73d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "132c01f6-5840-4f6e-8acd-59d9868be629", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "97b2b18b-07e5-4ce8-990c-8d814861720a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "7a42ab7e-1e13-4bf3-9702-ce1f4d26c9af", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "2187d2b0-6c19-48f3-9f5e-10ac65f4e2f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "371aa001-99e1-4f25-9d85-b7015aa34539", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "89ecf294-8c6e-455c-acf0-b1a0650b0fd3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "ffcc5f48-14be-4061-bfb5-14bda5439bd1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "47f96bdd-d282-4514-b308-983e4696453a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "862818b7-d5c1-42a2-8996-451ee51b10e3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "f3a1040f-1081-4ef2-9aaf-2cc0a8c2b528", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "d3671758-4573-44a8-9d44-e26405347853", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "6152e1d8-11b8-4403-9f4b-e7694b159a74", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "fbfb6479-3f36-4773-ba42-d9fd51ab2726", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "240c56a4-13a4-4085-846f-3954adf1af0a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "61668cc2-4a79-4b19-a2bb-9ff0657d0a2c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "a9be7cb2-3bce-43e3-9f8d-55aed1352638", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()\n        population = rng.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(self.population_size - 1, 3, replace=False)\n                indices[indices >= i] += 1  # Adjust indices to exclude 'i'\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced runtime efficiency of Adaptive Differential Evolution by optimizing population initialization and reducing redundant computations.", "configspace": "", "generation": 81, "fitness": 0.267093759580106, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6297922520868198, 0.6481786408025845, 0.5997203551799142, 0.6583664643494832, 0.6394575357397599, 0.6599516369686779, 0.6151034217869765, 0.6232606180788305, 0.6264368149169155, 0.42255977506543907, 0.40340640385739424, 0.379917181759003, 0.37207150291349966, 0.41611458459567985, 0.3535417699346993, 0.38179266022008473, 0.39332897200329253, 0.3773595969160245, 0.09006384141168378, 0.09188785567927227, 0.10231276081180696, 0.11935422108950022, 0.09195907943691894, 0.094929269876316, 0.0901486929761266, 0.0926992019060684, 0.09641197447621164, 0.08804798967757999, 0.09276644915650267, 0.0871151477925638, 0.09639165791673276, 0.08990867690930882, 0.08581906681902018, 0.08642035210114118, 0.08851772222390386, 0.0955455465504148, 0.8851623146373314, 0.9608099797860888, 0.9403672502429778, 0.9238208937378389, 0.9388034000962618, 0.9855649420692455, 0.9327534300161152, 0.9459994574012764, 0.9718662218185684, 0.29802006795638813, 0.2757380411283634, 0.2605684022019378, 0.2697178356505371, 0.27758510358523814, 0.2725012203712317, 0.3224345469727977, 0.2930495395107521, 0.3197045078760089, 0.4218939138420179, 0.43545666864145927, 0.4861942774071809, 0.5532845567705469, 0.4809828792145614, 0.49281807084908424, 0.5351363767832051, 0.5173123274254472, 0.5056428487479152, 0.1840546863785879, 0.2379030496262916, 0.1941010635917696, 0.16994765234353004, 0.2133005043678774, 0.19899592067579974, 0.21710438994473868, 0.19018229506648487, 0.22212630057050164, 0.027452964769768773, 0.051791497073842785, 0.2711419484415649, 0.1482039621831558, 0.20160529637479974, 0.1861507169499168, 0.16891801687880048, 0.18660351123080698, 0.19375800007244348, 0.11406262973892367, 0.12445122186485247, 0.08935870923517308, 0.14746011116057067, 0.1439634797903172, 0.16728861628357972, 0.1464148218875405, 0.10925751759168467, 0.11798375633487779, 0.24232961212477888, 0.2566364389691368, 0.24227173660969703, 0.2338133582959243, 0.256486491922993, 0.22421330005841023, 0.2783173022517419, 0.28947884793169354, 0.2850711602816538, 0.03752946910489863, 0.023776221773935124, 0.033869968184601196, 0.030180582895528052, 0.01915570325238025, 0.032450338193086514, 0.041323440938158984, 0.05399585637782034, 0.028988193121935013, 0.1597159026223599, 0.15733008826359218, 0.15541783843975232, 0.1503879535930841, 0.1737119775964855, 0.1767558159717928, 0.1746965663725687, 0.15705896100865724, 0.1514601147180603, 0.4635909681270931, 0.5033242874325352, 0.4768048483389741, 0.5008404959512112, 0.4943146666978818, 0.47876310439986525, 0.4936319499975854, 0.5006517951703748, 0.5106403938451531, 0.09358836895951661, 0.07020576983146898, 0.09183395023566532, 0.09210133384343533, 0.07820382663156722, 0.09994332578994103, 0.10188357054208774, 0.07882480821758675, 0.08427271036683137, 0.27706666332872787, 0.14268100032325548, 0.14576310380397772, 0.1715792554573089, 0.14015141162638933, 0.13658785445997468, 0.14719827429896015, 0.13533393399872895, 0.15026403254390774, 0.24184283460686917, 0.27374713056605593, 0.2818466149005713, 0.2734243022323458, 0.24635862271886344, 0.259161781491863, 0.2908778966166806, 0.2809950201374083, 0.2783865065519733, 0.2296316035951167, 0.23496456331864302, 0.20913435178498796, 0.19535165786026087, 0.2134522299142455, 0.20713821373161423, 0.21748529913766734, 0.20740262557927802, 0.2348029279299334, 0.20023265211043995, 0.17074241589303496, 0.1800979008803959, 0.18646674599614022, 0.1756984027027494, 0.17662607402466923, 0.19828074882362867, 0.18024495265301155, 0.1924822654289401, 0.1696785813403907, 0.175076654113843, 0.1798506515287046, 0.17100056340083725, 0.18700982509112996, 0.18824004658220228, 0.18797986450810622, 0.179770818698044, 0.18089461083052882, 0.14858048103771848, 0.34420520540913035, 0.5645859098805142, 0.16999245612861447, 0.46765337685184905, 0.16130405063293496, 0.3163783983408375, 0.18029022636020586, 0.557954675014725, 0.5936032160685507, 0.16150236081714486, 0.5073015709002284, 0.39157491279754464, 0.17980350907269038, 0.3814167957202875, 0.2074776944356188, 0.7208861390650577, 0.20841975390307066, 0.17537085802945784, 0.1902120583643636, 0.1821556131847052, 0.17864994050710759, 0.16973870635794697, 0.19247875355275224, 0.1827420617453307, 0.17750841641648463, 0.18335990907953792, 0.0688803505556218, 0.05945563501331941, 0.06513352830289765, 0.06632364075823005, 0.08154677976236269, 0.05767055067719562, 0.06845710690582418, 0.06805027937919217, 0.07130883674320976]}, "mutation_prompt": null}
{"id": "a9257fea-f2a3-4faf-9617-49e566b2a7d3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "4ba08ba7-d220-4509-99cd-87f4ba629988", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "bad67c9c-0b6f-489c-a28e-c24ecd6f56bd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "7104f62f-6572-41df-ba13-cf2288f8f039", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "377b99f3-c95f-4364-85ef-b9b67aeb5ae2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "14c3b341-f068-4c77-8d38-e6ee8f99a13f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "281a0126-5db6-47b5-bb03-792783419392", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "78a823cb-6ec9-4a72-9a36-dca4255ac400", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "de07d457-f1bb-404a-9a9d-2ed7ac10f6e9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "5beac28b-06b2-46c0-ad1f-a3982c84eb51", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "6f8533f7-ae15-4b66-a976-7345665a3ef8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "46bfad08-6973-4d8d-a3ce-ab97fbf947fe", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "9b7c2ccc-7ec1-48a8-a067-469e754ab455", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "6829cf39-be89-472b-b701-7b3ab6b14364", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "8d41dbdb-1334-4f15-8618-f1a2ca761b00", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "53c4ad9e-cdb6-46c5-a507-c46851d2d4ea", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "d1917c99-217e-4c2d-b48d-57a428e87e6d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
{"id": "53cc30ac-cd33-4dca-9ba6-6e89cd974424", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.F = 0.8  # Mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        rng = np.random.default_rng()  # Use default_rng for better performance\n        population = self.lower_bound + rng.random((self.population_size, self.dim)) * (self.upper_bound - self.lower_bound)\n        fitness = np.zeros(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = rng.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = population[indices]\n                \n                mutant_vector = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                crossover_mask = rng.random(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, population[i])\n                \n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i], fitness[i] = trial_vector, trial_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index], fitness[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution by optimizing memory usage and loop efficiency for better runtime performance.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f5fbb825-47ef-4ada-b5d0-7bc8329d8f5c", "metadata": {"aucs": [0.6161995487677419, 0.6217368095211238, 0.6285322557869844, 0.630399135628714, 0.6494100717573338, 0.6482920374718419, 0.6463173208440864, 0.6435104933194502, 0.6162467724271684, 0.4062531464400636, 0.39682421456154915, 0.41246015849070905, 0.3582060423415059, 0.40170907179925164, 0.3919020304332038, 0.3892544152920544, 0.4212763807120752, 0.3519479583089449, 0.09835196907971733, 0.0948262302725501, 0.08285945895789915, 0.09987549992473921, 0.10235073716490495, 0.10241596378881246, 0.09945068602411589, 0.10846144662232438, 0.10362006465492102, 0.08818610592238985, 0.09211849422516116, 0.07943334505020028, 0.09106520446082889, 0.10049718381950135, 0.0940119735488546, 0.09181191600815186, 0.09492123146539366, 0.0785104179174001, 0.9199084787048026, 0.9209826694466452, 0.9623036647760279, 0.9080293541088846, 0.9942058507087156, 0.9447922983214686, 0.9126219969502837, 0.9614981115000802, 0.943056687366562, 0.27701360436100797, 0.2776089098789275, 0.2964371546117427, 0.27178675359316296, 0.2778190546738527, 0.27463497220886834, 0.27387651398356216, 0.28958418127475116, 0.2843248923953011, 0.527265638728349, 0.5055380859372947, 0.4950497307556183, 0.5997730693394001, 0.5236664843504137, 0.5476744146826223, 0.5557422299149797, 0.5539783686222151, 0.4902751532276476, 0.22059949831593917, 0.19475059774284487, 0.16305052852691793, 0.17276293288526345, 0.17355841254350868, 0.23502352185154074, 0.18469898839773946, 0.20364900714330292, 0.18532055650437118, 0.21101980662516484, 0.28477377071426113, 0.1674061553416899, 0.18916015133211062, 0.20295762131205597, 0.18701434892670665, 0.19958888437726396, 0.18413534955208566, 0.19340446796915423, 0.1500923104751437, 0.11458994666557376, 0.130133195462924, 0.09100431494488403, 0.10088799621573252, 0.10980769355007125, 0.15761115447162355, 0.14388723857724905, 0.14517897595751206, 0.2743056810917932, 0.23193161118227867, 0.27287243097409386, 0.29191931712149366, 0.2593228869281493, 0.21276779538120416, 0.24112343644950684, 0.28519146059143863, 0.25176944789393485, 0.02817557144406635, 0.028984203148836207, 0.03151905516847331, 0.026757853688243127, 0.05918739243055626, 0.02834477987583539, 0.044875185069400914, 0.04434401045924974, 0.04805127513770635, 0.1724178407782121, 0.14835120518318057, 0.15257417446279709, 0.17752715988283685, 0.15632450617093363, 0.1641494648385804, 0.1652487057271077, 0.15082650835597455, 0.17933602000548798, 0.4797175201028584, 0.4784847104509653, 0.4929163221037878, 0.5020056495713024, 0.5033024207511635, 0.4963451419659958, 0.4645443124563494, 0.49182535906810587, 0.4819488209051622, 0.07898219778472249, 0.0807532388918204, 0.09064227077787856, 0.08696949996392345, 0.09410620384594826, 0.09279816389642004, 0.08143734725485918, 0.0856808989712512, 0.0861769454120429, 0.14619305940026373, 0.2228240988673953, 0.18383916969670655, 0.18592469922986588, 0.17723949842776543, 0.16213787839372218, 0.13194727301417697, 0.16952199234966137, 0.15884474010978067, 0.27561247545132994, 0.2870459537362222, 0.2754749707788663, 0.26110800445233995, 0.25885605015545043, 0.2562071923745157, 0.28721546033515577, 0.28967866090662664, 0.29682707621165516, 0.21405429504781515, 0.2142424269216069, 0.18666466430503892, 0.19779383926402294, 0.1956425792082832, 0.20550957778378698, 0.21011649151995182, 0.21294081499666695, 0.22040070314520643, 0.18798579339400068, 0.1876736089813924, 0.18582588502422703, 0.18434148087480273, 0.1890078581971305, 0.1638721445035406, 0.17399503365974034, 0.1855856124241977, 0.1769403535936821, 0.17504208131243126, 0.18146501785775515, 0.18176483200793525, 0.19758076791565338, 0.1679853680968446, 0.1852202390517379, 0.17432738749572874, 0.18077872944873052, 0.1749697278419955, 0.17451928615475332, 0.1611136927763941, 0.5346391271405998, 0.36671424841486033, 0.3724449933959679, 0.17399738481167293, 0.33705262777681033, 0.3757480627738192, 0.5754379766799829, 0.5060071216013575, 0.1653064724267157, 0.2004529547223084, 0.18778777290483817, 0.3471547815130407, 0.4827141358116407, 0.20216656523910337, 0.6156408489823029, 0.19526257150576176, 0.17331291270253935, 0.1881037146101725, 0.18242679656832061, 0.1745713777418818, 0.19592232278500343, 0.18370785156980962, 0.1897451463144465, 0.1800813886420829, 0.18387117958885957, 0.07447322417481372, 0.07301284263400609, 0.06610442671240546, 0.0717661728985235, 0.06586769534580073, 0.0728053649887892, 0.07380220274170224, 0.06700535029513632, 0.0678860097303412]}, "mutation_prompt": null}
