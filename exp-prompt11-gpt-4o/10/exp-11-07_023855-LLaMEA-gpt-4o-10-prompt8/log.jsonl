{"id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Hybrid swarm-based and evolutionary strategy algorithm using dynamic learning and adaptive mutation for diverse exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.16702674312786078, "feedback": "The algorithm HybridSwarmEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.37570342948557334, 0.37570342948557334, 0.37570342948557334, 0.1702910564101816, 0.1702910564101816, 0.1702910564101816, 0.20684616929855704, 0.20684616929855704, 0.20684616929855704, 0.02112591279199516, 0.02112591279199516, 0.02112591279199516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001239333287933575, 0.001239333287933575, 0.001239333287933575, 0.060816642355265516, 0.060816642355265516, 0.060816642355265516, 0.05912433069360268, 0.05912433069360268, 0.05912433069360268, 0.08708166789027982, 0.08708166789027982, 0.08708166789027982, 0.03983997306088172, 0.03983997306088172, 0.03983997306088172, 0.04139428520014865, 0.04139428520014865, 0.04139428520014865, 0.09844388250650193, 0.09844388250650193, 0.09844388250650193, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.104182605255011, 0.104182605255011, 0.104182605255011, 0.27010686889339497, 0.27010686889339497, 0.27010686889339497, 0.08489652556577043, 0.08489652556577043, 0.08489652556577043, 0.3359554942797027, 0.3359554942797027, 0.3359554942797027, 0.15894253141207648, 0.15894253141207648, 0.15894253141207648, 0.11435214726627185, 0.11435214726627185, 0.11435214726627185, 0.09067639902433033, 0.09067639902433033, 0.09067639902433033, 0.1082010643264506, 0.1082010643264506, 0.1082010643264506, 0.14348217002073693, 0.14348217002073693, 0.14348217002073693, 0.10401254346715072, 0.10401254346715072, 0.10401254346715072, 0.17136517834243736, 0.17136517834243736, 0.17136517834243736, 0.04270444051440503, 0.04270444051440503, 0.04270444051440503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038624471341579425, 0.038624471341579425, 0.038624471341579425, 0.01659551405455073, 0.01659551405455073, 0.01659551405455073, 0.080070271684484, 0.080070271684484, 0.080070271684484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07520033701026785, 0.07520033701026785, 0.07520033701026785, 0.008029789731918702, 0.008029789731918702, 0.008029789731918702, 0.06925275879779913, 0.06925275879779913, 0.06925275879779913, 0.27917672276156436, 0.27917672276156436, 0.27917672276156436, 0.21231293735295909, 0.21231293735295909, 0.21231293735295909, 0.3713196308280744, 0.3713196308280744, 0.3713196308280744, 0.08722343679462796, 0.08722343679462796, 0.08722343679462796, 0.08847011890763223, 0.08847011890763223, 0.08847011890763223, 0.07700893144643817, 0.07700893144643817, 0.07700893144643817, 0.22005378948748489, 0.22005378948748489, 0.22005378948748489, 0.15695249276824652, 0.15695249276824652, 0.15695249276824652, 0.18362376603003017, 0.18362376603003017, 0.18362376603003017, 0.219098213050558, 0.219098213050558, 0.219098213050558, 0.2792335852661735, 0.2792335852661735, 0.2792335852661735, 0.26240907864632734, 0.26240907864632734, 0.26240907864632734, 0.12733988951101982, 0.12733988951101982, 0.12733988951101982, 0.15128621524961494, 0.15128621524961494, 0.15128621524961494, 0.21572951964866838, 0.21572951964866838, 0.21572951964866838, 0.19887932227733174, 0.19887932227733174, 0.19887932227733174, 0.18037576999520644, 0.18037576999520644, 0.18037576999520644, 0.17711513336536466, 0.17711513336536466, 0.17711513336536466, 0.19485392333491858, 0.19485392333491858, 0.19485392333491858, 0.20952796905022197, 0.20952796905022197, 0.20952796905022197, 0.19736921954998665, 0.19736921954998665, 0.19736921954998665, 0.24981229477988987, 0.24981229477988987, 0.24981229477988987, 0.15550854619928178, 0.15550854619928178, 0.15550854619928178, 0.16875050492396804, 0.16875050492396804, 0.16875050492396804, 0.16493488391988376, 0.16493488391988376, 0.16493488391988376, 0.18458780876015046, 0.18458780876015046, 0.18458780876015046, 0.1619286117065052, 0.1619286117065052, 0.1619286117065052, 0.17151760449328524, 0.17151760449328524, 0.17151760449328524, 0.18330209913085105, 0.18330209913085105, 0.18330209913085105, 0.18861636300643736, 0.18861636300643736, 0.18861636300643736, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.052885763406881225, 0.052885763406881225, 0.052885763406881225, 0.0646320545508664, 0.0646320545508664, 0.0646320545508664]}, "mutation_prompt": null}
{"id": "07bdbd84-69ac-412c-9297-57d23187e807", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Hybrid swarm-based and evolutionary strategy algorithm using dynamic learning and adaptive mutation for diverse exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.37570342948557334, 0.37570342948557334, 0.37570342948557334, 0.1702910564101816, 0.1702910564101816, 0.1702910564101816, 0.20684616929855704, 0.20684616929855704, 0.20684616929855704, 0.02112591279199516, 0.02112591279199516, 0.02112591279199516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001239333287933575, 0.001239333287933575, 0.001239333287933575, 0.060816642355265516, 0.060816642355265516, 0.060816642355265516, 0.05912433069360268, 0.05912433069360268, 0.05912433069360268, 0.08708166789027982, 0.08708166789027982, 0.08708166789027982, 0.03983997306088172, 0.03983997306088172, 0.03983997306088172, 0.04139428520014865, 0.04139428520014865, 0.04139428520014865, 0.09844388250650193, 0.09844388250650193, 0.09844388250650193, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.104182605255011, 0.104182605255011, 0.104182605255011, 0.27010686889339497, 0.27010686889339497, 0.27010686889339497, 0.08489652556577043, 0.08489652556577043, 0.08489652556577043, 0.3359554942797027, 0.3359554942797027, 0.3359554942797027, 0.15894253141207648, 0.15894253141207648, 0.15894253141207648, 0.11435214726627185, 0.11435214726627185, 0.11435214726627185, 0.09067639902433033, 0.09067639902433033, 0.09067639902433033, 0.1082010643264506, 0.1082010643264506, 0.1082010643264506, 0.14348217002073693, 0.14348217002073693, 0.14348217002073693, 0.10401254346715072, 0.10401254346715072, 0.10401254346715072, 0.17136517834243736, 0.17136517834243736, 0.17136517834243736, 0.04270444051440503, 0.04270444051440503, 0.04270444051440503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038624471341579425, 0.038624471341579425, 0.038624471341579425, 0.01659551405455073, 0.01659551405455073, 0.01659551405455073, 0.080070271684484, 0.080070271684484, 0.080070271684484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07520033701026785, 0.07520033701026785, 0.07520033701026785, 0.008029789731918702, 0.008029789731918702, 0.008029789731918702, 0.06925275879779913, 0.06925275879779913, 0.06925275879779913, 0.27917672276156436, 0.27917672276156436, 0.27917672276156436, 0.21231293735295909, 0.21231293735295909, 0.21231293735295909, 0.3713196308280744, 0.3713196308280744, 0.3713196308280744, 0.08722343679462796, 0.08722343679462796, 0.08722343679462796, 0.08847011890763223, 0.08847011890763223, 0.08847011890763223, 0.07700893144643817, 0.07700893144643817, 0.07700893144643817, 0.22005378948748489, 0.22005378948748489, 0.22005378948748489, 0.15695249276824652, 0.15695249276824652, 0.15695249276824652, 0.18362376603003017, 0.18362376603003017, 0.18362376603003017, 0.219098213050558, 0.219098213050558, 0.219098213050558, 0.2792335852661735, 0.2792335852661735, 0.2792335852661735, 0.26240907864632734, 0.26240907864632734, 0.26240907864632734, 0.12733988951101982, 0.12733988951101982, 0.12733988951101982, 0.15128621524961494, 0.15128621524961494, 0.15128621524961494, 0.21572951964866838, 0.21572951964866838, 0.21572951964866838, 0.19887932227733174, 0.19887932227733174, 0.19887932227733174, 0.18037576999520644, 0.18037576999520644, 0.18037576999520644, 0.17711513336536466, 0.17711513336536466, 0.17711513336536466, 0.19485392333491858, 0.19485392333491858, 0.19485392333491858, 0.20952796905022197, 0.20952796905022197, 0.20952796905022197, 0.19736921954998665, 0.19736921954998665, 0.19736921954998665, 0.24981229477988987, 0.24981229477988987, 0.24981229477988987, 0.15550854619928178, 0.15550854619928178, 0.15550854619928178, 0.16875050492396804, 0.16875050492396804, 0.16875050492396804, 0.16493488391988376, 0.16493488391988376, 0.16493488391988376, 0.18458780876015046, 0.18458780876015046, 0.18458780876015046, 0.1619286117065052, 0.1619286117065052, 0.1619286117065052, 0.17151760449328524, 0.17151760449328524, 0.17151760449328524, 0.18330209913085105, 0.18330209913085105, 0.18330209913085105, 0.18861636300643736, 0.18861636300643736, 0.18861636300643736, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.052885763406881225, 0.052885763406881225, 0.052885763406881225, 0.0646320545508664, 0.0646320545508664, 0.0646320545508664]}, "mutation_prompt": null}
{"id": "7cef5506-51f0-4f0b-b9a1-7fb562b57e82", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Hybrid swarm-based and evolutionary strategy algorithm using dynamic learning and adaptive mutation for diverse exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.37570342948557334, 0.37570342948557334, 0.37570342948557334, 0.1702910564101816, 0.1702910564101816, 0.1702910564101816, 0.20684616929855704, 0.20684616929855704, 0.20684616929855704, 0.02112591279199516, 0.02112591279199516, 0.02112591279199516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001239333287933575, 0.001239333287933575, 0.001239333287933575, 0.060816642355265516, 0.060816642355265516, 0.060816642355265516, 0.05912433069360268, 0.05912433069360268, 0.05912433069360268, 0.08708166789027982, 0.08708166789027982, 0.08708166789027982, 0.03983997306088172, 0.03983997306088172, 0.03983997306088172, 0.04139428520014865, 0.04139428520014865, 0.04139428520014865, 0.09844388250650193, 0.09844388250650193, 0.09844388250650193, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.104182605255011, 0.104182605255011, 0.104182605255011, 0.27010686889339497, 0.27010686889339497, 0.27010686889339497, 0.08489652556577043, 0.08489652556577043, 0.08489652556577043, 0.3359554942797027, 0.3359554942797027, 0.3359554942797027, 0.15894253141207648, 0.15894253141207648, 0.15894253141207648, 0.11435214726627185, 0.11435214726627185, 0.11435214726627185, 0.09067639902433033, 0.09067639902433033, 0.09067639902433033, 0.1082010643264506, 0.1082010643264506, 0.1082010643264506, 0.14348217002073693, 0.14348217002073693, 0.14348217002073693, 0.10401254346715072, 0.10401254346715072, 0.10401254346715072, 0.17136517834243736, 0.17136517834243736, 0.17136517834243736, 0.04270444051440503, 0.04270444051440503, 0.04270444051440503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038624471341579425, 0.038624471341579425, 0.038624471341579425, 0.01659551405455073, 0.01659551405455073, 0.01659551405455073, 0.080070271684484, 0.080070271684484, 0.080070271684484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07520033701026785, 0.07520033701026785, 0.07520033701026785, 0.008029789731918702, 0.008029789731918702, 0.008029789731918702, 0.06925275879779913, 0.06925275879779913, 0.06925275879779913, 0.27917672276156436, 0.27917672276156436, 0.27917672276156436, 0.21231293735295909, 0.21231293735295909, 0.21231293735295909, 0.3713196308280744, 0.3713196308280744, 0.3713196308280744, 0.08722343679462796, 0.08722343679462796, 0.08722343679462796, 0.08847011890763223, 0.08847011890763223, 0.08847011890763223, 0.07700893144643817, 0.07700893144643817, 0.07700893144643817, 0.22005378948748489, 0.22005378948748489, 0.22005378948748489, 0.15695249276824652, 0.15695249276824652, 0.15695249276824652, 0.18362376603003017, 0.18362376603003017, 0.18362376603003017, 0.219098213050558, 0.219098213050558, 0.219098213050558, 0.2792335852661735, 0.2792335852661735, 0.2792335852661735, 0.26240907864632734, 0.26240907864632734, 0.26240907864632734, 0.12733988951101982, 0.12733988951101982, 0.12733988951101982, 0.15128621524961494, 0.15128621524961494, 0.15128621524961494, 0.21572951964866838, 0.21572951964866838, 0.21572951964866838, 0.19887932227733174, 0.19887932227733174, 0.19887932227733174, 0.18037576999520644, 0.18037576999520644, 0.18037576999520644, 0.17711513336536466, 0.17711513336536466, 0.17711513336536466, 0.19485392333491858, 0.19485392333491858, 0.19485392333491858, 0.20952796905022197, 0.20952796905022197, 0.20952796905022197, 0.19736921954998665, 0.19736921954998665, 0.19736921954998665, 0.24981229477988987, 0.24981229477988987, 0.24981229477988987, 0.15550854619928178, 0.15550854619928178, 0.15550854619928178, 0.16875050492396804, 0.16875050492396804, 0.16875050492396804, 0.16493488391988376, 0.16493488391988376, 0.16493488391988376, 0.18458780876015046, 0.18458780876015046, 0.18458780876015046, 0.1619286117065052, 0.1619286117065052, 0.1619286117065052, 0.17151760449328524, 0.17151760449328524, 0.17151760449328524, 0.18330209913085105, 0.18330209913085105, 0.18330209913085105, 0.18861636300643736, 0.18861636300643736, 0.18861636300643736, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.052885763406881225, 0.052885763406881225, 0.052885763406881225, 0.0646320545508664, 0.0646320545508664, 0.0646320545508664]}, "mutation_prompt": null}
{"id": "8a304d23-0844-4031-b7a6-31e334b39a17", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Hybrid swarm-based and evolutionary strategy algorithm using dynamic learning and adaptive mutation for diverse exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.37570342948557334, 0.37570342948557334, 0.37570342948557334, 0.1702910564101816, 0.1702910564101816, 0.1702910564101816, 0.20684616929855704, 0.20684616929855704, 0.20684616929855704, 0.02112591279199516, 0.02112591279199516, 0.02112591279199516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001239333287933575, 0.001239333287933575, 0.001239333287933575, 0.060816642355265516, 0.060816642355265516, 0.060816642355265516, 0.05912433069360268, 0.05912433069360268, 0.05912433069360268, 0.08708166789027982, 0.08708166789027982, 0.08708166789027982, 0.03983997306088172, 0.03983997306088172, 0.03983997306088172, 0.04139428520014865, 0.04139428520014865, 0.04139428520014865, 0.09844388250650193, 0.09844388250650193, 0.09844388250650193, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.104182605255011, 0.104182605255011, 0.104182605255011, 0.27010686889339497, 0.27010686889339497, 0.27010686889339497, 0.08489652556577043, 0.08489652556577043, 0.08489652556577043, 0.3359554942797027, 0.3359554942797027, 0.3359554942797027, 0.15894253141207648, 0.15894253141207648, 0.15894253141207648, 0.11435214726627185, 0.11435214726627185, 0.11435214726627185, 0.09067639902433033, 0.09067639902433033, 0.09067639902433033, 0.1082010643264506, 0.1082010643264506, 0.1082010643264506, 0.14348217002073693, 0.14348217002073693, 0.14348217002073693, 0.10401254346715072, 0.10401254346715072, 0.10401254346715072, 0.17136517834243736, 0.17136517834243736, 0.17136517834243736, 0.04270444051440503, 0.04270444051440503, 0.04270444051440503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038624471341579425, 0.038624471341579425, 0.038624471341579425, 0.01659551405455073, 0.01659551405455073, 0.01659551405455073, 0.080070271684484, 0.080070271684484, 0.080070271684484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07520033701026785, 0.07520033701026785, 0.07520033701026785, 0.008029789731918702, 0.008029789731918702, 0.008029789731918702, 0.06925275879779913, 0.06925275879779913, 0.06925275879779913, 0.27917672276156436, 0.27917672276156436, 0.27917672276156436, 0.21231293735295909, 0.21231293735295909, 0.21231293735295909, 0.3713196308280744, 0.3713196308280744, 0.3713196308280744, 0.08722343679462796, 0.08722343679462796, 0.08722343679462796, 0.08847011890763223, 0.08847011890763223, 0.08847011890763223, 0.07700893144643817, 0.07700893144643817, 0.07700893144643817, 0.22005378948748489, 0.22005378948748489, 0.22005378948748489, 0.15695249276824652, 0.15695249276824652, 0.15695249276824652, 0.18362376603003017, 0.18362376603003017, 0.18362376603003017, 0.219098213050558, 0.219098213050558, 0.219098213050558, 0.2792335852661735, 0.2792335852661735, 0.2792335852661735, 0.26240907864632734, 0.26240907864632734, 0.26240907864632734, 0.12733988951101982, 0.12733988951101982, 0.12733988951101982, 0.15128621524961494, 0.15128621524961494, 0.15128621524961494, 0.21572951964866838, 0.21572951964866838, 0.21572951964866838, 0.19887932227733174, 0.19887932227733174, 0.19887932227733174, 0.18037576999520644, 0.18037576999520644, 0.18037576999520644, 0.17711513336536466, 0.17711513336536466, 0.17711513336536466, 0.19485392333491858, 0.19485392333491858, 0.19485392333491858, 0.20952796905022197, 0.20952796905022197, 0.20952796905022197, 0.19736921954998665, 0.19736921954998665, 0.19736921954998665, 0.24981229477988987, 0.24981229477988987, 0.24981229477988987, 0.15550854619928178, 0.15550854619928178, 0.15550854619928178, 0.16875050492396804, 0.16875050492396804, 0.16875050492396804, 0.16493488391988376, 0.16493488391988376, 0.16493488391988376, 0.18458780876015046, 0.18458780876015046, 0.18458780876015046, 0.1619286117065052, 0.1619286117065052, 0.1619286117065052, 0.17151760449328524, 0.17151760449328524, 0.17151760449328524, 0.18330209913085105, 0.18330209913085105, 0.18330209913085105, 0.18861636300643736, 0.18861636300643736, 0.18861636300643736, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.052885763406881225, 0.052885763406881225, 0.052885763406881225, 0.0646320545508664, 0.0646320545508664, 0.0646320545508664]}, "mutation_prompt": null}
{"id": "85dab42e-1807-4006-902c-b3a44ffde979", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Hybrid swarm-based and evolutionary strategy algorithm using dynamic learning and adaptive mutation for diverse exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.37570342948557334, 0.37570342948557334, 0.37570342948557334, 0.1702910564101816, 0.1702910564101816, 0.1702910564101816, 0.20684616929855704, 0.20684616929855704, 0.20684616929855704, 0.02112591279199516, 0.02112591279199516, 0.02112591279199516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001239333287933575, 0.001239333287933575, 0.001239333287933575, 0.060816642355265516, 0.060816642355265516, 0.060816642355265516, 0.05912433069360268, 0.05912433069360268, 0.05912433069360268, 0.08708166789027982, 0.08708166789027982, 0.08708166789027982, 0.03983997306088172, 0.03983997306088172, 0.03983997306088172, 0.04139428520014865, 0.04139428520014865, 0.04139428520014865, 0.09844388250650193, 0.09844388250650193, 0.09844388250650193, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.104182605255011, 0.104182605255011, 0.104182605255011, 0.27010686889339497, 0.27010686889339497, 0.27010686889339497, 0.08489652556577043, 0.08489652556577043, 0.08489652556577043, 0.3359554942797027, 0.3359554942797027, 0.3359554942797027, 0.15894253141207648, 0.15894253141207648, 0.15894253141207648, 0.11435214726627185, 0.11435214726627185, 0.11435214726627185, 0.09067639902433033, 0.09067639902433033, 0.09067639902433033, 0.1082010643264506, 0.1082010643264506, 0.1082010643264506, 0.14348217002073693, 0.14348217002073693, 0.14348217002073693, 0.10401254346715072, 0.10401254346715072, 0.10401254346715072, 0.17136517834243736, 0.17136517834243736, 0.17136517834243736, 0.04270444051440503, 0.04270444051440503, 0.04270444051440503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038624471341579425, 0.038624471341579425, 0.038624471341579425, 0.01659551405455073, 0.01659551405455073, 0.01659551405455073, 0.080070271684484, 0.080070271684484, 0.080070271684484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07520033701026785, 0.07520033701026785, 0.07520033701026785, 0.008029789731918702, 0.008029789731918702, 0.008029789731918702, 0.06925275879779913, 0.06925275879779913, 0.06925275879779913, 0.27917672276156436, 0.27917672276156436, 0.27917672276156436, 0.21231293735295909, 0.21231293735295909, 0.21231293735295909, 0.3713196308280744, 0.3713196308280744, 0.3713196308280744, 0.08722343679462796, 0.08722343679462796, 0.08722343679462796, 0.08847011890763223, 0.08847011890763223, 0.08847011890763223, 0.07700893144643817, 0.07700893144643817, 0.07700893144643817, 0.22005378948748489, 0.22005378948748489, 0.22005378948748489, 0.15695249276824652, 0.15695249276824652, 0.15695249276824652, 0.18362376603003017, 0.18362376603003017, 0.18362376603003017, 0.219098213050558, 0.219098213050558, 0.219098213050558, 0.2792335852661735, 0.2792335852661735, 0.2792335852661735, 0.26240907864632734, 0.26240907864632734, 0.26240907864632734, 0.12733988951101982, 0.12733988951101982, 0.12733988951101982, 0.15128621524961494, 0.15128621524961494, 0.15128621524961494, 0.21572951964866838, 0.21572951964866838, 0.21572951964866838, 0.19887932227733174, 0.19887932227733174, 0.19887932227733174, 0.18037576999520644, 0.18037576999520644, 0.18037576999520644, 0.17711513336536466, 0.17711513336536466, 0.17711513336536466, 0.19485392333491858, 0.19485392333491858, 0.19485392333491858, 0.20952796905022197, 0.20952796905022197, 0.20952796905022197, 0.19736921954998665, 0.19736921954998665, 0.19736921954998665, 0.24981229477988987, 0.24981229477988987, 0.24981229477988987, 0.15550854619928178, 0.15550854619928178, 0.15550854619928178, 0.16875050492396804, 0.16875050492396804, 0.16875050492396804, 0.16493488391988376, 0.16493488391988376, 0.16493488391988376, 0.18458780876015046, 0.18458780876015046, 0.18458780876015046, 0.1619286117065052, 0.1619286117065052, 0.1619286117065052, 0.17151760449328524, 0.17151760449328524, 0.17151760449328524, 0.18330209913085105, 0.18330209913085105, 0.18330209913085105, 0.18861636300643736, 0.18861636300643736, 0.18861636300643736, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.052885763406881225, 0.052885763406881225, 0.052885763406881225, 0.0646320545508664, 0.0646320545508664, 0.0646320545508664]}, "mutation_prompt": null}
{"id": "20b24bfa-4b20-4669-bc3b-91866518cc30", "solution": "import numpy as np\n\nclass HybridSwarmEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            population += velocities\n            population = np.clip(population, self.bounds[0], self.bounds[1])\n            \n            mutation_mask = np.random.rand(self.pop_size, self.dim) < self.mutation_prob\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim)) * mutation_mask\n            population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            mask = scores < personal_best_scores\n            personal_best_scores[mask] = scores[mask]\n            personal_best[mask] = population[mask]\n            \n            if scores.min() < global_best_score:\n                global_best_score = scores.min()\n                global_best = population[np.argmin(scores)]\n        \n        return global_best", "name": "HybridSwarmEvolution", "description": "Optimized swarm-evolution algorithm with reduced velocity updates and efficient mutation handling for faster convergence.", "configspace": "", "generation": 5, "fitness": 0.1662791860458491, "feedback": "The algorithm HybridSwarmEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.31166942630063377, 0.31166942630063377, 0.31166942630063377, 0.16800925658099863, 0.16800925658099863, 0.16800925658099863, 0.20684615552446128, 0.20684615552446128, 0.20684615552446128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019474567528353193, 0.019474567528353193, 0.019474567528353193, 0.023601269449056383, 0.023601269449056383, 0.023601269449056383, 0.06510570572097785, 0.06510570572097785, 0.06510570572097785, 0.06189190398338651, 0.06189190398338651, 0.06189190398338651, 0.07080778489809003, 0.07080778489809003, 0.07080778489809003, 0.10752950595029342, 0.10752950595029342, 0.10752950595029342, 0.04561353880231378, 0.04561353880231378, 0.04561353880231378, 0.059275814427797724, 0.059275814427797724, 0.059275814427797724, 0.9856598634259147, 0.9856598634259147, 0.9856598634259147, 0.9857368091565037, 0.9857368091565037, 0.9857368091565037, 0.9819069350585665, 0.9819069350585665, 0.9819069350585665, 0.10510516049838148, 0.10510516049838148, 0.10510516049838148, 0.14903286071942823, 0.14903286071942823, 0.14903286071942823, 0.08474269341013208, 0.08474269341013208, 0.08474269341013208, 0.22923180637723717, 0.22923180637723717, 0.22923180637723717, 0.15928558209506116, 0.15928558209506116, 0.15928558209506116, 0.11592773955346036, 0.11592773955346036, 0.11592773955346036, 0.10828191104382989, 0.10828191104382989, 0.10828191104382989, 0.1472261547853263, 0.1472261547853263, 0.1472261547853263, 0.13980761592175017, 0.13980761592175017, 0.13980761592175017, 0.12066811697049051, 0.12066811697049051, 0.12066811697049051, 0.1682858490448247, 0.1682858490448247, 0.1682858490448247, 0.026917375980322178, 0.026917375980322178, 0.026917375980322178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002265018032733268, 0.0002265018032733268, 0.0002265018032733268, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09260976187512227, 0.09260976187512227, 0.09260976187512227, 0.0053677179179081325, 0.0053677179179081325, 0.0053677179179081325, 0.09231895434014026, 0.09231895434014026, 0.09231895434014026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13422047266640313, 0.13422047266640313, 0.13422047266640313, 0.02856408038279079, 0.02856408038279079, 0.02856408038279079, 0.05856797013171944, 0.05856797013171944, 0.05856797013171944, 0.3897715837283253, 0.3897715837283253, 0.3897715837283253, 0.21231293177497323, 0.21231293177497323, 0.21231293177497323, 0.38179700542375505, 0.38179700542375505, 0.38179700542375505, 0.08614202938867854, 0.08614202938867854, 0.08614202938867854, 0.07269915776460989, 0.07269915776460989, 0.07269915776460989, 0.07524157519418118, 0.07524157519418118, 0.07524157519418118, 0.15245398078866457, 0.15245398078866457, 0.15245398078866457, 0.16416096602080343, 0.16416096602080343, 0.16416096602080343, 0.2562220448954713, 0.2562220448954713, 0.2562220448954713, 0.23390732055254404, 0.23390732055254404, 0.23390732055254404, 0.18598823255506503, 0.18598823255506503, 0.18598823255506503, 0.2715985415038267, 0.2715985415038267, 0.2715985415038267, 0.19903005353668335, 0.19903005353668335, 0.19903005353668335, 0.1585831332625055, 0.1585831332625055, 0.1585831332625055, 0.09957829382233341, 0.09957829382233341, 0.09957829382233341, 0.19889787825266203, 0.19889787825266203, 0.19889787825266203, 0.16311115843035384, 0.16311115843035384, 0.16311115843035384, 0.17673672551933195, 0.17673672551933195, 0.17673672551933195, 0.18644270567504617, 0.18644270567504617, 0.18644270567504617, 0.19594175116082035, 0.19594175116082035, 0.19594175116082035, 0.19922383962535983, 0.19922383962535983, 0.19922383962535983, 0.24982184587463763, 0.24982184587463763, 0.24982184587463763, 0.15632595341027022, 0.15632595341027022, 0.15632595341027022, 0.16937274651551582, 0.16937274651551582, 0.16937274651551582, 0.1617818445474768, 0.1617818445474768, 0.1617818445474768, 0.20594455704943582, 0.20594455704943582, 0.20594455704943582, 0.1364391921587942, 0.1364391921587942, 0.1364391921587942, 0.19843537162361713, 0.19843537162361713, 0.19843537162361713, 0.17941483865618524, 0.17941483865618524, 0.17941483865618524, 0.1954185150257859, 0.1954185150257859, 0.1954185150257859, 0.05779367028732263, 0.05779367028732263, 0.05779367028732263, 0.08116375659707742, 0.08116375659707742, 0.08116375659707742, 0.060231332354072964, 0.060231332354072964, 0.060231332354072964]}, "mutation_prompt": null}
{"id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                np.add(population, mutation, out=population)\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n        \n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Enhanced hybrid swarm-based and evolutionary strategy algorithm with efficient vectorized operations and reduced redundancy for better runtime performance.", "configspace": "", "generation": 6, "fitness": 0.20671422725894187, "feedback": "The algorithm HybridSwarmEvolutionOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "5f31464b-fb71-4a3a-a755-1a429b74bc9e", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "3ce4aa6a-81d7-4574-b6da-09e010c2548b", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                np.add(population, mutation, out=population)\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n        \n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Enhanced hybrid swarm-based and evolutionary strategy algorithm with efficient vectorized operations and reduced redundancy for better runtime performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "df1f4537-e6f3-4081-8187-37b9ac9d4623", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                np.add(population, mutation, out=population)\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n        \n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Enhanced hybrid swarm-based and evolutionary strategy algorithm with efficient vectorized operations and reduced redundancy for better runtime performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "175dec07-ca79-4668-8c33-5f264db1d465", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                np.add(population, mutation, out=population)\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n        \n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Enhanced hybrid swarm-based and evolutionary strategy algorithm with efficient vectorized operations and reduced redundancy for better runtime performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "e485be96-34dd-46a2-bd59-10a1d9d5dbd9", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            velocities = (self.inertia_weight * velocities \n                          + self.cognitive_coef * r1 * (personal_best - population) \n                          + self.social_coef * r2 * (global_best - population))\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                np.add(population, mutation, out=population)\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n        \n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Enhanced hybrid swarm-based and evolutionary strategy algorithm with efficient vectorized operations and reduced redundancy for better runtime performance.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "c1879358-00f5-4067-ba14-a528468392d7", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 11, "fitness": 0.23277172342486552, "feedback": "The algorithm HybridSwarmEvolutionOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "2aee04e3-3e62-481c-bcbe-064fdcaddd97", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "e18c92b0-0f5b-44f4-bab9-ba529c38cd74", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "f029278a-4a3e-4c43-a018-5e577b078e53", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "b1e9e25a-d714-4c1e-9637-944466e6b949", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5c715b5f-c45f-45a5-8e36-facf155ee8dd", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "89c4cb43-9fb7-4965-977c-92bb69702970", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "c1a514c4-3259-421f-bd0f-469e5ffc2f8f", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "73687653-3fa9-4758-897c-d9ea209810e8", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "471bb5b2-9bf3-44e3-ac8b-1b551d09c99f", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5123876f-172b-4509-b19e-5daf6dbab3ab", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "20cdc613-c417-4f8b-b3ba-537fc27d609d", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "279740cf-545d-4448-82e0-1bb3980ab3ec", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5c79d80f-b5fc-456f-8024-b13924331fe8", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "bd68c20c-00d5-41ad-be21-5aa548e9e513", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "9136a9a7-70a4-4e43-80a5-90ebf54cea94", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "17febb2b-a804-4193-83aa-85abd0aff4de", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5b3b4940-380e-429e-9a09-4cf4673e8bfb", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "2b294826-aa7d-454a-88d3-43c377b1be28", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "d523527f-3af6-4682-9cc3-e81d0454abad", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "8cd0d62e-cd65-4298-a280-fddf204060fa", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "393e6344-36ec-4391-9516-a598fe173301", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "9c779fe9-9ffc-40f7-9f9f-3843d61348a5", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "f4e6bd7d-565c-40ec-8b17-60010d2a821e", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "62cb5a11-b23f-43e0-abbc-2c6b02673931", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "4560e77d-f18e-486a-86e2-3a533e9da3ac", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "c97111cb-3460-4ad5-8634-d1b479312cc8", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "cb1fb416-1e70-4a9d-bcc5-45dd3cb511e2", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "16147ada-734f-4194-9c70-138083d18952", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "e8bd1a69-a885-4f73-a3da-884b7d39a3b2", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "bdaba743-b894-47b4-8682-61ac61e65281", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "a6761e9b-519d-422a-ae8d-e75edd8a29f8", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "20f3682a-5019-40b6-8917-ae721cc29c33", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5cef1973-eb58-47b8-9a23-cbd901ccfce7", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "54057f99-9c62-40ec-a979-e1b378170d64", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "e7a2c5db-a7ba-4f10-b7b3-22c4697684f6", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "efa29138-1e18-4046-beca-70ce7326758d", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "eda5a419-dc74-4113-9d3f-421f1eef6ac5", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "d7b076eb-c596-4443-9bbc-f6365a85ea46", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "a0905831-b533-4205-9480-ec3beffdc91d", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "1923ca85-a7e7-4ffe-b877-1200473c664c", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "c1becbf9-6b31-4031-bb84-9c48c3c66e1c", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "8bb2a2c4-9618-48ab-99eb-f8fa54d175fe", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "13ff28fd-27fe-473a-b1cd-7fd169c2dc08", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "4cf2b63b-00ed-4bc3-a2e8-80e8a2025465", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "8a865eae-0415-41c2-918a-dc121990cb70", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "37dae96c-0aae-4774-a6c3-f1ce977c43fd", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "69a9a211-8c19-43ec-9d11-0d87640f717f", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "bacd385b-4281-4de6-9f72-08c65e3d01e7", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "69df88e5-6504-4cde-9946-8c961695eaca", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "307184e0-d548-49b7-94d1-1e4b93fa7847", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "713d9d23-db10-4213-9046-be96b1ea89e2", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "5c708eff-816e-4ec5-b88b-8ef175e94ecc", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "a2646f09-dd26-48e6-b403-cb5f080ebefe", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "99fec256-fa81-435e-bc6e-db73fb3d1502", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "947af361-a905-446b-b1b2-eddf5ba8f570", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "a5ac91fe-6175-4894-b811-fd67cd9c1fea", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "d91efd6d-79ca-4201-8271-845cebd5c300", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "b1d3c6dc-e8c3-4ab0-aed6-ce760afa7d20", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "d044bdaa-d389-4afd-8b0e-27fe3940307d", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best = population[np.argmin(personal_best_scores)]\n        global_best_score = personal_best_scores.min()\n        \n        evaluations = self.pop_size\n        mutation_mask = np.random.rand(self.pop_size) < self.mutation_prob\n        \n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            np.multiply(self.inertia_weight, velocities, out=velocities)\n            np.add(velocities, self.cognitive_coef * r1 * (personal_best - population), out=velocities)\n            np.add(velocities, self.social_coef * r2 * (global_best - population), out=velocities)\n            np.add(population, velocities, out=population)\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if mutation_mask.any():\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population[mutation_mask] += mutation[mutation_mask]\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            np.copyto(personal_best_scores, scores, where=improved)\n            np.copyto(personal_best, population, where=improved[:, np.newaxis])\n            \n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimized", "description": "Optimized particle swarm and evolutionary strategy algorithm with efficient array operations and reduced mutation checks for enhanced runtime performance.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5975319828147525, 0.5975319828147525, 0.5975319828147525, 0.6468288329955759, 0.6468288329955759, 0.6468288329955759, 0.5821807236677621, 0.5821807236677621, 0.5821807236677621, 0.17974188954181058, 0.17974188954181058, 0.17974188954181058, 0.04721549089175514, 0.04721549089175514, 0.04721549089175514, 0.014430299808832703, 0.014430299808832703, 0.014430299808832703, 0.1321986987050926, 0.1321986987050926, 0.1321986987050926, 0.12637277403045277, 0.12637277403045277, 0.12637277403045277, 0.173840945154343, 0.173840945154343, 0.173840945154343, 0.08332337822773883, 0.08332337822773883, 0.08332337822773883, 0.11206631502067776, 0.11206631502067776, 0.11206631502067776, 0.1178991156602015, 0.1178991156602015, 0.1178991156602015, 0.9868637969434353, 0.9868637969434353, 0.9868637969434353, 0.9846851504328866, 0.9846851504328866, 0.9846851504328866, 0.9857575239756279, 0.9857575239756279, 0.9857575239756279, 0.33766216611333766, 0.33766216611333766, 0.33766216611333766, 0.17851044183395204, 0.17851044183395204, 0.17851044183395204, 0.29447566134603953, 0.29447566134603953, 0.29447566134603953, 0.2141558026873397, 0.2141558026873397, 0.2141558026873397, 0.5311999582359548, 0.5311999582359548, 0.5311999582359548, 0.14886126417584333, 0.14886126417584333, 0.14886126417584333, 0.1585592003683023, 0.1585592003683023, 0.1585592003683023, 0.1384013320989228, 0.1384013320989228, 0.1384013320989228, 0.1656596831354744, 0.1656596831354744, 0.1656596831354744, 0.18655556213083313, 0.18655556213083313, 0.18655556213083313, 0.09125852287775127, 0.09125852287775127, 0.09125852287775127, 0.11281416146861134, 0.11281416146861134, 0.11281416146861134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06114339988142181, 0.06114339988142181, 0.06114339988142181, 0.0670499736672251, 0.0670499736672251, 0.0670499736672251, 0.059418600380520714, 0.059418600380520714, 0.059418600380520714, 0.02555109471238215, 0.02555109471238215, 0.02555109471238215, 0.0513049926442547, 0.0513049926442547, 0.0513049926442547, 0.03810947460297609, 0.03810947460297609, 0.03810947460297609, 0.2071148827774535, 0.2071148827774535, 0.2071148827774535, 0.06967069504559675, 0.06967069504559675, 0.06967069504559675, 0.07435038985512488, 0.07435038985512488, 0.07435038985512488, 0.435917534817578, 0.435917534817578, 0.435917534817578, 0.4151014457309886, 0.4151014457309886, 0.4151014457309886, 0.3982894371611485, 0.3982894371611485, 0.3982894371611485, 0.09576623910370619, 0.09576623910370619, 0.09576623910370619, 0.09190476117942692, 0.09190476117942692, 0.09190476117942692, 0.10525976603500398, 0.10525976603500398, 0.10525976603500398, 0.2356237228991468, 0.2356237228991468, 0.2356237228991468, 0.18450801501880865, 0.18450801501880865, 0.18450801501880865, 0.15703770503395498, 0.15703770503395498, 0.15703770503395498, 0.32511184861080233, 0.32511184861080233, 0.32511184861080233, 0.21131909149553496, 0.21131909149553496, 0.21131909149553496, 0.2782586414373449, 0.2782586414373449, 0.2782586414373449, 0.13878743529765247, 0.13878743529765247, 0.13878743529765247, 0.2704862598615927, 0.2704862598615927, 0.2704862598615927, 0.13566018239401034, 0.13566018239401034, 0.13566018239401034, 0.19181999352612433, 0.19181999352612433, 0.19181999352612433, 0.20366622608370344, 0.20366622608370344, 0.20366622608370344, 0.2379891793097103, 0.2379891793097103, 0.2379891793097103, 0.20973632379423046, 0.20973632379423046, 0.20973632379423046, 0.22100355055780307, 0.22100355055780307, 0.22100355055780307, 0.1896098645840576, 0.1896098645840576, 0.1896098645840576, 0.7680664450928749, 0.7680664450928749, 0.7680664450928749, 0.6759124757568113, 0.6759124757568113, 0.6759124757568113, 0.17013527904957337, 0.17013527904957337, 0.17013527904957337, 0.16381344736142878, 0.16381344736142878, 0.16381344736142878, 0.20924780155768152, 0.20924780155768152, 0.20924780155768152, 0.15496597627542175, 0.15496597627542175, 0.15496597627542175, 0.19360938166355468, 0.19360938166355468, 0.19360938166355468, 0.17780805688945145, 0.17780805688945145, 0.17780805688945145, 0.22404471056329034, 0.22404471056329034, 0.22404471056329034, 0.08718248554621277, 0.08718248554621277, 0.08718248554621277, 0.08688954182511677, 0.08688954182511677, 0.08688954182511677, 0.131967083166309, 0.131967083166309, 0.131967083166309]}, "mutation_prompt": null}
{"id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 70, "fitness": 0.2486318275687521, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "c1879358-00f5-4067-ba14-a528468392d7", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "d13202ef-ca81-48a3-b377-2ae0bb69dd6b", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.apply_along_axis(func, 1, population)\n        global_best_idx = personal_best_scores.argmin()\n        global_best = personal_best[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n\n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            \n            # Update velocity and position\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coef * r1 * (personal_best - population) +\n                          self.social_coef * r2 * (global_best - population))\n            population += velocities\n            np.clip(population, *self.bounds, out=population)\n\n            # Apply mutation with vectorized operation\n            mutation_mask = np.random.rand(self.pop_size, self.dim) < self.mutation_prob\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n            population += mutation_mask * mutation\n            \n            # Evaluate population\n            scores = np.apply_along_axis(func, 1, population)\n            evaluations += self.pop_size\n\n            # Update personal bests\n            improved = scores < personal_best_scores\n            personal_best_scores = np.where(improved, scores, personal_best_scores)\n            personal_best[improved] = population[improved]\n\n            # Update global best\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Improved hybrid swarm evolution with efficient memory operations and streamlined particle updates for reduced computation.", "configspace": "", "generation": 71, "fitness": 0.20074429417861617, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.410398184783745, 0.410398184783745, 0.410398184783745, 0.44116711969262057, 0.44116711969262057, 0.44116711969262057, 0.4274100406625898, 0.4274100406625898, 0.4274100406625898, 0.03656327600291931, 0.03656327600291931, 0.03656327600291931, 0.027344227557924428, 0.027344227557924428, 0.027344227557924428, 0.03504042181728295, 0.03504042181728295, 0.03504042181728295, 0.10579901422988425, 0.10579901422988425, 0.10579901422988425, 0.09015724385221857, 0.09015724385221857, 0.09015724385221857, 0.1203973972346194, 0.1203973972346194, 0.1203973972346194, 0.09803024670502725, 0.09803024670502725, 0.09803024670502725, 0.10522186181175619, 0.10522186181175619, 0.10522186181175619, 0.06783084438975906, 0.06783084438975906, 0.06783084438975906, 0.9856598634259147, 0.9856598634259147, 0.9856598634259147, 0.9857368091565037, 0.9857368091565037, 0.9857368091565037, 0.9819069350585665, 0.9819069350585665, 0.9819069350585665, 0.24056098886617683, 0.24056098886617683, 0.24056098886617683, 0.2380635296360456, 0.2380635296360456, 0.2380635296360456, 0.267655794550817, 0.267655794550817, 0.267655794550817, 0.2643081773366017, 0.2643081773366017, 0.2643081773366017, 0.2989946101676897, 0.2989946101676897, 0.2989946101676897, 0.16105875015731852, 0.16105875015731852, 0.16105875015731852, 0.15831203502492586, 0.15831203502492586, 0.15831203502492586, 0.14366982701750897, 0.14366982701750897, 0.14366982701750897, 0.18156178495766773, 0.18156178495766773, 0.18156178495766773, 0.13844101430344002, 0.13844101430344002, 0.13844101430344002, 0.13312311199431637, 0.13312311199431637, 0.13312311199431637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1261538047068832, 0.1261538047068832, 0.1261538047068832, 0.048851147261972594, 0.048851147261972594, 0.048851147261972594, 0.0471947465579875, 0.0471947465579875, 0.0471947465579875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11362410650728638, 0.11362410650728638, 0.11362410650728638, 0.03561726575426405, 0.03561726575426405, 0.03561726575426405, 0.06460688462005404, 0.06460688462005404, 0.06460688462005404, 0.40260704472372577, 0.40260704472372577, 0.40260704472372577, 0.3883949349701483, 0.3883949349701483, 0.3883949349701483, 0.4114987131866592, 0.4114987131866592, 0.4114987131866592, 0.1262095525923651, 0.1262095525923651, 0.1262095525923651, 0.11007605105610296, 0.11007605105610296, 0.11007605105610296, 0.10029611654784054, 0.10029611654784054, 0.10029611654784054, 0.1782168610351701, 0.1782168610351701, 0.1782168610351701, 0.17862225445922109, 0.17862225445922109, 0.17862225445922109, 0.21713286920097297, 0.21713286920097297, 0.21713286920097297, 0.2591296387891574, 0.2591296387891574, 0.2591296387891574, 0.19220309709079375, 0.19220309709079375, 0.19220309709079375, 0.2724018274022775, 0.2724018274022775, 0.2724018274022775, 0.17078662490190122, 0.17078662490190122, 0.17078662490190122, 0.18125107986419464, 0.18125107986419464, 0.18125107986419464, 0.19161682760984544, 0.19161682760984544, 0.19161682760984544, 0.18939919549494344, 0.18939919549494344, 0.18939919549494344, 0.20769726703445124, 0.20769726703445124, 0.20769726703445124, 0.1953016520682841, 0.1953016520682841, 0.1953016520682841, 0.23541801215580038, 0.23541801215580038, 0.23541801215580038, 0.2004210360673967, 0.2004210360673967, 0.2004210360673967, 0.1924802831035397, 0.1924802831035397, 0.1924802831035397, 0.6104328500267036, 0.6104328500267036, 0.6104328500267036, 0.15844872125606269, 0.15844872125606269, 0.15844872125606269, 0.1694463256720986, 0.1694463256720986, 0.1694463256720986, 0.1675751276397145, 0.1675751276397145, 0.1675751276397145, 0.20241770679810323, 0.20241770679810323, 0.20241770679810323, 0.15473319956235632, 0.15473319956235632, 0.15473319956235632, 0.17508694228140098, 0.17508694228140098, 0.17508694228140098, 0.18957552391802057, 0.18957552391802057, 0.18957552391802057, 0.18249661793820937, 0.18249661793820937, 0.18249661793820937, 0.0731448905692823, 0.0731448905692823, 0.0731448905692823, 0.09705919140921393, 0.09705919140921393, 0.09705919140921393, 0.09085007863212036, 0.09085007863212036, 0.09085007863212036]}, "mutation_prompt": null}
{"id": "e1f69351-a8a0-41e0-9650-77ebee236852", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "f5868000-866c-458f-ad4b-407638c81b53", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.apply_along_axis(func, 1, population)\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx].copy()\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coef * r1 * (personal_best - population) +\n                          self.social_coef * r2 * (global_best - population))\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n\n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.apply_along_axis(func, 1, population)\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx].copy()\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized hybrid swarm evolution algorithm with streamlined velocity updates and enhanced memory management for improved runtime efficiency.", "configspace": "", "generation": 73, "fitness": 0.22036979344569885, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5724419972247194, 0.5724419972247194, 0.5724419972247194, 0.5236857593952575, 0.5236857593952575, 0.5236857593952575, 0.578914608168051, 0.578914608168051, 0.578914608168051, 0.07890277874199092, 0.07890277874199092, 0.07890277874199092, 0.12938880184417212, 0.12938880184417212, 0.12938880184417212, 0.1664092154217286, 0.1664092154217286, 0.1664092154217286, 0.12827825916066682, 0.12827825916066682, 0.12827825916066682, 0.07076247471786468, 0.07076247471786468, 0.07076247471786468, 0.15043658594619358, 0.15043658594619358, 0.15043658594619358, 0.12082533437878173, 0.12082533437878173, 0.12082533437878173, 0.10296613286321243, 0.10296613286321243, 0.10296613286321243, 0.06238243954985878, 0.06238243954985878, 0.06238243954985878, 0.9858986743277098, 0.9858986743277098, 0.9858986743277098, 0.9841581106022533, 0.9841581106022533, 0.9841581106022533, 0.9860607345872385, 0.9860607345872385, 0.9860607345872385, 0.3650486735553895, 0.3650486735553895, 0.3650486735553895, 0.3268615991589382, 0.3268615991589382, 0.3268615991589382, 0.3523610732791781, 0.3523610732791781, 0.3523610732791781, 0.21770105115126615, 0.21770105115126615, 0.21770105115126615, 0.17020567994877533, 0.17020567994877533, 0.17020567994877533, 0.1534034484483323, 0.1534034484483323, 0.1534034484483323, 0.16644496712060552, 0.16644496712060552, 0.16644496712060552, 0.1661774695136008, 0.1661774695136008, 0.1661774695136008, 0.21744452289677074, 0.21744452289677074, 0.21744452289677074, 0.10441448684819643, 0.10441448684819643, 0.10441448684819643, 0.1277272765613099, 0.1277272765613099, 0.1277272765613099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013201336669812047, 0.013201336669812047, 0.013201336669812047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07467777691051924, 0.07467777691051924, 0.07467777691051924, 0.010787757458665115, 0.010787757458665115, 0.010787757458665115, 0.07509817111151529, 0.07509817111151529, 0.07509817111151529, 0.025432310883488962, 0.025432310883488962, 0.025432310883488962, 0.053892288580705605, 0.053892288580705605, 0.053892288580705605, 0.04155924326626537, 0.04155924326626537, 0.04155924326626537, 0.16174675424296292, 0.16174675424296292, 0.16174675424296292, 0.039981855888111206, 0.039981855888111206, 0.039981855888111206, 0.052218354597550976, 0.052218354597550976, 0.052218354597550976, 0.4706696470994509, 0.4706696470994509, 0.4706696470994509, 0.43737266093366745, 0.43737266093366745, 0.43737266093366745, 0.4716904598989823, 0.4716904598989823, 0.4716904598989823, 0.08194520805296202, 0.08194520805296202, 0.08194520805296202, 0.056125104114794544, 0.056125104114794544, 0.056125104114794544, 0.0946392626977055, 0.0946392626977055, 0.0946392626977055, 0.18614164275257328, 0.18614164275257328, 0.18614164275257328, 0.17393198308722768, 0.17393198308722768, 0.17393198308722768, 0.187653534980605, 0.187653534980605, 0.187653534980605, 0.32811462188938734, 0.32811462188938734, 0.32811462188938734, 0.21942842522504957, 0.21942842522504957, 0.21942842522504957, 0.16329945377782462, 0.16329945377782462, 0.16329945377782462, 0.22856733284286157, 0.22856733284286157, 0.22856733284286157, 0.16796378763473274, 0.16796378763473274, 0.16796378763473274, 0.2394530585494543, 0.2394530585494543, 0.2394530585494543, 0.18334198837810634, 0.18334198837810634, 0.18334198837810634, 0.22117812408815607, 0.22117812408815607, 0.22117812408815607, 0.2247443605347239, 0.2247443605347239, 0.2247443605347239, 0.24441691579602798, 0.24441691579602798, 0.24441691579602798, 0.2063431699818984, 0.2063431699818984, 0.2063431699818984, 0.2078775576594204, 0.2078775576594204, 0.2078775576594204, 0.8536357251142154, 0.8536357251142154, 0.8536357251142154, 0.19823179401027613, 0.19823179401027613, 0.19823179401027613, 0.1703791179074462, 0.1703791179074462, 0.1703791179074462, 0.11063614082481543, 0.11063614082481543, 0.11063614082481543, 0.2098098631425892, 0.2098098631425892, 0.2098098631425892, 0.1563080079729514, 0.1563080079729514, 0.1563080079729514, 0.17742803914622796, 0.17742803914622796, 0.17742803914622796, 0.19001419695921873, 0.19001419695921873, 0.19001419695921873, 0.1921096319249257, 0.1921096319249257, 0.1921096319249257, 0.07686278188180973, 0.07686278188180973, 0.07686278188180973, 0.06739760817260854, 0.06739760817260854, 0.06739760817260854, 0.11071591603596176, 0.11071591603596176, 0.11071591603596176]}, "mutation_prompt": null}
{"id": "a4ede30c-a573-4305-a54c-8a70e9f5fa13", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "44d547db-a80c-4a88-bf29-032c86550ed9", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "40a997e7-bbad-4577-a133-12ff0bceb9e6", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "7a4be730-7f04-4556-912c-cf23ac58593a", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)  # Moved inside the loop to refresh every iteration\n            mutation = np.random.normal(0, self.mutation_scale, population.shape)  # Adjusted to regenerate each iteration\n            \n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1 * (personal_best - population)\n                          + self.social_coef * r2 * (global_best - population))\n            np.clip(velocities, -5, 5, out=velocities)  # Clip velocities to avoid large updates\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = np.argmin(scores)  # Use np.argmin for consistent array operations\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized swarm evolution algorithm leveraging better random number usage and conditional checks to improve runtime efficiency while maintaining effectiveness.", "configspace": "", "generation": 77, "fitness": 0.21016206158317807, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.4207970366352859, 0.4207970366352859, 0.4207970366352859, 0.46067815878612284, 0.46067815878612284, 0.46067815878612284, 0.4834092719226415, 0.4834092719226415, 0.4834092719226415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015933924085752005, 0.015933924085752005, 0.015933924085752005, 0.009965007152964445, 0.009965007152964445, 0.009965007152964445, 0.1387116267739773, 0.1387116267739773, 0.1387116267739773, 0.1035633950501873, 0.1035633950501873, 0.1035633950501873, 0.11181077000159512, 0.11181077000159512, 0.11181077000159512, 0.11288362075723612, 0.11288362075723612, 0.11288362075723612, 0.1063593310354003, 0.1063593310354003, 0.1063593310354003, 0.10024122251350087, 0.10024122251350087, 0.10024122251350087, 0.9849056311610732, 0.9849056311610732, 0.9849056311610732, 0.9832171066013852, 0.9832171066013852, 0.9832171066013852, 0.9796103097423045, 0.9796103097423045, 0.9796103097423045, 0.28862835092305217, 0.28862835092305217, 0.28862835092305217, 0.29752230683809655, 0.29752230683809655, 0.29752230683809655, 0.21372254858725714, 0.21372254858725714, 0.21372254858725714, 0.29272303179504555, 0.29272303179504555, 0.29272303179504555, 0.2662202247682204, 0.2662202247682204, 0.2662202247682204, 0.15948142287750855, 0.15948142287750855, 0.15948142287750855, 0.1749106822174341, 0.1749106822174341, 0.1749106822174341, 0.16110415504263675, 0.16110415504263675, 0.16110415504263675, 0.1490040240219339, 0.1490040240219339, 0.1490040240219339, 0.14684048617850298, 0.14684048617850298, 0.14684048617850298, 0.1397954425279273, 0.1397954425279273, 0.1397954425279273, 0.24209145453131486, 0.24209145453131486, 0.24209145453131486, 0.05268225898546519, 0.05268225898546519, 0.05268225898546519, 0.006277105765606028, 0.006277105765606028, 0.006277105765606028, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15852387384095346, 0.15852387384095346, 0.15852387384095346, 0.0056672590560948866, 0.0056672590560948866, 0.0056672590560948866, 0.051108626119021894, 0.051108626119021894, 0.051108626119021894, 0.02287169480847584, 0.02287169480847584, 0.02287169480847584, 0.02608048637578908, 0.02608048637578908, 0.02608048637578908, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02476027119799329, 0.02476027119799329, 0.02476027119799329, 0.08453064426759993, 0.08453064426759993, 0.08453064426759993, 0.0710887499663373, 0.0710887499663373, 0.0710887499663373, 0.40536692440873323, 0.40536692440873323, 0.40536692440873323, 0.42782938183151886, 0.42782938183151886, 0.42782938183151886, 0.4307324816448229, 0.4307324816448229, 0.4307324816448229, 0.1455305286510309, 0.1455305286510309, 0.1455305286510309, 0.11361413247112595, 0.11361413247112595, 0.11361413247112595, 0.09306253665398656, 0.09306253665398656, 0.09306253665398656, 0.1647812852473597, 0.1647812852473597, 0.1647812852473597, 0.2249710581493335, 0.2249710581493335, 0.2249710581493335, 0.2219325380103222, 0.2219325380103222, 0.2219325380103222, 0.29225574214723704, 0.29225574214723704, 0.29225574214723704, 0.27677273366184296, 0.27677273366184296, 0.27677273366184296, 0.2434847026358813, 0.2434847026358813, 0.2434847026358813, 0.14102132419877766, 0.14102132419877766, 0.14102132419877766, 0.1791521893526553, 0.1791521893526553, 0.1791521893526553, 0.1255448424719492, 0.1255448424719492, 0.1255448424719492, 0.20561222210239294, 0.20561222210239294, 0.20561222210239294, 0.20621409885700082, 0.20621409885700082, 0.20621409885700082, 0.20388214385575298, 0.20388214385575298, 0.20388214385575298, 0.2176694280789372, 0.2176694280789372, 0.2176694280789372, 0.20012081899716527, 0.20012081899716527, 0.20012081899716527, 0.20265501146783704, 0.20265501146783704, 0.20265501146783704, 0.6511039961265038, 0.6511039961265038, 0.6511039961265038, 0.17412386899526777, 0.17412386899526777, 0.17412386899526777, 0.16852059699345612, 0.16852059699345612, 0.16852059699345612, 0.16879914604530477, 0.16879914604530477, 0.16879914604530477, 0.20345655097512505, 0.20345655097512505, 0.20345655097512505, 0.1549236023293452, 0.1549236023293452, 0.1549236023293452, 0.18784000911370657, 0.18784000911370657, 0.18784000911370657, 0.19119259210407036, 0.19119259210407036, 0.19119259210407036, 0.20072705066222252, 0.20072705066222252, 0.20072705066222252, 0.07856914104393076, 0.07856914104393076, 0.07856914104393076, 0.08571845383379662, 0.08571845383379662, 0.08571845383379662, 0.09646578795873717, 0.09646578795873717, 0.09646578795873717]}, "mutation_prompt": null}
{"id": "8a4b1758-f96b-49bd-9170-63cd67d4327f", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n\n            # Update velocities and population positions\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coef * r1 * (personal_best - population) +\n                          self.social_coef * r2 * (global_best - population))\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            # Apply mutation based on probability\n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n\n            # Evaluate fitness scores and update personal and global bests\n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized hybrid swarm evolution algorithm with dynamic resource allocation to reduce redundant calculations and enhance runtime efficiency.", "configspace": "", "generation": 78, "fitness": 0.20426435659394623, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.45798654947258455, 0.45798654947258455, 0.45798654947258455, 0.46917655322539, 0.46917655322539, 0.46917655322539, 0.44534438556085076, 0.44534438556085076, 0.44534438556085076, 0.04691476009430284, 0.04691476009430284, 0.04691476009430284, 0.0363786091313848, 0.0363786091313848, 0.0363786091313848, 0.0029798259373609026, 0.0029798259373609026, 0.0029798259373609026, 0.09758171342720667, 0.09758171342720667, 0.09758171342720667, 0.12251329251845622, 0.12251329251845622, 0.12251329251845622, 0.10693405003383472, 0.10693405003383472, 0.10693405003383472, 0.09136544772414013, 0.09136544772414013, 0.09136544772414013, 0.0928637915331143, 0.0928637915331143, 0.0928637915331143, 0.08734318165516564, 0.08734318165516564, 0.08734318165516564, 0.9849249759998379, 0.9849249759998379, 0.9849249759998379, 0.9837041685909074, 0.9837041685909074, 0.9837041685909074, 0.9859584016634952, 0.9859584016634952, 0.9859584016634952, 0.273449829938886, 0.273449829938886, 0.273449829938886, 0.2606887751901863, 0.2606887751901863, 0.2606887751901863, 0.25509123070618156, 0.25509123070618156, 0.25509123070618156, 0.32762429819504546, 0.32762429819504546, 0.32762429819504546, 0.15949703533964055, 0.15949703533964055, 0.15949703533964055, 0.11629710412634808, 0.11629710412634808, 0.11629710412634808, 0.19249311719577222, 0.19249311719577222, 0.19249311719577222, 0.1376569166634205, 0.1376569166634205, 0.1376569166634205, 0.14991168256183685, 0.14991168256183685, 0.14991168256183685, 0.16397983055012266, 0.16397983055012266, 0.16397983055012266, 0.13866089630564726, 0.13866089630564726, 0.13866089630564726, 0.08133158618155689, 0.08133158618155689, 0.08133158618155689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07986263022348117, 0.07986263022348117, 0.07986263022348117, 0.03280994054786901, 0.03280994054786901, 0.03280994054786901, 0.049060119338612096, 0.049060119338612096, 0.049060119338612096, 0.03624845094496998, 0.03624845094496998, 0.03624845094496998, 0.012294333971028082, 0.012294333971028082, 0.012294333971028082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08500102853077218, 0.08500102853077218, 0.08500102853077218, 0.061075751864668404, 0.061075751864668404, 0.061075751864668404, 0.06742911882616498, 0.06742911882616498, 0.06742911882616498, 0.40861240154578893, 0.40861240154578893, 0.40861240154578893, 0.3856883981740038, 0.3856883981740038, 0.3856883981740038, 0.4452606145137905, 0.4452606145137905, 0.4452606145137905, 0.13819918262913056, 0.13819918262913056, 0.13819918262913056, 0.12706764309764618, 0.12706764309764618, 0.12706764309764618, 0.11073107733326903, 0.11073107733326903, 0.11073107733326903, 0.23853034773177062, 0.23853034773177062, 0.23853034773177062, 0.17430398665532854, 0.17430398665532854, 0.17430398665532854, 0.17139280601766693, 0.17139280601766693, 0.17139280601766693, 0.26155183290881623, 0.26155183290881623, 0.26155183290881623, 0.2744228766831881, 0.2744228766831881, 0.2744228766831881, 0.28363663042806897, 0.28363663042806897, 0.28363663042806897, 0.17720538744884706, 0.17720538744884706, 0.17720538744884706, 0.18106494659665617, 0.18106494659665617, 0.18106494659665617, 0.12956817301413281, 0.12956817301413281, 0.12956817301413281, 0.21102899602819492, 0.21102899602819492, 0.21102899602819492, 0.20867737706725997, 0.20867737706725997, 0.20867737706725997, 0.18192232798724273, 0.18192232798724273, 0.18192232798724273, 0.20354594683963956, 0.20354594683963956, 0.20354594683963956, 0.2249133795648547, 0.2249133795648547, 0.2249133795648547, 0.19141353523882865, 0.19141353523882865, 0.19141353523882865, 0.6183460125652376, 0.6183460125652376, 0.6183460125652376, 0.15809141214914635, 0.15809141214914635, 0.15809141214914635, 0.1696762650378043, 0.1696762650378043, 0.1696762650378043, 0.1687071547291603, 0.1687071547291603, 0.1687071547291603, 0.20411487942018847, 0.20411487942018847, 0.20411487942018847, 0.1536149615171205, 0.1536149615171205, 0.1536149615171205, 0.19203170291103067, 0.19203170291103067, 0.19203170291103067, 0.19050365205716624, 0.19050365205716624, 0.19050365205716624, 0.1799848516272503, 0.1799848516272503, 0.1799848516272503, 0.08354248871285164, 0.08354248871285164, 0.08354248871285164, 0.07419016994991634, 0.07419016994991634, 0.07419016994991634, 0.09265887281288909, 0.09265887281288909, 0.09265887281288909]}, "mutation_prompt": null}
{"id": "769ac5fe-57c8-46e5-9553-5f06443146b4", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "58dc6dde-acaf-4bc8-a074-6cc31f25c21c", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "3d62e553-9ed4-4127-9eb4-3d0a6b9d07ad", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "1b45c84d-35b3-44c4-a0b4-51f120c1eeaa", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "596b4a0a-3b87-4ee3-918c-df88a647e12e", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "7b5356a8-9834-4627-8b93-1b41fbd0d498", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            # Generate r1, r2 just before use to improve memory locality and reduce unnecessary storage\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            \n            # Optimized velocity update combining computation steps\n            cognitive_component = self.cognitive_coef * r1 * (personal_best - population)\n            social_component = self.social_coef * r2 * (global_best - population)\n            velocities = self.inertia_weight * velocities + cognitive_component + social_component\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            # Apply mutation selectively without additional random check\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n            mask = np.random.rand(self.pop_size, self.dim) < self.mutation_prob\n            population += mutation * mask\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Improved computational efficiency by optimizing random number generation and mutation application.", "configspace": "", "generation": 84, "fitness": 0.20179458219793778, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.46404873627806464, 0.46404873627806464, 0.46404873627806464, 0.4295291787149351, 0.4295291787149351, 0.4295291787149351, 0.4149591024596544, 0.4149591024596544, 0.4149591024596544, 0.018209549004679637, 0.018209549004679637, 0.018209549004679637, 0.032349210016155094, 0.032349210016155094, 0.032349210016155094, 0.007701098964985831, 0.007701098964985831, 0.007701098964985831, 0.12674153553879497, 0.12674153553879497, 0.12674153553879497, 0.10111708038108258, 0.10111708038108258, 0.10111708038108258, 0.11854216712813215, 0.11854216712813215, 0.11854216712813215, 0.09003482106088234, 0.09003482106088234, 0.09003482106088234, 0.10137284293670568, 0.10137284293670568, 0.10137284293670568, 0.1113060485777716, 0.1113060485777716, 0.1113060485777716, 0.9849744046617052, 0.9849744046617052, 0.9849744046617052, 0.9859455399963404, 0.9859455399963404, 0.9859455399963404, 0.9811882520046762, 0.9811882520046762, 0.9811882520046762, 0.3171731874763851, 0.3171731874763851, 0.3171731874763851, 0.28133653259442004, 0.28133653259442004, 0.28133653259442004, 0.2874838111975012, 0.2874838111975012, 0.2874838111975012, 0.21851172285993015, 0.21851172285993015, 0.21851172285993015, 0.22416285101277666, 0.22416285101277666, 0.22416285101277666, 0.2365324342371632, 0.2365324342371632, 0.2365324342371632, 0.1629669599403334, 0.1629669599403334, 0.1629669599403334, 0.14620497303167157, 0.14620497303167157, 0.14620497303167157, 0.15106679412418467, 0.15106679412418467, 0.15106679412418467, 0.10581810738490771, 0.10581810738490771, 0.10581810738490771, 0.11006676118659053, 0.11006676118659053, 0.11006676118659053, 0.06326450256341198, 0.06326450256341198, 0.06326450256341198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1423953039818311, 0.1423953039818311, 0.1423953039818311, 0.050752242450723184, 0.050752242450723184, 0.050752242450723184, 0.05799075869009285, 0.05799075869009285, 0.05799075869009285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09385079117989825, 0.09385079117989825, 0.09385079117989825, 0.03226930513510584, 0.03226930513510584, 0.03226930513510584, 0.0929542257529623, 0.0929542257529623, 0.0929542257529623, 0.391885400595093, 0.391885400595093, 0.391885400595093, 0.3921568142704549, 0.3921568142704549, 0.3921568142704549, 0.4006264868190065, 0.4006264868190065, 0.4006264868190065, 0.09210939929878148, 0.09210939929878148, 0.09210939929878148, 0.09628658299822779, 0.09628658299822779, 0.09628658299822779, 0.10188242054702457, 0.10188242054702457, 0.10188242054702457, 0.16426166067482495, 0.16426166067482495, 0.16426166067482495, 0.1736327739287955, 0.1736327739287955, 0.1736327739287955, 0.201149822381971, 0.201149822381971, 0.201149822381971, 0.25099012417625344, 0.25099012417625344, 0.25099012417625344, 0.2533238916726437, 0.2533238916726437, 0.2533238916726437, 0.2829743232563501, 0.2829743232563501, 0.2829743232563501, 0.18918524837597706, 0.18918524837597706, 0.18918524837597706, 0.1751882864142379, 0.1751882864142379, 0.1751882864142379, 0.20515532456227925, 0.20515532456227925, 0.20515532456227925, 0.17150378685842227, 0.17150378685842227, 0.17150378685842227, 0.19928766736814307, 0.19928766736814307, 0.19928766736814307, 0.1806056484940114, 0.1806056484940114, 0.1806056484940114, 0.2172716516772082, 0.2172716516772082, 0.2172716516772082, 0.216038482754494, 0.216038482754494, 0.216038482754494, 0.1836658132593597, 0.1836658132593597, 0.1836658132593597, 0.5996786838024746, 0.5996786838024746, 0.5996786838024746, 0.1578236158309615, 0.1578236158309615, 0.1578236158309615, 0.16872005408410462, 0.16872005408410462, 0.16872005408410462, 0.16722867244925055, 0.16722867244925055, 0.16722867244925055, 0.20529265954987863, 0.20529265954987863, 0.20529265954987863, 0.15661819389966314, 0.15661819389966314, 0.15661819389966314, 0.1912392377307468, 0.1912392377307468, 0.1912392377307468, 0.1729573375501553, 0.1729573375501553, 0.1729573375501553, 0.18424911396377652, 0.18424911396377652, 0.18424911396377652, 0.08208153042157051, 0.08208153042157051, 0.08208153042157051, 0.07532169444074388, 0.07532169444074388, 0.07532169444074388, 0.08539668162017955, 0.08539668162017955, 0.08539668162017955]}, "mutation_prompt": null}
{"id": "d5d34170-9a66-4b8f-aac5-5937486f8feb", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "0414383f-6d59-426f-8267-99a8bab9ddc3", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)  # Moved inside loop for recalculation\n            \n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation * np.random.choice([0, 1], size=(self.pop_size, self.dim))\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized swarm algorithm with reduced random variable recalculations and streamlined mutation approach for enhanced runtime efficiency.", "configspace": "", "generation": 86, "fitness": 0.20554594494166167, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.48595374379054324, 0.48595374379054324, 0.48595374379054324, 0.4890261965442436, 0.4890261965442436, 0.4890261965442436, 0.449050335225172, 0.449050335225172, 0.449050335225172, 0.04301335730630784, 0.04301335730630784, 0.04301335730630784, 0.026796176703455576, 0.026796176703455576, 0.026796176703455576, 0.05134171573270596, 0.05134171573270596, 0.05134171573270596, 0.13206761286122326, 0.13206761286122326, 0.13206761286122326, 0.10428023823254684, 0.10428023823254684, 0.10428023823254684, 0.1034216124258468, 0.1034216124258468, 0.1034216124258468, 0.10675056730429966, 0.10675056730429966, 0.10675056730429966, 0.10222296971596423, 0.10222296971596423, 0.10222296971596423, 0.08213655617658899, 0.08213655617658899, 0.08213655617658899, 0.9886644164114715, 0.9886644164114715, 0.9886644164114715, 0.9859804708012279, 0.9859804708012279, 0.9859804708012279, 0.9787402820759736, 0.9787402820759736, 0.9787402820759736, 0.320675597630557, 0.320675597630557, 0.320675597630557, 0.29032928376732203, 0.29032928376732203, 0.29032928376732203, 0.2836116088398537, 0.2836116088398537, 0.2836116088398537, 0.2141880257038511, 0.2141880257038511, 0.2141880257038511, 0.1917917625534521, 0.1917917625534521, 0.1917917625534521, 0.19462587084651117, 0.19462587084651117, 0.19462587084651117, 0.15046977660421668, 0.15046977660421668, 0.15046977660421668, 0.15867950729299696, 0.15867950729299696, 0.15867950729299696, 0.14976886707501236, 0.14976886707501236, 0.14976886707501236, 0.1315608862613339, 0.1315608862613339, 0.1315608862613339, 0.17313884743210095, 0.17313884743210095, 0.17313884743210095, 0.14164860990472627, 0.14164860990472627, 0.14164860990472627, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011318882070235903, 0.0011318882070235903, 0.0011318882070235903, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04111593002760727, 0.04111593002760727, 0.04111593002760727, 0.03409354129898001, 0.03409354129898001, 0.03409354129898001, 0.0489642357383947, 0.0489642357383947, 0.0489642357383947, 0.003911829961772639, 0.003911829961772639, 0.003911829961772639, 0.01656099984209647, 0.01656099984209647, 0.01656099984209647, 0.006598476883819759, 0.006598476883819759, 0.006598476883819759, 0.02917161304668825, 0.02917161304668825, 0.02917161304668825, 0.04747380916967303, 0.04747380916967303, 0.04747380916967303, 0.06157590614132691, 0.06157590614132691, 0.06157590614132691, 0.38457889845800663, 0.38457889845800663, 0.38457889845800663, 0.4300718314429888, 0.4300718314429888, 0.4300718314429888, 0.42987323529287536, 0.42987323529287536, 0.42987323529287536, 0.10368301664817481, 0.10368301664817481, 0.10368301664817481, 0.10033035669019397, 0.10033035669019397, 0.10033035669019397, 0.11333855637646195, 0.11333855637646195, 0.11333855637646195, 0.3155329304215898, 0.3155329304215898, 0.3155329304215898, 0.1821623760833787, 0.1821623760833787, 0.1821623760833787, 0.23829522670809122, 0.23829522670809122, 0.23829522670809122, 0.22763156512066085, 0.22763156512066085, 0.22763156512066085, 0.2684901271294192, 0.2684901271294192, 0.2684901271294192, 0.30840216386358676, 0.30840216386358676, 0.30840216386358676, 0.14140962566602788, 0.14140962566602788, 0.14140962566602788, 0.16171554415301215, 0.16171554415301215, 0.16171554415301215, 0.1382740611631631, 0.1382740611631631, 0.1382740611631631, 0.14901890844145238, 0.14901890844145238, 0.14901890844145238, 0.19802953494222342, 0.19802953494222342, 0.19802953494222342, 0.16940553780700685, 0.16940553780700685, 0.16940553780700685, 0.18382794288755921, 0.18382794288755921, 0.18382794288755921, 0.2167991169264858, 0.2167991169264858, 0.2167991169264858, 0.19194002758225448, 0.19194002758225448, 0.19194002758225448, 0.6121836497670978, 0.6121836497670978, 0.6121836497670978, 0.15797274293245023, 0.15797274293245023, 0.15797274293245023, 0.169791329777085, 0.169791329777085, 0.169791329777085, 0.20623430289393496, 0.20623430289393496, 0.20623430289393496, 0.20301520248817795, 0.20301520248817795, 0.20301520248817795, 0.15620854866699685, 0.15620854866699685, 0.15620854866699685, 0.18963437334168576, 0.18963437334168576, 0.18963437334168576, 0.1892100067314999, 0.1892100067314999, 0.1892100067314999, 0.18475832638180556, 0.18475832638180556, 0.18475832638180556, 0.0790999497177498, 0.0790999497177498, 0.0790999497177498, 0.08049250580544809, 0.08049250580544809, 0.08049250580544809, 0.09716338795420543, 0.09716338795420543, 0.09716338795420543]}, "mutation_prompt": null}
{"id": "ba2dcddd-0292-449b-9ac6-433a9dccba8a", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "fef226f2-9795-4e27-82d1-b19b62850f1b", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population) + self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized hybrid swarm evolution with reduced recomputation by decoupling mutation probability check and streamlined velocity updates.", "configspace": "", "generation": 88, "fitness": 0.20671422725892488, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.44931105160752427, 0.44931105160752427, 0.44931105160752427, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.023740630033810106, 0.023740630033810106, 0.023740630033810106, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.4050289394517069, 0.4050289394517069, 0.4050289394517069, 0.40309577089296056, 0.40309577089296056, 0.40309577089296056, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111454056, 0.17066030111454056, 0.17066030111454056, 0.17445487801935522, 0.17445487801935522, 0.17445487801935522, 0.20193989686231528, 0.20193989686231528, 0.20193989686231528, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088838145, 0.27125499088838145, 0.27125499088838145, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756993905, 0.21392920756993905, 0.21392920756993905, 0.21221937322261375, 0.21221937322261375, 0.21221937322261375, 0.1871052670419041, 0.1871052670419041, 0.1871052670419041, 0.1927045182802436, 0.1927045182802436, 0.1927045182802436, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.18289542342389198, 0.18289542342389198, 0.18289542342389198, 0.19653941135684982, 0.19653941135684982, 0.19653941135684982, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "16d6cbd3-8703-4f68-b3cd-006f0b9c44cd", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            mutation = np.random.normal(0, self.mutation_scale, population.shape)\n            mutation_mask = np.random.rand(self.pop_size, self.dim) < self.mutation_prob\n            population += mutation * mutation_mask\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Improved computational efficiency by optimizing random variable generation and restructuring mutation application within the update loop.", "configspace": "", "generation": 89, "fitness": 0.20179458219793778, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.46404873627806464, 0.46404873627806464, 0.46404873627806464, 0.4295291787149351, 0.4295291787149351, 0.4295291787149351, 0.4149591024596544, 0.4149591024596544, 0.4149591024596544, 0.018209549004679637, 0.018209549004679637, 0.018209549004679637, 0.032349210016155094, 0.032349210016155094, 0.032349210016155094, 0.007701098964985831, 0.007701098964985831, 0.007701098964985831, 0.12674153553879497, 0.12674153553879497, 0.12674153553879497, 0.10111708038108258, 0.10111708038108258, 0.10111708038108258, 0.11854216712813215, 0.11854216712813215, 0.11854216712813215, 0.09003482106088234, 0.09003482106088234, 0.09003482106088234, 0.10137284293670568, 0.10137284293670568, 0.10137284293670568, 0.1113060485777716, 0.1113060485777716, 0.1113060485777716, 0.9849744046617052, 0.9849744046617052, 0.9849744046617052, 0.9859455399963404, 0.9859455399963404, 0.9859455399963404, 0.9811882520046762, 0.9811882520046762, 0.9811882520046762, 0.3171731874763851, 0.3171731874763851, 0.3171731874763851, 0.28133653259442004, 0.28133653259442004, 0.28133653259442004, 0.2874838111975012, 0.2874838111975012, 0.2874838111975012, 0.21851172285993015, 0.21851172285993015, 0.21851172285993015, 0.22416285101277666, 0.22416285101277666, 0.22416285101277666, 0.2365324342371632, 0.2365324342371632, 0.2365324342371632, 0.1629669599403334, 0.1629669599403334, 0.1629669599403334, 0.14620497303167157, 0.14620497303167157, 0.14620497303167157, 0.15106679412418467, 0.15106679412418467, 0.15106679412418467, 0.10581810738490771, 0.10581810738490771, 0.10581810738490771, 0.11006676118659053, 0.11006676118659053, 0.11006676118659053, 0.06326450256341198, 0.06326450256341198, 0.06326450256341198, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1423953039818311, 0.1423953039818311, 0.1423953039818311, 0.050752242450723184, 0.050752242450723184, 0.050752242450723184, 0.05799075869009285, 0.05799075869009285, 0.05799075869009285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09385079117989825, 0.09385079117989825, 0.09385079117989825, 0.03226930513510584, 0.03226930513510584, 0.03226930513510584, 0.0929542257529623, 0.0929542257529623, 0.0929542257529623, 0.391885400595093, 0.391885400595093, 0.391885400595093, 0.3921568142704549, 0.3921568142704549, 0.3921568142704549, 0.4006264868190065, 0.4006264868190065, 0.4006264868190065, 0.09210939929878148, 0.09210939929878148, 0.09210939929878148, 0.09628658299822779, 0.09628658299822779, 0.09628658299822779, 0.10188242054702457, 0.10188242054702457, 0.10188242054702457, 0.16426166067482495, 0.16426166067482495, 0.16426166067482495, 0.1736327739287955, 0.1736327739287955, 0.1736327739287955, 0.201149822381971, 0.201149822381971, 0.201149822381971, 0.25099012417625344, 0.25099012417625344, 0.25099012417625344, 0.2533238916726437, 0.2533238916726437, 0.2533238916726437, 0.2829743232563501, 0.2829743232563501, 0.2829743232563501, 0.18918524837597706, 0.18918524837597706, 0.18918524837597706, 0.1751882864142379, 0.1751882864142379, 0.1751882864142379, 0.20515532456227925, 0.20515532456227925, 0.20515532456227925, 0.17150378685842227, 0.17150378685842227, 0.17150378685842227, 0.19928766736814307, 0.19928766736814307, 0.19928766736814307, 0.1806056484940114, 0.1806056484940114, 0.1806056484940114, 0.2172716516772082, 0.2172716516772082, 0.2172716516772082, 0.216038482754494, 0.216038482754494, 0.216038482754494, 0.1836658132593597, 0.1836658132593597, 0.1836658132593597, 0.5996786838024746, 0.5996786838024746, 0.5996786838024746, 0.1578236158309615, 0.1578236158309615, 0.1578236158309615, 0.16872005408410462, 0.16872005408410462, 0.16872005408410462, 0.16722867244925055, 0.16722867244925055, 0.16722867244925055, 0.20529265954987863, 0.20529265954987863, 0.20529265954987863, 0.15661819389966314, 0.15661819389966314, 0.15661819389966314, 0.1912392377307468, 0.1912392377307468, 0.1912392377307468, 0.1729573375501553, 0.1729573375501553, 0.1729573375501553, 0.18424911396377652, 0.18424911396377652, 0.18424911396377652, 0.08208153042157051, 0.08208153042157051, 0.08208153042157051, 0.07532169444074388, 0.07532169444074388, 0.07532169444074388, 0.08539668162017955, 0.08539668162017955, 0.08539668162017955]}, "mutation_prompt": null}
{"id": "074304e8-a2cf-4599-913f-b656e3b23484", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n            \n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores = np.where(improved, scores, personal_best_scores)\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized swarm evolution algorithm by streamlining calculations and restructuring operations to enhance efficiency.", "configspace": "", "generation": 90, "fitness": 0.20426435659394623, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.45798654947258455, 0.45798654947258455, 0.45798654947258455, 0.46917655322539, 0.46917655322539, 0.46917655322539, 0.44534438556085076, 0.44534438556085076, 0.44534438556085076, 0.04691476009430284, 0.04691476009430284, 0.04691476009430284, 0.0363786091313848, 0.0363786091313848, 0.0363786091313848, 0.0029798259373609026, 0.0029798259373609026, 0.0029798259373609026, 0.09758171342720667, 0.09758171342720667, 0.09758171342720667, 0.12251329251845622, 0.12251329251845622, 0.12251329251845622, 0.10693405003383472, 0.10693405003383472, 0.10693405003383472, 0.09136544772414013, 0.09136544772414013, 0.09136544772414013, 0.0928637915331143, 0.0928637915331143, 0.0928637915331143, 0.08734318165516564, 0.08734318165516564, 0.08734318165516564, 0.9849249759998379, 0.9849249759998379, 0.9849249759998379, 0.9837041685909074, 0.9837041685909074, 0.9837041685909074, 0.9859584016634952, 0.9859584016634952, 0.9859584016634952, 0.273449829938886, 0.273449829938886, 0.273449829938886, 0.2606887751901863, 0.2606887751901863, 0.2606887751901863, 0.25509123070618156, 0.25509123070618156, 0.25509123070618156, 0.32762429819504546, 0.32762429819504546, 0.32762429819504546, 0.15949703533964055, 0.15949703533964055, 0.15949703533964055, 0.11629710412634808, 0.11629710412634808, 0.11629710412634808, 0.19249311719577222, 0.19249311719577222, 0.19249311719577222, 0.1376569166634205, 0.1376569166634205, 0.1376569166634205, 0.14991168256183685, 0.14991168256183685, 0.14991168256183685, 0.16397983055012266, 0.16397983055012266, 0.16397983055012266, 0.13866089630564726, 0.13866089630564726, 0.13866089630564726, 0.08133158618155689, 0.08133158618155689, 0.08133158618155689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07986263022348117, 0.07986263022348117, 0.07986263022348117, 0.03280994054786901, 0.03280994054786901, 0.03280994054786901, 0.049060119338612096, 0.049060119338612096, 0.049060119338612096, 0.03624845094496998, 0.03624845094496998, 0.03624845094496998, 0.012294333971028082, 0.012294333971028082, 0.012294333971028082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08500102853077218, 0.08500102853077218, 0.08500102853077218, 0.061075751864668404, 0.061075751864668404, 0.061075751864668404, 0.06742911882616498, 0.06742911882616498, 0.06742911882616498, 0.40861240154578893, 0.40861240154578893, 0.40861240154578893, 0.3856883981740038, 0.3856883981740038, 0.3856883981740038, 0.4452606145137905, 0.4452606145137905, 0.4452606145137905, 0.13819918262913056, 0.13819918262913056, 0.13819918262913056, 0.12706764309764618, 0.12706764309764618, 0.12706764309764618, 0.11073107733326903, 0.11073107733326903, 0.11073107733326903, 0.23853034773177062, 0.23853034773177062, 0.23853034773177062, 0.17430398665532854, 0.17430398665532854, 0.17430398665532854, 0.17139280601766693, 0.17139280601766693, 0.17139280601766693, 0.26155183290881623, 0.26155183290881623, 0.26155183290881623, 0.2744228766831881, 0.2744228766831881, 0.2744228766831881, 0.28363663042806897, 0.28363663042806897, 0.28363663042806897, 0.17720538744884706, 0.17720538744884706, 0.17720538744884706, 0.18106494659665617, 0.18106494659665617, 0.18106494659665617, 0.12956817301413281, 0.12956817301413281, 0.12956817301413281, 0.21102899602819492, 0.21102899602819492, 0.21102899602819492, 0.20867737706725997, 0.20867737706725997, 0.20867737706725997, 0.18192232798724273, 0.18192232798724273, 0.18192232798724273, 0.20354594683963956, 0.20354594683963956, 0.20354594683963956, 0.2249133795648547, 0.2249133795648547, 0.2249133795648547, 0.19141353523882865, 0.19141353523882865, 0.19141353523882865, 0.6183460125652376, 0.6183460125652376, 0.6183460125652376, 0.15809141214914635, 0.15809141214914635, 0.15809141214914635, 0.1696762650378043, 0.1696762650378043, 0.1696762650378043, 0.1687071547291603, 0.1687071547291603, 0.1687071547291603, 0.20411487942018847, 0.20411487942018847, 0.20411487942018847, 0.1536149615171205, 0.1536149615171205, 0.1536149615171205, 0.19203170291103067, 0.19203170291103067, 0.19203170291103067, 0.19050365205716624, 0.19050365205716624, 0.19050365205716624, 0.1799848516272503, 0.1799848516272503, 0.1799848516272503, 0.08354248871285164, 0.08354248871285164, 0.08354248871285164, 0.07419016994991634, 0.07419016994991634, 0.07419016994991634, 0.09265887281288909, 0.09265887281288909, 0.09265887281288909]}, "mutation_prompt": null}
{"id": "37388d67-d202-468a-9ab9-a3f8f3d65cf1", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "b00e883e-39d7-41f2-b7b2-813914b03ba6", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "88b0a155-dc5f-4063-b0dd-67e5da07c266", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "5e986b37-6d10-4e93-8823-5c6529636db5", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.05  # Adjusted mutation probability\n        self.mutation_scale = 0.05  # Adjusted mutation scale\n        self.num_threads = 4  # Adding threading for parallel evaluations\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.full(self.pop_size, np.inf)\n\n        def evaluate_population(pop):\n            return np.array([func(ind) for ind in pop])\n\n        # Initially evaluate personal best scores\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, ind) for ind in population]\n            for i, future in enumerate(futures):\n                personal_best_scores[i] = future.result()\n\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)  # Moved inside loop to refresh\n            mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))  # Adjusted mutation\n\n            # Velocity and position update\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n\n            # Parallel evaluation of new scores\n            with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n                futures = [executor.submit(func, ind) for ind in population]\n                scores = np.array([future.result() for future in futures])\n\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Improved Swarm Evolution with Optimized Mutation and Parallel Evaluations for enhanced runtime performance.", "configspace": "", "generation": 94, "fitness": 0.21761307034980729, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.4872156609223728, 0.4872156609223728, 0.4872156609223728, 0.5512597347579646, 0.5512597347579646, 0.5512597347579646, 0.4941938310370044, 0.4941938310370044, 0.4941938310370044, 0.08828116979806777, 0.08828116979806777, 0.08828116979806777, 0.044656825137579514, 0.044656825137579514, 0.044656825137579514, 0.003968750987066394, 0.003968750987066394, 0.003968750987066394, 0.10691792268292633, 0.10691792268292633, 0.10691792268292633, 0.12709665278936777, 0.12709665278936777, 0.12709665278936777, 0.09447449779579142, 0.09447449779579142, 0.09447449779579142, 0.09867196032888137, 0.09867196032888137, 0.09867196032888137, 0.11038325159596574, 0.11038325159596574, 0.11038325159596574, 0.10139016225472897, 0.10139016225472897, 0.10139016225472897, 0.9855058543926623, 0.9855058543926623, 0.9855058543926623, 0.983698309118928, 0.983698309118928, 0.983698309118928, 0.9859512338666129, 0.9859512338666129, 0.9859512338666129, 0.26725334486248586, 0.26725334486248586, 0.26725334486248586, 0.26809105452030213, 0.26809105452030213, 0.26809105452030213, 0.3216865847555732, 0.3216865847555732, 0.3216865847555732, 0.23200563154830733, 0.23200563154830733, 0.23200563154830733, 0.15979406882754976, 0.15979406882754976, 0.15979406882754976, 0.19519076504030552, 0.19519076504030552, 0.19519076504030552, 0.17805654872667398, 0.17805654872667398, 0.17805654872667398, 0.12433430414762048, 0.12433430414762048, 0.12433430414762048, 0.16977271205269773, 0.16977271205269773, 0.16977271205269773, 0.15630601416077605, 0.15630601416077605, 0.15630601416077605, 0.17214935933099096, 0.17214935933099096, 0.17214935933099096, 0.07181233960431599, 0.07181233960431599, 0.07181233960431599, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008267635691340258, 0.0008267635691340258, 0.0008267635691340258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09310396118144382, 0.09310396118144382, 0.09310396118144382, 0.018463474116850787, 0.018463474116850787, 0.018463474116850787, 0.03446212804276161, 0.03446212804276161, 0.03446212804276161, 0.024506610576939813, 0.024506610576939813, 0.024506610576939813, 0.06073056968160506, 0.06073056968160506, 0.06073056968160506, 0.040183831047694185, 0.040183831047694185, 0.040183831047694185, 0.13856302708113521, 0.13856302708113521, 0.13856302708113521, 0.03247208445648753, 0.03247208445648753, 0.03247208445648753, 0.07424963483773339, 0.07424963483773339, 0.07424963483773339, 0.3948878299415812, 0.3948878299415812, 0.3948878299415812, 0.4347172211724306, 0.4347172211724306, 0.4347172211724306, 0.4681611244153252, 0.4681611244153252, 0.4681611244153252, 0.13578064767163633, 0.13578064767163633, 0.13578064767163633, 0.09190692291595493, 0.09190692291595493, 0.09190692291595493, 0.12882210203503708, 0.12882210203503708, 0.12882210203503708, 0.2471510387551773, 0.2471510387551773, 0.2471510387551773, 0.17515805888077562, 0.17515805888077562, 0.17515805888077562, 0.22537197096552608, 0.22537197096552608, 0.22537197096552608, 0.31686644813742937, 0.31686644813742937, 0.31686644813742937, 0.3062006388298756, 0.3062006388298756, 0.3062006388298756, 0.25527325913600885, 0.25527325913600885, 0.25527325913600885, 0.15635831786422116, 0.15635831786422116, 0.15635831786422116, 0.19433848691317968, 0.19433848691317968, 0.19433848691317968, 0.2574100474348535, 0.2574100474348535, 0.2574100474348535, 0.17765074293384864, 0.17765074293384864, 0.17765074293384864, 0.2074927188930047, 0.2074927188930047, 0.2074927188930047, 0.24063716907843802, 0.24063716907843802, 0.24063716907843802, 0.23235389036828857, 0.23235389036828857, 0.23235389036828857, 0.29870074922474865, 0.29870074922474865, 0.29870074922474865, 0.2645393294311299, 0.2645393294311299, 0.2645393294311299, 0.6817963249218075, 0.6817963249218075, 0.6817963249218075, 0.15639713679874112, 0.15639713679874112, 0.15639713679874112, 0.167583303539095, 0.167583303539095, 0.167583303539095, 0.16884728446268293, 0.16884728446268293, 0.16884728446268293, 0.20456384545872386, 0.20456384545872386, 0.20456384545872386, 0.15414794306387247, 0.15414794306387247, 0.15414794306387247, 0.19609496263099724, 0.19609496263099724, 0.19609496263099724, 0.19808010741375015, 0.19808010741375015, 0.19808010741375015, 0.1777811435131207, 0.1777811435131207, 0.1777811435131207, 0.09334341728760842, 0.09334341728760842, 0.09334341728760842, 0.07787335897079661, 0.07787335897079661, 0.07787335897079661, 0.08397289249115325, 0.08397289249115325, 0.08397289249115325]}, "mutation_prompt": null}
{"id": "c6402218-fee5-4cc1-8b07-ca39d859b4e6", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n        mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n        \n        while evaluations < self.budget:\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV2", "description": "Enhanced swarm evolution algorithm with optimized velocity updates and mutation step, reducing computational overhead and improving runtime efficiency.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5279578242539373, 0.5279578242539373, 0.5279578242539373, 0.4944048638306425, 0.4944048638306425, 0.4944048638306425, 0.5408158887299352, 0.5408158887299352, 0.5408158887299352, 0.10559367437207112, 0.10559367437207112, 0.10559367437207112, 0.09971787236837704, 0.09971787236837704, 0.09971787236837704, 0.1510156207700516, 0.1510156207700516, 0.1510156207700516, 0.2838818863516057, 0.2838818863516057, 0.2838818863516057, 0.09421618740830728, 0.09421618740830728, 0.09421618740830728, 0.227090120102466, 0.227090120102466, 0.227090120102466, 0.12280284426186905, 0.12280284426186905, 0.12280284426186905, 0.0848487762384077, 0.0848487762384077, 0.0848487762384077, 0.09919357014321628, 0.09919357014321628, 0.09919357014321628, 0.9811542790093396, 0.9811542790093396, 0.9811542790093396, 0.9770101878702616, 0.9770101878702616, 0.9770101878702616, 0.9807655975324695, 0.9807655975324695, 0.9807655975324695, 0.3627390907131609, 0.3627390907131609, 0.3627390907131609, 0.3798273847421798, 0.3798273847421798, 0.3798273847421798, 0.3432922554104286, 0.3432922554104286, 0.3432922554104286, 0.8560743916532517, 0.8560743916532517, 0.8560743916532517, 0.20647042351803024, 0.20647042351803024, 0.20647042351803024, 0.11659837093129499, 0.11659837093129499, 0.11659837093129499, 0.14131105730610705, 0.14131105730610705, 0.14131105730610705, 0.1877402986830483, 0.1877402986830483, 0.1877402986830483, 0.19409942568689686, 0.19409942568689686, 0.19409942568689686, 0.2002928358729803, 0.2002928358729803, 0.2002928358729803, 0.21195828661534244, 0.21195828661534244, 0.21195828661534244, 0.09831762602052152, 0.09831762602052152, 0.09831762602052152, 0.011150047312944333, 0.011150047312944333, 0.011150047312944333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237897289521735, 0.09237897289521735, 0.09237897289521735, 0.019807007290272627, 0.019807007290272627, 0.019807007290272627, 0.06464769823306526, 0.06464769823306526, 0.06464769823306526, 0.06476661237166859, 0.06476661237166859, 0.06476661237166859, 0.04420886270663016, 0.04420886270663016, 0.04420886270663016, 0.06043069033744164, 0.06043069033744164, 0.06043069033744164, 0.17561785987591738, 0.17561785987591738, 0.17561785987591738, 0.13494907238731324, 0.13494907238731324, 0.13494907238731324, 0.054816869361302034, 0.054816869361302034, 0.054816869361302034, 0.4306976288480112, 0.4306976288480112, 0.4306976288480112, 0.4771864586455895, 0.4771864586455895, 0.4771864586455895, 0.4584587401385162, 0.4584587401385162, 0.4584587401385162, 0.09591473411292151, 0.09591473411292151, 0.09591473411292151, 0.1355707133556967, 0.1355707133556967, 0.1355707133556967, 0.1478957202716209, 0.1478957202716209, 0.1478957202716209, 0.38467077741608013, 0.38467077741608013, 0.38467077741608013, 0.2360737446222705, 0.2360737446222705, 0.2360737446222705, 0.14557030930216974, 0.14557030930216974, 0.14557030930216974, 0.3208217026365171, 0.3208217026365171, 0.3208217026365171, 0.33063736554029144, 0.33063736554029144, 0.33063736554029144, 0.29995655473880556, 0.29995655473880556, 0.29995655473880556, 0.20690502219703522, 0.20690502219703522, 0.20690502219703522, 0.1801748482705241, 0.1801748482705241, 0.1801748482705241, 0.18859916208160543, 0.18859916208160543, 0.18859916208160543, 0.22861818150742041, 0.22861818150742041, 0.22861818150742041, 0.24988247744462733, 0.24988247744462733, 0.24988247744462733, 0.19227341784637597, 0.19227341784637597, 0.19227341784637597, 0.22465622618430048, 0.22465622618430048, 0.22465622618430048, 0.21678878508801314, 0.21678878508801314, 0.21678878508801314, 0.35964986792985576, 0.35964986792985576, 0.35964986792985576, 0.8693349188172619, 0.8693349188172619, 0.8693349188172619, 0.16683930347873266, 0.16683930347873266, 0.16683930347873266, 0.1681516649803203, 0.1681516649803203, 0.1681516649803203, 0.1686825995246083, 0.1686825995246083, 0.1686825995246083, 0.20928926444718732, 0.20928926444718732, 0.20928926444718732, 0.1557328202683559, 0.1557328202683559, 0.1557328202683559, 0.19986662433262958, 0.19986662433262958, 0.19986662433262958, 0.18630977296167106, 0.18630977296167106, 0.18630977296167106, 0.1988511952960409, 0.1988511952960409, 0.1988511952960409, 0.09573454243251966, 0.09573454243251966, 0.09573454243251966, 0.08024070979813591, 0.08024070979813591, 0.08024070979813591, 0.09929139726646607, 0.09929139726646607, 0.09929139726646607]}, "mutation_prompt": null}
{"id": "09336a5a-e49d-4b5d-a897-4601b8feacea", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.pop_size, self.dim)\n            velocities *= self.inertia_weight\n            velocities += self.cognitive_coef * r1 * (personal_best - population)\n            velocities += self.social_coef * r2 * (global_best - population)\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n            \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Optimized swarm evolution algorithm with reduced redundancy and improved loop efficiency for enhanced runtime performance.", "configspace": "", "generation": 96, "fitness": 0.20671422725894187, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.4524880740504291, 0.4524880740504291, 0.4524880740504291, 0.4979136667439701, 0.4979136667439701, 0.4979136667439701, 0.4493110516075429, 0.4493110516075429, 0.4493110516075429, 0.02518771024613431, 0.02518771024613431, 0.02518771024613431, 0.0686225760286816, 0.0686225760286816, 0.0686225760286816, 0.02374063003381921, 0.02374063003381921, 0.02374063003381921, 0.09974683818392405, 0.09974683818392405, 0.09974683818392405, 0.10799574087482, 0.10799574087482, 0.10799574087482, 0.11919009609881837, 0.11919009609881837, 0.11919009609881837, 0.0874212962026728, 0.0874212962026728, 0.0874212962026728, 0.09342374896694561, 0.09342374896694561, 0.09342374896694561, 0.10055850172888148, 0.10055850172888148, 0.10055850172888148, 0.9829659570324643, 0.9829659570324643, 0.9829659570324643, 0.9841656381926323, 0.9841656381926323, 0.9841656381926323, 0.985906245523848, 0.985906245523848, 0.985906245523848, 0.2716349729488641, 0.2716349729488641, 0.2716349729488641, 0.23506732974596467, 0.23506732974596467, 0.23506732974596467, 0.2767769088461055, 0.2767769088461055, 0.2767769088461055, 0.2855101328126889, 0.2855101328126889, 0.2855101328126889, 0.16001728635738366, 0.16001728635738366, 0.16001728635738366, 0.23624887504118497, 0.23624887504118497, 0.23624887504118497, 0.116140598057629, 0.116140598057629, 0.116140598057629, 0.12768411488299047, 0.12768411488299047, 0.12768411488299047, 0.15270880443822954, 0.15270880443822954, 0.15270880443822954, 0.138932337635717, 0.138932337635717, 0.138932337635717, 0.13366325039667193, 0.13366325039667193, 0.13366325039667193, 0.08405113575024648, 0.08405113575024648, 0.08405113575024648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11040577683779484, 0.11040577683779484, 0.11040577683779484, 0.04376586235375757, 0.04376586235375757, 0.04376586235375757, 0.04757642248485261, 0.04757642248485261, 0.04757642248485261, 0.0015215450167386235, 0.0015215450167386235, 0.0015215450167386235, 0.010375685866839013, 0.010375685866839013, 0.010375685866839013, 0.0012286102744343275, 0.0012286102744343275, 0.0012286102744343275, 0.10862476201606719, 0.10862476201606719, 0.10862476201606719, 0.05986882848525532, 0.05986882848525532, 0.05986882848525532, 0.06944231701078118, 0.06944231701078118, 0.06944231701078118, 0.40502893945166873, 0.40502893945166873, 0.40502893945166873, 0.4030957708936116, 0.4030957708936116, 0.4030957708936116, 0.38827514612689984, 0.38827514612689984, 0.38827514612689984, 0.09798366841298645, 0.09798366841298645, 0.09798366841298645, 0.13169625777978433, 0.13169625777978433, 0.13169625777978433, 0.11857083060950613, 0.11857083060950613, 0.11857083060950613, 0.17066030111452235, 0.17066030111452235, 0.17066030111452235, 0.17445487801935655, 0.17445487801935655, 0.17445487801935655, 0.20193989686229463, 0.20193989686229463, 0.20193989686229463, 0.27406125260929926, 0.27406125260929926, 0.27406125260929926, 0.2816693853232829, 0.2816693853232829, 0.2816693853232829, 0.27125499088859084, 0.27125499088859084, 0.27125499088859084, 0.14366791473781648, 0.14366791473781648, 0.14366791473781648, 0.1612310286354217, 0.1612310286354217, 0.1612310286354217, 0.21392920756991418, 0.21392920756991418, 0.21392920756991418, 0.2122193732224794, 0.2122193732224794, 0.2122193732224794, 0.1871052670419312, 0.1871052670419312, 0.1871052670419312, 0.19270451828070134, 0.19270451828070134, 0.19270451828070134, 0.21148680995139768, 0.21148680995139768, 0.21148680995139768, 0.2004363319739173, 0.2004363319739173, 0.2004363319739173, 0.24822275700468632, 0.24822275700468632, 0.24822275700468632, 0.7231312308828677, 0.7231312308828677, 0.7231312308828677, 0.15728242107496138, 0.15728242107496138, 0.15728242107496138, 0.16939846326290187, 0.16939846326290187, 0.16939846326290187, 0.16716720917036743, 0.16716720917036743, 0.16716720917036743, 0.20592530256176222, 0.20592530256176222, 0.20592530256176222, 0.2059435081794897, 0.2059435081794897, 0.2059435081794897, 0.19601690391411464, 0.19601690391411464, 0.19601690391411464, 0.1828954234238901, 0.1828954234238901, 0.1828954234238901, 0.19653941135693942, 0.19653941135693942, 0.19653941135693942, 0.07078295789144018, 0.07078295789144018, 0.07078295789144018, 0.08130294726104748, 0.08130294726104748, 0.08130294726104748, 0.08716072837818478, 0.08716072837818478, 0.08716072837818478]}, "mutation_prompt": null}
{"id": "d878149c-cb67-4a70-b247-e7cf57991695", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        # Pre-compute random values for velocity updates\n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions in one go\n            cognitive_component = self.cognitive_coef * r1 * (personal_best - population)\n            social_component = self.social_coef * r2 * (global_best - population)\n            velocities = self.inertia_weight * velocities + cognitive_component + social_component\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            # Mutation applied using vectorized operations\n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n                \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Enhanced swarm evolution algorithm with reduced computational overhead by optimizing velocity updates and removing redundancy, improving runtime efficiency.", "configspace": "", "generation": 97, "fitness": 0.25446756505549417, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "8286c27f-eff9-4cae-8d99-bbecc72a1e80", "metadata": {"aucs": [0.5701280828915363, 0.5701280828915363, 0.5701280828915363, 0.6324071130604327, 0.6324071130604327, 0.6324071130604327, 0.624475621080292, 0.624475621080292, 0.624475621080292, 0.18476078338375868, 0.18476078338375868, 0.18476078338375868, 0.30302339948333934, 0.30302339948333934, 0.30302339948333934, 0.21505993765844966, 0.21505993765844966, 0.21505993765844966, 0.11322849146518588, 0.11322849146518588, 0.11322849146518588, 0.12290825933901628, 0.12290825933901628, 0.12290825933901628, 0.1341632492051733, 0.1341632492051733, 0.1341632492051733, 0.10967003513503404, 0.10967003513503404, 0.10967003513503404, 0.10683966531413303, 0.10683966531413303, 0.10683966531413303, 0.09217459804448702, 0.09217459804448702, 0.09217459804448702, 0.9811490984054839, 0.9811490984054839, 0.9811490984054839, 0.9769981024921727, 0.9769981024921727, 0.9769981024921727, 0.9808245728168431, 0.9808245728168431, 0.9808245728168431, 0.4341891870117881, 0.4341891870117881, 0.4341891870117881, 0.4607379725470875, 0.4607379725470875, 0.4607379725470875, 0.3463021541529495, 0.3463021541529495, 0.3463021541529495, 0.13513487867605023, 0.13513487867605023, 0.13513487867605023, 0.20930049485891855, 0.20930049485891855, 0.20930049485891855, 0.2911063417146873, 0.2911063417146873, 0.2911063417146873, 0.1740844245387414, 0.1740844245387414, 0.1740844245387414, 0.18139137825145923, 0.18139137825145923, 0.18139137825145923, 0.16576225497996455, 0.16576225497996455, 0.16576225497996455, 0.17995214231385948, 0.17995214231385948, 0.17995214231385948, 0.21548800986075545, 0.21548800986075545, 0.21548800986075545, 0.10194867505125726, 0.10194867505125726, 0.10194867505125726, 0.1120102791716554, 0.1120102791716554, 0.1120102791716554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16052819625200732, 0.16052819625200732, 0.16052819625200732, 0.02342860652243306, 0.02342860652243306, 0.02342860652243306, 0.056588457443493834, 0.056588457443493834, 0.056588457443493834, 0.052880951161368484, 0.052880951161368484, 0.052880951161368484, 0.06789559339267925, 0.06789559339267925, 0.06789559339267925, 0.056044132251621526, 0.056044132251621526, 0.056044132251621526, 0.1839680826043606, 0.1839680826043606, 0.1839680826043606, 0.06513325078947751, 0.06513325078947751, 0.06513325078947751, 0.07963139798132957, 0.07963139798132957, 0.07963139798132957, 0.5007336952489618, 0.5007336952489618, 0.5007336952489618, 0.49521904009371176, 0.49521904009371176, 0.49521904009371176, 0.4721132555502173, 0.4721132555502173, 0.4721132555502173, 0.14772196585358366, 0.14772196585358366, 0.14772196585358366, 0.09828119011974468, 0.09828119011974468, 0.09828119011974468, 0.1626608405089468, 0.1626608405089468, 0.1626608405089468, 0.20633262347665837, 0.20633262347665837, 0.20633262347665837, 0.1899170933724008, 0.1899170933724008, 0.1899170933724008, 0.32219314783222286, 0.32219314783222286, 0.32219314783222286, 0.2887249486899587, 0.2887249486899587, 0.2887249486899587, 0.23888493603150862, 0.23888493603150862, 0.23888493603150862, 0.35804650752735745, 0.35804650752735745, 0.35804650752735745, 0.17218559903030606, 0.17218559903030606, 0.17218559903030606, 0.18257584031060814, 0.18257584031060814, 0.18257584031060814, 0.287592224299718, 0.287592224299718, 0.287592224299718, 0.20786000914599567, 0.20786000914599567, 0.20786000914599567, 0.22179826582284645, 0.22179826582284645, 0.22179826582284645, 0.20415499097468714, 0.20415499097468714, 0.20415499097468714, 0.2190915264430099, 0.2190915264430099, 0.2190915264430099, 0.3291273905833082, 0.3291273905833082, 0.3291273905833082, 0.21193681581884427, 0.21193681581884427, 0.21193681581884427, 0.8715785068669731, 0.8715785068669731, 0.8715785068669731, 0.16697260193434815, 0.16697260193434815, 0.16697260193434815, 0.1691185304734858, 0.1691185304734858, 0.1691185304734858, 0.4084837182676875, 0.4084837182676875, 0.4084837182676875, 0.21030421645465835, 0.21030421645465835, 0.21030421645465835, 0.15640041787628867, 0.15640041787628867, 0.15640041787628867, 0.1889339426004779, 0.1889339426004779, 0.1889339426004779, 0.19191309567420212, 0.19191309567420212, 0.19191309567420212, 0.2376101907002136, 0.2376101907002136, 0.2376101907002136, 0.10087443022680131, 0.10087443022680131, 0.10087443022680131, 0.08059952665103787, 0.08059952665103787, 0.08059952665103787, 0.12020572823152686, 0.12020572823152686, 0.12020572823152686]}, "mutation_prompt": null}
{"id": "ef558d93-56ae-4ebf-81e1-15b629699ba4", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        # Pre-compute random values for velocity updates\n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n        \n        while evaluations < self.budget:\n            # Update velocities and positions in one go\n            cognitive_component = self.cognitive_coef * r1 * (personal_best - population)\n            social_component = self.social_coef * r2 * (global_best - population)\n            velocities = self.inertia_weight * velocities + cognitive_component + social_component\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n            \n            # Mutation applied using vectorized operations\n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n                \n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n            \n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV3", "description": "Enhanced swarm evolution algorithm with reduced computational overhead by optimizing velocity updates and removing redundancy, improving runtime efficiency.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d878149c-cb67-4a70-b247-e7cf57991695", "metadata": {"aucs": [0.5701280828915363, 0.5701280828915363, 0.5701280828915363, 0.6324071130604327, 0.6324071130604327, 0.6324071130604327, 0.624475621080292, 0.624475621080292, 0.624475621080292, 0.18476078338375868, 0.18476078338375868, 0.18476078338375868, 0.30302339948333934, 0.30302339948333934, 0.30302339948333934, 0.21505993765844966, 0.21505993765844966, 0.21505993765844966, 0.11322849146518588, 0.11322849146518588, 0.11322849146518588, 0.12290825933901628, 0.12290825933901628, 0.12290825933901628, 0.1341632492051733, 0.1341632492051733, 0.1341632492051733, 0.10967003513503404, 0.10967003513503404, 0.10967003513503404, 0.10683966531413303, 0.10683966531413303, 0.10683966531413303, 0.09217459804448702, 0.09217459804448702, 0.09217459804448702, 0.9811490984054839, 0.9811490984054839, 0.9811490984054839, 0.9769981024921727, 0.9769981024921727, 0.9769981024921727, 0.9808245728168431, 0.9808245728168431, 0.9808245728168431, 0.4341891870117881, 0.4341891870117881, 0.4341891870117881, 0.4607379725470875, 0.4607379725470875, 0.4607379725470875, 0.3463021541529495, 0.3463021541529495, 0.3463021541529495, 0.13513487867605023, 0.13513487867605023, 0.13513487867605023, 0.20930049485891855, 0.20930049485891855, 0.20930049485891855, 0.2911063417146873, 0.2911063417146873, 0.2911063417146873, 0.1740844245387414, 0.1740844245387414, 0.1740844245387414, 0.18139137825145923, 0.18139137825145923, 0.18139137825145923, 0.16576225497996455, 0.16576225497996455, 0.16576225497996455, 0.17995214231385948, 0.17995214231385948, 0.17995214231385948, 0.21548800986075545, 0.21548800986075545, 0.21548800986075545, 0.10194867505125726, 0.10194867505125726, 0.10194867505125726, 0.1120102791716554, 0.1120102791716554, 0.1120102791716554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16052819625200732, 0.16052819625200732, 0.16052819625200732, 0.02342860652243306, 0.02342860652243306, 0.02342860652243306, 0.056588457443493834, 0.056588457443493834, 0.056588457443493834, 0.052880951161368484, 0.052880951161368484, 0.052880951161368484, 0.06789559339267925, 0.06789559339267925, 0.06789559339267925, 0.056044132251621526, 0.056044132251621526, 0.056044132251621526, 0.1839680826043606, 0.1839680826043606, 0.1839680826043606, 0.06513325078947751, 0.06513325078947751, 0.06513325078947751, 0.07963139798132957, 0.07963139798132957, 0.07963139798132957, 0.5007336952489618, 0.5007336952489618, 0.5007336952489618, 0.49521904009371176, 0.49521904009371176, 0.49521904009371176, 0.4721132555502173, 0.4721132555502173, 0.4721132555502173, 0.14772196585358366, 0.14772196585358366, 0.14772196585358366, 0.09828119011974468, 0.09828119011974468, 0.09828119011974468, 0.1626608405089468, 0.1626608405089468, 0.1626608405089468, 0.20633262347665837, 0.20633262347665837, 0.20633262347665837, 0.1899170933724008, 0.1899170933724008, 0.1899170933724008, 0.32219314783222286, 0.32219314783222286, 0.32219314783222286, 0.2887249486899587, 0.2887249486899587, 0.2887249486899587, 0.23888493603150862, 0.23888493603150862, 0.23888493603150862, 0.35804650752735745, 0.35804650752735745, 0.35804650752735745, 0.17218559903030606, 0.17218559903030606, 0.17218559903030606, 0.18257584031060814, 0.18257584031060814, 0.18257584031060814, 0.287592224299718, 0.287592224299718, 0.287592224299718, 0.20786000914599567, 0.20786000914599567, 0.20786000914599567, 0.22179826582284645, 0.22179826582284645, 0.22179826582284645, 0.20415499097468714, 0.20415499097468714, 0.20415499097468714, 0.2190915264430099, 0.2190915264430099, 0.2190915264430099, 0.3291273905833082, 0.3291273905833082, 0.3291273905833082, 0.21193681581884427, 0.21193681581884427, 0.21193681581884427, 0.8715785068669731, 0.8715785068669731, 0.8715785068669731, 0.16697260193434815, 0.16697260193434815, 0.16697260193434815, 0.1691185304734858, 0.1691185304734858, 0.1691185304734858, 0.4084837182676875, 0.4084837182676875, 0.4084837182676875, 0.21030421645465835, 0.21030421645465835, 0.21030421645465835, 0.15640041787628867, 0.15640041787628867, 0.15640041787628867, 0.1889339426004779, 0.1889339426004779, 0.1889339426004779, 0.19191309567420212, 0.19191309567420212, 0.19191309567420212, 0.2376101907002136, 0.2376101907002136, 0.2376101907002136, 0.10087443022680131, 0.10087443022680131, 0.10087443022680131, 0.08059952665103787, 0.08059952665103787, 0.08059952665103787, 0.12020572823152686, 0.12020572823152686, 0.12020572823152686]}, "mutation_prompt": null}
{"id": "2152b8b4-7d4f-4c27-b6ba-59b21e5ae814", "solution": "import numpy as np\n\nclass HybridSwarmEvolutionOptimizedV4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.bounds = (-5.0, 5.0)\n        self.inertia_weight = 0.7298\n        self.cognitive_coef = 1.49618\n        self.social_coef = 1.49618\n        self.mutation_prob = 0.1\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.pop_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.pop_size, self.dim))\n        personal_best = population.copy()\n        personal_best_scores = np.array([func(ind) for ind in population])\n        global_best_idx = np.argmin(personal_best_scores)\n        global_best = population[global_best_idx]\n        global_best_score = personal_best_scores[global_best_idx]\n        \n        evaluations = self.pop_size\n\n        r1 = np.random.rand(self.pop_size, self.dim)\n        r2 = np.random.rand(self.pop_size, self.dim)\n\n        while evaluations < self.budget:\n            # Refactor: Pre-compute velocity components to reduce memory access\n            for i in range(self.pop_size):\n                cognitive_component = self.cognitive_coef * r1[i] * (personal_best[i] - population[i])\n                social_component = self.social_coef * r2[i] * (global_best - population[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n\n            population += velocities\n            np.clip(population, self.bounds[0], self.bounds[1], out=population)\n\n            if np.random.rand() < self.mutation_prob:\n                mutation = np.random.normal(0, self.mutation_scale, (self.pop_size, self.dim))\n                population += mutation\n\n            scores = np.array([func(ind) for ind in population])\n            evaluations += self.pop_size\n\n            improved = scores < personal_best_scores\n            personal_best_scores[improved] = scores[improved]\n            personal_best[improved] = population[improved]\n\n            min_score_idx = scores.argmin()\n            if scores[min_score_idx] < global_best_score:\n                global_best_score = scores[min_score_idx]\n                global_best = population[min_score_idx]\n\n        return global_best", "name": "HybridSwarmEvolutionOptimizedV4", "description": "Optimized swarm evolution algorithm by refactoring the velocity update mechanism to reduce memory access, hence improving runtime efficiency.", "configspace": "", "generation": 99, "fitness": 0.25446756505549417, "feedback": "The algorithm HybridSwarmEvolutionOptimizedV4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "d878149c-cb67-4a70-b247-e7cf57991695", "metadata": {"aucs": [0.5701280828915363, 0.5701280828915363, 0.5701280828915363, 0.6324071130604327, 0.6324071130604327, 0.6324071130604327, 0.624475621080292, 0.624475621080292, 0.624475621080292, 0.18476078338375868, 0.18476078338375868, 0.18476078338375868, 0.30302339948333934, 0.30302339948333934, 0.30302339948333934, 0.21505993765844966, 0.21505993765844966, 0.21505993765844966, 0.11322849146518588, 0.11322849146518588, 0.11322849146518588, 0.12290825933901628, 0.12290825933901628, 0.12290825933901628, 0.1341632492051733, 0.1341632492051733, 0.1341632492051733, 0.10967003513503404, 0.10967003513503404, 0.10967003513503404, 0.10683966531413303, 0.10683966531413303, 0.10683966531413303, 0.09217459804448702, 0.09217459804448702, 0.09217459804448702, 0.9811490984054839, 0.9811490984054839, 0.9811490984054839, 0.9769981024921727, 0.9769981024921727, 0.9769981024921727, 0.9808245728168431, 0.9808245728168431, 0.9808245728168431, 0.4341891870117881, 0.4341891870117881, 0.4341891870117881, 0.4607379725470875, 0.4607379725470875, 0.4607379725470875, 0.3463021541529495, 0.3463021541529495, 0.3463021541529495, 0.13513487867605023, 0.13513487867605023, 0.13513487867605023, 0.20930049485891855, 0.20930049485891855, 0.20930049485891855, 0.2911063417146873, 0.2911063417146873, 0.2911063417146873, 0.1740844245387414, 0.1740844245387414, 0.1740844245387414, 0.18139137825145923, 0.18139137825145923, 0.18139137825145923, 0.16576225497996455, 0.16576225497996455, 0.16576225497996455, 0.17995214231385948, 0.17995214231385948, 0.17995214231385948, 0.21548800986075545, 0.21548800986075545, 0.21548800986075545, 0.10194867505125726, 0.10194867505125726, 0.10194867505125726, 0.1120102791716554, 0.1120102791716554, 0.1120102791716554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16052819625200732, 0.16052819625200732, 0.16052819625200732, 0.02342860652243306, 0.02342860652243306, 0.02342860652243306, 0.056588457443493834, 0.056588457443493834, 0.056588457443493834, 0.052880951161368484, 0.052880951161368484, 0.052880951161368484, 0.06789559339267925, 0.06789559339267925, 0.06789559339267925, 0.056044132251621526, 0.056044132251621526, 0.056044132251621526, 0.1839680826043606, 0.1839680826043606, 0.1839680826043606, 0.06513325078947751, 0.06513325078947751, 0.06513325078947751, 0.07963139798132957, 0.07963139798132957, 0.07963139798132957, 0.5007336952489618, 0.5007336952489618, 0.5007336952489618, 0.49521904009371176, 0.49521904009371176, 0.49521904009371176, 0.4721132555502173, 0.4721132555502173, 0.4721132555502173, 0.14772196585358366, 0.14772196585358366, 0.14772196585358366, 0.09828119011974468, 0.09828119011974468, 0.09828119011974468, 0.1626608405089468, 0.1626608405089468, 0.1626608405089468, 0.20633262347665837, 0.20633262347665837, 0.20633262347665837, 0.1899170933724008, 0.1899170933724008, 0.1899170933724008, 0.32219314783222286, 0.32219314783222286, 0.32219314783222286, 0.2887249486899587, 0.2887249486899587, 0.2887249486899587, 0.23888493603150862, 0.23888493603150862, 0.23888493603150862, 0.35804650752735745, 0.35804650752735745, 0.35804650752735745, 0.17218559903030606, 0.17218559903030606, 0.17218559903030606, 0.18257584031060814, 0.18257584031060814, 0.18257584031060814, 0.287592224299718, 0.287592224299718, 0.287592224299718, 0.20786000914599567, 0.20786000914599567, 0.20786000914599567, 0.22179826582284645, 0.22179826582284645, 0.22179826582284645, 0.20415499097468714, 0.20415499097468714, 0.20415499097468714, 0.2190915264430099, 0.2190915264430099, 0.2190915264430099, 0.3291273905833082, 0.3291273905833082, 0.3291273905833082, 0.21193681581884427, 0.21193681581884427, 0.21193681581884427, 0.8715785068669731, 0.8715785068669731, 0.8715785068669731, 0.16697260193434815, 0.16697260193434815, 0.16697260193434815, 0.1691185304734858, 0.1691185304734858, 0.1691185304734858, 0.4084837182676875, 0.4084837182676875, 0.4084837182676875, 0.21030421645465835, 0.21030421645465835, 0.21030421645465835, 0.15640041787628867, 0.15640041787628867, 0.15640041787628867, 0.1889339426004779, 0.1889339426004779, 0.1889339426004779, 0.19191309567420212, 0.19191309567420212, 0.19191309567420212, 0.2376101907002136, 0.2376101907002136, 0.2376101907002136, 0.10087443022680131, 0.10087443022680131, 0.10087443022680131, 0.08059952665103787, 0.08059952665103787, 0.08059952665103787, 0.12020572823152686, 0.12020572823152686, 0.12020572823152686]}, "mutation_prompt": null}
