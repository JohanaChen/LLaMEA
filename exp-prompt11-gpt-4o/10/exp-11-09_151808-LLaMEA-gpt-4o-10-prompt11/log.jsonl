{"id": "b8402d65-2103-4405-8cf4-7569898c94c2", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 0, "fitness": 0.42276076084451986, "feedback": "The algorithm NADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "066e5f06-4329-4c27-9843-65f064d66293", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b6a26339-943a-401e-bc0e-3844d54159e5", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "8197d734-93df-44c9-9ed7-04759c069232", "solution": "import numpy as np\n\nclass EADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(20, 6 * dim)  # Increased population size\n        self.mutation_factor = 0.7\n        self.crossover_prob = 0.8\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.4 + 0.4 * np.random.rand() * diversity  # Adjusting mutation factor range\n            self.crossover_prob = 0.5 + 0.3 * np.random.rand() * (1 - diversity)  # Dynamic crossover probability\n\n        return best_solution", "name": "EADE", "description": "Enhanced Adaptive Differential Evolution (EADE) introduces adaptive scaling for mutation and uses dynamic crossover rates to improve convergence speed.", "configspace": "", "generation": 3, "fitness": 0.37310733659287154, "feedback": "The algorithm EADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.27.", "error": "", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8952210517547667, 0.8865768924777487, 0.8846667376671745, 0.8983834728004999, 0.8940648260415862, 0.8935745917286072, 0.8951223904999024, 0.8901168119791937, 0.879041881728282, 0.7889265155159543, 0.7952148431522278, 0.7789701559079545, 0.8032492926339079, 0.7864988805096121, 0.7944806309871778, 0.7952408437059596, 0.8119949480113625, 0.7867980393084963, 0.5690336062952863, 0.6160382674660329, 0.5927179006798331, 0.6135086646000981, 0.6689098519360458, 0.5075295301091325, 0.5392655589543338, 0.6048399597774627, 0.5834423620753779, 0.46790640358949764, 0.1623629798408599, 0.5260644883773656, 0.15269566864931128, 0.1706763156823874, 0.48074257796873576, 0.1629088582698489, 0.16720609554394705, 0.14566498018709484, 0.930385748152487, 0.9592555001533105, 0.9336880195988195, 0.950972407962491, 0.9749979861803535, 0.95214149698197, 0.9490359618757486, 0.9667049145337017, 0.95790046061776, 0.2535004059594921, 0.24277746919478527, 0.3328086120799676, 0.2817407414754315, 0.2917089726672272, 0.6061749212364121, 0.29773230199538403, 0.2581580451639024, 0.1915436331393524, 0.7765973249535548, 0.7240216240039156, 0.2218696765657202, 0.7944750902707265, 0.36033234562814354, 0.7935560348122418, 0.7322330708328743, 0.7151510506081497, 0.823371978857697, 0.21117950400088248, 0.22991672250963735, 0.21153803003673521, 0.1597048929138567, 0.1355830869070389, 0.19542257329340884, 0.2027358896162471, 0.23350373302885186, 0.4597226469624429, 0.15356104567513862, 0.14185891339484646, 0.16061918728150792, 0.17996312914313295, 0.1789821493494863, 0.14950568560032484, 0.19414263351696703, 0.163101134232863, 0.16851688117368102, 0.09425978570585669, 0.07057265095326237, 0.10992979290695237, 0.04803136443687184, 0.08014223560426925, 0.13255171293030432, 0.07602672906364027, 0.06721436965110084, 0.09460647223361351, 0.2087790206751683, 0.15143788395437863, 0.18706285796171618, 0.16775020117476036, 0.19479913501401402, 0.18438093121700694, 0.2505205808045893, 0.22409616932858467, 0.1925958367636601, 0.11915113121396936, 0.14592169034856328, 0.1403512350740217, 0.09278867647976186, 0.13001848518454684, 0.16559484899428112, 0.0985832343648152, 0.13474386047473674, 0.07063535763453088, 0.211112800237922, 0.23796391263597194, 0.22908576993860685, 0.266268139061244, 0.28755807489368, 0.2773023418589218, 0.16372536530651616, 0.2423781094749058, 0.14764385099149546, 0.6583909285258676, 0.6643434494288747, 0.6680240321345058, 0.6038420629487463, 0.6391100863882245, 0.6488795369271482, 0.7050067661788502, 0.6180639858625439, 0.6391820510095609, 0.11755085825062839, 0.1232856551974495, 0.10354324037717, 0.12091558678167802, 0.12809203586183393, 0.12013491913860941, 0.11061571887290955, 0.09539398625145401, 0.11136290219688949, 0.14194000976034316, 0.15290867975436684, 0.1387061507024686, 0.1373001218420371, 0.14136424334356434, 0.1290520839389201, 0.12950339495737428, 0.12603037754273083, 0.16993541382952349, 0.4977285258706621, 0.4629334576305044, 0.4729273897148272, 0.5075163233326629, 0.5133118360670286, 0.5198354934593741, 0.6163349859403737, 0.6578288416727849, 0.6159998619946369, 0.2949893206952623, 0.3049336910574717, 0.3382327564167723, 0.2832734000290368, 0.30757349953890334, 0.2783371449668802, 0.34045700562836423, 0.4208807665947556, 0.3926289235461864, 0.21880205371713524, 0.19897366228893598, 0.18378037550088744, 0.20633711642514885, 0.19413233335301205, 0.2118473771869761, 0.20374458170087995, 0.19588555788475437, 0.19203695068203985, 0.4074621005282252, 0.37105143281946285, 0.21306326311439294, 0.5016854333883962, 0.21277676345389906, 0.5479343595737909, 0.5273551939699661, 0.313552564208857, 0.4952351516175282, 0.29567649186707023, 0.6917871430966658, 0.5348390007652606, 0.7200585008757279, 0.18764428653095833, 0.8226281676281634, 0.1854808743866646, 0.7488927844769745, 0.6042100313717624, 0.19964060825727326, 0.20712299182686278, 0.2712837846218604, 0.5670835454109283, 0.2502114685205581, 0.20520919151822814, 0.26048187897845343, 0.40814760517551885, 0.20896113088152468, 0.18621220898156887, 0.21266953265101185, 0.18885901521855986, 0.1948784411473199, 0.18752344698540435, 0.18616307715367097, 0.18150706719584409, 0.17706129723067132, 0.19782365641843824, 0.08076797233515443, 0.08804558408884955, 0.09077081088384842, 0.07324098441548321, 0.09375016365533662, 0.08350987760274764, 0.07977074228646652, 0.08111286012787045, 0.08666558081653242]}, "mutation_prompt": null}
{"id": "1f7c4799-e063-413f-b6f7-a1dbad8a7fbe", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "5a959a99-fe6f-4544-8bb5-2309d21a5809", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "a8ea7f05-0bb0-4a31-a670-fb366de14967", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "a4064721-facd-4e85-8afe-464abf530f2e", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b9f88d70-1ac6-493f-8ee4-dcd662014c24", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "c15b31e9-f104-451b-a2bb-9fba379889d1", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "19d06f08-84b1-4e7b-b9b6-0bfc7596a37d", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3cd3e932-31e0-4156-860e-68461d71a60d", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "35d6dfbc-2253-4f13-a8a8-6df5fae1f985", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "a27db9c2-5c71-4d67-85f8-79336f644228", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "72e66f3f-a89e-4c7c-ac26-3c612f538df1", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "4504f5bf-26d9-49db-94ab-4ceb54e10b58", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "61c3bbe4-a467-46d5-8b3a-901a68d2b944", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "50ab6b82-3888-44b7-809f-87e2d4247774", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "937fcc5c-f236-407c-9981-425740b51256", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "fad35af2-eb01-41e5-80c5-617f9cfcbd69", "solution": "import numpy as np\n\nclass EADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.85  # Increased slightly\n        self.crossover_prob = 0.95  # Increased slightly\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n        self.learning_rate = 0.1  # New parameter for adaptive learning\n\n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c) + self.learning_rate * (best_solution - a), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor, crossover probability, and learning rate\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.6 + 0.2 * np.random.rand() * diversity\n            self.crossover_prob = 0.65 + 0.15 * np.random.rand() * (1 - diversity)\n            self.learning_rate = np.clip(0.1 * (1 - diversity), 0.05, 0.15)  # Adaptive learning rate based on diversity\n\n        return best_solution", "name": "EADE", "description": "Enhanced Adaptive Differential Evolution (EADE) accelerates convergence by integrating adaptive learning rates and strategic diversity to improve robust function optimization.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {}, "mutation_prompt": null}
{"id": "a0c4edd3-5e0c-47a9-add6-6402382ad9aa", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3cca83cd-8a92-47c9-a8c2-9e3f214917f7", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "e1473e94-73c6-4af2-87b3-fd3c42d970be", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "e0a50087-d425-45c2-b6a6-61cabedd481b", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b177b956-a873-40fe-8d17-47ae9acfb9ec", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "7d8c5965-8917-40d0-8f72-3494ccd8ebd5", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "5ced0dee-6af8-4bde-ad1a-b2cabf5bbe2e", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "94da84c3-73d0-41f5-b32e-d998411250c6", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "f4923a4e-84fe-49e8-9710-46ee334b3ba8", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "31c18220-934c-4d41-8f78-30c3caa326f9", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "cd13f67a-0d90-4adc-b5d7-d3604a24d71c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3cd8ecd8-c2ee-4198-aa2b-ca1e5ad958bb", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "78bdd868-03ce-4dbd-ac07-a18330ef7df2", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "6dc93db6-9df7-413c-8b24-13507ff214fd", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "024d9640-8462-4336-9235-e64851f03c96", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "47b846b2-3678-4c58-a676-0a71e7182209", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b984e289-16aa-40a5-9748-de79a2cce7fb", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "19e25544-b90a-47a3-ad30-f7e094cdbfcb", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "597219ed-7517-4d2b-bb18-9e901a613459", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "e483318c-1bd6-4a62-aeda-be19a9c7fe91", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "f1d057af-59eb-4c02-88b9-22b4a01a2325", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "53af2bbc-8331-47c1-9bc5-a99f1bf375ba", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "cf8a6817-20ac-4a77-a7a2-b7802dd2deb3", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "fe46c557-2c05-455f-9de9-6efb1568d4fc", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "f69ab227-88d0-4f11-8ab6-acb047d81ebd", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b98b0a6a-07e1-48f5-9e47-8925f1bb63b1", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3bffb6dd-16c3-49da-9fed-95932675509c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "6ee6eca5-f163-440f-b747-07a543290577", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b570ea1a-7457-46f7-9d53-0a47c6c99a81", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "5ad0be74-6d2f-4ab6-a81d-951a46b805f8", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "deea57d5-32fa-41c8-b5f3-ea963b58c403", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "d11a5f81-70c8-4792-bf53-4ce605cabf87", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "c84448d2-6322-47da-b485-d21ac329153c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "573114cc-983c-46b9-b3b3-8112db6c96da", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "9a731017-3747-4dec-b696-6cd91ff2868c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "a9184da2-f2dd-4f85-bdf0-ac1520eb5ce5", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "e4254dfb-6945-475a-9460-710d29270b74", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "6e113df1-20ce-4c61-bbb1-ad210f91d8a0", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "2d46a1ea-d86b-40c6-9513-18cdd4f70def", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "d4b4be89-42c5-49f2-8dea-4349958cda6f", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "4ee0e5a7-83ae-4ee1-a2f1-66de9a57fa7e", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "2a0ae48b-8bbf-4bff-9f28-9abbe0c0e471", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "02ba53b4-e506-4405-81d0-66881159d6fc", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "079a4d1e-2755-47af-a1e1-656fccd0eeaf", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "538dd370-6b0c-4c77-bc59-d420aa30f001", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3404306f-2002-4412-b033-291cd64c83b3", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "bb98ca00-203f-4af8-8ef7-fc6c1bc9707e", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "92247bb0-467a-4a07-9d56-1839f9ee2a34", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "d5bfd1c1-13c7-49f9-859f-67a755dad7ed", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "54e48771-0cd5-42d7-8d1e-3a4a460aff12", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b353ee65-b310-4b3f-a508-a53b20d8caa2", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "bcbb7629-166e-4f32-a250-764bd875c4a7", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "6804619b-a871-49e6-a30d-87576675a076", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "b0a5e751-a75a-4b4f-91ed-173331b2bf2e", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "92ae4549-210c-43fb-bd39-47e212b0365c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "2669cf37-bb44-4609-a680-c407e43531b1", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "c8fd40da-b00d-4be5-82a5-5cf65abc160a", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "1d2e84de-9039-47be-8a53-8a02682a3261", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "1056de06-02e3-415c-9a80-e3121356a36c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "0f8dca18-19e0-4592-8008-bd551ed89e76", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "4a7cb510-88b5-4f7c-93cb-57c00f4df8cc", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "64429a31-37d0-409c-aa21-054ef86a6b61", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "adc157a3-fbde-4c15-a788-3015c179ee72", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "2a0a1380-b636-451e-bf79-7c202cc87d62", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "669bc671-9ee2-4e20-accd-1e59df80fa10", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "c827b1a6-f5b4-4397-8cb4-cdbfbce64a51", "solution": "import numpy as np\n\nclass ADE_ED:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.9  # Increased slightly for exploration\n        self.crossover_prob = 0.8  # Reduced slightly for diversity\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            population_mean = np.mean(population, axis=0)  # Calculate population mean\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c + population_mean - population[i]), self.lower_bound, self.upper_bound)  # Added mean for diversity\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.4 * np.random.rand() * diversity  # Slightly increased range\n            self.crossover_prob = 0.5 + 0.3 * np.random.rand() * (1 - diversity)  # Slightly increased range\n\n        return best_solution", "name": "ADE_ED", "description": "Adaptive Differential Evolution with Enhanced Diversity (ADE-ED) improves convergence speed by boosting diversity with a population-wide scaling factor.", "configspace": "", "generation": 85, "fitness": 0.28028540364566185, "feedback": "The algorithm ADE_ED got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8450203222785131, 0.8456708038424944, 0.8551813239896795, 0.8651557473099925, 0.8642934164053081, 0.865170865263445, 0.8361321124643758, 0.8564308586984465, 0.8468757970560111, 0.7282113751633321, 0.7409487595342807, 0.7553497856734529, 0.7343989890491927, 0.7030901446113491, 0.7245044346595557, 0.7363523238098564, 0.7500281383807643, 0.7298714201807714, 0.15555484016458954, 0.15287758003222407, 0.14032708181391684, 0.14742507253251502, 0.1336464447058151, 0.14168206422727747, 0.15019113077559, 0.1574497263243715, 0.15364212123852172, 0.13334506163891946, 0.13689561681679985, 0.12468570386600097, 0.14477982000407064, 0.11142596838250651, 0.12837340397057795, 0.13358581484649912, 0.13259490395519347, 0.12079527495379594, 0.975855462608697, 0.9912073643918183, 0.9808031573327844, 0.9886261070576713, 0.9654781473145122, 0.9661956596626493, 0.9810205866211643, 0.9623843676847801, 0.9738049797778041, 0.2047032133645844, 0.16975140918618503, 0.1817791693674815, 0.23821519377927391, 0.2391046720594262, 0.1895952260762056, 0.19427902955727017, 0.2012599917885527, 0.23074666858430215, 0.6094603647351996, 0.4805674053842989, 0.5103277606052832, 0.6167253478908589, 0.6424871311652822, 0.6262211112795995, 0.6282348499355621, 0.6436239542430655, 0.6012242966278357, 0.14837641639570043, 0.19306072924921835, 0.16574440324652662, 0.1604123650937872, 0.14598393194481218, 0.15320830811278396, 0.2235633429681787, 0.16180765622622784, 0.1622930050448218, 0.16771885339742243, 0.16192930115846593, 0.12356932389641528, 0.16481295679363006, 0.16410088868455697, 0.13990994374696553, 0.16082264954674796, 0.12005503820547492, 0.14655122771987772, 0.053621676230420245, 0.01631195159423715, 0.014737194504522821, 0.005833220467286626, 0.01449715920364214, 0.013063508134339319, 0.025653000325839947, 9.999999999998899e-05, 0.019277313122417428, 0.12157369789840744, 0.08921256691199253, 0.13194031371678872, 0.05857780781493216, 0.06637697672747567, 0.054789003466325314, 0.10627254605645553, 0.14799881820282101, 0.15236799821117297, 0.02846378905690161, 0.04104697399196777, 0.018207062961046572, 0.08176468081594301, 0.03869696869106409, 0.02847548073289996, 0.05840944866715747, 0.02367614082656566, 0.02146103600496585, 0.16263200628024532, 0.15278854695109712, 0.1808365665498456, 0.2020340188579528, 0.19125601267891945, 0.2080617965706919, 0.1608089445549178, 0.1711763891852237, 0.18420585396433908, 0.5555424740692454, 0.583522966413731, 0.6110384757036367, 0.5688336525539731, 0.5836945929154547, 0.5778627837970027, 0.5892656230205019, 0.5373697478955085, 0.5813259624477274, 0.12143147279573663, 0.09561690744472906, 0.09686017986718287, 0.10629054084504497, 0.09621118421901043, 0.09199992135450663, 0.09640762866787422, 0.09738234863619055, 0.10939415690535248, 0.14273721423384234, 0.14999760642190374, 0.11979679590520265, 0.14148359171809444, 0.14709052080160023, 0.15733718009357778, 0.14777001525148792, 0.1302769150091122, 0.13625431919057485, 0.36679451040536437, 0.3204299655350392, 0.2993809138845057, 0.32478299534998456, 0.30506379196779676, 0.2882282080759889, 0.408201990220151, 0.41107097823110395, 0.3751851412524293, 0.1930227511659368, 0.24032691004405538, 0.23346772768924506, 0.181097550150504, 0.2411350107843966, 0.19201775908868735, 0.2688551873373418, 0.23741653197349355, 0.25967367331243896, 0.17832918748848314, 0.1729888189309744, 0.18341672154976074, 0.20179138214893233, 0.19143888508346607, 0.18911654733743932, 0.18827999201492163, 0.2517637759582291, 0.2022842790354178, 0.20190246754969987, 0.2110606888897527, 0.19477587002941832, 0.18576743624863068, 0.21273862861250625, 0.1930885357130424, 0.18611466167827084, 0.19534363824219636, 0.1950342136865103, 0.21141189517090442, 0.16554585761293528, 0.17755583099124939, 0.1763445928823314, 0.16395687265936543, 0.23007794517594493, 0.17095377884028584, 0.20129973834551873, 0.17632705105639856, 0.16427033546758485, 0.1584009560722761, 0.1786940571609017, 0.1541792786180839, 0.26102356661474135, 0.2509229459264011, 0.20763508204608316, 0.2092600608879156, 0.20970851968583015, 0.1840335335366926, 0.18464966577617004, 0.181598545943901, 0.1914180307550487, 0.19779280349096817, 0.18229981168103682, 0.17602438043091584, 0.18571229188280192, 0.1799893594345433, 0.07795263766127336, 0.0738427702373059, 0.07251350866153738, 0.07054902150598752, 0.07544503066141772, 0.081252680010089, 0.07968797435519026, 0.06816495019875479, 0.07119603311605383]}, "mutation_prompt": null}
{"id": "0edf6456-b705-49fa-bea4-bb078aebf712", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "3e72c928-6edc-4535-a149-6ea3831457cb", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "687bf4fe-30fc-4f8e-9ca8-9e438b57503f", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "901ad700-5d55-4786-a770-144dd28e1903", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "1970c276-0d13-46a5-94dc-28a7a0d0f5b3", "solution": "import numpy as np\n\nclass EADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Elitism: Replace worst with best\n            worst_index = np.argmax(fitness)\n            population[worst_index] = best_solution\n            fitness[worst_index] = best_fitness\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n            # Dynamic population resizing\n            if evaluations < self.budget * 0.5:\n                self.population_size = max(15, int(self.population_size * 0.9))\n            else:\n                self.population_size = max(15, int(self.population_size * 1.1))\n            population = np.resize(population, (self.population_size, self.dim))\n            fitness = np.resize(fitness, self.population_size)\n\n        return best_solution", "name": "EADE", "description": "Enhanced Adaptive Differential Evolution (EADE) incorporates dynamic population resizing and elitism to improve convergence speed across varying landscapes.", "configspace": "", "generation": 90, "fitness": 0.2117356646510324, "feedback": "The algorithm EADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.22.", "error": "", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.4140918750941278, 0.634119848726179, 0.45236974424938015, 0.5022000678974035, 0.47292002802576116, 0.20758276577033485, 0.5874504785186863, 0.7148353022189069, 0.5408419746798774, 0.08028510796272004, 0.19360934315068667, 0.5052399350429813, 0.6680462975521239, 0.20159308887988547, 0.936185510763414, 0.9251403528856426, 0.30155194094717575, 0.2503836033141513, 0.1059983362285688, 0.0923146983064651, 0.14990425157558906, 0.0955271915067355, 0.13402688076805247, 0.11380668408280858, 0.10377507701274558, 0.1093812595886644, 0.10638594757202968, 0.0578348393854089, 0.14664627761764604, 0.10963370045427512, 0.12055760302511076, 0.12537877449191404, 0.09381796162456157, 0.09272002207020236, 0.11171370486706633, 0.10215187145029125, 0.9938057237753033, 0.987600597229969, 0.9841361593679533, 0.981265970225609, 0.987962089405699, 0.9810798610267172, 0.9836326877246868, 0.9964070659403929, 0.9866399311453802, 0.08680947361460456, 0.09718483728187421, 0.0882528350232833, 0.08673552854936117, 0.11621106294591044, 0.15882967937227788, 0.27384534116583203, 0.0873968568668193, 0.12702159032480576, 0.17170399889448562, 0.22782335929853248, 0.22949670012546342, 0.18449359434810209, 0.28009031998767464, 0.1937466277351928, 0.23264231611144892, 0.15255913630118922, 0.21905462144602017, 0.1454528373967805, 0.13707051155837957, 0.14836878347504767, 0.03519458777282547, 0.0431103564690698, 0.15436471888047876, 0.09045305616729349, 0.18275488513688054, 0.1903291284866151, 0.1316963511451642, 0.20374778113686798, 0.11085615561022333, 0.2351618277067301, 0.15983181165605254, 0.1519464157448832, 0.12946491149850115, 0.13450231023495418, 0.1398084413032551, 9.999999999998899e-05, 9.999999999998899e-05, 0.2517833688583333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04718630735271201, 0.04901294627741881, 0.10702828862967906, 0.10209589848251965, 0.025682535436473364, 0.01198534732454204, 0.007549294802687845, 0.056250394961994576, 0.15144129709259269, 0.09195122552085899, 9.999999999998899e-05, 0.007233892453825663, 0.08826402456930482, 0.08371650568509126, 9.999999999998899e-05, 9.999999999998899e-05, 0.03713808677992403, 0.08051368424542305, 0.04153659048630942, 0.11558456750515211, 0.0738738394749604, 0.04759629955463063, 0.10174033444779018, 0.12830345349965888, 0.006800868653077274, 0.11811163173570582, 0.13136883777134623, 0.4655037786564239, 0.4279187225866231, 0.3517943629098892, 0.48843002859073803, 0.40557494892004364, 0.46288979564268573, 0.4155363386903179, 0.28248185042035334, 0.509892416244428, 0.0719160493148624, 0.05693253033746093, 0.07834890757880653, 0.06312067021865408, 0.0612182272569477, 0.08733647525957877, 0.03849095951286474, 0.13129729404377122, 0.03977197073614047, 0.11475275994513268, 0.09283452305215356, 0.09289819611522421, 0.19666578964584047, 0.11989494742077533, 0.15195982234845828, 0.11499246824639231, 0.13587795490458598, 0.1246185979803418, 0.20505180378553367, 0.3030797234128837, 0.15919549023181256, 0.22274582648208563, 0.1773902012852705, 0.15422874837285439, 0.15272782433529086, 0.2010157809261678, 0.2950324604787289, 0.24369659808167865, 0.26410065954319706, 0.1605878045530349, 0.2167707722591583, 0.23975229622661254, 0.3001264673157219, 0.1896115310049563, 0.19097267075370772, 0.13241541040533067, 0.1894509166415741, 0.19133933544156934, 0.165342761236297, 0.16305485478039516, 0.1700844045729345, 0.13774919293053445, 0.15795847336517477, 0.14691726085965384, 0.14983272673865922, 0.19046881569869978, 0.1749280281864669, 0.18479613978670373, 0.1799086787669183, 0.1824416268080402, 0.18687072282281691, 0.2250791272615349, 0.2087194262187877, 0.16046649919996814, 0.155956764758439, 0.1679189982471775, 0.12892671693646574, 0.9069102031155978, 0.1207914665021157, 0.1721442208364422, 0.4202350084023958, 0.09908467525687104, 0.104654588027291, 0.16646672838285326, 0.15572839920521497, 0.27101027047715265, 0.20422407040505997, 0.5421555605542463, 0.16879240945512008, 0.19391969549844368, 0.1284845561268365, 0.09308097771263169, 0.1619130486406375, 0.16354976997002468, 0.1572349481125166, 0.16892503585370722, 0.15840779088281431, 0.14827762419755386, 0.14969714796693134, 0.16538103645663627, 0.15719934789198775, 0.058933732435677344, 0.0631932516505096, 0.05568078642103369, 0.06667083293182263, 0.10515160111462041, 0.07257755734260429, 0.05787274890459759, 0.06995133456972236, 0.051524506504828094]}, "mutation_prompt": null}
{"id": "d90fc627-8d41-4162-b90b-e61bfe80d1c3", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "35c2d8a7-df5b-45a8-bbec-d8fd4069635c", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "8be26c60-4a04-4182-81b2-f4f8d6d980d9", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "7e0160c6-3fe5-4398-a9cd-49500f2727cf", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "379b7191-2b93-412a-8327-987a30dd34da", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "d44fbfbd-778a-4f17-8131-1c5dcaf2371b", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "eec6638c-c859-4b14-854f-a1b1f648488b", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "42bf6dbb-f878-49d1-a808-c541558d78c4", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
{"id": "9cd96c7b-453e-49d1-b8e0-49545ba2ec6b", "solution": "import numpy as np\n\nclass NADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = max(15, 5 * dim)\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.init_std = np.std([self.lower_bound, self.upper_bound])\n    \n    def __call__(self, func):\n        best_solution = None\n        best_fitness = np.inf\n        evaluations = 0\n\n        # Initialize population\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations += self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Mutation step\n                indices = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover step\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial = np.where(crossover, mutant, population[i])\n                \n                # Evaluation\n                trial_fitness = func(trial)\n                evaluations += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                    # Update best solution\n                    if trial_fitness < best_fitness:\n                        best_solution = trial\n                        best_fitness = trial_fitness\n\n                if evaluations >= self.budget:\n                    break\n\n            # Adapt mutation factor and crossover probability\n            diversity = np.mean(np.std(population, axis=0)) / self.init_std\n            self.mutation_factor = 0.5 + 0.3 * np.random.rand() * diversity\n            self.crossover_prob = 0.6 + 0.2 * np.random.rand() * (1 - diversity)\n\n        return best_solution", "name": "NADE", "description": "Novel Adaptive Differential Evolution (NADE) combines differential evolution with dynamic parameter adaptation for robust search across diverse landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b8402d65-2103-4405-8cf4-7569898c94c2", "metadata": {"aucs": [0.8939416314563052, 0.8951315694644773, 0.8906115022569423, 0.90715735179276, 0.8957452758748174, 0.9012497577430556, 0.8978131777031049, 0.9022932353530487, 0.9062909312324072, 0.8181220390180854, 0.8097588783013827, 0.7942187378385412, 0.825757145198625, 0.8140677972546277, 0.8214247501955689, 0.8130991187921052, 0.8255586550780923, 0.8182704824097404, 0.5736381780597648, 0.6207256728287718, 0.6297406261433718, 0.6083177211402386, 0.5471678805367975, 0.5525944752828407, 0.6119975534638624, 0.5011528567876158, 0.6074626158392166, 0.49648341440688715, 0.4716610177726631, 0.1731213599533198, 0.14834961831242854, 0.16696111206472342, 0.5376659946140584, 0.14398133434174565, 0.14625583292460265, 0.16835563391178965, 0.9802039220291652, 0.9700753815360096, 0.9602044525578505, 0.8861290734659937, 0.9781277827058177, 0.9758021695682444, 0.9716665492239822, 0.9964070659403929, 0.9655717100969288, 0.614890300408, 0.6577557045721826, 0.6357176980999599, 0.6911407263224822, 0.6885170538240487, 0.5969835560887125, 0.6114390997912325, 0.33963279234134747, 0.47345718569143314, 0.8459914269902749, 0.7646467546014437, 0.8207884762929183, 0.8356217511700185, 0.7739172954141834, 0.7686302744336257, 0.7796507542546367, 0.7669358598774353, 0.8562648071983874, 0.17078312286403885, 0.19556109974807412, 0.1826481222568358, 0.17859882384387915, 0.2296256645208954, 0.18844877636233204, 0.17673729411669648, 0.2065292607277074, 0.20937308725084525, 0.1746304055257859, 0.21689150170812976, 0.18367906947189871, 0.2213706747347195, 0.17579126688731028, 0.16492321740110216, 0.17341421007419844, 0.18815061812978173, 0.2157463596349889, 0.15577548120065254, 0.15206333727146648, 0.11570577070302701, 0.17341356989145884, 0.2173218109599373, 0.23372178601293736, 0.24617167771681026, 0.26082668690960364, 0.054893737040389134, 0.36033446000599434, 0.3044389978687627, 0.3353824952796144, 0.23903389445701506, 0.28957895316929727, 0.2976762512422, 0.35452959637606407, 0.36988447308103145, 0.25978459150137756, 0.11265803643941585, 0.05418569208835122, 0.11484534783495182, 0.1931280270369199, 0.19062549453776945, 0.10365786808850752, 0.22244021372765366, 0.11741576528502062, 0.12027712621753339, 0.30162505433943965, 0.26125815624363, 0.2929121148723153, 0.33069751104640843, 0.33379324488347484, 0.36370728329805435, 0.2549492324957112, 0.24313381725909733, 0.24290243510506282, 0.6934354507794271, 0.7226351713818551, 0.7078654120505081, 0.6571848303233769, 0.724965213630566, 0.6439178149761835, 0.730983833892918, 0.6573181135535477, 0.7569922602192262, 0.10131162409470285, 0.10963945500994632, 0.10313431753816227, 0.10505796723955974, 0.11203670104752506, 0.09903502621303273, 0.10861745086694119, 0.11698811386715902, 0.10287532148775058, 0.14326848222916688, 0.14184498807549084, 0.14062056811615675, 0.13530575032684244, 0.197749488547578, 0.15525983731588655, 0.15458843164825598, 0.13087270265263218, 0.15343930633804703, 0.4622245025843046, 0.5915008212732604, 0.5421861132793317, 0.5445066694084023, 0.5127379288079965, 0.5212849258694963, 0.6525883744084087, 0.6394640797352742, 0.5880202024573338, 0.35168834561522166, 0.32312999758146843, 0.2856458782197294, 0.37298993114719103, 0.3375018159918254, 0.3456373507246814, 0.4282474056172352, 0.43027879931383217, 0.36847391302733323, 0.21599116223386272, 0.18498789841391805, 0.1942292585008678, 0.2049295182944506, 0.1952562474833961, 0.18742090973111458, 0.20233347673976865, 0.2197634680850361, 0.19555716052574235, 0.2274880814076513, 0.5947486363346708, 0.5777376581756362, 0.4473786092529204, 0.23706202682823974, 0.2390365542250883, 0.41606813676380994, 0.6893368942005365, 0.5801359343838963, 0.16292893975525058, 0.6044136089959975, 0.1914477919907155, 0.6091484324370234, 0.6498801355044115, 0.812495057886514, 0.6632259864757577, 0.7590036567530254, 0.6609232780015362, 0.626395066105876, 0.641781070954086, 0.4919037759355044, 0.6847580079066977, 0.7653621775964881, 0.4862274265887193, 0.20796513954373363, 0.3105523016169609, 0.7956750721976704, 0.1845660616425061, 0.1798358823808247, 0.18325210418322346, 0.17008585055089243, 0.18056739032673608, 0.1855478850517256, 0.1791735738337784, 0.1987971122496428, 0.17918904849028583, 0.1121398992848146, 0.08287750370717129, 0.07850062562396687, 0.07971040857940548, 0.08523676164410388, 0.07617236340958822, 0.08322617158433876, 0.08441665567734835, 0.08446267129332596]}, "mutation_prompt": null}
