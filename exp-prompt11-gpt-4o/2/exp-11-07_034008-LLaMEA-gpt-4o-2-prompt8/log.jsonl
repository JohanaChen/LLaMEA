{"id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 0, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "12eeb8a0-b1af-473a-9661-54441229e327", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "bd48534d-2a93-41c3-8f8e-16a174d3807e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "1024492d-6fcd-4359-a010-ea5f08e488c0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "11f3a4b9-3f14-4556-b6f4-ad91d4142789", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "efd8a415-2f62-4417-a869-44a7a19deec3", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "55888ff3-b849-4a03-b6db-432d8e8558c4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0d6f8a1d-f146-4c2a-8d79-f6c687a0291e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "d7ba0e8c-6ed4-4a6e-9700-95f378d7205d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "5b210757-c74b-46ed-911e-5b13deb72f31", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "5751895d-4dca-4ce9-9874-7568e1875919", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "47842293-6f46-454a-9d9e-19009544c4df", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "7ea117a2-822e-4bd0-8e1b-7e186fdd7a71", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "591cb042-1c2e-4fa2-81ef-85aed9db16aa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "eadfe1d8-99be-448f-a8e2-231556138863", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        # Pre-generate random numbers for efficiency\n        num_randoms = self.population_size * self.dim * 2\n        random_vals = np.random.rand(num_randoms).reshape(self.population_size, self.dim, 2)\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = random_vals[:, :, 0], random_vals[:, :, 1]\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Optimized HybridPSO_DE by reducing redundant calculations and improving memory efficiency.", "configspace": "", "generation": 14, "fitness": 0.255930449941959, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.6736471574658165, 0.6819486704030298, 0.7952052781583562, 0.38252519742804714, 0.4996619619692123, 0.9051480868935429, 0.8883080729731351, 0.8861115529442103, 0.863999889171394, 0.2951125718065223, 0.23978080380035105, 0.6102338550167133, 0.40853299928743325, 0.30075664992731943, 0.5837783265944361, 0.525762486844203, 0.4252613305835391, 0.0976126812700524, 0.07273999408779142, 0.07665168114157261, 0.06757044406005552, 0.09170467352886658, 0.1657084416100122, 0.09286000269174965, 0.15541345544949403, 0.10482902245471193, 0.0930001498737949, 0.12082629600479178, 0.08655887246138116, 0.11292131032363029, 0.12195806246695151, 0.18624757219989618, 0.1297179128303807, 0.09208308287995493, 0.1025640691856814, 0.08210844099621994, 0.974775406241872, 0.9735766983665752, 0.9778252304885615, 0.9800401698216794, 0.9784643169747418, 0.9933458809069038, 0.9871325750021329, 0.9896249423909889, 0.9617044867899508, 0.46515158950564683, 0.26269327852634694, 0.3188823405710951, 0.18576891289604658, 0.4496366342047693, 0.29721588321284576, 0.3967720425580539, 0.2994215909553426, 0.2481779851504975, 0.2254286848156598, 0.1346289069118617, 0.21592202484860767, 0.3308925690747009, 0.20609840046527317, 0.19316659649609702, 0.12593582327421626, 0.18432995523790785, 0.3032375545777056, 0.15515266380235404, 0.15933997422385437, 0.1561781930330608, 0.2664956785339888, 0.16265288874866657, 0.12513424902696346, 0.1560199783281343, 0.17251560872649496, 0.15413264305018715, 0.2669030874805821, 0.11717983539300036, 0.12732030989655618, 0.1598499517466867, 0.18889295623579716, 0.24519151630564295, 0.20279055321963557, 0.0935727802497609, 0.19708111965097852, 0.14214502999555934, 9.999999999998899e-05, 0.0029561361281060794, 0.0701180986813793, 9.999999999998899e-05, 0.01467790457878071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06835473821220694, 0.05272651272951734, 0.08497832462756982, 0.06973979520644513, 0.01738633457609684, 0.021117104981493884, 0.08725269288226734, 0.04971042497674627, 0.12177198658682631, 0.20064209814642398, 0.18684081277584041, 0.14700479001649946, 0.2627460979759677, 0.12651001373320303, 0.07920812022088886, 0.12408641473623827, 9.999999999998899e-05, 0.07288193444701974, 0.13782871624458326, 0.08335593067141256, 0.13376070847367716, 0.2060056180744716, 0.06548746190958554, 0.0675453452061382, 0.047935577937913365, 0.04859671779482122, 0.08231718596716564, 0.4910064605757338, 0.516252184281061, 0.45416185286298927, 0.4392979188258409, 0.42926749792101626, 0.5360415200213509, 0.4789337042333104, 0.5162483527629451, 0.5147117250812994, 0.07540943716886084, 0.08671367041200317, 0.07064955832128195, 0.08416140398307848, 0.08154436820001998, 0.09593899640278236, 0.12500042575279735, 0.11270406249877829, 0.06988049738760493, 0.17516254882645876, 0.16232892630978313, 0.21563796189598228, 0.16567884162744828, 0.17904778720200754, 0.13012466742325246, 0.22251187528130356, 0.12489683131747842, 0.1455782859972411, 0.31381010299642553, 0.22565796669752725, 0.37618034485704654, 0.22858346313457045, 0.25123927940999846, 0.19110105984471626, 0.3298013426076606, 0.2727331545416132, 0.34471135728640945, 0.09769924110495176, 0.22763046986878355, 0.1807401765146518, 0.23421345015619, 0.11761104601159678, 0.18000870600821506, 0.21286707673985417, 0.22729165811341412, 0.30382493571046865, 0.19318852278849397, 0.2167241819344886, 0.1876113243211267, 0.19429186806288934, 0.18854636628800525, 0.1995126568593869, 0.22330160018416845, 0.20696780397627756, 0.1973179427271552, 0.20247485676785404, 0.19957506912730627, 0.1769531617131166, 0.18072694682504642, 0.17629701252656105, 0.18688169226669393, 0.17442730215066227, 0.20116914298178412, 0.18043357491602452, 0.608872834730622, 0.9117233828789344, 0.15487907112065424, 0.8339041839303193, 0.19920494559398239, 0.40966332924098114, 0.1666127600451106, 0.13221623580778485, 0.16139960801758046, 0.6164971445987082, 0.21204214942670052, 0.1677795390887079, 0.7433173496364575, 0.16866602186568402, 0.4268244885114567, 0.2080525473330579, 0.16367241850135683, 0.3059833558444659, 0.18605494582720516, 0.1986524925630253, 0.20251798075786343, 0.18054836472211588, 0.17246546644641436, 0.20396766780142184, 0.18192898724923767, 0.2111272005718442, 0.17769241132067293, 0.0723441150491384, 0.09174303691163876, 0.08543735066026625, 0.14035239509293063, 0.07096087288313757, 0.06834092145552839, 0.0871367706734838, 0.09706674278858995, 0.0989367247237033]}, "mutation_prompt": null}
{"id": "3017a770-ffcf-4520-9954-56525ee7fdf7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "6e7020c0-dc47-4944-b79c-002919f8c4b8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "4521a126-6585-413b-884e-85d331989212", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "ee57140d-74bf-4237-b1c7-79a6f6d96280", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "658f816d-a4be-4ac2-af21-54835108c635", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "9a4f1560-ed0d-44f2-8899-79c84762ab4f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "3cd9a1da-22f7-42dc-a76e-eb5e94144c4b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "f454806f-7a31-4a76-bde8-cc7784d9df1d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "6cece33a-a574-4b20-be5d-ae47d399c848", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "3dc1b5e4-850a-4924-8141-3890bc9f1ea1", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "13d8c2ab-ea85-4f4e-a8e3-30bb7061fbca", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0553b3e2-b239-4f8f-8f97-fe9c63fbdd91", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "ca6cbb9c-18fb-49dc-b901-59403a0968bc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "49b1be8b-4896-4690-bf1c-a3f2bdaa92ae", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "a308f6fa-dfa1-4ccc-a207-bf3b76434e3b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "3acb236a-6c57-484f-897d-da1dfd650cc7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "2d587cba-fb26-40e9-bc96-c012cf6dbc1f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "ab6a83d0-b170-4326-853d-d94f668fc435", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "45c813c5-54e9-46dc-b8bc-4d3cad2f833e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "17698f97-2617-4d9a-8eef-717c250fb244", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "d1ebab02-770f-4236-ba60-d912d8c4746c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "ffd7eb2e-73d8-4285-ad71-9a5acb8b538a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n\n        rands = np.random.rand(self.population_size, self.dim, 2) # Pre-generate random numbers for PSO\n        \n        while self.evaluations < self.budget:\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n\n            # Update personal and global bests\n            better_scores = scores < self.pbest_scores\n            self.pbest_scores = np.where(better_scores, scores, self.pbest_scores)\n            self.pbest_positions = np.where(better_scores[:, np.newaxis], self.particles, self.pbest_positions)\n            \n            best_score_idx = np.argmin(scores)\n            if scores[best_score_idx] < self.gbest_score:\n                self.gbest_score = scores[best_score_idx]\n                self.gbest_position = self.particles[best_score_idx]\n\n            # PSO velocities and positions update\n            r1, r2 = rands[:, :, 0], rands[:, :, 1]\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles = np.clip(self.particles + self.velocities, self.lower_bound, self.upper_bound)\n\n            # Adaptive DE step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation and Crossover\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Optimized HybridPSO_DE with memory efficiency and loop restructuring for improved runtime performance.", "configspace": "", "generation": 36, "fitness": 0.255930449941959, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.6736471574658165, 0.6819486704030298, 0.7952052781583562, 0.38252519742804714, 0.4996619619692123, 0.9051480868935429, 0.8883080729731351, 0.8861115529442103, 0.863999889171394, 0.2951125718065223, 0.23978080380035105, 0.6102338550167133, 0.40853299928743325, 0.30075664992731943, 0.5837783265944361, 0.525762486844203, 0.4252613305835391, 0.0976126812700524, 0.07273999408779142, 0.07665168114157261, 0.06757044406005552, 0.09170467352886658, 0.1657084416100122, 0.09286000269174965, 0.15541345544949403, 0.10482902245471193, 0.0930001498737949, 0.12082629600479178, 0.08655887246138116, 0.11292131032363029, 0.12195806246695151, 0.18624757219989618, 0.1297179128303807, 0.09208308287995493, 0.1025640691856814, 0.08210844099621994, 0.974775406241872, 0.9735766983665752, 0.9778252304885615, 0.9800401698216794, 0.9784643169747418, 0.9933458809069038, 0.9871325750021329, 0.9896249423909889, 0.9617044867899508, 0.46515158950564683, 0.26269327852634694, 0.3188823405710951, 0.18576891289604658, 0.4496366342047693, 0.29721588321284576, 0.3967720425580539, 0.2994215909553426, 0.2481779851504975, 0.2254286848156598, 0.1346289069118617, 0.21592202484860767, 0.3308925690747009, 0.20609840046527317, 0.19316659649609702, 0.12593582327421626, 0.18432995523790785, 0.3032375545777056, 0.15515266380235404, 0.15933997422385437, 0.1561781930330608, 0.2664956785339888, 0.16265288874866657, 0.12513424902696346, 0.1560199783281343, 0.17251560872649496, 0.15413264305018715, 0.2669030874805821, 0.11717983539300036, 0.12732030989655618, 0.1598499517466867, 0.18889295623579716, 0.24519151630564295, 0.20279055321963557, 0.0935727802497609, 0.19708111965097852, 0.14214502999555934, 9.999999999998899e-05, 0.0029561361281060794, 0.0701180986813793, 9.999999999998899e-05, 0.01467790457878071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06835473821220694, 0.05272651272951734, 0.08497832462756982, 0.06973979520644513, 0.01738633457609684, 0.021117104981493884, 0.08725269288226734, 0.04971042497674627, 0.12177198658682631, 0.20064209814642398, 0.18684081277584041, 0.14700479001649946, 0.2627460979759677, 0.12651001373320303, 0.07920812022088886, 0.12408641473623827, 9.999999999998899e-05, 0.07288193444701974, 0.13782871624458326, 0.08335593067141256, 0.13376070847367716, 0.2060056180744716, 0.06548746190958554, 0.0675453452061382, 0.047935577937913365, 0.04859671779482122, 0.08231718596716564, 0.4910064605757338, 0.516252184281061, 0.45416185286298927, 0.4392979188258409, 0.42926749792101626, 0.5360415200213509, 0.4789337042333104, 0.5162483527629451, 0.5147117250812994, 0.07540943716886084, 0.08671367041200317, 0.07064955832128195, 0.08416140398307848, 0.08154436820001998, 0.09593899640278236, 0.12500042575279735, 0.11270406249877829, 0.06988049738760493, 0.17516254882645876, 0.16232892630978313, 0.21563796189598228, 0.16567884162744828, 0.17904778720200754, 0.13012466742325246, 0.22251187528130356, 0.12489683131747842, 0.1455782859972411, 0.31381010299642553, 0.22565796669752725, 0.37618034485704654, 0.22858346313457045, 0.25123927940999846, 0.19110105984471626, 0.3298013426076606, 0.2727331545416132, 0.34471135728640945, 0.09769924110495176, 0.22763046986878355, 0.1807401765146518, 0.23421345015619, 0.11761104601159678, 0.18000870600821506, 0.21286707673985417, 0.22729165811341412, 0.30382493571046865, 0.19318852278849397, 0.2167241819344886, 0.1876113243211267, 0.19429186806288934, 0.18854636628800525, 0.1995126568593869, 0.22330160018416845, 0.20696780397627756, 0.1973179427271552, 0.20247485676785404, 0.19957506912730627, 0.1769531617131166, 0.18072694682504642, 0.17629701252656105, 0.18688169226669393, 0.17442730215066227, 0.20116914298178412, 0.18043357491602452, 0.608872834730622, 0.9117233828789344, 0.15487907112065424, 0.8339041839303193, 0.19920494559398239, 0.40966332924098114, 0.1666127600451106, 0.13221623580778485, 0.16139960801758046, 0.6164971445987082, 0.21204214942670052, 0.1677795390887079, 0.7433173496364575, 0.16866602186568402, 0.4268244885114567, 0.2080525473330579, 0.16367241850135683, 0.3059833558444659, 0.18605494582720516, 0.1986524925630253, 0.20251798075786343, 0.18054836472211588, 0.17246546644641436, 0.20396766780142184, 0.18192898724923767, 0.2111272005718442, 0.17769241132067293, 0.0723441150491384, 0.09174303691163876, 0.08543735066026625, 0.14035239509293063, 0.07096087288313757, 0.06834092145552839, 0.0871367706734838, 0.09706674278858995, 0.0989367247237033]}, "mutation_prompt": null}
{"id": "12eb96c2-89e5-4cce-8204-590189d8b92a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "f5f9b574-8cc7-498a-865e-3b97711bd596", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "d726e583-e9d0-42af-9859-350b6f273c40", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w, c1, c2 = 0.7, 1.5, 1.5\n        F, CR = 0.8, 0.9\n        \n        while self.evaluations < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n                    if score < self.gbest_score:\n                        self.gbest_score = score\n                        self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n\n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                cross_points[np.random.randint(0, self.dim)] = True if not np.any(cross_points) else cross_points\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with minor runtime efficiency improvements by optimizing iteration structures and reducing redundant computations.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {}, "mutation_prompt": null}
{"id": "70b44da2-8fb8-4176-8e8d-f927d9cd70a2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "01526b75-9152-46af-b368-2365f8216dc2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "d9da7002-838f-4a40-8d0d-8d7a3b3601e3", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "a7e43253-ee05-4c52-9dd2-f168d72a17f0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "3274b766-c6be-44a3-841c-3a1d3e138c39", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "4031ca21-6a72-464e-b3e4-ada68836e390", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "176f9ebe-605c-46fe-87e9-9f40a45c940d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0fa3dbeb-2795-4439-a5a3-9eb05e46646f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "dccfd39c-cfb0-4823-a447-af07a8802530", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "eb61fc8e-3cd7-4821-8c7f-87c03ad172bc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "70403b9e-b50f-4c73-ac1b-7956e9711dbc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "731a33ee-2436-416b-b86a-450d1b3049d3", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "c88b1e38-7f96-4ef9-8fd9-b7b36f26fde4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "4c45a861-026a-4f4b-bf64-43a9790df3b8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "9d08d79a-82b8-4fc1-8494-f8df7597d927", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)  # Precompute random arrays for efficiency\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover and Selection\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Optimized HybridPSO_DE by streamlining calculations and refining loop structures for enhanced runtime efficiency.", "configspace": "", "generation": 54, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "9171c120-909f-4e5e-bfbe-3a3f5f6e741b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.copy(self.particles[0])  # Initialize with a particle\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            # Vectorized evaluation of all particles\n            scores = np.apply_along_axis(func, 1, self.particles)\n            self.evaluations += self.population_size\n            \n            # Update personal bests\n            better_scores_mask = scores < self.pbest_scores\n            self.pbest_scores = np.where(better_scores_mask, scores, self.pbest_scores)\n            np.copyto(self.pbest_positions, self.particles, where=better_scores_mask[:, None])\n\n            # Update global best\n            min_score_idx = np.argmin(scores)\n            if scores[min_score_idx] < self.gbest_score:\n                self.gbest_score = scores[min_score_idx]\n                self.gbest_position = np.copy(self.particles[min_score_idx])\n\n            # Optimize velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE by optimizing loop structures and reducing unnecessary array copying for better runtime efficiency.", "configspace": "", "generation": 55, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "b144c8b3-48e2-4153-8246-8d38fe5508f6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "30f11ae9-3bc1-4ccf-be87-5a2129aa3969", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "07c59b2b-706a-4180-84ad-ccf619881d6f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "e5b31c84-49ec-4867-bb66-2c1a831c53af", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "9a15e73d-98d0-4950-9e40-e7fd66a8d1c8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0aae2d6c-e7cd-4b5a-aa0a-b2427a7567b2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "cacc4a95-abbe-4dd3-8bf2-776a0eae5511", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "baa323fc-bcd2-4311-a1ea-7598885104ac", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "65250b23-708c-48ca-bfea-4e987ec0fad9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "23ee6eb3-e117-4b70-9e66-dd7a36e3e0aa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "e469dba5-f390-458f-ab47-77b03b68ba05", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "c998b2da-f609-4049-add6-76cb693daab9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "70a0dafc-dae7-451c-80a7-b712e637daa7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "2dd28c45-4f07-458a-bfc9-22681f7924fa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "8d7c173f-c6f9-434f-a21d-ed0ff4cf683a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "5b478ab0-224b-486f-9dad-5b83d707913b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle and update personal best\n                score = func(self.particles[i])\n                self.evaluations += 1\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n                    if score < self.gbest_score:\n                        self.gbest_score = score\n                        self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO in vectorized form\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia = w * self.velocities\n            cognitive = c1 * r1 * (self.pbest_positions - self.particles)\n            social = c2 * r2 * (self.gbest_position - self.particles)\n            self.velocities = inertia + cognitive + social\n            self.particles += self.velocities\n            np.clip(self.particles, self.lower_bound, self.upper_bound, out=self.particles)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover and Selection\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n                trial_score = func(trial)\n                self.evaluations += 1\n\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with optimized particle updates and loop efficiency.", "configspace": "", "generation": 71, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "a4112736-db1a-4038-adbd-665359b85adc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "6f72e7a8-a7db-4816-98d0-babed34ed64f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "7abf3393-319f-4fd0-a12c-9077726c5fd7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0b968933-3f87-4269-bbd4-cba2370222fb", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "55d36b0e-a456-41ed-ab15-ace011c50c2e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "8132a460-e0a7-45b7-9c4d-ca87e0456ebd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "6ad867c7-e981-46b0-a869-9241141a6bea", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "ca9332df-5cdb-4efe-aac8-eb61a9257916", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "c16d3210-ae7c-462a-bd82-788e04015bc5", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "8dd48a3b-2a1f-4e1a-a605-da05045fabdd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "20604980-2c89-4b8b-8198-f05330dc3dd8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "db156798-2082-4c4b-9fd1-ccc68ce63ee6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "5f905bb4-c310-4ccb-932a-bedcb38a57c7", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "783e7e06-824a-4ba7-a281-e6e77324782c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "e02e62c3-d435-46d9-b180-baca73f950ca", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "df5a89df-dc7a-4050-a1f7-af6afee6d888", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "fb50a5be-c28c-496a-9b40-392afb247987", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "c808d6a0-d85e-4542-b78a-8929bc00362e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "a9d9c957-2022-482c-9bd0-9789a9f0fb38", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w, c1, c2 = 0.7, 1.5, 1.5\n        F, CR = 0.8, 0.9\n        \n        while self.evaluations < self.budget:\n            # Precompute random values for the population to reduce repeated calls\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best and global best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n                    if score < self.gbest_score:\n                        self.gbest_score = score\n                        self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = np.clip(x0 + F * (x1 - x2), self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Optimized HybridPSO_DE algorithm with enhanced efficiency by reducing redundant calculations and restructuring loops.", "configspace": "", "generation": 90, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "82be3de4-e1cc-4f7b-ae30-b612079c08da", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "639290ee-55ba-4974-bb45-dff6284e4f70", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "b5a35033-2c5e-4964-bdad-093d612a83e6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "326843a8-6baa-4025-b334-fa7989e3dab0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "0354b1fe-a98b-49cf-b7b7-fc93a38e2332", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "c8f140e5-a7c6-44c2-a10a-20597681fa73", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            np.clip(self.particles, self.lower_bound, self.upper_bound, out=self.particles)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "Improved efficiency by caching random values and optimizing array operations.", "configspace": "", "generation": 96, "fitness": 0.2880266916394498, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "88c44d47-b656-4ee2-895e-fb23b60886ef", "solution": "import numpy as np\n\nclass HybridPSO_DE_Optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            # Pre-calculate random values for efficiency\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    return self.gbest_position\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i]\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i]\n\n                # Update velocities and positions using PSO\n                self.velocities[i] = (w * self.velocities[i] + \n                                      c1 * r1[i] * (self.pbest_positions[i] - self.particles[i]) +\n                                      c2 * r2[i] * (self.gbest_position - self.particles[i]))\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    return self.gbest_position\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates[0]], self.particles[candidates[1]], self.particles[candidates[2]]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial\n\n        return self.gbest_position", "name": "HybridPSO_DE_Optimized", "description": "Optimized HybridPSO_DE with reduced redundant calculations and loop unrolling for improved efficiency.", "configspace": "", "generation": 97, "fitness": 0.26113558663942815, "feedback": "The algorithm HybridPSO_DE_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.7525226211226115, 0.729245309511006, 0.7895220172343136, 0.7654614380971234, 0.74154104675041, 0.7889302135577438, 0.7237405099540593, 0.7088977046282875, 0.8139275648915618, 0.4010952791217095, 0.38905027502038203, 0.4504441005369413, 0.42773211406206335, 0.36334485323639343, 0.41377168920387986, 0.3269210286436852, 0.3799851577970169, 0.37275818646475145, 0.150144253390592, 0.14384233702993643, 0.12321386511690124, 0.13145019563841576, 0.1455274022222588, 0.12799886054020515, 0.1225092756687276, 0.10543709449606453, 0.10995091175432448, 0.14206350531098033, 0.13274367216626382, 0.10486097543650152, 0.1504915114654084, 0.08705135332978153, 0.11048943869641348, 0.12714269555790547, 0.11698588897856244, 0.11998707385719554, 0.9869250453051209, 0.982687019885936, 0.9934220264655113, 0.985300635996194, 0.9856948419975045, 0.9825632966442501, 0.9821151125041395, 0.9848757453801521, 0.9875307069647717, 0.41096888114366226, 0.39414598446268223, 0.3426447856260012, 0.3990648651963875, 0.39719076915695983, 0.43250777455926304, 0.28759315204242064, 0.40326568582375844, 0.4170669136884987, 0.21495412522236157, 0.22179351347064624, 0.21757935056830746, 0.3741758572478464, 0.3478201195447034, 0.2182955816741562, 0.37914871393183236, 0.16607883508498567, 0.14539521145526013, 0.11974180895451314, 0.22532237859233428, 0.15509589824818726, 0.10924313364304272, 0.19046173143636091, 0.10229283834266589, 0.14655569842502814, 0.18586799674732535, 0.15621936201447717, 0.13414136586280367, 0.05057876893627977, 0.12104532725465311, 0.195590336411671, 0.1899497552455851, 0.16056900291730747, 0.19611974052697212, 0.13359859500633686, 0.16197630510868133, 0.0054352624620017664, 9.999999999998899e-05, 0.03410722267246258, 0.008586815475311815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1116231430650958, 0.05821115545874889, 0.06621395673817931, 0.08326505606049195, 0.006088569480455219, 0.07573281618853267, 0.052160012235667796, 0.06063946560186528, 0.06058314836241885, 0.04353751453108967, 0.02975484131282724, 0.06974859733679062, 0.07642350834605727, 0.06286084507574907, 0.11983752295092032, 0.08117193566473269, 0.05868848410231897, 0.060942410764218025, 0.10310079466890765, 0.07125155555334728, 0.0767723569439428, 0.03642717069232981, 0.09720978085443766, 0.030259492966926205, 0.07516380156865876, 0.051733038322745784, 0.07818669104256837, 0.504807214061233, 0.4668023475666605, 0.5656686942344731, 0.48829038103261635, 0.48159802232462656, 0.4575409606381924, 0.46719032937740046, 0.44071910413483095, 0.4903620639425015, 0.09674715160055491, 0.09009109475620225, 0.08288474509957322, 0.12921739400806076, 0.1408429199496235, 0.12570971199281544, 0.13526553640141648, 0.10933915886945977, 0.11816998781531562, 0.31895739722318617, 0.1575938451801927, 0.18955161765641915, 0.1731277875387084, 0.5537312466348256, 0.15326085372011, 0.16271438434612684, 0.1821709688040084, 0.17351977338350966, 0.27477416300527724, 0.37996325014603594, 0.2857694260043038, 0.2854661688308453, 0.21373204123131417, 0.20656050275118853, 0.4271351901940973, 0.2611971507777411, 0.25796869027393565, 0.16434602327175019, 0.30077320336437796, 0.23934569800709693, 0.20563950165236722, 0.18551845723882787, 0.26638909060321536, 0.1841645241073092, 0.2655169391541462, 0.2795997927445123, 0.21083435978055765, 0.2451401527558461, 0.18856019821616476, 0.2157076553680135, 0.2075438647199952, 0.23604572471388718, 0.22280439045668154, 0.18381665057867236, 0.23390515715954596, 0.2363865462166277, 0.32192831575946235, 0.22016248439596342, 0.20139489317734327, 0.284426172030671, 0.23775149919295901, 0.2116196021696306, 0.1940939861729949, 0.1886057228837934, 0.7526565692001879, 0.8114628867950173, 0.15374385963882053, 0.17026385435284797, 0.19953499413643927, 0.16501106777380026, 0.8176303831403713, 0.16339640136093858, 0.15547971564644303, 0.4091887935483325, 0.5222182075824573, 0.3810264006534769, 0.20527227419072913, 0.1265288394059766, 0.20200649865014353, 0.21772996851838589, 0.24347188360189798, 0.228874687958044, 0.19298892582744498, 0.17258376653490504, 0.19782773851030033, 0.17635066376684028, 0.18234185817008497, 0.2186172527699103, 0.1787589918408794, 0.19306886728362616, 0.18804286112879287, 0.1091142771597906, 0.07954816469774983, 0.08907705751208128, 0.07324398257256637, 0.09446004976184919, 0.07852118083867499, 0.09749248327714954, 0.08583410310803974, 0.07918234009397274]}, "mutation_prompt": null}
{"id": "a27ace09-2c77-42b7-b20d-98c4b6ed87b2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
{"id": "76e4d1f4-5d88-47ca-bdad-172f92dd7709", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 + int(2 * np.sqrt(dim))\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = np.zeros(dim)\n        self.gbest_score = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        w = 0.7\n        c1 = 1.5\n        c2 = 1.5\n        F = 0.8\n        CR = 0.9\n        \n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Evaluate current particle\n                score = func(self.particles[i])\n                self.evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (w * self.velocities + \n                               c1 * r1 * (self.pbest_positions - self.particles) +\n                               c2 * r2 * (self.gbest_position - self.particles))\n            self.particles += self.velocities\n            self.particles = np.clip(self.particles, self.lower_bound, self.upper_bound)\n            \n            # Adaptive Differential Evolution step\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                \n                # Mutation\n                candidates = np.random.choice(self.population_size, 3, replace=False)\n                x0, x1, x2 = self.particles[candidates]\n                mutant = x0 + F * (x1 - x2)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Crossover\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, self.particles[i])\n\n                # Selection\n                trial_score = func(trial)\n                self.evaluations += 1\n                if trial_score < self.pbest_scores[i]:\n                    self.particles[i] = trial\n                    self.pbest_scores[i] = trial_score\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = np.copy(trial)\n\n        return self.gbest_position", "name": "HybridPSO_DE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization with Adaptive Differential Evolution, leveraging both global and local search capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "790aeaba-d0e6-4af3-a70c-2e2cfd00f7fc", "metadata": {"aucs": [0.8231244517286357, 0.8437144893922034, 0.8458917989282568, 0.8511004020311291, 0.8539814960559206, 0.8480690443094395, 0.8463759157651991, 0.8610178489500118, 0.865111025195459, 0.6218334176721894, 0.6250194337470087, 0.6969870134114702, 0.6991228696596142, 0.5304561601333968, 0.6873367272651272, 0.6648683321889433, 0.7101424589268897, 0.663852055611577, 0.13330483782813984, 0.1046603535959395, 0.1667482681074305, 0.15605285725230844, 0.13693466763702833, 0.13167292490537552, 0.13782795639657508, 0.12564382004289198, 0.14293556027317245, 0.13197247904593679, 0.13610750743169797, 0.11064274809719321, 0.11551137586953442, 0.1350300955238949, 0.11890655167450781, 0.15510397132750764, 0.1479165969153795, 0.1260014139771194, 0.9848370494934077, 0.9802218111046064, 0.9934230502244892, 0.9846618553911085, 0.9866998837175641, 0.9820897642700656, 0.9790800808882391, 0.9855510073722004, 0.9816324461069765, 0.659900203315848, 0.557316999867159, 0.5537373230237155, 0.5778644409927527, 0.15027485930194784, 0.15331948932602768, 0.48760278265800816, 0.5474713225951204, 0.5048895707840744, 0.6976800144666379, 0.22839309304907796, 0.2187944021767111, 0.3577578130415965, 0.2773152049133417, 0.8750771875772786, 0.16065736200308633, 0.2090683887435757, 0.23028813621119537, 0.10519693306063405, 0.1712717853225526, 0.18256468749430443, 0.1397380120453945, 0.1934218296544874, 0.17196542209813392, 0.17901543053403257, 0.1689852484732175, 0.1850750615289588, 0.17988110440608962, 0.0534893654716474, 0.19487891217964726, 0.12930900493099107, 0.17895864054968802, 0.1437680634931192, 0.19576972321492536, 0.053681058651048774, 0.22557355882161123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042796480614534116, 0.034469406508743305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12075839272916733, 0.09609153368201973, 0.09094757581136004, 0.07168365796884879, 0.0039683624680088014, 0.09787904543976489, 0.08314844195740101, 0.04712357636022335, 0.08759245496424739, 0.046884244414589715, 0.1626549522062547, 0.23336025085146395, 0.07352289242789123, 0.09383778798574549, 0.17164341335627775, 0.07407199325189018, 0.06710452127582123, 0.06527132280912429, 0.19396745996066778, 0.04236054361355723, 0.04990865642277187, 0.24812934540273346, 0.032158549735871955, 0.15393091117673752, 0.12962287402295114, 0.09279763230790616, 0.04845280486793213, 0.5523110637295788, 0.47642071874506586, 0.49682823185787783, 0.506009532563608, 0.47445314234223657, 0.4887960572926222, 0.53199500673481, 0.5419094081155726, 0.5098108362135989, 0.08202224321000251, 0.10349547722163766, 0.10775191366772685, 0.1426236242778981, 0.12898776642012766, 0.10805748251034786, 0.11249614328534974, 0.112591455444492, 0.08647219631857428, 0.2216989916963017, 0.27094574757080725, 0.17380725449511814, 0.24394048348717867, 0.1859100976113628, 0.20322325858472645, 0.19385940778292088, 0.19331666099665235, 0.33938498244960913, 0.2551310592137441, 0.26683737819023334, 0.3406725295430484, 0.4250494353820452, 0.3111391538622261, 0.35166348765569344, 0.21538075719382566, 0.3831024259663717, 0.28560451551878263, 0.17829725603100555, 0.23896092536880675, 0.19408815710853833, 0.2442553348776687, 0.24302530862320437, 0.27362111954450774, 0.27162121247261517, 0.1886332168327226, 0.18908751515306133, 0.21352908216199107, 0.19749773978599672, 0.21161670341373817, 0.21348903137569697, 0.20654275287626822, 0.20211768207848646, 0.19438983482023997, 0.24256418189779183, 0.2777350411153324, 0.20432420167772902, 0.194438094086685, 0.21108041407180245, 0.2159047737515375, 0.22270701332355824, 0.22161605134235995, 0.4115538006376267, 0.17103226918393954, 0.20649579493024361, 0.8700465448724005, 0.43486822018799254, 0.15289425066064755, 0.6531541630390879, 0.43427993087315075, 0.3683122384979115, 0.15790636293876414, 0.1408550486968816, 0.16620766317570468, 0.1449035979473159, 0.20930785719287137, 0.40791994722488145, 0.16446867522435404, 0.16822757047365633, 0.2111058593138606, 0.2893605014786056, 0.1664297113485813, 0.1997598923296836, 0.19624430133052706, 0.2033949762633558, 0.19378836673189404, 0.20894287422063895, 0.18170483422112693, 0.17585070284284143, 0.19293631532585798, 0.18871126735919275, 0.18650204291759997, 0.08755819541036547, 0.08072923009319533, 0.08311314788993773, 0.13954755658669438, 0.08932576622272592, 0.06889880268215365, 0.09359401931362021, 0.08331413768573781, 0.08970898983749864]}, "mutation_prompt": null}
