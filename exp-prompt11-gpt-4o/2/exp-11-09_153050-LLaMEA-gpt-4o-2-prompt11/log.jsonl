{"id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 39, in __call__\n  File \"<string>\", line 14, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n.", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 39, in __call__\n  File \"<string>\", line 14, in levy_flight\n  File \"/data/hyin/conda_envs/llm/lib/python3.8/site-packages/numpy/__init__.py\", line 320, in __getattr__\n    raise AttributeError(\"module {!r} has no attribute \"\nAttributeError: module 'numpy' has no attribute 'gamma'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "e1db7552-e0c8-4142-ad1d-6c64b25f4744", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {}, "mutation_prompt": null}
{"id": "685fdde9-667a-44e5-89fd-a1e305a4efcc", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {}, "mutation_prompt": null}
{"id": "0dabf301-ef81-47c0-88ee-b24e5a687465", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {}, "mutation_prompt": null}
{"id": "2094e3b4-12fb-4355-8d0e-a4eb4eb3c7ec", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {}, "mutation_prompt": null}
{"id": "33ce95e2-db87-47dd-a5b2-02ba247b2eb0", "solution": "import numpy as np\n\nclass DE_ALF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.scaling_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for _ in range(self.budget - self.population_size):\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ALF", "description": "A hybrid Differential Evolution with Adaptive Lévy Flight Mutation (DE-ALF) to explore and exploit the search space efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {}, "mutation_prompt": null}
{"id": "6dac1725-1353-4c7e-8c26-a2865f1d7a6f", "solution": "import numpy as np\n\nclass DE_ILF:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.9\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / self.budget)\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Adaptive Lévy flight mutation\n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF", "description": "A refined Differential Evolution with Improved Lévy Flight Mutation (DE-ILF), enhancing convergence speed by introducing dynamic scaling and crossover parameters.", "configspace": "", "generation": 6, "fitness": 0.19898341045644474, "feedback": "The algorithm DE_ILF got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "9bd0e7f1-c1b3-4994-bdec-1dba675d7d3a", "metadata": {"aucs": [0.42356910337068854, 0.39971114549877385, 0.441279051046381, 0.44734148863170853, 0.4301993286481455, 0.4559753656815875, 0.4424170341956358, 0.4246595433824384, 0.4383338690250951, 0.14712044379111522, 0.16708671715069556, 0.17713957178048, 0.1394745380090755, 0.17397234254820781, 0.14345481397365767, 0.1589253777356513, 0.14873016066096445, 0.1649142957726697, 0.08340501422686086, 0.10471710068492956, 0.09835134951489821, 0.07904062363773845, 0.09050156111224983, 0.08064527650515207, 0.08296696645650736, 0.09144681997896265, 0.07983695117015943, 0.08185276669751096, 0.08279264636173034, 0.07593924545620645, 0.07171729872025112, 0.07480191857000718, 0.07017068890695355, 0.06610467921785113, 0.06578745802458963, 0.07437397307160298, 0.9883644378427487, 0.9345458802603804, 0.9520654010697555, 0.953710796500741, 0.923694974269985, 0.8903507589333902, 0.8993469715134939, 0.9286572870447528, 0.957195482846819, 0.18383887287630118, 0.19366527561948332, 0.20359183335199538, 0.17765339624048648, 0.182343006859773, 0.1866213637843911, 0.1935418848402949, 0.2015615872509665, 0.17802655210399643, 0.259352902402461, 0.22104601404262414, 0.3234417081070282, 0.26873875182291806, 0.2703110251994256, 0.24759399369911805, 0.2561205854891565, 0.23746621456833172, 0.24536963301138226, 0.1170077293091516, 0.0943714197709059, 0.0921311492018484, 0.10961492290050812, 0.11413503191680341, 0.12069917290766097, 0.11903746930617087, 0.11633654600363807, 0.11599789200611998, 0.11682763540360663, 0.13326029826110375, 0.16377125493055922, 0.11878214518416663, 0.10962089412566456, 0.11424382095967978, 0.12358014186755195, 0.09816600181381252, 0.10605189760784084, 0.017453202091545772, 0.014284447297821523, 0.023054739445313333, 0.021005403276758483, 0.028619852107661603, 0.021513768503486408, 0.016802502599221558, 0.019208302007293065, 0.02153548533170524, 0.13434492254895647, 0.11948820475027877, 0.1436045704381551, 0.10106135103114267, 0.12409052214407201, 0.11107046811789145, 0.14247271729804556, 0.15822806456997385, 0.15366903324925274, 9.999999999998899e-05, 0.007089982476037537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026159578862620103, 0.002207985574887772, 9.999999999998899e-05, 9.999999999998899e-05, 0.07279944286407936, 0.09215184081058014, 0.07368993043541994, 0.08824534934643102, 0.09897729691913026, 0.09706251308498781, 0.08497811463349358, 0.08780493166917547, 0.09335914421153424, 0.3702905040726925, 0.37362598687885096, 0.3591762364569402, 0.3860543426167594, 0.3861090645924201, 0.36751981027153546, 0.3790860401369667, 0.3358512602411663, 0.38009918955337585, 0.07429758308599144, 0.07924232957258359, 0.0832085593796188, 0.0813710034520373, 0.09004393628311158, 0.07715874212181628, 0.08064802282010164, 0.07357471970286356, 0.07500763929784804, 0.12400663306192328, 0.1400313627279376, 0.16394904878131678, 0.1362631845147716, 0.13405757700217125, 0.14194534179257134, 0.13591421359878209, 0.15515663269204505, 0.1230208477434862, 0.2292966850564533, 0.2212648052991606, 0.24877915498253633, 0.22518382656508762, 0.2125827314791815, 0.22276791971649756, 0.24312755523029506, 0.24535275318371663, 0.25316617580966794, 0.17778883724508487, 0.16055676636197624, 0.169849056172778, 0.15039222976602318, 0.1681087774141894, 0.16481647113002762, 0.1682140955608693, 0.17151380515732984, 0.1799133303192726, 0.18621585579623423, 0.1739915052056984, 0.18092340524648598, 0.1680988810183759, 0.18159660275399359, 0.17714221435269373, 0.1708847497289986, 0.17977293665075722, 0.17194757573355035, 0.16344101962322344, 0.1705044502927714, 0.1855124965992413, 0.16500066274963543, 0.17564619220116906, 0.18119359109262267, 0.1689578583119533, 0.17357695985208432, 0.17654666152163612, 0.17364196618548344, 0.4696971567554765, 0.180891434483481, 0.33111449793600334, 0.3476482945392708, 0.41675855442906606, 0.383174808288155, 0.43833237786777113, 0.2973770095895215, 0.2853654596905384, 0.1847331416796565, 0.1880454964820487, 0.1371461676655914, 0.13562582414829671, 0.18104661541168265, 0.3852146010615677, 0.43853845800389935, 0.2072173473801523, 0.20461213863604466, 0.17633656051697577, 0.18420843014666466, 0.17534626341452308, 0.19301856796694172, 0.18173197405103725, 0.17393035272492785, 0.1845264377025223, 0.18101206956010896, 0.06918916117745044, 0.06749531328427871, 0.06905514751251374, 0.061698069726729976, 0.06572915228095988, 0.0633100174911948, 0.05799516024591411, 0.06321488275672804, 0.062400749199207683]}, "mutation_prompt": null}
{"id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 7, "fitness": 0.20225751558542887, "feedback": "The algorithm DE_ILF_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "6dac1725-1353-4c7e-8c26-a2865f1d7a6f", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "a528241c-2911-45b0-a927-4c5317175cbd", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "aff7170c-85b5-45c7-b938-ecf9c300723a", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "22eb87cd-5fce-4e60-8829-744e4b68692f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "a7e79713-a733-4e64-a51d-e600e3f1df2c", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "4022b1ac-b329-473c-9d96-95fcd0881e50", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "f186cc91-a292-4ffb-b41b-711b6bca856c", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "46381b2f-2331-4253-8745-ae2f56af8af9", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "e3c40702-333b-4a9c-80b3-7db6840446a5", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "3fb23982-ee92-4d3e-a424-023d37392275", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "7d41bf12-8337-4975-ac2f-699c9feafcde", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "aae5f9a3-9f01-4819-abd2-3d5bff652b81", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "a9ed5c72-2371-4082-93a8-45cd91bf2b5f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "e2588eb1-560f-4327-9898-8e085753fb4f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "02b6138e-781b-457d-822b-435d925bfbbf", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "4e7bf345-7b7a-4b45-aeea-afd681472c4f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "e1072bd8-2b34-4b5c-a057-f78fdabcb15c", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "f42c6cbf-c8c5-4ed0-93e8-89b5be3a88ee", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "d78dcb38-8ff0-4be6-a7b4-79f827d28328", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "f7439464-5020-4c46-8bc2-80c0c73ab84d", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "32de2582-ebcf-4264-a5e8-8fbb576606d8", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "3c5183e0-3f3c-4a44-924e-49dd66dc86b5", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "fb323689-68be-4a38-b1c4-fea5d58293a0", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "558bba7d-4d4f-4739-9a50-cead269c27b6", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "5e12bebd-a21e-476e-a572-1034552c10b5", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "2809390d-36ed-4971-aee9-ee2e9dc242e8", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "44814d0f-b57f-4e5f-ba72-da8447604f1e", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "b3958197-34b5-4d8b-9e07-766c7c2cc2fd", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "ec52158b-23b9-448f-bb48-847ecf8b936b", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "a35788c6-85e6-431b-905c-f0cc2afc3835", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "970c7177-36ba-45f3-b29c-26e02d341432", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "57371e9f-21a5-49af-bbf0-f736359f5fe8", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "abaffe75-8e6d-4a55-b1d9-1762f3eca4ae", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)\n        self.initial_scaling_factor = 0.9  # Increased initial scaling factor\n        self.initial_crossover_prob = 0.85\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) * np.random.normal(1, 0.1), self.lower_bound, self.upper_bound)  # Added Gaussian noise\n\n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "A variance-enhanced DE_ILF with fine-tuned mutation factors and dynamic scaling for accelerated convergence.", "configspace": "", "generation": 39, "fitness": 0.18643080422700609, "feedback": "The algorithm DE_ILF_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4246216090164334, 0.38187558654384546, 0.36752010370623234, 0.4521816344356091, 0.4291015922845498, 0.4310645267682415, 0.4256542076869172, 0.3866675970506861, 0.4015416281038595, 0.15939644115406826, 0.16913018425922766, 0.15237271461492163, 0.1423884703322108, 0.11657393608837574, 0.11817326532271255, 0.15154841141613307, 0.1517408254270589, 0.12654820002838574, 0.08901280206098383, 0.09017991575823125, 0.09150331731340833, 0.08247236539787395, 0.09366373588875943, 0.09648501717158964, 0.08113367752837308, 0.08799780432563042, 0.09601072080561623, 0.07106175087156041, 0.08373269746314616, 0.08560689991529435, 0.09475917343612583, 0.07947125538491273, 0.07347924619733204, 0.07797858057295592, 0.08243109439851037, 0.07770906663614208, 0.9404104664767025, 0.9564212472493281, 0.9671466894880406, 0.9518297078369815, 0.9435801829874443, 0.937216618680504, 0.9319003726103877, 0.9293730202520214, 0.9837832217202113, 0.19206999347072518, 0.18798519898399058, 0.16981015185052706, 0.19092112671137285, 0.18442329545356595, 0.20616436492700496, 0.18056495168722853, 0.19215201027144313, 0.1697138460281531, 0.2337026295075355, 0.22120954242507618, 0.2661368735453251, 0.22996202826742373, 0.2195499007192644, 0.21515620954887327, 0.24165650242630177, 0.2167835103500002, 0.25283542202486986, 0.09306221085636479, 0.11394159327643483, 0.09558058234852995, 0.07740924514725445, 0.12222652345537022, 0.10463332547698834, 0.11535752915845365, 0.09066577716254265, 0.10499625163067083, 0.10435731141980142, 0.12192280636246322, 0.13562079379260705, 0.09911214195706775, 0.10541796143353144, 0.09675275437757769, 0.07806458024584173, 0.08983566508071361, 0.08236464679919031, 0.007717110823695972, 0.001937758062792283, 0.012838302358953446, 0.01876770234341929, 0.0030673870764456046, 0.003622944403462336, 9.999999999998899e-05, 0.0024264766275884364, 0.0022161049404274547, 0.07558216792423045, 0.08737591778065834, 0.08558862503866638, 0.0903918466447271, 0.09929075969953338, 0.0700067280391522, 0.1352730445178809, 0.10473680317673639, 0.11634433203423555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07287668558957539, 0.06171323007679674, 0.06618848923244947, 0.07026666075936205, 0.08766482914446183, 0.06205989614492158, 0.06659472098959685, 0.0690768610900192, 0.060899610494052125, 0.33288414656928267, 0.36347633566780246, 0.34851666029187023, 0.36554596165224706, 0.3718417197083511, 0.346879347025, 0.34039989813079097, 0.3440863738113684, 0.39788605688650713, 0.08486337067410676, 0.10073070340919199, 0.07457332265286254, 0.07002641374408014, 0.06752406196248661, 0.0756821659265201, 0.08098440535798912, 0.08824738962785794, 0.06748265337570569, 0.1431266285714763, 0.13345615327064242, 0.1372658838366302, 0.13426217001200147, 0.14617094714664414, 0.1481243679923986, 0.16515014191769806, 0.15129744103063092, 0.1284973321862859, 0.20360520617423572, 0.2102644207555322, 0.23953981469564245, 0.2220666307894551, 0.1920126208072085, 0.2054137231437716, 0.23189273139037625, 0.23806728711893854, 0.23177057280136093, 0.15620872833762856, 0.16105141599774875, 0.15324352227887106, 0.16022783455324574, 0.15294758772417116, 0.1381937282031246, 0.16434686394311815, 0.1732172053414499, 0.1695078598248767, 0.231134922643638, 0.16170051175463418, 0.18109409551591993, 0.16832785338095668, 0.1786667735806361, 0.17202597823780508, 0.18410268682411424, 0.18433763632535616, 0.18195975365130623, 0.16990863767081832, 0.17200219548965123, 0.16031677930919863, 0.17800955724729306, 0.17194465281327231, 0.16101176642902393, 0.19347931881257907, 0.16425063998818623, 0.1643385606414568, 0.26444461859166535, 0.33071664493842057, 0.18203586573913333, 0.17774856448082754, 0.16915609228455541, 0.25241808266825916, 0.1657614160072871, 0.3134574918775649, 0.31298456152900433, 0.24623711868522602, 0.1856046343005423, 0.21650000210485576, 0.23048499772695474, 0.16105899827269077, 0.16465571405196733, 0.1997686840136219, 0.205408527957884, 0.20231000926853626, 0.17761129824388722, 0.17380451959532817, 0.1788068811686302, 0.20140918783200412, 0.225135139625805, 0.1833876234609113, 0.18599220709263087, 0.17677694024677715, 0.20490222800168345, 0.06210238188253059, 0.06795403170004777, 0.06637139064288944, 0.06734582696109481, 0.06869946021453621, 0.05830897797350443, 0.06745993646211723, 0.061090381756277345, 0.06787531317717277]}, "mutation_prompt": null}
{"id": "640421ba-5e2c-41f6-8cb3-a7b1d32a4b74", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "e0d58357-84b1-4f05-b9b0-59bc599fae1d", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "de1ef8f1-d322-4540-9318-4184785e5bbc", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "18e4c4a8-0cd8-46f1-ab02-689ac32c812b", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "f705f4ed-4330-457a-b0b1-3a9d74dceca0", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "2b0bac92-70b4-4eea-80fa-462937d55e68", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "fdb76c0e-5c15-45cb-9507-1be45293b9c3", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)  # Reduced population size for faster convergence\n        self.initial_scaling_factor = 0.8\n        self.initial_crossover_prob = 0.85  # Slightly reduced initial crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))  # Adaptive crossover rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced", "description": "An enhanced version of DE_ILF with adjusted population size and adaptive crossover rate for improved convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4716334283341075, 0.45479470321536153, 0.4624155990929245, 0.5153465019023828, 0.4955243575973819, 0.532344652948667, 0.4956710275949404, 0.47458899864802784, 0.5016536771618745, 0.20401156213732474, 0.20290724328467757, 0.19984640476785864, 0.21849361558370506, 0.19271724348487296, 0.24513556427191907, 0.2026368894398115, 0.17862849089548982, 0.15894758276584653, 0.09365354755810018, 0.07914153339443875, 0.09598600351075526, 0.09387752398546867, 0.08794689478917794, 0.08720650466748736, 0.10388881978283049, 0.08385832764270129, 0.08915879805698501, 0.07423886229730303, 0.07880358466180948, 0.07656753269860495, 0.07648304518668936, 0.07253874591472798, 0.08853172997684156, 0.07484401913230598, 0.07954096742286054, 0.0779849059505846, 0.9518239957867571, 0.9677246427825639, 0.9301338196407086, 0.9289724710044248, 0.9417382144710488, 0.9352278067573947, 0.9592145666397544, 0.9548269647013643, 0.9513033648872127, 0.2061729969234175, 0.20326101056340296, 0.20333895204835428, 0.1980808787403071, 0.20824360807045883, 0.19217079815819282, 0.21226939135551837, 0.20966788088787447, 0.1978110275865116, 0.2767810985235206, 0.23900762190370828, 0.2316204676155419, 0.26367464886856873, 0.2768461875451933, 0.24393432349240718, 0.27142474275112705, 0.270319250607701, 0.2812618409435673, 0.1026176805468535, 0.1172911217178616, 0.1266051565355243, 0.11554195454705984, 0.12493950700666934, 0.10076454763323583, 0.1415207658946248, 0.10131991740271673, 0.12972455272854055, 0.13001275910359322, 0.10697974516251108, 0.11356652043907745, 0.11334828624268778, 0.13527766588777979, 0.09847105898274022, 0.1102628349107897, 0.10856581517081554, 0.12275571614369185, 0.014797838778995764, 0.019603925025126645, 0.0189355691723595, 0.026375966367087167, 0.012792006830670832, 0.020939014083012242, 0.024941993421885522, 0.002326854030906933, 0.011769239824033328, 0.12529743553115935, 0.10996612650193072, 0.10731192316524685, 0.13913687417030818, 0.10212969599430577, 0.10499895948326032, 0.1344778939349528, 0.1395527990406883, 0.14116260347929077, 0.0009455658236257047, 9.999999999998899e-05, 0.0046251091049037685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004941915671315966, 9.999999999998899e-05, 0.0025011914341482866, 0.08814476513447012, 0.07336099758276216, 0.09454585700140228, 0.08935784664944457, 0.0738809412266972, 0.10318272366661096, 0.08299631684770559, 0.08093386359576127, 0.0864037520403379, 0.3874572630415015, 0.3883415948900818, 0.37613372310146964, 0.395266017168595, 0.3997318865984789, 0.39571810058060797, 0.3792125775992814, 0.3948868314200279, 0.3674916886610785, 0.07932152358031541, 0.07950694802404046, 0.0807957363379086, 0.0757210071406389, 0.07887936541565999, 0.08705427356092843, 0.06687413233575534, 0.07158398496328355, 0.06943053369002283, 0.13952977867960215, 0.15543596516504987, 0.14994886284766762, 0.13470725914947657, 0.12710127886744982, 0.15790865741927773, 0.13502415111142507, 0.1547937711882933, 0.1357360107461325, 0.2347968518575857, 0.2433654834530815, 0.24449253385356218, 0.20946793914239903, 0.21109297844537755, 0.22148290511854418, 0.25951290407791816, 0.2706368890904858, 0.24369247717405673, 0.17040094175594678, 0.15744966469491228, 0.16831798387101604, 0.17902140714318282, 0.15017882427998652, 0.1717355265299555, 0.16949433291878324, 0.1923806516533274, 0.18621754987166184, 0.17754764010585022, 0.17371553498116266, 0.18377445902998346, 0.1793956726993854, 0.18206691100913508, 0.17208851317513085, 0.16229806808853753, 0.16692470358716693, 0.1849820388265434, 0.1696798640538636, 0.17695569098439734, 0.17451392022775836, 0.17426515017596067, 0.1789437981930665, 0.18171015013485714, 0.17784353171343026, 0.17459450037905322, 0.18082741629702515, 0.16303315834038845, 0.21224223946230103, 0.40656656126514945, 0.44770468602462177, 0.16604261860259395, 0.1619402764982235, 0.3540129159574056, 0.16319148097950642, 0.3486107865779562, 0.2906278711091247, 0.19095475879429813, 0.34833054193907054, 0.2032979348671422, 0.30777070373352255, 0.21244782152350328, 0.18636896932647895, 0.20400924588545144, 0.206095746378398, 0.17533879936910057, 0.1729983901298443, 0.18663851706944945, 0.17993136440914426, 0.17810454007407028, 0.19004279910607624, 0.18507026141444594, 0.17540119054243553, 0.1836475952975667, 0.06359418272103357, 0.06424826092151348, 0.06341181579943622, 0.06486462875411325, 0.0666069021297453, 0.06006069093176469, 0.07146416048725479, 0.07126886052081716, 0.07586684805110466]}, "mutation_prompt": null}
{"id": "101a8308-914c-4cf9-97cb-01d1b466a347", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)\n        self.initial_scaling_factor = 0.82  # Slightly increased scaling factor\n        self.initial_crossover_prob = 0.87  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * (1 - np.linspace(0, 1, size))  # Dynamic step size based on position\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v2", "description": "A refined DE_ILF approach with minor parameter tweaks and a dynamic step size for Levy flights to enhance convergence speed.", "configspace": "", "generation": 47, "fitness": 0.205459570395877, "feedback": "The algorithm DE_ILF_Enhanced_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "a89d91c5-a11e-43d9-ae5b-bbe1f52202e1", "metadata": {"aucs": [0.4549509666559406, 0.4761082181935261, 0.47368576515862515, 0.4718049840498898, 0.4744144448743316, 0.4784595338769695, 0.4808606024087353, 0.5133663668153414, 0.4824814131568578, 0.21676728657735123, 0.20987608401140834, 0.22970968097602718, 0.23008984150367529, 0.2207865740133319, 0.20046261954395106, 0.24182828985349614, 0.2407539955714706, 0.23070294783379963, 0.10143144355804234, 0.08959460516458306, 0.08571495510154326, 0.09189309646498112, 0.09299599670919656, 0.08791196701596549, 0.08627258355508038, 0.09233841391174813, 0.09808649418938453, 0.0792358487875634, 0.09265498529742378, 0.07816240285378628, 0.08839701932530641, 0.08128823937091656, 0.07843111134053993, 0.0857990139844127, 0.08173707175329548, 0.07892908062016579, 0.94001980151838, 0.9340740656727056, 0.9705430849719727, 0.9113929942376445, 0.9418622827689597, 0.9427601356633544, 0.9362205752097152, 0.9666344312553066, 0.9471404880297017, 0.24187608378280456, 0.20014519679179876, 0.21740909549776766, 0.21001638534728895, 0.2172859309658598, 0.21896454773271035, 0.22955813960928284, 0.23586180692968084, 0.23538573152188413, 0.26212046469686145, 0.26106751827970165, 0.24406554008758807, 0.2755139184252593, 0.24632569201904242, 0.29661014887614223, 0.2772706673275951, 0.23953470158666212, 0.2513546041137895, 0.1470387895370855, 0.1327870308251502, 0.14456026159081414, 0.11828174704452743, 0.14101534189674236, 0.12364675228273458, 0.15500288325310252, 0.1284209179222855, 0.13597969949181965, 0.15103717054257626, 0.09759129729440041, 0.02086700677357034, 0.1280486542645365, 0.11345877993420694, 0.13599349304315733, 0.1219495043680745, 0.11921834261124808, 0.11401625972739204, 0.032122521644274094, 0.010127870497278146, 0.017786467105000314, 0.042660797102656245, 0.01551447306639242, 0.016484131173743144, 0.03393527291663012, 0.01870815578089169, 0.014728648020861823, 0.14400706331337987, 0.1321887977671855, 0.12236481908085539, 0.12457206688114619, 0.12017084175296133, 0.12435254085665126, 0.1610502829358451, 0.1503950591328439, 0.15336646821194877, 9.999999999998899e-05, 0.007238047402603143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012367767384712236, 0.004272613831126759, 0.0033255068455724235, 0.00010539659092223541, 0.08843096825053975, 0.09288262575399497, 0.09098367430916277, 0.08892864312053694, 0.1034640422763825, 0.09680996539279918, 0.09867441813319289, 0.09243532810267974, 0.0847730905527333, 0.3678378566206534, 0.3978812121065177, 0.4192516116487893, 0.395416866298233, 0.3964338892731404, 0.37636739574215394, 0.3950751213866057, 0.38684224198007755, 0.3952778623954821, 0.0858108101398315, 0.08138081096925831, 0.07791724034661729, 0.07772314406461389, 0.08045000780757239, 0.07561752462218396, 0.08107443169049477, 0.07542505023679402, 0.07991857783287559, 0.12335154912923296, 0.13577435575700425, 0.13940629583252684, 0.1366060964861543, 0.11799776225653547, 0.13554420295852232, 0.16923562099280753, 0.1224577158556529, 0.16290068408369807, 0.2544566143048025, 0.22548365872015463, 0.22261659103345177, 0.22788051623974326, 0.2371558567902894, 0.2345358886395672, 0.2633287986703695, 0.27253449910248706, 0.24930569930695923, 0.16978135397729333, 0.17570603033950882, 0.18212632567728726, 0.17421412517678803, 0.15968469834148913, 0.17159995214071677, 0.1941076237975693, 0.187278611207084, 0.18322682598763362, 0.19134869335077231, 0.1689475476081871, 0.1676474679025176, 0.17958530350901825, 0.1957216595026422, 0.17337968355874034, 0.19773248026610613, 0.1855807517501562, 0.17173760379452685, 0.17282578099633228, 0.16969151815038153, 0.17810859442438465, 0.17651292165578558, 0.1645622133887804, 0.17025780677885827, 0.17089074109396185, 0.16902921144950922, 0.17752510206052452, 0.2885045886206151, 0.15728008265374227, 0.510561061599765, 0.3497544434377172, 0.1712319990791088, 0.17582798948941492, 0.2771489990789271, 0.15770537361769021, 0.3683293616090557, 0.18903311243283272, 0.19689067089750323, 0.19412118387260913, 0.18597579931360086, 0.19595280038698903, 0.17764759003900377, 0.3766298336718299, 0.2046038547861554, 0.2049311238283621, 0.1803972390303581, 0.17813937887432585, 0.18039992861208975, 0.19034241479660063, 0.1838625789650169, 0.19901056581659438, 0.1849541586400154, 0.18378405744721915, 0.19146771583600952, 0.06738632651910281, 0.05979734093379152, 0.06867115605211549, 0.06407695494008148, 0.07210552330325704, 0.06030472260588793, 0.07502437333314993, 0.06801458882168387, 0.06790433941599627]}, "mutation_prompt": null}
{"id": "e1b7e78b-67a6-4667-8a8c-69abb6eec339", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)\n        self.initial_scaling_factor = 0.82  # Slightly increased scaling factor\n        self.initial_crossover_prob = 0.87  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.5):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * (1 - np.linspace(0, 1, size))  # Dynamic step size based on position\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.5:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v2", "description": "A refined DE_ILF approach with minor parameter tweaks and a dynamic step size for Levy flights to enhance convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "101a8308-914c-4cf9-97cb-01d1b466a347", "metadata": {"aucs": [0.4549509666559406, 0.4761082181935261, 0.47368576515862515, 0.4718049840498898, 0.4744144448743316, 0.4784595338769695, 0.4808606024087353, 0.5133663668153414, 0.4824814131568578, 0.21676728657735123, 0.20987608401140834, 0.22970968097602718, 0.23008984150367529, 0.2207865740133319, 0.20046261954395106, 0.24182828985349614, 0.2407539955714706, 0.23070294783379963, 0.10143144355804234, 0.08959460516458306, 0.08571495510154326, 0.09189309646498112, 0.09299599670919656, 0.08791196701596549, 0.08627258355508038, 0.09233841391174813, 0.09808649418938453, 0.0792358487875634, 0.09265498529742378, 0.07816240285378628, 0.08839701932530641, 0.08128823937091656, 0.07843111134053993, 0.0857990139844127, 0.08173707175329548, 0.07892908062016579, 0.94001980151838, 0.9340740656727056, 0.9705430849719727, 0.9113929942376445, 0.9418622827689597, 0.9427601356633544, 0.9362205752097152, 0.9666344312553066, 0.9471404880297017, 0.24187608378280456, 0.20014519679179876, 0.21740909549776766, 0.21001638534728895, 0.2172859309658598, 0.21896454773271035, 0.22955813960928284, 0.23586180692968084, 0.23538573152188413, 0.26212046469686145, 0.26106751827970165, 0.24406554008758807, 0.2755139184252593, 0.24632569201904242, 0.29661014887614223, 0.2772706673275951, 0.23953470158666212, 0.2513546041137895, 0.1470387895370855, 0.1327870308251502, 0.14456026159081414, 0.11828174704452743, 0.14101534189674236, 0.12364675228273458, 0.15500288325310252, 0.1284209179222855, 0.13597969949181965, 0.15103717054257626, 0.09759129729440041, 0.02086700677357034, 0.1280486542645365, 0.11345877993420694, 0.13599349304315733, 0.1219495043680745, 0.11921834261124808, 0.11401625972739204, 0.032122521644274094, 0.010127870497278146, 0.017786467105000314, 0.042660797102656245, 0.01551447306639242, 0.016484131173743144, 0.03393527291663012, 0.01870815578089169, 0.014728648020861823, 0.14400706331337987, 0.1321887977671855, 0.12236481908085539, 0.12457206688114619, 0.12017084175296133, 0.12435254085665126, 0.1610502829358451, 0.1503950591328439, 0.15336646821194877, 9.999999999998899e-05, 0.007238047402603143, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012367767384712236, 0.004272613831126759, 0.0033255068455724235, 0.00010539659092223541, 0.08843096825053975, 0.09288262575399497, 0.09098367430916277, 0.08892864312053694, 0.1034640422763825, 0.09680996539279918, 0.09867441813319289, 0.09243532810267974, 0.0847730905527333, 0.3678378566206534, 0.3978812121065177, 0.4192516116487893, 0.395416866298233, 0.3964338892731404, 0.37636739574215394, 0.3950751213866057, 0.38684224198007755, 0.3952778623954821, 0.0858108101398315, 0.08138081096925831, 0.07791724034661729, 0.07772314406461389, 0.08045000780757239, 0.07561752462218396, 0.08107443169049477, 0.07542505023679402, 0.07991857783287559, 0.12335154912923296, 0.13577435575700425, 0.13940629583252684, 0.1366060964861543, 0.11799776225653547, 0.13554420295852232, 0.16923562099280753, 0.1224577158556529, 0.16290068408369807, 0.2544566143048025, 0.22548365872015463, 0.22261659103345177, 0.22788051623974326, 0.2371558567902894, 0.2345358886395672, 0.2633287986703695, 0.27253449910248706, 0.24930569930695923, 0.16978135397729333, 0.17570603033950882, 0.18212632567728726, 0.17421412517678803, 0.15968469834148913, 0.17159995214071677, 0.1941076237975693, 0.187278611207084, 0.18322682598763362, 0.19134869335077231, 0.1689475476081871, 0.1676474679025176, 0.17958530350901825, 0.1957216595026422, 0.17337968355874034, 0.19773248026610613, 0.1855807517501562, 0.17173760379452685, 0.17282578099633228, 0.16969151815038153, 0.17810859442438465, 0.17651292165578558, 0.1645622133887804, 0.17025780677885827, 0.17089074109396185, 0.16902921144950922, 0.17752510206052452, 0.2885045886206151, 0.15728008265374227, 0.510561061599765, 0.3497544434377172, 0.1712319990791088, 0.17582798948941492, 0.2771489990789271, 0.15770537361769021, 0.3683293616090557, 0.18903311243283272, 0.19689067089750323, 0.19412118387260913, 0.18597579931360086, 0.19595280038698903, 0.17764759003900377, 0.3766298336718299, 0.2046038547861554, 0.2049311238283621, 0.1803972390303581, 0.17813937887432585, 0.18039992861208975, 0.19034241479660063, 0.1838625789650169, 0.19901056581659438, 0.1849541586400154, 0.18378405744721915, 0.19146771583600952, 0.06738632651910281, 0.05979734093379152, 0.06867115605211549, 0.06407695494008148, 0.07210552330325704, 0.06030472260588793, 0.07502437333314993, 0.06801458882168387, 0.06790433941599627]}, "mutation_prompt": null}
{"id": "0eea6641-6110-4fc9-987a-621540570fa6", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v3:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim)\n        self.initial_scaling_factor = 0.84  # Slightly adjusted scaling factor\n        self.initial_crossover_prob = 0.88  # Slightly adjusted crossover probability\n\n    def levy_flight(self, size, beta=1.45):  # Adjusted beta value\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)  # Adaptive step size using logspace\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))  # Slightly adjusted factor\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)  # Added bias towards mean\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:  # Slight increase in Levy flight trial probability\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v3", "description": "A further refined DE_ILF algorithm with minor adjustments to mutation and crossover strategies, and enhanced exploration through adaptive Levy flights.", "configspace": "", "generation": 49, "fitness": 0.20692811138893952, "feedback": "The algorithm DE_ILF_Enhanced_v3 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "101a8308-914c-4cf9-97cb-01d1b466a347", "metadata": {"aucs": [0.4605632135514942, 0.45036938830089945, 0.4672170321103897, 0.49382063511325636, 0.5051455417818725, 0.4993050062147312, 0.47512658763668036, 0.4926865553456661, 0.47405639088076157, 0.19915763762521488, 0.22925424638097114, 0.20475605934446417, 0.1929465548857291, 0.19034699915484, 0.18619212077629277, 0.19756471355261218, 0.18417199123744588, 0.23835960006429846, 0.0981589147889883, 0.10703499325286325, 0.10158359251494753, 0.09915143539778692, 0.10269397713679174, 0.10611515654681791, 0.09993296174374922, 0.10454380382186323, 0.09283308347408037, 0.08798998089541332, 0.08439593742458928, 0.08863992319351821, 0.07897381795185066, 0.08045643023868454, 0.07699936815238273, 0.0836033755920571, 0.07447623897677802, 0.08834306010584947, 0.930493862162123, 0.9167456718457859, 0.9230199618155129, 0.9369400687919041, 0.9100984498956884, 0.9597808512454664, 0.9137384734233085, 0.9211823768213506, 0.9606269926039732, 0.21176422562313135, 0.2041751467184344, 0.21574649139521251, 0.221789300796832, 0.24767951196561377, 0.22868081310729516, 0.23087722787829013, 0.23010582929823553, 0.24040621848354005, 0.28568847602976355, 0.24876715023320506, 0.2856684903146929, 0.3014586246621068, 0.2984585848833734, 0.29399339086778686, 0.24877422377063685, 0.31782677962580697, 0.2811308893360177, 0.1337475801870912, 0.1282203314422733, 0.1390598671224268, 0.13803872136601125, 0.128400509168332, 0.13729424181220018, 0.14762135155413658, 0.13105574998250646, 0.13702611889028848, 0.1380530134419059, 0.12391334020387224, 0.12203066388012884, 0.1220282422877359, 0.11119392301492881, 0.1749646882468614, 0.1311860634008868, 0.12113782971852849, 0.1302579781503086, 0.04000077473108321, 0.05744050885506535, 0.026538094060247763, 0.04177986072433193, 0.033128857969996206, 0.033641916389090865, 0.02114972860969333, 0.03584698556130572, 0.019752685402122938, 0.15248216270754633, 0.14544233938183604, 0.21011402329058004, 0.13703568987812453, 0.13416235163738488, 0.13344957195680496, 0.1742697979788843, 0.15313482704568926, 0.1675919919737625, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002345272185027669, 0.0011528136225300578, 0.09811335837856316, 0.08937301827936794, 0.09900245053580725, 0.11441820667248015, 0.09155014276976303, 0.09939699438223815, 0.11072951864438652, 0.10047247227440403, 0.10670720724271798, 0.39134355628328144, 0.3889201590368614, 0.3786025908110465, 0.4051937175593735, 0.4034155651324628, 0.4108409949760464, 0.392955415959945, 0.38609715536195544, 0.40386836515636726, 0.09465192269206202, 0.08027822219302416, 0.08824205930323392, 0.08400106192759615, 0.08629211725250774, 0.10351213361999234, 0.08806256111730859, 0.0766855267619303, 0.08196493249136894, 0.14134580051740364, 0.14757441085265077, 0.130598021838625, 0.1625956685334211, 0.1406202130278572, 0.15115909479687673, 0.14394434858584815, 0.13215012671951754, 0.1363745721323949, 0.23670502557079443, 0.24737577643653275, 0.24391118501629694, 0.22851309144328624, 0.2596263147710648, 0.2335597735945184, 0.2655678214624343, 0.2611468678293619, 0.2692693912660691, 0.17792202165930526, 0.17873888759172007, 0.19160971786557124, 0.15786521281393484, 0.17837445715485778, 0.1742035114161603, 0.20578020426683974, 0.20322606447556535, 0.18518902266271842, 0.17293923622706242, 0.17642410948970833, 0.1787354063291734, 0.19370266504594646, 0.16579309052520164, 0.22642483297968463, 0.18244187195826223, 0.18169948400032299, 0.17740233228741364, 0.16624629755216425, 0.17562493599401618, 0.18166658433180616, 0.18329546102093142, 0.17225660704517542, 0.17482490706829612, 0.17259486072719377, 0.17638807898119468, 0.17169410391637085, 0.16756374987119893, 0.16445702248988925, 0.18999061883514157, 0.4026595465796915, 0.17081030498423988, 0.17359041690254706, 0.17352377655887286, 0.1617459701624281, 0.16493492122192221, 0.27130087563241556, 0.19798362471416897, 0.18390126094501402, 0.19893846561487494, 0.2742500377675666, 0.18473098988818015, 0.3076177073639451, 0.2071319654478565, 0.20294685201481588, 0.19233222147296325, 0.18245755165400912, 0.21181927328858818, 0.1908180733515814, 0.19294644061830923, 0.17610743930406425, 0.18392846691809683, 0.17333624766560296, 0.1887870002138028, 0.06962183197915905, 0.06901149701887677, 0.06694963913144947, 0.0742987942712734, 0.07166902612949122, 0.07576733647575096, 0.07796158829368283, 0.0716625856480112, 0.08015116639055975]}, "mutation_prompt": null}
{"id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 50, "fitness": 0.20788374407098584, "feedback": "The algorithm DE_ILF_Enhanced_v4 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "0eea6641-6110-4fc9-987a-621540570fa6", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "78991e7f-6f9f-487a-a910-02cc864d5672", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.86  # Slightly increased scaling factor\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjust scaling factor\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.4 * self.budget))  # Adjust crossover adaptation\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.11 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "A refined DE_ILF algorithm with further enhanced mutation strategy and adaptive crossover for improved convergence speed.", "configspace": "", "generation": 51, "fitness": 0.2063271180248563, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4627425021275271, 0.43701264341586654, 0.43584882074911013, 0.4573525682999028, 0.47946868935509956, 0.4491929459595505, 0.4517051320961357, 0.47604490917394926, 0.4457985971529398, 0.17709928075618753, 0.18529531507120245, 0.1951508547920463, 0.19344376309622335, 0.17822741796094776, 0.1778316059789673, 0.20145986672833793, 0.1944791826079164, 0.20033208902725153, 0.08463729912358542, 0.08032617376917317, 0.08854171799785004, 0.0990876543225746, 0.09525206098631478, 0.10051632759917684, 0.09838420712755613, 0.1115583596722145, 0.09067399314811286, 0.08856221051104962, 0.08669524346091328, 0.09041339536208559, 0.08447682524527278, 0.08356855481708503, 0.08971011872938783, 0.08632085632515885, 0.07340127450430467, 0.08229456938216118, 0.9398325534214291, 0.8905759232064677, 0.9192902695493845, 0.9162512771443637, 0.9225984227154174, 0.8969471007055871, 0.9323502611086976, 0.934781803938067, 0.9105413106214771, 0.21665213270970518, 0.21404374342099342, 0.20975644798414683, 0.2017227624985658, 0.22000904902037233, 0.2060796674845914, 0.20627486217767477, 0.2367722470632364, 0.23467740571383788, 0.2822893605895912, 0.2426323765174031, 0.2543564926413917, 0.3540107730750699, 0.3224681142231266, 0.2857054363096926, 0.2461879920028741, 0.3016394917724786, 0.26412880387532534, 0.10766127734416242, 0.1259151578946086, 0.11230836483061013, 0.14308567296474395, 0.1257555517561465, 0.12206278516085445, 0.1356090044517263, 0.12785704706634338, 0.1654669256433292, 0.12535674685598774, 0.13096710734691153, 0.11527665400834086, 0.1321946091635715, 0.1315972462104642, 0.12491845204301844, 0.117502645684044, 0.11441178192438861, 0.09505068221585988, 0.036759488219545555, 0.049222391173806335, 0.019088633151606027, 0.03525910353052064, 0.024956141800783316, 0.035919056120485404, 0.009428295987627067, 0.03475261384263595, 0.03999512169380359, 0.1439093814852913, 0.1585007703919311, 0.1555553768217698, 0.15035555422697777, 0.1062498184025662, 0.14436924644903482, 0.1453676945628093, 0.13483613455821053, 0.16177073394850672, 0.0001294339262851718, 0.0024074168462280277, 0.005115242161167766, 9.999999999998899e-05, 9.999999999998899e-05, 0.000231055423301596, 9.999999999998899e-05, 0.007410146218533864, 0.00020838217179119933, 0.08739680852169163, 0.09606437418588354, 0.09386160149276945, 0.10000211023518424, 0.10370687783316734, 0.11348418775429614, 0.0926847909146592, 0.09984040767938696, 0.09699400135120284, 0.389001068181685, 0.37611101059362884, 0.3812157467102214, 0.38643590456751453, 0.4053425823120633, 0.38318830143745897, 0.40386013319281344, 0.3689933281951666, 0.38997281425790165, 0.08408643266879823, 0.0853063641138011, 0.08541404872153346, 0.08835623643291524, 0.0808108795981416, 0.09076428011524151, 0.08146233929588342, 0.08765226088913969, 0.07182201403719135, 0.14770632942528883, 0.15933494616832033, 0.13922477042752857, 0.14695952396337475, 0.14724450968003877, 0.15607376625783886, 0.19789059832603495, 0.14156119437471315, 0.12856215021411121, 0.2515447377343406, 0.2285464156286554, 0.23624920386283976, 0.21897855551468048, 0.23651698548518563, 0.22018792643348373, 0.2576599315687136, 0.25418196947160987, 0.25460910680504767, 0.1937227534920276, 0.17941521494743917, 0.18489696330992444, 0.16644515363428203, 0.1742253006833816, 0.166526508114468, 0.1905134095736829, 0.18911210884612462, 0.17832068932416478, 0.19269919052921236, 0.18344466004252802, 0.1806733256742309, 0.20771811816495, 0.1790922959243959, 0.18350748202431555, 0.17533777665754935, 0.17940534436725775, 0.21544141121411942, 0.17350044935908537, 0.16624221772343395, 0.17350645601690995, 0.1758896978015707, 0.17817617536926356, 0.17503186822226235, 0.1689305905405898, 0.17488257338515067, 0.17058896276409374, 0.3993549280632057, 0.3307579259532184, 0.16409280545919414, 0.3312864361451816, 0.4018395757535592, 0.4358258600322442, 0.49080236525191434, 0.15709008552032933, 0.165265056533746, 0.31189358432149816, 0.26283863233048077, 0.1901981465238286, 0.16261946841665686, 0.2863576802346214, 0.1642327498792271, 0.2005849469016352, 0.2008452159108981, 0.1224616145001477, 0.1845198845527931, 0.18808516860663593, 0.18163429312886303, 0.17011887962475414, 0.1827739650563438, 0.17555163440375277, 0.1763735541352922, 0.17437283042836116, 0.19301407614001187, 0.0630355795377825, 0.06325901314887017, 0.06671975877240799, 0.06573628725427738, 0.06934018076302761, 0.07444882364231165, 0.07117358437514487, 0.06632522673982366, 0.0671393973849217]}, "mutation_prompt": null}
{"id": "e127105c-868d-4916-b6bd-600aec1dff0b", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.03  # Slightly increased scaling adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.4 * self.budget))  # Adjusted crossover probability\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced DE_ILF with adaptive sampling and dynamic mutation for improved convergence.", "configspace": "", "generation": 52, "fitness": 0.20551450456044743, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4544819273539811, 0.4217357974174566, 0.4223543496239276, 0.4748125520310368, 0.49150229899527753, 0.45693282897988285, 0.47357070108706645, 0.47193663751831294, 0.43907078002179656, 0.16387078846212355, 0.1713838047976316, 0.1710702065352987, 0.17929941478080036, 0.1788615035952258, 0.2079736802563289, 0.19409012559764427, 0.17324960291235803, 0.18900756353154924, 0.08263989542757533, 0.09352571471112114, 0.08919827514266743, 0.09363930453967861, 0.09693466929889816, 0.09324527393014181, 0.09461024645003235, 0.0995817841281873, 0.09253211310505283, 0.0873636965531912, 0.08576036236086615, 0.0917190329488532, 0.0828476381040848, 0.09089101411867928, 0.08054190151909368, 0.08795614557321263, 0.09111868036214388, 0.07882998209026815, 0.9355264697661512, 0.9098454805540289, 0.9697719968123891, 0.9538763609729453, 0.9229326830823722, 0.9343652630886095, 0.9848769168518985, 0.909143203477377, 0.8831199922239997, 0.21721042193912576, 0.21767521590842165, 0.20902434853377616, 0.20897707544618815, 0.20747059927357214, 0.21531735474790026, 0.21768718669943787, 0.21997181163453194, 0.21042770675328792, 0.25955228979055645, 0.24195229181730604, 0.26087649201814966, 0.40580023182896097, 0.26154110372424644, 0.299314964644387, 0.2610545145260098, 0.31532264189502, 0.25728237491459083, 0.1276700853746111, 0.11750584723047397, 0.11764997450254266, 0.12708339463168628, 0.13041757199845816, 0.12493429662374345, 0.11798401730704011, 0.11068272333138107, 0.143681990351742, 0.1744355249920998, 0.14458732616437697, 0.12192697666935237, 0.13918655677794123, 0.10607714084181041, 0.1147636392028133, 0.11904961474238152, 0.1206692740843458, 0.12536288957660346, 0.025932817931873298, 0.010268050315688781, 0.026368345775015456, 0.04368665155279705, 0.0601607231163096, 0.030123474568561015, 0.003878449992430477, 0.030640928839124504, 0.02133983850434762, 0.12727920954379301, 0.1258092219768221, 0.1478510112552922, 0.13476318274244092, 0.10122790654338476, 0.08203806313380324, 0.1276890378008988, 0.14960149203124962, 0.1643341193572434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003296466450576352, 9.999999999998899e-05, 0.0005657808751901028, 0.0007728857326115834, 0.09223210716755381, 0.08833962769860992, 0.08300452935959601, 0.08922490818968598, 0.09247435712645657, 0.09228552095378639, 0.08431827685036475, 0.08939737600119713, 0.09230660319998951, 0.40455546381569496, 0.3859042562486805, 0.36416120596026136, 0.39833721814462253, 0.3919376202264049, 0.37808920620119224, 0.40374010559653384, 0.3808362457764921, 0.3776279686969931, 0.08554824641018988, 0.0955042803929338, 0.09515090998485554, 0.07699737041419574, 0.07947582431191968, 0.07805424320318233, 0.07691761691598709, 0.08721954270591781, 0.07817459285047623, 0.14470600410628853, 0.1316663075242126, 0.16967551187315966, 0.17695743025068766, 0.14314831272095985, 0.1373242773362131, 0.13693778859436911, 0.15207649498880105, 0.14392029735771117, 0.257234065152102, 0.22521495415445558, 0.238931704413343, 0.21265103775164007, 0.24042581509677163, 0.22107509703597172, 0.252352667075756, 0.2525351529382154, 0.2623556252775362, 0.17662638893862537, 0.19727497665712057, 0.17442430246425134, 0.16040772740652776, 0.15662737823457662, 0.16540955899251586, 0.19571011296478158, 0.17504940268982105, 0.18782112044963195, 0.19909022437410917, 0.18003371476871344, 0.19390140465297667, 0.16365577163352607, 0.1776460558677534, 0.17421786193049216, 0.1983688312737052, 0.1794361367642423, 0.18799651829440034, 0.17498998730259951, 0.1649061550344879, 0.17320645776347665, 0.17129302275025982, 0.17738176204988854, 0.17606245787738484, 0.15996276880396532, 0.16694795540473684, 0.17506980419671814, 0.45226567010338425, 0.40232890214394257, 0.17788944981016908, 0.25472136758820096, 0.37996451948191257, 0.1714058687836878, 0.4142274420553145, 0.24403397662102255, 0.2611086242272026, 0.19684994234817843, 0.19687678192747549, 0.1897869267414395, 0.17889231938825945, 0.23479427130848396, 0.2751392522694891, 0.20167838806981442, 0.24449341574822647, 0.36465628388458005, 0.18090762241020353, 0.18038210144682632, 0.18221917247456687, 0.18504869070554286, 0.19498919964825245, 0.20824101363915248, 0.1848393370793191, 0.1784083241662694, 0.19703343680449392, 0.06828695660296291, 0.06449656430994277, 0.0668569854523825, 0.05775539231456439, 0.06114256215450131, 0.0658127665164846, 0.0667518331327921, 0.07147838275328355, 0.07386064392703451]}, "mutation_prompt": null}
{"id": "03d28519-0a1f-41df-b123-03c7a08e2cae", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "e39a34c9-3cfb-4de7-9149-46cdac6d6aee", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "fbd3575f-7811-44b3-8240-5a5e4ff82044", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.86  # Slightly increased scaling factor\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.012  # Adjusted scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.3 * self.budget))  # Adjusted crossover adaptation\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.57:  # Slightly increased levy flight application probability\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced DE_ILF with strategic crossover adaptation and dynamic scaling for improved convergence.", "configspace": "", "generation": 55, "fitness": 0.20035525495173243, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4657930299583478, 0.41960229721074616, 0.41415652867291863, 0.47431919092417607, 0.47360719751421143, 0.4684617603969913, 0.4670930743479136, 0.43464310411175844, 0.4367155174852385, 0.1792367101954736, 0.15919393910669455, 0.1501034807412861, 0.1831487251819447, 0.16017811173971186, 0.15308093319123872, 0.21640321862183842, 0.1970371325201392, 0.17012730290476485, 0.09387569171115706, 0.09308483262385547, 0.10509730431037456, 0.09173142127675948, 0.09003098273970478, 0.10302295675013717, 0.09853320248525976, 0.0969223857391307, 0.0880699722258309, 0.07916350776881154, 0.08776558612301144, 0.09210905507510647, 0.09762840322796762, 0.08506981536798319, 0.07919884659249687, 0.09427264975506644, 0.0755852054866355, 0.07942408953257396, 0.9098822056085656, 0.9101950602234264, 0.901595948488253, 0.9129208142964053, 0.9244642124264563, 0.8564119968097019, 0.8953581430652784, 0.9387389110525917, 0.924344175341705, 0.1969198228373471, 0.20163618360251923, 0.19751585058926735, 0.2232516809110766, 0.21991422080643164, 0.21593819993250596, 0.19514829037489856, 0.2074745253992405, 0.23165860633576507, 0.2569954656935577, 0.2610342843185798, 0.23309600970626, 0.30101338875051, 0.27143706546319324, 0.2898644010629676, 0.26093469433656835, 0.28225501853778556, 0.27857028550715746, 0.12870993551796184, 0.13821891618967985, 0.12552321370226693, 0.13081179827326528, 0.12638526440881526, 0.11407249893271587, 0.12547455662107365, 0.10511231795854659, 0.12761498368514235, 0.12933860031150357, 0.11933821330424543, 0.1433535061534822, 0.12170393184072348, 0.12740770278875302, 0.12868095210879893, 0.12377989541389456, 0.11930988461069114, 0.12466442758049145, 0.0198859463406863, 0.01879537519929253, 0.02547716415746548, 0.06039154807986724, 0.03680066145334071, 0.04652034411989736, 0.031760403001777515, 0.022985416159361338, 0.0333170186394014, 0.14545310970787417, 0.13376546650112198, 0.15117984888633618, 0.13251788352052518, 0.14250893826028388, 0.10305665621782534, 0.15913334675892254, 0.14828371129973417, 0.12810712195034868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008933914094184536, 0.003339523860409477, 9.999999999998899e-05, 9.999999999998899e-05, 0.10743136952553001, 0.0939988981160561, 0.08271663134883112, 0.083504247421758, 0.09407815146554588, 0.09495845732894104, 0.08895077341131674, 0.08698145368857024, 0.08505802796171047, 0.37395121582303614, 0.3738558579774154, 0.374989904740727, 0.4085303255265461, 0.3588787431650653, 0.40133346359911426, 0.38363242942815146, 0.37711971296801716, 0.3722998547040335, 0.09443693707233247, 0.10675786357295636, 0.08634229805781268, 0.08903902328720781, 0.08653237821554272, 0.08933982015966335, 0.09032968811385567, 0.07540491731624499, 0.07281383060298685, 0.17251646065855553, 0.15413418590535255, 0.14019522023816733, 0.14162339111561562, 0.13280789874271082, 0.16461692650309, 0.21290975600572382, 0.14097497709619145, 0.1445230598317646, 0.22509147618758907, 0.24609457587746342, 0.24648556851400139, 0.23776867607726015, 0.22205617302458414, 0.23299272275098393, 0.2486218999046218, 0.25158613308625144, 0.2481572078742652, 0.17132771784683132, 0.17905250643961312, 0.1794038319310961, 0.1713900187199704, 0.16275990166335874, 0.17044184961935793, 0.1796502498532906, 0.20002222344910248, 0.1707637151028919, 0.18944013245116476, 0.16989801476590327, 0.17367479012515796, 0.1731073975211841, 0.17454414723889478, 0.18159190460124386, 0.1733942109704818, 0.17743769562605738, 0.16813926157658676, 0.17088721187127687, 0.17271534586607518, 0.1639389433803371, 0.178166865130853, 0.1670092302796451, 0.17126662058097786, 0.16120750232871683, 0.17849816332556168, 0.18847606735546996, 0.1688135588612113, 0.16613562944614202, 0.166617372126187, 0.1879192071087603, 0.1618179482449863, 0.3290098228223033, 0.17812023330982518, 0.3408036907490235, 0.17100696204248123, 0.3118123112387131, 0.3518390097755717, 0.15308449950344638, 0.18704783968945882, 0.1791521090510223, 0.160729970359345, 0.2011003457336572, 0.2030165016307104, 0.42400435155199867, 0.20783134525272273, 0.19969427316016153, 0.1944506650903971, 0.1913088006747089, 0.18408298267611156, 0.19118478760021618, 0.20288034354938134, 0.17489446841023926, 0.17440333599842384, 0.06885446565231179, 0.06413401231117044, 0.06646097439622733, 0.06667713926664454, 0.07854507678206168, 0.06714241750456384, 0.0783794635762517, 0.0677259388932725, 0.07695448921425396]}, "mutation_prompt": null}
{"id": "891f30c7-d70e-43f6-8e96-c977d99e3964", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.85  # Slight increase\n        self.initial_crossover_prob = 0.87  # Slight decrease\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjusted factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.4 * self.budget))  # Adjusted factor\n            \n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c + 0.1 * (population.mean(axis=0) - a)), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.57:  # Slightly increased levy step probability\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step * 0.9, self.lower_bound, self.upper_bound)  # Scale levy step\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "A refined DE_ILF algorithm with adaptive scaling, crossover, and mutation strategies, incorporating a dynamic levy step to enhance convergence speed.", "configspace": "", "generation": 56, "fitness": 0.1998180687762247, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4590301534473532, 0.4402087302219435, 0.4600158304033083, 0.4665079959775871, 0.47414434532189675, 0.4268215140385301, 0.45113953686595265, 0.43795446676909344, 0.45350287730587124, 0.16527758826859085, 0.17872861450807376, 0.1868887331980913, 0.18963296163719645, 0.18741659716233627, 0.17525989714669687, 0.1866123316547742, 0.1735280019444737, 0.16702990439230547, 0.09323928523353953, 0.08431038359956944, 0.10778899132566111, 0.10154658575921927, 0.09557631810212064, 0.0824601047913911, 0.10243991386801521, 0.0962187280946839, 0.08550104053916763, 0.08007431688988687, 0.08333672304930972, 0.08176221856358679, 0.08136130148646392, 0.08145551221101055, 0.07668419870376186, 0.08199328568426878, 0.08045054876042745, 0.08267152105617892, 0.9131453293787947, 0.8766802170811777, 0.8942066122135081, 0.9104727134579488, 0.9262266512737092, 0.9155025793688456, 0.9266990046695882, 0.914656574884948, 0.9626897752079864, 0.21116595687912276, 0.21548790102427506, 0.20466637283955702, 0.2053227316667523, 0.20260691557997623, 0.20008180128619757, 0.22495101573318055, 0.23012758057495875, 0.2092807557097538, 0.24622480352272968, 0.2214472513406337, 0.26820704359387304, 0.267428180057645, 0.2979658349620571, 0.24033495239951586, 0.2483118538773561, 0.2536725244978216, 0.25662179656277095, 0.1300695625958268, 0.12067562653325825, 0.15049585708843516, 0.12835242419654258, 0.12306718533264571, 0.1419090539546869, 0.12203702609174505, 0.11582662589732551, 0.1291483209113169, 0.11617897319739168, 0.12417470427133537, 0.10484436934321495, 0.11781187609553201, 0.13357721312461068, 0.1403032280214651, 0.11799525343758344, 0.10848379909015626, 0.10932021905626321, 0.02930067973090733, 0.020531543266198993, 0.008708762321676833, 0.03299675981348993, 0.02813699787228685, 0.0026544477487439044, 0.0205462237599624, 0.006547902171485265, 0.0169458141341996, 0.1329698622127593, 0.15294377064551967, 0.12661860268431135, 0.10791323342482628, 0.15784899259551055, 0.1328457228329264, 0.13401297841515336, 0.13171947719826183, 0.11739831173476611, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015510843143063169, 9.999999999998899e-05, 9.999999999998899e-05, 0.08609728269154926, 0.08473840199728089, 0.09605920464564865, 0.0907398683721996, 0.09959287648344273, 0.103628181916822, 0.08208104660300763, 0.07819754631496378, 0.0924628583223126, 0.38468135210833365, 0.3521188184387476, 0.3949080867847665, 0.38547967932167815, 0.4027134815617611, 0.38330784879574664, 0.41558901811329085, 0.3924760497961568, 0.3944746446403843, 0.08044607325309117, 0.08311266625468017, 0.0869002021057449, 0.0791460833574904, 0.07861650625350247, 0.0865570643049468, 0.08544770077162289, 0.07945292280948835, 0.07825588118211635, 0.1235423196183163, 0.13365936033382309, 0.13523664477667485, 0.13558001233413486, 0.1532746969501534, 0.12260217761022463, 0.16542641245641954, 0.13806549399567158, 0.16171391749872432, 0.2443993461033077, 0.248237403894086, 0.24489530877243015, 0.23697106071758767, 0.2289405596556301, 0.216274021284519, 0.2573940984651072, 0.25634154970762424, 0.2633925391851172, 0.18231382173274058, 0.1773345023584083, 0.17968136933485657, 0.15633681758103268, 0.16432197058646614, 0.1754166739840881, 0.19777925694690834, 0.19039803920667608, 0.18484746580784406, 0.18063506615621316, 0.17956227218824494, 0.1704674565915637, 0.1898987766322221, 0.17272505486379008, 0.19934083064941988, 0.17826366111535286, 0.18872718642166542, 0.17691746934204333, 0.1653014750942079, 0.17379784203909554, 0.17243249603025324, 0.16980751771306024, 0.16892248069774762, 0.1730573108865805, 0.16818210362193253, 0.16924130475873356, 0.17623041582311694, 0.3301498246224689, 0.4905932880588595, 0.1658059554250041, 0.22996276598712317, 0.1737748956667463, 0.17892284159919525, 0.23069220399531487, 0.1639248445355015, 0.17906928760466467, 0.1886944583851673, 0.19511197418653092, 0.16701585143674857, 0.16515980955469645, 0.1898021954429202, 0.28006989767569856, 0.3674629605613835, 0.20205363137358512, 0.32877166904086286, 0.19253115089617023, 0.18113928403695345, 0.19171135734068434, 0.19165652501097008, 0.177447266172442, 0.18317523668676672, 0.17339640903457898, 0.21106385785969284, 0.18671565195718087, 0.06902105840834283, 0.06646887300701021, 0.0731348566609833, 0.07581936345859308, 0.06577974360552274, 0.07248101274709728, 0.069189253027236, 0.061572443754805306, 0.07221421655003235]}, "mutation_prompt": null}
{"id": "0e51ec21-6b39-4bab-8592-a3d35021c2f4", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        best_idx = np.argmin(fitness)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  \n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.0 * self.budget)) + 0.01 \n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n        \n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced dynamic crossover with adaptive elitism to improve convergence speed by promoting diversity and reinforcing better solutions.", "configspace": "", "generation": 57, "fitness": 0.2061031451233099, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.45158311983360044, 0.451874188399918, 0.44438558583880994, 0.4542504129268592, 0.5118547220700451, 0.48518703426707444, 0.48255060418500584, 0.4799754453517475, 0.46765531995637044, 0.18072446233502049, 0.1830315087324198, 0.17574899631603935, 0.1800568106750059, 0.19113355210822935, 0.16910556452778913, 0.18325992767064891, 0.20277344284429533, 0.16105737780267282, 0.09723181865408348, 0.08996749545552285, 0.0939617650745811, 0.09032574751871159, 0.09613948980170883, 0.09893144114172592, 0.10582348128755625, 0.09381051867051571, 0.08952814103527906, 0.0819296571796081, 0.08257792900982097, 0.09284382505936428, 0.07482717808482753, 0.07432375652330214, 0.08329661565754554, 0.07611389921452105, 0.07897046444379174, 0.0811680425146617, 0.9395892702950369, 0.8992897777073285, 0.8976717583453779, 0.8959283745049135, 0.9198920845852635, 0.8985762623302231, 0.9147507994397377, 0.9341097960291208, 0.958360909270582, 0.20716714652478674, 0.20921387721306173, 0.2025169472148154, 0.20602664965025141, 0.20940101916433884, 0.22810529401981106, 0.2178557651442622, 0.22242526909742855, 0.21640613501706119, 0.30175030544770365, 0.2467157536320066, 0.23875206463394416, 0.285704048732748, 0.4686959120492503, 0.27371473711986294, 0.25889014307640557, 0.30790849801614417, 0.2685440846622015, 0.12261553737786035, 0.14418309671202678, 0.11480020066942775, 0.12849289726803403, 0.14140540775792576, 0.13324285776715838, 0.13452238359820645, 0.1434793277475095, 0.16144178956280608, 0.14422382173306159, 0.1283781863930169, 0.115176964668674, 0.1225765042230832, 0.13922391514602805, 0.14637846803462728, 0.12840553278889932, 0.13608372215792186, 0.1474280318913347, 0.027157726553745265, 0.020272239963947114, 0.016705745374489545, 0.05865056570821614, 0.03422451945317628, 0.037010187019202, 0.034733306787865126, 0.016256700947178016, 0.007633618246258855, 0.12106061548119018, 0.14978633679779796, 0.14172648497851592, 0.1419590083454576, 0.14118379465079156, 0.13044480646609868, 0.17786638153680834, 0.16018009875411832, 0.1744728069815159, 0.0005941301914397235, 0.003663723087289128, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010884224460605552, 0.0033944890047820087, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011365320864531459, 0.09576470158797079, 0.09023382948239456, 0.08372404806303435, 0.10334566863977546, 0.08678990459406777, 0.10078097764103422, 0.10115741524729471, 0.08141351857002244, 0.10170075683887114, 0.3813480459356592, 0.356259911845322, 0.39193795195167724, 0.39621937109521654, 0.4287550629149992, 0.3808115555257614, 0.3944165900896839, 0.4016332301186767, 0.4054479078009521, 0.08792826052746472, 0.09269064920633718, 0.0898800825111411, 0.07296527565469935, 0.081648218003319, 0.07354668234668194, 0.08966172065045375, 0.08466781883295238, 0.07467819066543402, 0.1414155309265065, 0.1680159570757438, 0.1681226086321772, 0.1447034747350765, 0.14632236063547588, 0.14813705745178973, 0.13746637561355146, 0.14672159622344028, 0.14694955343975058, 0.24752834734018658, 0.24237995276071955, 0.24543497543112158, 0.23407635301756213, 0.23105212539789144, 0.22524373257082375, 0.25646817965519175, 0.25160065515048924, 0.2601830221047726, 0.18561195073917935, 0.17054957227087564, 0.18755113887754948, 0.1674748221549922, 0.17047289339543203, 0.1767195656809325, 0.19178735040912054, 0.19211242394040495, 0.18585960820279346, 0.17364468180580717, 0.1900946014592242, 0.20438326072103352, 0.17274942925984382, 0.1693269913830372, 0.18949964225313254, 0.18984720364279262, 0.2176238772890513, 0.18933052100449088, 0.1666473369784146, 0.1715446022119479, 0.17719107736170936, 0.1736646503634589, 0.17013675631507708, 0.17516384202895463, 0.17180242350929453, 0.17607865945790546, 0.16227238442688208, 0.4580684105570847, 0.28660500014177803, 0.16838305904912432, 0.17562261881031627, 0.1771722594442805, 0.17617119064005715, 0.35561359517869706, 0.215578844942509, 0.2752057667405222, 0.18610118943159182, 0.1989301078370922, 0.1895675687955689, 0.2641035249290661, 0.2892223285351443, 0.20309046507907513, 0.19493278192245267, 0.22954550269265617, 0.3508492062504014, 0.18281150797372636, 0.1765547419543957, 0.20129079754204116, 0.18853228216564277, 0.1733267484737191, 0.1856078745615396, 0.1824647494115108, 0.18601737944255314, 0.1898153441157815, 0.06715544519594918, 0.06820858891064363, 0.0626473098890723, 0.06465291407677776, 0.0726365449041918, 0.08162584064761214, 0.06563868192687372, 0.06756860150136035, 0.06796677006673013]}, "mutation_prompt": null}
{"id": "e0da08e0-4245-4a71-ad3b-2d269cb9f0ae", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1.02, size)  # Slight adjustment in logspace\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Increase scaling factor slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.12 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)  # Modify adjustment parameter\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.57:  # Incremented probability threshold\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced DE_ILF with strategic diversity introduction and time-variant step size for increased convergence.", "configspace": "", "generation": 58, "fitness": 0.20696487128013832, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4548155288293848, 0.4352733585051811, 0.4386957752110544, 0.4830980405941283, 0.492690613012987, 0.47095598566528907, 0.45270902864029317, 0.45451888059013634, 0.46506507065889835, 0.18635216247568465, 0.17297480198964765, 0.1849181723074974, 0.20177537616192354, 0.20049165534054847, 0.19432942670548325, 0.1865284127086626, 0.1890564168257135, 0.2065920164923889, 0.11186416818383893, 0.09964996129590087, 0.08874620219494878, 0.08479209321097425, 0.0942091643657399, 0.09848307422635083, 0.09766185509440872, 0.09577065872177559, 0.09682048601791737, 0.08530489140941355, 0.10384048210855634, 0.07600496481855046, 0.10039756208531325, 0.07768877882800662, 0.07828551636192993, 0.07987281562852389, 0.07282931077607213, 0.07696689932138956, 0.9114173686304557, 0.9083570369653177, 0.8946582080317651, 0.9445672697071447, 0.9192370775851565, 0.9283961865324473, 0.978576886727149, 0.9478529583557924, 0.9188221863845334, 0.21711797032469438, 0.22198521310517316, 0.20809927955411, 0.2248238623650617, 0.21710728583550332, 0.22192844504414444, 0.21685715063441646, 0.20676834445301207, 0.2074546191187483, 0.30870234281713105, 0.26153900333417845, 0.24493920566509686, 0.2737938514137287, 0.385581064771915, 0.2704015663106628, 0.2750180925901645, 0.26735744657512917, 0.24984775084386124, 0.12882701099093885, 0.12959636492312054, 0.1394073190312627, 0.13925464985472047, 0.14622524906839685, 0.12130827937432409, 0.15923896845449093, 0.13196456385357702, 0.1330253171036938, 0.12103733850812715, 0.12196577531928343, 0.1810663989294391, 0.10980680730209647, 0.14081768552364904, 0.12488862859142191, 0.0950323571194851, 0.1418691190062884, 0.11449184040412164, 0.023059603367818426, 0.023151746153066588, 0.027761962672903095, 0.03544483290346778, 0.05333574610473757, 0.018100717628565688, 0.03316227596907595, 0.007416745634369892, 0.02947685819711643, 0.16320707533648127, 0.12351854838261866, 0.14201296388540974, 0.13062075430253695, 0.11757039598425822, 0.1296939039316345, 0.15421799034960715, 0.15463518699150625, 0.1516285425610604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006786560921533402, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00238739459149806, 0.0013953979233468639, 0.09823200363658702, 0.09209809844684091, 0.09033598482891281, 0.08003272537915307, 0.09677067449684185, 0.09187256322659543, 0.09426875089096842, 0.0799000695163743, 0.0976010011551649, 0.40395676947025616, 0.37780423692347287, 0.3913836164136707, 0.3857604963362854, 0.3867680915658097, 0.3828200710199149, 0.41326092240043777, 0.3993946383663103, 0.3711074368371935, 0.09457893434783504, 0.09921576085626582, 0.09040333034056092, 0.07855712395815373, 0.08665691327045899, 0.07086255327043922, 0.08638810949601217, 0.0752954975388157, 0.08188595589213254, 0.14342986712329497, 0.1386312894633911, 0.14276432928575777, 0.13520981293132972, 0.16649874013954813, 0.14146683320859588, 0.14742252594341643, 0.1303001003475176, 0.1355400891899532, 0.24991397597935394, 0.23648978809067955, 0.23894966538465612, 0.2383390341336179, 0.25627170539016875, 0.2379456786068428, 0.2766781669113617, 0.2675089483848173, 0.24467792374431452, 0.19995728221452014, 0.1926151736370515, 0.18367409871782803, 0.1749569833519099, 0.186597665065674, 0.17159128663533374, 0.19209159152426514, 0.184537920016002, 0.19564048456744398, 0.17551080533938712, 0.180263321218592, 0.18398766972385083, 0.19249990157243957, 0.183563060303215, 0.172548623763899, 0.20362889261195383, 0.18528632844110127, 0.1781434281242369, 0.17494165903720493, 0.18599461562230246, 0.17778242207766504, 0.16848810930561087, 0.18099867678954273, 0.1753420238200244, 0.17099831862257453, 0.1757109588763982, 0.1697959678131017, 0.22071894761095956, 0.16196544850315608, 0.18810062415362994, 0.23797168703774818, 0.16595808823184122, 0.33532437034516505, 0.45451396932141486, 0.2561507220189305, 0.2124002128054624, 0.2602596551589046, 0.193545049140056, 0.21208015454490392, 0.19212810479171982, 0.17258428291959826, 0.19280803727802354, 0.39265110057105534, 0.31076197675408657, 0.45148773851841306, 0.1942536955943427, 0.18766338493681178, 0.17846352738670468, 0.19133637056902086, 0.19174974262986266, 0.17841200793926304, 0.19046838402458177, 0.19518972655081157, 0.18666266177849478, 0.07156931563834346, 0.0648283681526507, 0.06527373147539128, 0.06941646188614303, 0.0727938183157012, 0.07363239276918698, 0.07988312529010932, 0.06409060194523952, 0.07077838362625566]}, "mutation_prompt": null}
{"id": "bdcd1e10-5dfb-401b-859c-54c4f42a6f0a", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "cb20ea15-3643-4e06-8677-8f59de98b989", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "ff8cc64a-db86-4a14-9523-625f3cf62339", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Slight increase in adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.0 * self.budget))  # Adjusted dynamic range\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced DE_ILF with dynamic crossover probability adjustment and adaptive scaling factor for improved convergence.", "configspace": "", "generation": 61, "fitness": 0.20342924637040163, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4341492018686338, 0.4518901316489732, 0.44309029432435876, 0.505219026001319, 0.4929380098361348, 0.4673826565497202, 0.46580625377722085, 0.5068349821470443, 0.4760237833854185, 0.17728218395794848, 0.21010698691036855, 0.19095737627618448, 0.20872391157181114, 0.16420607349218386, 0.17448533994201187, 0.2220253813177927, 0.19777176027614574, 0.17627233088702254, 0.10666845800716906, 0.09138521377284414, 0.09664134630524712, 0.10661136226287438, 0.09255007157169515, 0.08860900798029947, 0.08869660038018645, 0.09632062817000475, 0.10654902794364407, 0.08111402156770509, 0.08316755504770268, 0.08625894728260086, 0.08509030112136151, 0.0758516623537302, 0.09094505209150905, 0.0741942585081442, 0.08341579217087947, 0.10957867984737679, 0.9220184336554409, 0.8748540296574979, 0.9254816128599136, 0.912258861248305, 0.9526859760692143, 0.890010023950191, 0.9546588701387388, 0.9264334341824871, 0.935038205051724, 0.21354009759358605, 0.19493263642002945, 0.19896293622786276, 0.17995238925439716, 0.21053925481338154, 0.23102721501873458, 0.2360882839770866, 0.2095692655970104, 0.20929922998886952, 0.2577332599649398, 0.24346016792524816, 0.26936729269176685, 0.2700440840318088, 0.2926822299727151, 0.30574058018253125, 0.2666286712461987, 0.2557354361949433, 0.27045428021543216, 0.13535001300975713, 0.14344103079434734, 0.11958414763176428, 0.12566160457077458, 0.14100693979281664, 0.1220773030138671, 0.14058036237384952, 0.11916518523508202, 0.1308552950146814, 0.08874513042451004, 0.12821877358953293, 0.1438918691231985, 0.12256887268498373, 0.14145078948748446, 0.1277570754098124, 0.11405671472069312, 0.14393226893390687, 0.10493967908346313, 0.04071623384470624, 0.026644967118168106, 0.02286530553214361, 0.05807470020969485, 0.017328486974891533, 0.03264333168430822, 0.013868968426846373, 0.014985566417071272, 0.02067219028008016, 0.13329402076453933, 0.14415842166401183, 0.13433649507507361, 0.14421491082420979, 0.11851941010678091, 0.11490438267670777, 0.1405767134624586, 0.16825703683727222, 0.1607989630982387, 9.999999999998899e-05, 9.999999999998899e-05, 0.010793900573565551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009880081364562643, 9.999999999998899e-05, 0.0019065176723588317, 0.07940083970300016, 0.09360706130744878, 0.08418984372927096, 0.10845385160785792, 0.09591945379749722, 0.0909362722589907, 0.08550270444924757, 0.08531793710977253, 0.08576297481083617, 0.3843356241326875, 0.4211500446950791, 0.39668017781153, 0.39436609362821295, 0.4071688582151154, 0.399693370922403, 0.39278320296114244, 0.3796224580335985, 0.39398650587620676, 0.07986054620022898, 0.09624280334814106, 0.08116109292189866, 0.07908809225176994, 0.09606362169711391, 0.07420375238162102, 0.09764801804416179, 0.07659359019634449, 0.08805977640965268, 0.13589010151255976, 0.15779064818239708, 0.1508422252330356, 0.13393099020778898, 0.12431614157940696, 0.12640283990842327, 0.14888310425266083, 0.1603730252343516, 0.16076148608459784, 0.23946965750451743, 0.23787579642019496, 0.24359753753763502, 0.21567285256427726, 0.2430293224074519, 0.2175667135896434, 0.25878351712492487, 0.2616001576215742, 0.24981060775876918, 0.19008341122195438, 0.17185662977768934, 0.21271424348557955, 0.1808824571804618, 0.17136540929030653, 0.1538532184528536, 0.1828842929268245, 0.18733446470809922, 0.18622183131629644, 0.1843858738620604, 0.1895320492804412, 0.18455239754966535, 0.16983521476612273, 0.1673107210059105, 0.18113578195862057, 0.1832711407097367, 0.17315981112557188, 0.19378435240956637, 0.1720677745280531, 0.17003236152918344, 0.1716354943789825, 0.1756059446625985, 0.168582749607322, 0.17255410923354197, 0.1690127826650496, 0.1685783511968555, 0.16888514283814926, 0.5093054058570227, 0.3280529855726235, 0.16542454506054127, 0.19794615305190266, 0.17645741954018834, 0.17810372895151128, 0.39845785490526664, 0.1847039289111051, 0.27119191235660967, 0.19769248241813886, 0.19211630680523262, 0.18975975537415812, 0.17980957995777358, 0.17826844333195935, 0.16474592305300773, 0.25255537123949656, 0.2029383880621125, 0.20252654357143396, 0.18726661691013302, 0.19600992789831462, 0.18249957585151688, 0.18610481006383806, 0.1768913030174939, 0.18536196257039905, 0.181523346016354, 0.1799590000774648, 0.18422417818459036, 0.07410514233704812, 0.07062306692278875, 0.060233276909746225, 0.08300255457916106, 0.08308886701193863, 0.07290937621164917, 0.07115132087150122, 0.07799443467035838, 0.060864334802300246]}, "mutation_prompt": null}
{"id": "1f52794a-4154-4a4b-b401-bb983cf617fa", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "4c50f999-1c1d-4bb2-aa7b-fa3fa269f0da", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "ee6548fd-9641-4b81-8762-03724aed3c90", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "6324b184-75d8-4a4a-87f4-1118ac9368d1", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "355466dd-29a3-43c4-98eb-2cf798a3efa9", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v4:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01  # Slightly increase scaling factor adaptation\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v4", "description": "A refined DE_ILF algorithm with increased population diversity and adaptive mutation scaling to enhance convergence speed.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4890946684733115, 0.4672848455680185, 0.4742216331015453, 0.47851376441062754, 0.4755317515821521, 0.46749819894234534, 0.4886695222999129, 0.47694381197995916, 0.45520346621396035, 0.18465891052770655, 0.21050098686156438, 0.21221185725455816, 0.20082208069323682, 0.1877533996288333, 0.19573592645805338, 0.1868262467037295, 0.19575515325033388, 0.21247601717783982, 0.09704703671381287, 0.08331103765184456, 0.0923136643894712, 0.1041180166035276, 0.09302136853095666, 0.09684432827504208, 0.11989899586461306, 0.0975546240539723, 0.10679227896244303, 0.0824148998031835, 0.0865575245253718, 0.08691946067235967, 0.09094480529009963, 0.08684445976200628, 0.08902420798134314, 0.08327032499054476, 0.07855087882353251, 0.07367936087292837, 0.937286149915457, 0.8980556251481975, 0.9086621533416732, 0.8914966464698963, 0.9261461649083964, 0.9239673486425208, 0.9246779315971903, 0.9267036163755475, 0.9362123596305938, 0.21360112266069586, 0.22300466229211446, 0.21022401955445935, 0.21902233852059294, 0.21467523635070784, 0.2190248336887053, 0.21981703010542064, 0.21351941852920464, 0.22864994536325056, 0.2498577958251993, 0.27279820333059257, 0.3258894973162483, 0.3130721028539911, 0.34475152215857463, 0.26766362760176476, 0.2824035075761666, 0.359534117905036, 0.25371301938906266, 0.11629356433429117, 0.1262861850626278, 0.10638423344719361, 0.1480247691183274, 0.1176172765217276, 0.13200922040692242, 0.13601141910265702, 0.15202672517158133, 0.14983824238731525, 0.13254482703425108, 0.11382341180581967, 0.1253695645222186, 0.11536188856201424, 0.1348074607662204, 0.14719058306845834, 0.138735699469974, 0.11427305826685674, 0.12065576990874272, 0.02447115193703031, 0.03977089215768337, 0.020973276575604216, 0.0437445397412255, 0.033767278352362484, 0.0542601706038488, 0.014650223200187829, 0.013388671579505407, 0.01491576922363147, 0.17656117973647012, 0.16672792051292762, 0.13550398535457575, 0.13983050656551754, 0.10312905605850664, 0.127670312492549, 0.14634984646991311, 0.13519699086927772, 0.1723818997474682, 0.004689390479968636, 0.005339813548603689, 0.0013167223022056973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032798628286105913, 9.999999999998899e-05, 9.999999999998899e-05, 0.09916359398813146, 0.08365605664827602, 0.07771882796291252, 0.09847023108645114, 0.08680171156747962, 0.08799149648585658, 0.0971636253101964, 0.08984568602074083, 0.10059495428368714, 0.40816960489896237, 0.382045415638101, 0.38707630878371346, 0.3947718929426466, 0.40640893093436403, 0.40080692932960427, 0.3991009562622033, 0.3853302652236622, 0.3886623379065447, 0.08439817308319542, 0.08230606314798772, 0.09364337987220328, 0.08895965859247057, 0.08550873401192749, 0.07613775420469959, 0.076736240745649, 0.08083000476461288, 0.09333132807313249, 0.1389914270237652, 0.135729318797704, 0.1368626461071475, 0.1469153983809236, 0.15722480552225748, 0.14499168695630127, 0.1331238117305622, 0.12946825547625618, 0.15357833856959968, 0.24889132377669054, 0.2552536246967113, 0.253834886162422, 0.22565808511540286, 0.2266474178642487, 0.23011128585697416, 0.26095719139411844, 0.25330920541781365, 0.2792727094382599, 0.17264232073965446, 0.179600181909365, 0.1837977077698123, 0.1661638826493469, 0.1631136285918353, 0.16948525034645068, 0.2015688836552917, 0.19084322093281658, 0.18403713149336842, 0.17374089362304712, 0.18787682726920396, 0.18066034387164875, 0.18928409396717294, 0.18089310951671622, 0.1858760079607754, 0.18780042226195282, 0.1817846652085071, 0.1830518927417807, 0.16852254582447657, 0.17049206753710855, 0.19872676673813017, 0.17000573550414133, 0.1697942487025852, 0.16991487575887587, 0.1719485835091562, 0.18488702423382697, 0.17612283895096337, 0.167044131661217, 0.31762296141659474, 0.1712025246330453, 0.1722251109513805, 0.300924818056007, 0.4258174358484539, 0.17854644336009406, 0.16164153981091056, 0.2961277787123142, 0.27913470091593384, 0.19656503188367946, 0.19332468954483706, 0.17075570732841205, 0.3729474084331771, 0.20020397210160623, 0.34617536662591974, 0.3888234114044915, 0.20221065154455042, 0.19899558382738158, 0.17599463875667576, 0.2050384706367947, 0.19036650032899538, 0.19551575469681592, 0.17001155748033525, 0.19831189681752215, 0.20499055206601502, 0.18314564721806226, 0.06808583611268548, 0.0687628745521417, 0.06708336523398162, 0.06347387124337511, 0.09046485550709149, 0.06429865954890646, 0.0617545439829732, 0.08001049084832845, 0.06729033367677784]}, "mutation_prompt": null}
{"id": "0889bc7a-004a-45f7-8013-e0c8d39943f6", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.84\n        self.initial_crossover_prob = 0.88\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.015  # Increased adaptation rate\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.45 * self.budget))  # Adjusted adaptation factor\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c + np.random.uniform(-0.05, 0.05, self.dim)), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.55:\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step * 0.95, self.lower_bound, self.upper_bound)  # Fine-tuned levy step impact\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "Enhanced mutation strategy and dynamic scaling adaptation to improve convergence speed.", "configspace": "", "generation": 67, "fitness": 0.1907729465219007, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4267234799217333, 0.4094872709006927, 0.4070020888504553, 0.4352006886416281, 0.41345712578962956, 0.41327777786810793, 0.4168813473864914, 0.41914776017315514, 0.41343933675816613, 0.07865661074036712, 0.09523451500481084, 0.0853501629331076, 0.059965978524426866, 0.0660041204574231, 0.057475527454404984, 0.08830799058649352, 0.08423222400999986, 0.07111587991421964, 0.10642670707823854, 0.0849100702036365, 0.08734627954236895, 0.0899476236951312, 0.0731698504696715, 0.09439466512634609, 0.09359469579218094, 0.09339534746201117, 0.10599319473923019, 0.08473335029956053, 0.08390275762154686, 0.08342247451727658, 0.08041227753517632, 0.08035473699482865, 0.07738873805789281, 0.07841769939421805, 0.0815618568183809, 0.07668182041973537, 0.9694587411291287, 0.907439664207803, 0.9492366391844047, 0.9257612331773036, 0.9333193344247762, 0.9655932768821428, 0.9102581839775243, 0.9797090605677139, 0.9622353603509156, 0.19915740494194922, 0.19599824071384897, 0.17936625399393602, 0.20007123964129014, 0.20932532471294962, 0.2036149974510436, 0.20302244901493383, 0.20853163546273368, 0.212365968481544, 0.239754271706919, 0.2395896697845188, 0.23003738889320247, 0.24238743409394992, 0.2602016533993029, 0.271133236071355, 0.24083463250246917, 0.2777963782434475, 0.31106311814049625, 0.1290847705139775, 0.12530862834319012, 0.14061165390023966, 0.11234785108043266, 0.11768550131842892, 0.1145329291772148, 0.12174070131046699, 0.11012223642514984, 0.12900144655683432, 0.11369265377452464, 0.10977118054424517, 0.10980645461019845, 0.11642071976859647, 0.12044472116443306, 0.09920128776610071, 0.1432529273992943, 0.10393992147095288, 0.10587161175472193, 9.999999999998899e-05, 0.0028934313326626215, 0.0008838592913543719, 0.009396791096765833, 0.0007481099700274996, 0.005484691938471897, 0.017281066974386472, 0.014918511355153319, 9.999999999998899e-05, 0.09908421111856713, 0.1658976989521147, 0.09994748147681565, 0.07728427724298859, 0.11218778206957936, 0.08154240861773854, 0.09425939501914249, 0.10312136455734466, 0.07745705051615515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001779488028896825, 0.07541621663283204, 0.0789353421716461, 0.09910291565703133, 0.07940705226022526, 0.08226770558574226, 0.07367201867061135, 0.0768517710230806, 0.08223557443916019, 0.08785777222400681, 0.37198360330336877, 0.37250407133788255, 0.34787477944239564, 0.3695585620449128, 0.37914816176819177, 0.3638678080015211, 0.35395019291967833, 0.36728537749905654, 0.37191889230811437, 0.08301557627300094, 0.07836596504891946, 0.0741006791636093, 0.06889077380363362, 0.0790102265886733, 0.0773153542782744, 0.08964750313427194, 0.07192851649250753, 0.08671620344663955, 0.1617249601117704, 0.20303474630101692, 0.16000857707708527, 0.1426659480512641, 0.1205241015282581, 0.19261990470550183, 0.13459715498771707, 0.13338059448145267, 0.12776557314681392, 0.22887570221188447, 0.2289306004188315, 0.23347240957305615, 0.23523250005017515, 0.21523980425990918, 0.21660875248006106, 0.2503627718991671, 0.24955347710678966, 0.24983062505275866, 0.17602965900818413, 0.1919625673070381, 0.16776824876144236, 0.16452674823763502, 0.1634836391284742, 0.159041668735454, 0.18533232442826242, 0.18481757477998073, 0.1800509254312085, 0.19083952965242257, 0.16903951959351293, 0.18405661994073497, 0.181032922735196, 0.18103344557482615, 0.17998890177579996, 0.176012063649729, 0.18481990146673466, 0.18502595131684973, 0.17359470997252957, 0.16700418182271404, 0.21106392363657844, 0.17813684601540758, 0.17480578071121622, 0.17148481749612188, 0.17156888687018568, 0.16400269122850697, 0.16950084933770138, 0.48638950324921837, 0.3574257736098101, 0.17272350034691275, 0.1790275133250574, 0.20976992766689095, 0.23014184833499862, 0.15955028276193972, 0.40365012747658846, 0.15429869227528503, 0.2505051465888829, 0.1904265196112278, 0.1961105385311963, 0.19508179208049725, 0.17096337217439017, 0.19124780137907127, 0.2078954256787302, 0.20553181527594622, 0.20468700546619178, 0.17425975866074184, 0.19797108210834935, 0.18546676786110283, 0.19267277095579516, 0.17308549899403058, 0.1838531305767872, 0.18416487210490007, 0.1929242260261782, 0.18528538256554417, 0.06907548188288404, 0.06651390314986205, 0.07511576280640853, 0.07452699450751987, 0.07514194144262187, 0.07449571586800852, 0.06878752123529541, 0.05980512889814471, 0.08442210563108532]}, "mutation_prompt": null}
{"id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 68, "fitness": 0.20863497028783373, "feedback": "The algorithm DE_ILF_Enhanced_v5 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "5fc17f4a-150b-424d-adaa-91e64ad9466f", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "a3b02461-fef5-4d6c-bb9c-da343225cf40", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "f367de08-f25b-4f38-bcda-314b58f5e74f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "68995d74-3a59-44f5-9def-0604aedfb37d", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "8681ef3a-1763-48e5-9d67-4dcec5c484c7", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "0e53f369-3281-4ad4-a786-f43f923232a9", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "9c73a022-8295-4c58-afc1-573561d5dc01", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "bf69d12a-28e1-4ed0-b873-2978f275e967", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "38344a78-02d8-4755-b829-8c28c6debeaf", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.83  # Slightly decreased scaling factor\n        self.initial_crossover_prob = 0.90  # Increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjusted scaling\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.4 * self.budget))  # Slightly altered rate\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v6", "description": "A slightly modified DE_ILF algorithm with tweaked mutation and adaptive scaling for improved convergence speed.", "configspace": "", "generation": 76, "fitness": 0.20670107180092412, "feedback": "The algorithm DE_ILF_Enhanced_v6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4182046123865464, 0.4398987379357129, 0.4474359996684326, 0.46377974744717676, 0.44915704107305, 0.46803548972755493, 0.48512056738953, 0.4455769435894408, 0.4699394116988792, 0.1627876552184946, 0.17595435134702764, 0.18145017621534898, 0.17207265055643217, 0.21430602418691902, 0.18242216362528696, 0.20018249139502775, 0.18742681991034194, 0.1911124000081238, 0.09272835582027239, 0.08822006379182079, 0.0917484116094116, 0.08916731441015369, 0.10145326799675436, 0.09610687501701431, 0.10920387058346737, 0.11706613332149829, 0.09296681217687996, 0.07783213077308337, 0.08164431424932261, 0.08876127001676792, 0.09128585910251386, 0.07989376699801176, 0.08839073313860701, 0.0864164000674551, 0.08365613674406558, 0.08929594212015746, 0.9289644496955378, 0.9087784278643629, 0.9486345244855177, 0.929554829996557, 0.9340692723408189, 0.91160583940875, 0.9340250000714946, 0.9619762498576672, 0.9130284656480306, 0.20527175338378678, 0.20168605202267686, 0.19126975030657944, 0.20136235487562248, 0.20987990812476354, 0.20474980059889458, 0.20753706779971814, 0.2205989396865723, 0.21499929997115286, 0.26219477851192974, 0.28383236255255606, 0.32805458999581005, 0.3090862692614247, 0.2962842302787152, 0.2903201537326989, 0.24869266040382854, 0.2872486563738277, 0.28087465989724647, 0.12943489096266625, 0.129200715498329, 0.11489268486548476, 0.13631187389958144, 0.13307925296527956, 0.14031406873257346, 0.1399989932625989, 0.1426658589824461, 0.13015969595391597, 0.1339321127717602, 0.15916323320679315, 0.11985807879347499, 0.12663485307705613, 0.12396678764449642, 0.14470537865521504, 0.10541851034008654, 0.129950782697837, 0.12480403221773284, 0.03217982519122742, 0.03038397970573592, 0.0281445225433552, 0.035092894651787554, 0.03497429340392233, 0.017292414150081648, 0.026643372009429234, 0.02812090775649756, 0.03055524692988365, 0.17005799993997994, 0.1336625695673913, 0.14974547321561882, 0.13594619645677353, 0.11187276322673811, 0.1508635220947948, 0.16392868569172891, 0.1798245201231412, 0.1305234628010803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010572490830623393, 9.999999999998899e-05, 0.0052594526811524656, 0.000596693926339098, 0.0006033841428827458, 0.00043675407800469745, 0.1112302266765941, 0.09594618912813946, 0.09217492271837091, 0.09298392024964086, 0.09454549523275924, 0.09180020019046786, 0.10356475313060853, 0.10032321405930011, 0.10778514657850813, 0.3861641106445507, 0.41896539036876257, 0.3859697513657121, 0.3937322570294064, 0.4155805897008492, 0.39730759980979424, 0.39636868747587173, 0.39106800336436276, 0.3606047813387444, 0.08552714667107686, 0.1031472894546348, 0.08367420238249501, 0.09501836596114155, 0.09878431013933897, 0.08807815244765349, 0.08228853257432933, 0.08328917860337315, 0.08827050120326896, 0.15307435738681763, 0.16236152528712777, 0.16259943790110842, 0.14159957412463786, 0.13676719552886318, 0.15427972690032443, 0.1517261582408138, 0.1626315334544477, 0.14225451185423776, 0.24531259589058363, 0.24867912011866722, 0.23436940760822367, 0.2237578094911723, 0.24414358224760668, 0.23240290136474828, 0.25395717269088214, 0.2706779567113178, 0.2581528915247927, 0.18473352690646327, 0.1777018356622666, 0.18588290290366516, 0.1658522142827371, 0.17642961346223196, 0.1635913803455471, 0.1912466532024597, 0.1958816229068926, 0.18462099469587856, 0.18170420176136315, 0.1815265517871476, 0.18589501841232337, 0.21655940206476798, 0.18249481270290036, 0.17751852488638253, 0.19561257623543338, 0.16850360048700386, 0.17808785877245592, 0.17639510675459735, 0.16430037530683073, 0.17741963350408918, 0.1821952584588089, 0.17166026301580295, 0.18433519942047683, 0.17927328039639434, 0.17711890636580496, 0.1698841157682347, 0.16600003395007412, 0.15720108230348473, 0.16502874638212728, 0.33644976914009317, 0.3878841348425168, 0.18078691033367, 0.4797275937815676, 0.28308861979266486, 0.1638760914708315, 0.21564464367848968, 0.19804765904826904, 0.1832548978803923, 0.19018059822086175, 0.1926444270913471, 0.17465533635900032, 0.20117093439923428, 0.4982197057680394, 0.2716732449060252, 0.17809584307511794, 0.18817783713271496, 0.18825984598780876, 0.176125955639715, 0.18823375298033562, 0.18113828570346036, 0.19392720095108984, 0.19127741083224015, 0.20296017672067168, 0.07866901798957004, 0.06711175720944151, 0.06857741586470834, 0.07111578025002585, 0.062260443101345264, 0.07526947544529061, 0.07012390664017343, 0.0676737636782051, 0.06607888504529724]}, "mutation_prompt": null}
{"id": "f2e32bea-3ac8-48f9-ae8d-814a6dd20480", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "17bfb37c-74ce-49ee-910a-e4b8371d4df5", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "c80352ac-6af2-4176-af72-23f424817471", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "56abdf2a-30cd-4cff-897a-887c7e1d9a45", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "cb7adacc-edcf-4a46-b180-a16f8daca83f", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "5fe6b089-282b-4717-b9f5-3fb01227615d", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "20dffe3b-897d-4a4e-9b8b-a2b70560de87", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "9739aea7-2d88-4741-a511-9c9ba195f39a", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v5:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.01\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget))\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v5", "description": "An enhanced DE_ILF algorithm with improved mutation and crossover strategies for better convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.4551541720090282, 0.4230953226893015, 0.43380717224959764, 0.4626297817562698, 0.47633885748767935, 0.46522285450504675, 0.45315320215889576, 0.4833635838419732, 0.461238250022438, 0.186241493416487, 0.18977704979649423, 0.17492334012352384, 0.18590751876837674, 0.18976977790656702, 0.18768428835627093, 0.1751929711363469, 0.1958810392873026, 0.18090883750419084, 0.09262523151795288, 0.08686282590537908, 0.09260427379568592, 0.091339766726382, 0.09556580053239272, 0.08932393419588247, 0.09230699692876965, 0.10286109394607024, 0.09424946176595017, 0.07796802967417027, 0.0742797745935666, 0.094740263385933, 0.083905748494287, 0.08691354830836939, 0.08763998438055076, 0.08920029109655936, 0.08738733786314368, 0.08780545600571044, 0.9101536433988282, 0.9081629814963448, 0.9697691149449585, 0.9125893306371426, 0.9566179153153894, 0.9302704919827794, 0.9396657348592784, 0.929040477579208, 0.9496816026446111, 0.20517752457888916, 0.22461735489230095, 0.19681631137999955, 0.19086660557567015, 0.2056002673282764, 0.21013624886645899, 0.21850895409649884, 0.22403576247077572, 0.20047308327496616, 0.3277973240824339, 0.2423717467920029, 0.2139316604790369, 0.2645445986435758, 0.24845671915297163, 0.26289856797999467, 0.26939564303779406, 0.28812736400369876, 0.2600333500251928, 0.12700158204615075, 0.12777268165855427, 0.14913302834823428, 0.12197105038806044, 0.13311437206262466, 0.13399515376018134, 0.13993829119918755, 0.12984029453585721, 0.13201552295096297, 0.12889978275294922, 0.1582085664531081, 0.12839928767079922, 0.13426336933467697, 0.12646024142477397, 0.12073084782682164, 0.12632311556640308, 0.1151209882910933, 0.14512712196125954, 0.0561547881607829, 0.0519970554538266, 0.039119712447556965, 0.029302229855518447, 0.028617571999571156, 0.03615365284926608, 0.028370664524610234, 0.06949618399807556, 0.019791369751588128, 0.1362862829933723, 0.12581805338162122, 0.12168129930001237, 0.14992158317784288, 0.09266203185586985, 0.14867889206049, 0.1333069842918112, 0.16881251547835086, 0.15399228966148892, 0.0027013092619768697, 9.999999999998899e-05, 0.0009891511539477094, 9.999999999998899e-05, 9.999999999998899e-05, 0.003371419010493315, 9.999999999998899e-05, 0.0018056265724925025, 0.0029131819558575467, 0.096406449117307, 0.09067860549388074, 0.0707228466847728, 0.08971695388361478, 0.09830844366478775, 0.1042352209951628, 0.09768529323326636, 0.09366082220529448, 0.08395562193079587, 0.3974402061565929, 0.37333242089606944, 0.3842101896288166, 0.4093552533813577, 0.3974237866095932, 0.38414560634745143, 0.40138636851675, 0.3875616962733568, 0.3640490057565431, 0.09312965079943347, 0.07993141617805288, 0.08931335495345827, 0.08658371737450066, 0.08243587905149596, 0.07987010478533763, 0.0881570910531203, 0.08211908684842073, 0.10366158730536013, 0.15190051857666476, 0.1624508524644932, 0.13929802602355845, 0.14245665527673568, 0.1552366508925348, 0.1381512880508401, 0.1299815413265707, 0.153358709544002, 0.1654389568948179, 0.25421891992942214, 0.2431937318607703, 0.24590466307674486, 0.24017642983709853, 0.22016928647317247, 0.21588342709818364, 0.26450010767611687, 0.2608833428987073, 0.27138043621761054, 0.19819739430226924, 0.17824421908632815, 0.18763505571921357, 0.1635514202237175, 0.16513988230412346, 0.1805138209764353, 0.1847591958158763, 0.19032059096225662, 0.19704557696308533, 0.2137244005926362, 0.17184705691857183, 0.20191928283553084, 0.17295720794620795, 0.16418144382224054, 0.17027535501235558, 0.17599992926774433, 0.18919732855389393, 0.1716893572062902, 0.16920353801203714, 0.17362263543089174, 0.17322225126810986, 0.1840951507433014, 0.17892029850845392, 0.17623877611936223, 0.1795769455817392, 0.17190529013520717, 0.16777426236005089, 0.5483698371724444, 0.21655886974896255, 0.16526141478203515, 0.19407361322279038, 0.17577676889530214, 0.42428242492856505, 0.35962599265381545, 0.24866060607159357, 0.49428695133083556, 0.3861189383403667, 0.16537064190057993, 0.38589059384030444, 0.19051559548064434, 0.20396131028791198, 0.2136348134131143, 0.19587923459577383, 0.19380585601294176, 0.4807660073549561, 0.20206861303199153, 0.18602281327975057, 0.19075567689318096, 0.2079503144266297, 0.1802863105453676, 0.17872019632664848, 0.17786664724334222, 0.1709592755081547, 0.18244458438369038, 0.06660437394530039, 0.06202665616348879, 0.06915630927544514, 0.06359424779760992, 0.06585142679683709, 0.06538057181409074, 0.06698559908568369, 0.07174212231655841, 0.06981162431506582]}, "mutation_prompt": null}
{"id": "71496bc1-9e1c-4ad6-88ce-cb17febb159d", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * (1.02 if iteration % 2 == 0 else 0.98)\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.01 * np.sin(0.1 * iteration)\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + scaling_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v6", "description": "Introducing adaptive mutation scaling and dynamic crossover adjustment for enhanced convergence.", "configspace": "", "generation": 85, "fitness": 0.20673717446790002, "feedback": "The algorithm DE_ILF_Enhanced_v6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.46066100976423074, 0.4535232675659596, 0.4486642310451281, 0.45972497302681736, 0.47711774225977066, 0.4571297998663413, 0.46471112273430604, 0.50630342033172, 0.4493304770320218, 0.19323825824739171, 0.1981986570678943, 0.18456264254026244, 0.16220756287500482, 0.18468701033230084, 0.16311960256969238, 0.17363527288131897, 0.15934795280391933, 0.19597246903704357, 0.10747890266506399, 0.0825039583903332, 0.08861022227275228, 0.08884845197378621, 0.09737393889644175, 0.09783692088881946, 0.08852351212463616, 0.09512321233769849, 0.08655973664933825, 0.08785263001300048, 0.08724205677773988, 0.09296358102505597, 0.0920948396651402, 0.09576090077453592, 0.08297502709167404, 0.06995302059031006, 0.0853298230187316, 0.08255582244928572, 0.9356288031648728, 0.8961927392957445, 0.9183086738331122, 0.9409974217929895, 0.9202359560673925, 0.9310007749606832, 0.9255299780420205, 0.939930045889103, 0.9116103424778177, 0.22939474430839346, 0.2134333894788405, 0.20348704050641298, 0.22366538291177995, 0.2035246121340234, 0.1948153673778863, 0.24281446123296668, 0.22366766976858266, 0.2231054808969073, 0.2613776108416316, 0.26092485459917736, 0.2827537242423207, 0.4551099237751397, 0.26695354561018736, 0.25556431258416057, 0.28199535204270854, 0.391389773889919, 0.2994824368925362, 0.1212431238362216, 0.13033072517378985, 0.14429241631399548, 0.12237897530189401, 0.12847003578790372, 0.135379353882768, 0.13842964651249023, 0.12527369757043894, 0.14036299011142306, 0.1340338593933721, 0.1272446470229528, 0.1287027039270271, 0.13306201665889605, 0.1262476326647014, 0.1257061320426217, 0.14203898627281453, 0.1328383464065932, 0.12490319255927607, 0.036709062488959665, 0.0309352167505198, 0.04718407256483792, 0.033400000675816055, 0.03404459654106573, 0.042609167522598024, 0.020147497497842726, 0.023226043662913587, 0.02682453377042926, 0.13829058624429125, 0.1524247971302306, 0.14201512968951013, 0.14831594115068547, 0.13973673819196752, 0.11651840277442549, 0.20297334027376357, 0.1803396577208387, 0.21451499051488865, 0.0002935407058348716, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011694859363661214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00014770680227427224, 0.00240674470514024, 0.1025100171312261, 0.08208950910402413, 0.0820842226703824, 0.08951614709122202, 0.12365224528067087, 0.10154948222872373, 0.10069226061969805, 0.08327926375508432, 0.11306738747432665, 0.41257495308750936, 0.40058226627103033, 0.39669179550213607, 0.41219000267901096, 0.3916818758995564, 0.392539211785642, 0.42364301906558843, 0.3669494669340938, 0.4000738131248587, 0.09324240932280559, 0.08052874401963694, 0.08996498626801808, 0.0789566936383459, 0.08213638555198499, 0.07439115000990826, 0.09394460553360373, 0.07630042507389134, 0.08780261297877001, 0.14892078210408277, 0.13403521138124597, 0.12748395288668524, 0.1281128354205352, 0.15404397490049182, 0.13484875109534056, 0.13437023942185478, 0.13015706402179672, 0.1281478422799588, 0.24767113484814984, 0.23033862562699225, 0.25646233548176367, 0.2249249642104797, 0.2304886720802929, 0.22555015901845832, 0.24722643208418993, 0.25955366506389177, 0.264193411807905, 0.18592708261239987, 0.18787823957766092, 0.18459706352823047, 0.16985037881481746, 0.17011070506753345, 0.16111281568025293, 0.19475996073288682, 0.19947017520017063, 0.18611107996881215, 0.19097212712034517, 0.18223486205323258, 0.181597259010557, 0.1804161933732179, 0.23137119205373458, 0.17618125781264893, 0.18351572790121473, 0.17767278918221996, 0.17569654039592042, 0.17066641910846392, 0.17912326194931716, 0.17308393853347448, 0.16907261198229773, 0.17541484424353293, 0.18093413996160002, 0.1677793252143076, 0.18156983062529708, 0.18123807066836817, 0.3010237810535862, 0.21533162253646965, 0.15774342575898714, 0.203763634409718, 0.18159963255787637, 0.17974712222998535, 0.30887048575445686, 0.20541918771669676, 0.3381699224703246, 0.19158920684691005, 0.20958527620825296, 0.21554557651438389, 0.24071848439255328, 0.18328488676029975, 0.17765678640491334, 0.198401379493926, 0.47932577439341006, 0.31746247704316033, 0.2005250012140346, 0.17712881619268972, 0.1740463654983312, 0.1797811379576031, 0.17765041024678763, 0.20146038408309164, 0.1756003603266728, 0.19041447374781906, 0.19077410437200915, 0.06513253554264808, 0.0683787687499402, 0.07632511097286754, 0.06466442100213587, 0.07127008231148302, 0.06765292809212098, 0.06145736572022942, 0.06538242784225257, 0.07454124748223234]}, "mutation_prompt": null}
{"id": "cf12eacc-2e96-484a-9781-96143c8f7f12", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjusted scaling\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.01  # Slightly adjusted crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.9 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v6", "description": "A refined DE_ILF with adaptive scaling and adaptive mutation for improved convergence speed.", "configspace": "", "generation": 86, "fitness": 0.2974196032632372, "feedback": "The algorithm DE_ILF_Enhanced_v6 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.23.", "error": "", "parent_id": "70b0da71-b441-46d6-86ab-b6672500c8f3", "metadata": {"aucs": [0.7878852731524085, 0.7441648154874413, 0.7363913912120097, 0.7642986815152011, 0.7863755153124066, 0.725146776698252, 0.8100586954357138, 0.7614586557178868, 0.791902317785932, 0.5700327295091865, 0.5275209500834794, 0.5388365287425521, 0.5470944776506934, 0.44851379625457743, 0.5639067403154139, 0.6194691240990635, 0.5565825754914352, 0.604740107476085, 0.10680540516645487, 0.10836475463660245, 0.10810943941167861, 0.11194425031901833, 0.12025085009259451, 0.11163521100559826, 0.10993026307620402, 0.11411738012199679, 0.10161527053707287, 0.09564803022882773, 0.10843232384950185, 0.0962444301235631, 0.10041246177180396, 0.10899505187896408, 0.08881247009297244, 0.09666068940396144, 0.10585149940223493, 0.08664655260571597, 0.9321292811864412, 0.906286735138094, 0.9081127846955894, 0.9164921435045101, 0.9202146209427566, 0.9067702943853007, 0.915171025882682, 0.9161114909472151, 0.9165291476018157, 0.3268118220134899, 0.31075904788719133, 0.3225993918848874, 0.37368185698891543, 0.3196511337989052, 0.3270238006988214, 0.33162912300971636, 0.32696681801856553, 0.3672578803040445, 0.37829659260034465, 0.78819697486243, 0.741004995089573, 0.772734174219307, 0.7582317462795605, 0.7990763087992041, 0.22310595256912302, 0.795453301225254, 0.35993144679844136, 0.21554006911665602, 0.17311048471964618, 0.2489685890575708, 0.14715194343113236, 0.16748190971657018, 0.1849471534029391, 0.1984249492233725, 0.20204479383582652, 0.18820686919203045, 0.17290248552007892, 0.1418406726509298, 0.1839355003690284, 0.1592959300936716, 0.21067485300475652, 0.17789200054982135, 0.16279754883486108, 0.1366451872276946, 0.33084882168126006, 0.08497601392037035, 0.055174180388744, 0.10798279256144017, 0.06678129711157399, 0.17179191987257636, 0.08760866355321972, 0.045244254309519394, 0.11625400323933954, 0.2417890439657756, 0.35384070376575893, 0.18494897899843188, 0.20918800569164842, 0.09621695119055018, 0.10291998536578972, 0.07953086791922293, 0.2221347760569502, 0.13589755033414352, 0.23187116557327359, 0.05878619605554691, 0.08505307305350107, 0.13662677297294235, 0.09969885645144883, 0.19775659130593648, 0.18152305640025346, 0.22320532966637163, 0.06754613451514757, 0.12449442788704945, 0.23434877860000847, 0.24199608506853132, 0.24832141678769426, 0.23346980594063804, 0.21928350944454134, 0.23408230041616884, 0.17656997237060146, 0.2529403505112815, 0.22899628782671977, 0.5869338180986243, 0.6256932746352488, 0.6423351849734236, 0.5671882241631139, 0.5905935237316162, 0.4741572900335401, 0.5582793059089055, 0.6113559258627294, 0.6694652545030548, 0.09827936090973122, 0.09286651018409753, 0.09656446080007697, 0.10108214740554355, 0.11138123477857498, 0.10738023615172443, 0.1022222501074288, 0.11340576355768006, 0.10293756524521158, 0.14038065858495052, 0.15292446624462608, 0.17699443676652005, 0.12889875598138334, 0.14840705777145724, 0.16432025888285318, 0.1645338846207116, 0.16388400036181505, 0.12887133477015633, 0.38133865402737344, 0.3683605283565258, 0.38726932965986116, 0.3556925297579733, 0.35138322083794304, 0.3681826864754937, 0.3709961076345596, 0.3695159161077326, 0.37676628396754874, 0.297105001971225, 0.29546636822492756, 0.2738788956596885, 0.27803167144887186, 0.29635996468798054, 0.28126058276292476, 0.30419687514060456, 0.3153804678382549, 0.2880250857036296, 0.20009025775218148, 0.19559204861098756, 0.19329478043362258, 0.20505424073804956, 0.24518032379055243, 0.18716856505902613, 0.20324541307005206, 0.19639341953786948, 0.1997737302528051, 0.19930829131360983, 0.1842337598643924, 0.2221787576333012, 0.20891573695938037, 0.18692347431991208, 0.1840091489361112, 0.19954687707309526, 0.18364037886680173, 0.18020190552380155, 0.1677021054194645, 0.1699204606516005, 0.16436499315026054, 0.18171463183096126, 0.19211482667679447, 0.6856030358877035, 0.5852306571588171, 0.16509045007141832, 0.1811665035037835, 0.5966496663428194, 0.1961676496088457, 0.19067072518909012, 0.3838499277812225, 0.16169698380398367, 0.1997952532299785, 0.2033131366151919, 0.20872285493566645, 0.20773910376342886, 0.1830144445476315, 0.18065125505197588, 0.17497199722940637, 0.18362493502093769, 0.20315408238701016, 0.18280993833463444, 0.18585622821882153, 0.19433200689121077, 0.18237192720676998, 0.0791471875452775, 0.07516953350388267, 0.0799872426489141, 0.07512226531548372, 0.07331794018016935, 0.08147907591041437, 0.07897239422045677, 0.0804801350843527, 0.08471604719014592]}, "mutation_prompt": null}
{"id": "ddd32e95-879e-4c44-ae9a-1a8c2acc17ee", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjusted scaling\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.01  # Slightly adjusted crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.9 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v6", "description": "A refined DE_ILF with adaptive scaling and adaptive mutation for improved convergence speed.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cf12eacc-2e96-484a-9781-96143c8f7f12", "metadata": {"aucs": [0.7878852731524085, 0.7441648154874413, 0.7363913912120097, 0.7642986815152011, 0.7863755153124066, 0.725146776698252, 0.8100586954357138, 0.7614586557178868, 0.791902317785932, 0.5700327295091865, 0.5275209500834794, 0.5388365287425521, 0.5470944776506934, 0.44851379625457743, 0.5639067403154139, 0.6194691240990635, 0.5565825754914352, 0.604740107476085, 0.10680540516645487, 0.10836475463660245, 0.10810943941167861, 0.11194425031901833, 0.12025085009259451, 0.11163521100559826, 0.10993026307620402, 0.11411738012199679, 0.10161527053707287, 0.09564803022882773, 0.10843232384950185, 0.0962444301235631, 0.10041246177180396, 0.10899505187896408, 0.08881247009297244, 0.09666068940396144, 0.10585149940223493, 0.08664655260571597, 0.9321292811864412, 0.906286735138094, 0.9081127846955894, 0.9164921435045101, 0.9202146209427566, 0.9067702943853007, 0.915171025882682, 0.9161114909472151, 0.9165291476018157, 0.3268118220134899, 0.31075904788719133, 0.3225993918848874, 0.37368185698891543, 0.3196511337989052, 0.3270238006988214, 0.33162912300971636, 0.32696681801856553, 0.3672578803040445, 0.37829659260034465, 0.78819697486243, 0.741004995089573, 0.772734174219307, 0.7582317462795605, 0.7990763087992041, 0.22310595256912302, 0.795453301225254, 0.35993144679844136, 0.21554006911665602, 0.17311048471964618, 0.2489685890575708, 0.14715194343113236, 0.16748190971657018, 0.1849471534029391, 0.1984249492233725, 0.20204479383582652, 0.18820686919203045, 0.17290248552007892, 0.1418406726509298, 0.1839355003690284, 0.1592959300936716, 0.21067485300475652, 0.17789200054982135, 0.16279754883486108, 0.1366451872276946, 0.33084882168126006, 0.08497601392037035, 0.055174180388744, 0.10798279256144017, 0.06678129711157399, 0.17179191987257636, 0.08760866355321972, 0.045244254309519394, 0.11625400323933954, 0.2417890439657756, 0.35384070376575893, 0.18494897899843188, 0.20918800569164842, 0.09621695119055018, 0.10291998536578972, 0.07953086791922293, 0.2221347760569502, 0.13589755033414352, 0.23187116557327359, 0.05878619605554691, 0.08505307305350107, 0.13662677297294235, 0.09969885645144883, 0.19775659130593648, 0.18152305640025346, 0.22320532966637163, 0.06754613451514757, 0.12449442788704945, 0.23434877860000847, 0.24199608506853132, 0.24832141678769426, 0.23346980594063804, 0.21928350944454134, 0.23408230041616884, 0.17656997237060146, 0.2529403505112815, 0.22899628782671977, 0.5869338180986243, 0.6256932746352488, 0.6423351849734236, 0.5671882241631139, 0.5905935237316162, 0.4741572900335401, 0.5582793059089055, 0.6113559258627294, 0.6694652545030548, 0.09827936090973122, 0.09286651018409753, 0.09656446080007697, 0.10108214740554355, 0.11138123477857498, 0.10738023615172443, 0.1022222501074288, 0.11340576355768006, 0.10293756524521158, 0.14038065858495052, 0.15292446624462608, 0.17699443676652005, 0.12889875598138334, 0.14840705777145724, 0.16432025888285318, 0.1645338846207116, 0.16388400036181505, 0.12887133477015633, 0.38133865402737344, 0.3683605283565258, 0.38726932965986116, 0.3556925297579733, 0.35138322083794304, 0.3681826864754937, 0.3709961076345596, 0.3695159161077326, 0.37676628396754874, 0.297105001971225, 0.29546636822492756, 0.2738788956596885, 0.27803167144887186, 0.29635996468798054, 0.28126058276292476, 0.30419687514060456, 0.3153804678382549, 0.2880250857036296, 0.20009025775218148, 0.19559204861098756, 0.19329478043362258, 0.20505424073804956, 0.24518032379055243, 0.18716856505902613, 0.20324541307005206, 0.19639341953786948, 0.1997737302528051, 0.19930829131360983, 0.1842337598643924, 0.2221787576333012, 0.20891573695938037, 0.18692347431991208, 0.1840091489361112, 0.19954687707309526, 0.18364037886680173, 0.18020190552380155, 0.1677021054194645, 0.1699204606516005, 0.16436499315026054, 0.18171463183096126, 0.19211482667679447, 0.6856030358877035, 0.5852306571588171, 0.16509045007141832, 0.1811665035037835, 0.5966496663428194, 0.1961676496088457, 0.19067072518909012, 0.3838499277812225, 0.16169698380398367, 0.1997952532299785, 0.2033131366151919, 0.20872285493566645, 0.20773910376342886, 0.1830144445476315, 0.18065125505197588, 0.17497199722940637, 0.18362493502093769, 0.20315408238701016, 0.18280993833463444, 0.18585622821882153, 0.19433200689121077, 0.18237192720676998, 0.0791471875452775, 0.07516953350388267, 0.0799872426489141, 0.07512226531548372, 0.07331794018016935, 0.08147907591041437, 0.07897239422045677, 0.0804801350843527, 0.08471604719014592]}, "mutation_prompt": null}
{"id": "c3cd5ac2-24c6-4b61-9385-c83dbdc06256", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v6:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)  # Increased population size by 2%\n        self.initial_scaling_factor = 0.85  # Slightly increased scaling factor for exploration\n        self.initial_crossover_prob = 0.89  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.02  # Adjusted scaling\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.01  # Slightly adjusted crossover\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.9 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.56:  # Slightly increased probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v6", "description": "A refined DE_ILF with adaptive scaling and adaptive mutation for improved convergence speed.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cf12eacc-2e96-484a-9781-96143c8f7f12", "metadata": {"aucs": [0.7878852731524085, 0.7441648154874413, 0.7363913912120097, 0.7642986815152011, 0.7863755153124066, 0.725146776698252, 0.8100586954357138, 0.7614586557178868, 0.791902317785932, 0.5700327295091865, 0.5275209500834794, 0.5388365287425521, 0.5470944776506934, 0.44851379625457743, 0.5639067403154139, 0.6194691240990635, 0.5565825754914352, 0.604740107476085, 0.10680540516645487, 0.10836475463660245, 0.10810943941167861, 0.11194425031901833, 0.12025085009259451, 0.11163521100559826, 0.10993026307620402, 0.11411738012199679, 0.10161527053707287, 0.09564803022882773, 0.10843232384950185, 0.0962444301235631, 0.10041246177180396, 0.10899505187896408, 0.08881247009297244, 0.09666068940396144, 0.10585149940223493, 0.08664655260571597, 0.9321292811864412, 0.906286735138094, 0.9081127846955894, 0.9164921435045101, 0.9202146209427566, 0.9067702943853007, 0.915171025882682, 0.9161114909472151, 0.9165291476018157, 0.3268118220134899, 0.31075904788719133, 0.3225993918848874, 0.37368185698891543, 0.3196511337989052, 0.3270238006988214, 0.33162912300971636, 0.32696681801856553, 0.3672578803040445, 0.37829659260034465, 0.78819697486243, 0.741004995089573, 0.772734174219307, 0.7582317462795605, 0.7990763087992041, 0.22310595256912302, 0.795453301225254, 0.35993144679844136, 0.21554006911665602, 0.17311048471964618, 0.2489685890575708, 0.14715194343113236, 0.16748190971657018, 0.1849471534029391, 0.1984249492233725, 0.20204479383582652, 0.18820686919203045, 0.17290248552007892, 0.1418406726509298, 0.1839355003690284, 0.1592959300936716, 0.21067485300475652, 0.17789200054982135, 0.16279754883486108, 0.1366451872276946, 0.33084882168126006, 0.08497601392037035, 0.055174180388744, 0.10798279256144017, 0.06678129711157399, 0.17179191987257636, 0.08760866355321972, 0.045244254309519394, 0.11625400323933954, 0.2417890439657756, 0.35384070376575893, 0.18494897899843188, 0.20918800569164842, 0.09621695119055018, 0.10291998536578972, 0.07953086791922293, 0.2221347760569502, 0.13589755033414352, 0.23187116557327359, 0.05878619605554691, 0.08505307305350107, 0.13662677297294235, 0.09969885645144883, 0.19775659130593648, 0.18152305640025346, 0.22320532966637163, 0.06754613451514757, 0.12449442788704945, 0.23434877860000847, 0.24199608506853132, 0.24832141678769426, 0.23346980594063804, 0.21928350944454134, 0.23408230041616884, 0.17656997237060146, 0.2529403505112815, 0.22899628782671977, 0.5869338180986243, 0.6256932746352488, 0.6423351849734236, 0.5671882241631139, 0.5905935237316162, 0.4741572900335401, 0.5582793059089055, 0.6113559258627294, 0.6694652545030548, 0.09827936090973122, 0.09286651018409753, 0.09656446080007697, 0.10108214740554355, 0.11138123477857498, 0.10738023615172443, 0.1022222501074288, 0.11340576355768006, 0.10293756524521158, 0.14038065858495052, 0.15292446624462608, 0.17699443676652005, 0.12889875598138334, 0.14840705777145724, 0.16432025888285318, 0.1645338846207116, 0.16388400036181505, 0.12887133477015633, 0.38133865402737344, 0.3683605283565258, 0.38726932965986116, 0.3556925297579733, 0.35138322083794304, 0.3681826864754937, 0.3709961076345596, 0.3695159161077326, 0.37676628396754874, 0.297105001971225, 0.29546636822492756, 0.2738788956596885, 0.27803167144887186, 0.29635996468798054, 0.28126058276292476, 0.30419687514060456, 0.3153804678382549, 0.2880250857036296, 0.20009025775218148, 0.19559204861098756, 0.19329478043362258, 0.20505424073804956, 0.24518032379055243, 0.18716856505902613, 0.20324541307005206, 0.19639341953786948, 0.1997737302528051, 0.19930829131360983, 0.1842337598643924, 0.2221787576333012, 0.20891573695938037, 0.18692347431991208, 0.1840091489361112, 0.19954687707309526, 0.18364037886680173, 0.18020190552380155, 0.1677021054194645, 0.1699204606516005, 0.16436499315026054, 0.18171463183096126, 0.19211482667679447, 0.6856030358877035, 0.5852306571588171, 0.16509045007141832, 0.1811665035037835, 0.5966496663428194, 0.1961676496088457, 0.19067072518909012, 0.3838499277812225, 0.16169698380398367, 0.1997952532299785, 0.2033131366151919, 0.20872285493566645, 0.20773910376342886, 0.1830144445476315, 0.18065125505197588, 0.17497199722940637, 0.18362493502093769, 0.20315408238701016, 0.18280993833463444, 0.18585622821882153, 0.19433200689121077, 0.18237192720676998, 0.0791471875452775, 0.07516953350388267, 0.0799872426489141, 0.07512226531548372, 0.07331794018016935, 0.08147907591041437, 0.07897239422045677, 0.0804801350843527, 0.08471604719014592]}, "mutation_prompt": null}
{"id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 89, "fitness": 0.3020452830262533, "feedback": "The algorithm DE_ILF_Enhanced_v7 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "cf12eacc-2e96-484a-9781-96143c8f7f12", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "8f809000-eff0-439c-8b9b-591c19158734", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.89  # Increased scaling factor slightly more\n        self.initial_crossover_prob = 0.91  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.04  # Adjust scaling slightly less\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.6 * self.budget)) + 0.016  # Adjust crossover slightly more\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.11 + 0.91 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.09 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.59:  # Increase probability for levy flight slightly\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v8", "description": "Slight adjustments in mutation and crossover strategies for improved convergence within the strict 2% code change limit.", "configspace": "", "generation": 90, "fitness": 0.2836398999092139, "feedback": "The algorithm DE_ILF_Enhanced_v8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.672892872590235, 0.7274111511854562, 0.7611823279565625, 0.7509959335083858, 0.7610710698775641, 0.7536476260427717, 0.7432194295744325, 0.7877320743078771, 0.7403018171763536, 0.43402449994612613, 0.43027199517074133, 0.5632210495118004, 0.4715412824864723, 0.3525790142733828, 0.5376680657106244, 0.45158149134462533, 0.5380096796517648, 0.5441084400332757, 0.11712612171870973, 0.09262782351282872, 0.09909672813747206, 0.10150825846165046, 0.11171025078993646, 0.10800687044966084, 0.11653931976575149, 0.103656641251757, 0.108407734047544, 0.09593071882542048, 0.09808639452587631, 0.09765672956302551, 0.10054558206719144, 0.1112190299616781, 0.08651401801857483, 0.10065799768471284, 0.08852154228747955, 0.09692096233803926, 0.9256587037933511, 0.8600060736701425, 0.9270926026889444, 0.9235117437450637, 0.9088090051032847, 0.9623495122868948, 0.9323388521156561, 0.885175472484179, 0.9315737040343135, 0.31191697520463346, 0.29604352311875637, 0.3176147982002462, 0.3041514185606897, 0.295690474223947, 0.2522922923059079, 0.3077871458550462, 0.31439823312937565, 0.3105673704826818, 0.36480271105091466, 0.3697901266346013, 0.45101528872984753, 0.36972058487538906, 0.7896521115175168, 0.3559273660807756, 0.7348231211919082, 0.22807308026336792, 0.7009934426311635, 0.1679225692681513, 0.2220752348066265, 0.17138873277588518, 0.16059525961230936, 0.17322420565289487, 0.20214299008231273, 0.1895187159958266, 0.34368004664730256, 0.26214469431084986, 0.19056861755148746, 0.15988004934326727, 0.18349653048059422, 0.1657540370977909, 0.16638763455168204, 0.20218332913406034, 0.19795405401351407, 0.18125527350031068, 0.1760205785036012, 0.24499901265530144, 0.07095915226861438, 0.05132643332725051, 0.049800019710249055, 0.06791058787649396, 0.004364747179062545, 0.12394334290266229, 0.1525158459597491, 0.19388443044307946, 0.16582409194085668, 0.19341729535160568, 0.27540645073617287, 0.13577480286950971, 0.1997084453113328, 0.2565017161115054, 0.2504019829579285, 0.21126322372518658, 0.3551498422909405, 0.04784126825278712, 0.09333911341093082, 0.14364851738613338, 0.08423399158279266, 0.13396826765775838, 0.12067205562496641, 0.09824361121285818, 0.1756198160300655, 0.16493865954566644, 0.21080442704640057, 0.21528559839102324, 0.21796863666485955, 0.214874591463438, 0.2398175490328831, 0.22359456214662987, 0.2210285860550949, 0.18411084624531782, 0.2096959680271474, 0.5143659666990377, 0.5171624844607556, 0.6054811925384961, 0.5276210866243092, 0.6418911938116538, 0.6014064564946817, 0.5462250185419395, 0.5590657537759176, 0.554263401250157, 0.1102195774495458, 0.09436748845748566, 0.09384448631464548, 0.09627495687107335, 0.10019565112352469, 0.10274803584932557, 0.10152487810890487, 0.10547943017578709, 0.08654825280106326, 0.1390764056627053, 0.13890442542573023, 0.1502081223077799, 0.12236635061745271, 0.1488506161353833, 0.14496237231812048, 0.1464809326082952, 0.15470620364417387, 0.15118216062077827, 0.3325040727216477, 0.364223396114695, 0.3604855890913937, 0.37942549235551937, 0.348005762980485, 0.3329755495623672, 0.3390689720171023, 0.37170649040002957, 0.32745036472125544, 0.2877236080338633, 0.29231099047368436, 0.26881379324274035, 0.27574361701402783, 0.2859785596834481, 0.2806972009437395, 0.3349407450110454, 0.31747246540522556, 0.27818126851563596, 0.2102119659382805, 0.1840701489066524, 0.23008471560993826, 0.19319775120744043, 0.2077205399335723, 0.1923888077745537, 0.20899878927240179, 0.2005775346948413, 0.20704076233702773, 0.1846112220771423, 0.20846047419807723, 0.1870500628087377, 0.18130114706977052, 0.18055287949575627, 0.19411418919370504, 0.18889280068676362, 0.18391434507100513, 0.1829014119413528, 0.16950046215538062, 0.183287854270624, 0.17067863442652687, 0.1832676550259017, 0.1908451261141867, 0.7569580259852529, 0.16783175150574847, 0.6404311266387952, 0.1811555631801809, 0.2046005167009809, 0.16594955900132513, 0.19896781494851734, 0.19991949284306165, 0.19929357433256423, 0.337247970874585, 0.20986329609085008, 0.2083662245787592, 0.20778298160595154, 0.1734778490208697, 0.20124622049672092, 0.20013179461307673, 0.1747299616280339, 0.19583994481672595, 0.20183243548868357, 0.201581044488352, 0.18106402061059734, 0.17876445638993155, 0.07484161304915993, 0.0775174292285703, 0.09357585996424389, 0.069773371365069, 0.07638925565814747, 0.07952106399019199, 0.08785635990053375, 0.07311292897585786, 0.08279643277552218]}, "mutation_prompt": null}
{"id": "d4c1da2c-cf6d-4a4d-a3d4-27b628714800", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v8:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.87  # Changed scaling factor slightly for refined exploration\n        self.initial_crossover_prob = 0.91  # Slightly adjusted crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.07  # Further refine scaling\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.4 * self.budget)) + 0.012  # Adjusted crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.90 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Fine-tuned adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.09 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.57:  # Slightly adjusted probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v8", "description": "Refined mutation and crossover strategies with adjusted adaptive parameters for improved convergence speed.", "configspace": "", "generation": 91, "fitness": 0.298593439664342, "feedback": "The algorithm DE_ILF_Enhanced_v8 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.781955399667711, 0.7386751856906077, 0.7257264093813883, 0.7704282058994024, 0.7550912139464597, 0.7801320247083756, 0.7775189021466986, 0.7335547325653915, 0.7379317800858454, 0.5183036388894939, 0.3146112614543676, 0.5736995343478053, 0.3901901277452814, 0.37144456727728703, 0.5660581406421659, 0.4726595651392199, 0.552901112964056, 0.5402876514896455, 0.1156904391159218, 0.1134030457161802, 0.10731414088507352, 0.10435828161724514, 0.10014824423807966, 0.09784722140208235, 0.10631154823147915, 0.10147059281962723, 0.11548355494718598, 0.09728339107900519, 0.09310808928626724, 0.09819056858650255, 0.09579712733004075, 0.10821538028099043, 0.09633040773900192, 0.08105918917348387, 0.09747381702399893, 0.09983527666243242, 0.9307164489611424, 0.9069427636350035, 0.8880241970069204, 0.90894506085535, 0.963759638588703, 0.8931466451601249, 0.9410695773761113, 0.9123718567835818, 0.9178235091983654, 0.33162392373759164, 0.2524476146369179, 0.3316373865172034, 0.30284017655813444, 0.3037893742366303, 0.3036696223515677, 0.2899236024863886, 0.3629665201085771, 0.3651120625952422, 0.3494228601523336, 0.7381007838426439, 0.7480890240536271, 0.7669365993633864, 0.7789091490549347, 0.8208390122926008, 0.7631477119772581, 0.3675429082903694, 0.7240220681656697, 0.19937476409100874, 0.17594692226035236, 0.14553369396918225, 0.18555867181939611, 0.15146907997965553, 0.4439967686705435, 0.17429610985152177, 0.19153401734226527, 0.13074889839021797, 0.1754727890554455, 0.1716705148241754, 0.13666429640318878, 0.1708842157732826, 0.15776311581896518, 0.21503635635849205, 0.16617452594422977, 0.21301761899644867, 0.18088098444252132, 0.0004944953122573148, 0.05083164252495276, 0.1915424537970135, 0.016143923461459653, 0.02001754091316832, 0.10549292335863225, 0.16218661599204098, 0.22227049049346914, 0.15411784633571968, 0.2396428319891607, 0.23292260321937142, 0.13493990982545578, 0.11835693492498889, 0.12635024756159163, 0.0975961713762401, 0.15305427877584166, 0.15977477282598807, 0.28844476727166046, 0.09202081120447514, 0.10137360636119097, 0.08712798863891258, 0.10376488401104411, 0.11299698894483312, 0.10837458292100532, 0.10822360073422244, 0.09516012717607392, 0.1518284317008678, 0.2093659126186801, 0.19238660916634664, 0.24492188058402964, 0.23982708177160805, 0.24581414942337765, 0.22744738844353218, 0.23512818936473745, 0.20659709241771063, 0.228449620241026, 0.5860249738082604, 0.6600237300643819, 0.6151192568347836, 0.6051226221265453, 0.5785138116043416, 0.5752619074353815, 0.46685927884863565, 0.5834002598340371, 0.6146556165750977, 0.09427864300642519, 0.09596612154344819, 0.09533775549609635, 0.10592232170757421, 0.09531152264523113, 0.09262827735806245, 0.09313200414379152, 0.09048838011721361, 0.10164364181429553, 0.14065769296206398, 0.13001439804098935, 0.16149930821032743, 0.19974375572602143, 0.16369641352331887, 0.1419433453108977, 0.16134415618858, 0.12742443273240645, 0.15313466418357125, 0.3951628207898725, 0.3804213654240738, 0.3481155843193219, 0.37271171749400667, 0.3592075325400047, 0.3505735096908632, 0.3749711355516747, 0.40080362983214035, 0.39235427674215806, 0.2699869419821358, 0.2774623096653662, 0.2693711451901871, 0.26352402123416696, 0.29597798483986915, 0.25432464914890673, 0.29954951499233595, 0.3042598982604646, 0.290667269158039, 0.20808393588945584, 0.20942013691870864, 0.19753918438195073, 0.20454949439277137, 0.19934352386385934, 0.19990540111835087, 0.19963609434674268, 0.18832870067520302, 0.22750150546457204, 0.19074042868120922, 0.19069257038718856, 0.18455096628406842, 0.3485387689122519, 0.20685468953030373, 0.19376592438864548, 0.17726840488751638, 0.1941959579766679, 0.18666962814241683, 0.1670426672777119, 0.17133162408831082, 0.765715427722412, 0.6243956974699658, 0.506879458934925, 0.7400498076893779, 0.7191091125679978, 0.19212723234316076, 0.18448520248234512, 0.208659185048512, 0.2043587076419382, 0.149717198353709, 0.19547680445142768, 0.19185743878932615, 0.16243266010317514, 0.43819601361342697, 0.20967677146681962, 0.20351457454886446, 0.17736850915548452, 0.1807782198280593, 0.19621074330780708, 0.18642299048743494, 0.19402680545166628, 0.1959022581723986, 0.1832994191576972, 0.17970802776821782, 0.16684314854515747, 0.08927377860133179, 0.07975836181631579, 0.07185150302252696, 0.07120967323985439, 0.07463718154563215, 0.0804402033269529, 0.09531290251884217, 0.07784960601938296, 0.07876252816469298]}, "mutation_prompt": null}
{"id": "f7987b96-7b44-4613-9f80-319b785c0383", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "6f3b7b72-ffd1-4d23-b636-e6ab775b7389", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "6968c3ff-488c-4c18-b9e1-1b610b4d8832", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "bcf11e56-3fad-4e5e-8328-5064aab4023b", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "707cd64c-cd57-4f0a-b0a0-cf0cd4cef2d9", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "e65a9ce2-9c4a-4ffe-8954-36a7fe0a6223", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "f663306b-bf69-49eb-a9a0-5b8daeaffe58", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
{"id": "a23567cf-c8e3-46f6-9808-385ebf779856", "solution": "import numpy as np\n\nclass DE_ILF_Enhanced_v7:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = int(9 * dim * 1.02)\n        self.initial_scaling_factor = 0.88  # Increased scaling factor slightly for better exploration\n        self.initial_crossover_prob = 0.90  # Slightly increased crossover probability\n\n    def levy_flight(self, size, beta=1.45):\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / \n                 (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, size)\n        v = np.random.normal(0, 1, size)\n        step = u / abs(v) ** (1 / beta)\n        return step * np.logspace(0, -1, size)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.apply_along_axis(func, 1, population)\n        \n        for iteration in range(self.budget - self.population_size):\n            scaling_factor = self.initial_scaling_factor * (1 - iteration / self.budget) * 1.05  # Adjust scaling slightly more\n            crossover_prob = self.initial_crossover_prob * (1 - iteration / (2.5 * self.budget)) + 0.015  # Adjust crossover slightly\n            for i in range(self.population_size):\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutation_factor = 0.1 + 0.92 * (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-10)  # Slightly adjusted adaptive mutation\n                mutant = np.clip(a + mutation_factor * (b - c) + 0.1 * (population.mean(axis=0) - a), self.lower_bound, self.upper_bound)\n                \n                cross_points = np.random.rand(self.dim) < crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                \n                trial = np.where(cross_points, mutant, population[i])\n                \n                if np.random.rand() < 0.58:  # Increase probability for levy flight\n                    levy_step = self.levy_flight(self.dim)\n                    trial = np.clip(trial + levy_step, self.lower_bound, self.upper_bound)\n                \n                f_trial = func(trial)\n                \n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n        \n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "DE_ILF_Enhanced_v7", "description": "Improved adaptive scaling and dynamic mutation strategy for enhanced exploration and exploitation balance.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b5f1cdea-f8f0-4b2a-893e-7568356face9", "metadata": {"aucs": [0.76597682575476, 0.7836311895098671, 0.7291385443694239, 0.7751054276780487, 0.7583332680736861, 0.7621729809638015, 0.7688604318863629, 0.7474592335771948, 0.7113518523871016, 0.5489645176729417, 0.48891746823688664, 0.6100498541533372, 0.5330538363964128, 0.5172276242877137, 0.5617597449830012, 0.4118117873462469, 0.5269775703978865, 0.4735876249065053, 0.10803290558422907, 0.10954532371356418, 0.11362625716791952, 0.11449701937180123, 0.09622221373406104, 0.10249228016054235, 0.10545857833780647, 0.12697417157517832, 0.11804911336604129, 0.09371378932812735, 0.09702898561725981, 0.08585741611757514, 0.08792474408140138, 0.1012739699101799, 0.11052282897190602, 0.10302581031974145, 0.09376648639779017, 0.09353478449688934, 0.9348484350615389, 0.8732065761089787, 0.906386604833336, 0.8945794959230544, 0.919150126432583, 0.9200891463657457, 0.9395356257072739, 0.907295580013556, 0.9370507016428351, 0.36463439588862634, 0.2923768717769305, 0.29909987159735263, 0.2975475897680284, 0.31188379766087226, 0.3108527749349975, 0.31056705743523294, 0.27221770406579227, 0.36351169478846945, 0.759092762461018, 0.740501050376575, 0.6527839393035753, 0.35787996385778065, 0.767409171785376, 0.7872430908810187, 0.5477837797627516, 0.3088531141665035, 0.7823824076924736, 0.15846527015530754, 0.1683647238546797, 0.20610535300516863, 0.13278292397008085, 0.15267520289531078, 0.21174627443897953, 0.16814772714411974, 0.2076413208460517, 0.29707286472012107, 0.18319864705770827, 0.1282451021641624, 0.12529008836583744, 0.16136507097817088, 0.17382695100306778, 0.17621117438841172, 0.16291157896068675, 0.19103048824232904, 0.18704940757357658, 0.11720128977558764, 0.12481828884888468, 0.19802384439418252, 0.06061789719277344, 0.09576281591459357, 0.029282692344568373, 0.1387950294506114, 0.0028453368517189492, 0.05097218393229086, 0.42708038723997666, 0.1743433571861931, 0.11616855765145773, 0.1084070011585192, 0.13193264917439718, 0.16664854034902365, 0.1741559479056647, 0.19363615682718704, 0.28650365535484656, 0.09504712311376295, 0.06497036110527066, 0.07464095471441778, 0.10906055523957348, 0.14821509922450826, 0.08627046983551112, 0.13900993468289147, 0.1286575648750229, 0.09831837630578788, 0.2230717925509662, 0.21576970239449278, 0.20840005912480997, 0.2436014694734906, 0.25294499686054495, 0.25181584376063215, 0.1945156353463079, 0.18653878909963728, 0.19558211664041814, 0.6246146303906428, 0.5878486328674069, 0.6303431526519787, 0.6287161232722258, 0.5449567076594406, 0.6683930579285045, 0.6151674449292799, 0.6430821211127284, 0.5881173844600363, 0.09956095487742622, 0.10118413364988388, 0.09486208274886498, 0.09243453552830305, 0.08327030878320185, 0.09854497320786959, 0.11140303175129795, 0.1047404968356872, 0.09744968029705414, 0.16772557350240602, 0.13567234494455405, 0.15247334218140862, 0.18856019311535588, 0.14524915857004495, 0.13042447635060128, 0.1645123592569092, 0.15060181957702445, 0.13364803847448947, 0.37632255571731665, 0.3291324395606222, 0.394950726663975, 0.3591730266819535, 0.3566723246796313, 0.3449953275330968, 0.35683739761675437, 0.37497880333090583, 0.40455940896496445, 0.29236821437742844, 0.2888640319929313, 0.27201515144693333, 0.2981987359198318, 0.27094589317453366, 0.30911443192196497, 0.3161178805895999, 0.31637222425522826, 0.3017902052608775, 0.19665270715994965, 0.18480292802225795, 0.20738330265579685, 0.19708855369963107, 0.2017369926942334, 0.19905115277400598, 0.20099357903295778, 0.19634291954119631, 0.21913970360657464, 0.20410089693504274, 0.1757651507802881, 0.20066236986723185, 0.19364239884600254, 0.18755511191700813, 0.1811917778275559, 0.20511048008753097, 0.21806822804976211, 0.1822269305028128, 0.6236337680003001, 0.29837080104476343, 0.574380374034484, 0.5490275725848726, 0.1660367965471945, 0.19003962798424068, 0.5955438858371443, 0.719494578508812, 0.18005239212627655, 0.5812256957769768, 0.1661924179138512, 0.6583455453257556, 0.15968881024303627, 0.577875121200107, 0.19808755045302995, 0.12606922828978318, 0.20755198817343978, 0.20940055154220716, 0.17852853031612026, 0.18037177305091479, 0.18430121585986525, 0.19141055050604838, 0.18729746657898505, 0.1797958144028191, 0.19553910498890004, 0.1812132990301819, 0.19214289144866048, 0.07002408274754202, 0.0706419629863021, 0.07632158170412529, 0.07491770955016963, 0.08225174413532621, 0.08465033672817812, 0.07522568500516058, 0.07902219067574956, 0.07818132896661012]}, "mutation_prompt": null}
