{"id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 0, "fitness": 0.31304438634596926, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "1702ba51-12cf-4d9f-8f80-4bcb23d791d9", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "fce1dd4f-b904-4383-ae7c-ef6a5ec17e69", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "0ce67316-29e2-469c-af12-b099f163ea5f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.initial_inertia_weight = 0.9  # Modified line\n        self.final_inertia_weight = 0.4  # Modified line\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update inertia weight linearly\n            self.inertia_weight = self.initial_inertia_weight - ((self.initial_inertia_weight - self.final_inertia_weight) * evaluations / self.budget)  # Modified line\n            \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Incorporate adaptive inertia weight adjustment to enhance exploration and exploitation balance in swarm optimization.", "configspace": "", "generation": 3, "fitness": 0.30903644218431064, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.7338509122733525, 0.7367158547004337, 0.7526613832910987, 0.7741288505558612, 0.747233958229141, 0.7513094030032131, 0.7461463862412232, 0.7665102277141174, 0.7406029680718185, 0.48967209111803556, 0.5210014522797521, 0.6126863952492041, 0.46705385127876775, 0.4713470547772368, 0.5323454570036892, 0.4745072712122661, 0.4883372807594747, 0.46677994908920417, 0.46266123985821517, 0.11960252273822536, 0.4204777316484505, 0.40132097238074194, 0.13258106558207872, 0.1428152238632847, 0.09190248044388705, 0.11620207640758584, 0.10726411171129224, 0.12714975055931732, 0.14280633164559386, 0.11404524810671168, 0.10482953089139979, 0.13462346398384217, 0.14255037218058364, 0.10901628945526431, 0.11176778073163385, 0.16239394724625777, 0.9760185864647116, 0.9723551185498135, 0.9806528663828354, 0.9785613775062019, 0.9802207153841639, 0.9785567269633985, 0.9838129896457753, 0.976880514532016, 0.9707092066584682, 0.5659914531693786, 0.5251503311740555, 0.5660770106561401, 0.5841032213863677, 0.1531232553142241, 0.61915247605742, 0.5697123718036505, 0.5210321106046127, 0.599568413877366, 0.8545161407282917, 0.3580608321499891, 0.3737451370791215, 0.2686328422760953, 0.7424000380313418, 0.2753791927697683, 0.6955257729349372, 0.7091206999450921, 0.23278874134457705, 0.21185908990306013, 0.19970803059037712, 0.17550752441965778, 0.21874934262961243, 0.1886637472142324, 0.10242265554721286, 0.20608391924264158, 0.21371853591128898, 0.18359415655480749, 0.20833556148702337, 0.09671474764352261, 0.33730373092004073, 0.2078463079750722, 0.13202140827498732, 0.23021404588434258, 0.23843705452606745, 0.1930849713802799, 0.23478448437256194, 9.999999999998899e-05, 0.0033996301849082977, 0.0344766528908671, 0.030853149291751425, 0.061720951448578254, 9.999999999998899e-05, 0.13542748241815084, 0.0039606012358189835, 0.037951547577616984, 0.12466624911108082, 0.08611042376719613, 0.15360381008717106, 0.08774880372269345, 0.07450713453657376, 0.03088444384102973, 0.10326672500639911, 0.08561914102229473, 0.12407925048899793, 0.15091686506921653, 0.09804896381056205, 0.036740197603423286, 0.14927659521833592, 0.09922933461761385, 0.18786899070231222, 0.15172391430748666, 0.12689124151326614, 0.057866825717062254, 0.20995131339302475, 0.11397123501205841, 0.1709073881162092, 0.15223970271641774, 0.005651226819958555, 0.0663048905261856, 0.1475513807718145, 0.0749026825956145, 0.07597945293175967, 0.5025949104405911, 0.5004931620901396, 0.5176888519898535, 0.4968214237210403, 0.5064917507306483, 0.5277011965203278, 0.5227488718026811, 0.5219722710257008, 0.5240751796567154, 0.07391302540881717, 0.10788785913113863, 0.13310709289855382, 0.12959403600384434, 0.11613838266455367, 0.0914735522166007, 0.13689863674155744, 0.11938767270739137, 0.10559733754951794, 0.24985168614082331, 0.3999966772461063, 0.26172654860419986, 0.23677956215205276, 0.308156019745662, 0.3079918680805551, 0.25174148921204764, 0.30998734986190835, 0.3795691245010918, 0.3562710212607487, 0.41571849785926285, 0.240108288611536, 0.3082731927544913, 0.38808339059721997, 0.3451000851787501, 0.4362864983161443, 0.43527928574179253, 0.3979336229063154, 0.2673858302776675, 0.22919534413354636, 0.1972899024276572, 0.22738725800451332, 0.2799183235552194, 0.22830986840204837, 0.20975908842083923, 0.22850491180748833, 0.24425741964318348, 0.22165019205120784, 0.23944016467548013, 0.24953487733274127, 0.27925558015095964, 0.21200643245705864, 0.2482651280112168, 0.23957090380749801, 0.2362940321549155, 0.2217573108610872, 0.19870632311407577, 0.6297065198857038, 0.20737767900800386, 0.23963623910042142, 0.1971104620283095, 0.21494526423044313, 0.19111567419807163, 0.5718862732187714, 0.2084990551844953, 0.1255081939036098, 0.12585618210356242, 0.15327872029955303, 0.8468974688364528, 0.19890252822397747, 0.8263859450634636, 0.12224800554400916, 0.17036953091694196, 0.16239924836507702, 0.6587924404842153, 0.2116737001504584, 0.6773097456718236, 0.20866259433050005, 0.16943474032003636, 0.6595245455858716, 0.10520375850323849, 0.16382282948284044, 0.7060371911521894, 0.1888572018204976, 0.19103346153011558, 0.19828032597538614, 0.20019562292499127, 0.18923220095305915, 0.19119324770486879, 0.20216369469075457, 0.18856867786808384, 0.19729987191354903, 0.09023225843475668, 0.10016691660065824, 0.093112112626341, 0.09728608842804864, 0.0929052494627336, 0.09670620476933423, 0.09466009206413506, 0.0952063363850566, 0.10796255628559104]}, "mutation_prompt": null}
{"id": "8e489122-513c-44fe-9031-2298597df89f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "996ad93b-8b08-48bb-b060-16c848873115", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "73a9b337-bc2a-48d0-8b13-f0612b1aa4c0", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Changed initial value for adaptive inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Adapt inertia weight linearly from 0.9 to 0.4\n            self.inertia_weight = 0.9 - (0.5 * (evaluations / self.budget))  # Added adaptive inertia weight\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "AdaptiveSwarmOptimizer with adaptive inertia weight for improved exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.29570567100400186, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.7169950872913013, 0.7223493047743421, 0.7273012579814638, 0.7310999077355127, 0.7220016364682313, 0.7142597915283022, 0.7397713710835125, 0.7569456343062122, 0.6864986156405768, 0.5390646384837607, 0.49588750981767693, 0.5223022724900865, 0.4901258026521026, 0.037306743250129726, 0.4477774148080703, 0.46371307190332767, 0.47307278897400606, 0.4627060604742732, 0.12299965288973513, 0.1416794081773196, 0.1507083315583353, 0.14472183213798362, 0.12862986735896342, 0.12574787995238057, 0.12482639497953274, 0.1474647792954623, 0.15316345263706987, 0.11863275165216658, 0.13925637102701494, 0.10675406074674232, 0.1256176129775367, 0.12582180593290726, 0.12446426174299308, 0.11026957574839658, 0.1124327835480633, 0.1365220924792946, 0.975998644521403, 0.9723546799626334, 0.9806534597775316, 0.9785622573933226, 0.9802263488360677, 0.9785593168498588, 0.9838148014576417, 0.976885524796904, 0.9707147626336704, 0.5379408744100059, 0.6043060228339452, 0.515495264174328, 0.5536176263975043, 0.5304994867799481, 0.6123876763266425, 0.5311480255261725, 0.5846423000287458, 0.5891887669529949, 0.3552904048913681, 0.22197169459654775, 0.3459519341683047, 0.21338764144615918, 0.26557163086148905, 0.26180070889956064, 0.2286187288528283, 0.22709899020440694, 0.2306295492927175, 0.21547054113449038, 0.18436206073121109, 0.12819750291580534, 0.2447140980388095, 0.19438344575156263, 0.10852987987208307, 0.1987613283521742, 0.2085158558452691, 0.19197369283093857, 0.2105434011264098, 0.11904150795394342, 0.32643610269753565, 0.20537563123783487, 0.13213420403859832, 0.20461354904464346, 0.21334518539488134, 0.22241040466105588, 0.24391629537201787, 9.999999999998899e-05, 0.075107446151216, 0.04810199820057537, 0.049366412279117644, 9.999999999998899e-05, 9.999999999998899e-05, 0.11082223646218514, 9.999999999998899e-05, 0.012119644402684537, 0.08041357752323819, 0.07885674732680126, 0.17178929730487547, 0.06788307126756044, 0.05412148752644885, 0.023717628395577783, 0.13298790314787334, 0.12117409350705932, 0.08991253644614394, 0.16444202265049057, 0.07844505915838074, 0.037925114071880484, 0.16392734969007816, 0.09443258451015357, 0.10304623950969438, 0.18030688826647834, 0.11752444288765185, 0.051342460998733075, 0.15881627563887668, 0.41501619621638, 0.11444806951639308, 0.2191972239622635, 0.005553863770684231, 0.038063577864746234, 0.1545019970766156, 0.07758157561264256, 0.07734430147856097, 0.511585039386675, 0.48657303276978425, 0.52766310009094, 0.48664509660758715, 0.5269052073143685, 0.5549533342387565, 0.49725774481532625, 0.5243403739267382, 0.5283529156432947, 0.08208822898608503, 0.1324401213808345, 0.06841312252153642, 0.12922921640063145, 0.14312707230544786, 0.0883927544800035, 0.16360172345141377, 0.13440337058466134, 0.10118573769987271, 0.33388434863729477, 0.34169418308924104, 0.2939345096102556, 0.26093497420392264, 0.33166786580964824, 0.3040469048311989, 0.34822311415207996, 0.333078445599021, 0.267161930241825, 0.38151331044118875, 0.4269756479224853, 0.29961196892045516, 0.4036425086060156, 0.2663240879231422, 0.33813408328414873, 0.23653504385161528, 0.4029046026280302, 0.48943186491799984, 0.3429464034782108, 0.21045993440773936, 0.18511906638507325, 0.3203426635865514, 0.2946414355297208, 0.20891537037534036, 0.2150014328990798, 0.20253924841555493, 0.2230588024348532, 0.25302055679713087, 0.21216536769118144, 0.2161607679788945, 0.23327142199365603, 0.23673624429514872, 0.2330749667365717, 0.24023426124733394, 0.27053147146681045, 0.24610295236674606, 0.21157346605687033, 0.21984975930731854, 0.21264263392909966, 0.2421823986582935, 0.18743808989917743, 0.5697097731772892, 0.21259454015709545, 0.6277878510245942, 0.21601140080391246, 0.1256280163392115, 0.1260210903771174, 0.1532950596260222, 0.8090877032986173, 0.1991033207312941, 0.8332311459799719, 0.12202011627055365, 0.1703608233632431, 0.16215315111376039, 0.807889684917284, 0.2070684962811975, 0.7786018542557636, 0.20768364969179187, 0.16952789092806164, 0.7021291632271036, 0.10519332987616814, 0.1673307993839227, 0.6550111437301505, 0.20726737927308958, 0.20473205806817363, 0.21696151052396206, 0.20666707827400865, 0.19525312021218766, 0.18308813572487637, 0.18971102558162933, 0.19935153648339154, 0.20747198046358373, 0.09912397537823547, 0.1007339266700501, 0.09732575624587847, 0.10303718759610314, 0.08368370022149751, 0.09720309167529084, 0.09554637931145904, 0.07815162860292546, 0.09718720159524075]}, "mutation_prompt": null}
{"id": "63bb4e9a-bfd3-4ec1-9a1a-6185d3a6d77f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Changed from 0.5 to 0.9\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_inertia = self.inertia_weight  # Added this line\n        while evaluations < self.budget:\n            self.inertia_weight = initial_inertia * (1 - evaluations / self.budget)  # Changed the inertia weight dynamically\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm with improved dynamic inertia weight adjustment for enhanced exploration-exploitation balance.", "configspace": "", "generation": 7, "fitness": 0.31125771132441177, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.8054827713003841, 0.8314096018796712, 0.8110976838135895, 0.7810691372307572, 0.7951203416736135, 0.801510256691061, 0.7965825796309267, 0.7951799064237937, 0.7903259342937825, 0.6930841351523529, 0.6229831847092853, 0.6586132623411274, 0.6522017246218027, 0.041665803551916514, 0.6237673334706207, 0.5957888808663683, 0.633250505199259, 0.6700295055264269, 0.16519013075914268, 0.1733955047830268, 0.13910095549119483, 0.16330435496901097, 0.15036972822075678, 0.14533198658599755, 0.09036655927115167, 0.6569402895610066, 0.15846963442556228, 0.12406363546686205, 0.14743520451038006, 0.06842319885093917, 0.11456055758965233, 0.10973055012364508, 0.11185332460040809, 0.11573355934416596, 0.1045673082745987, 0.16208444075875128, 0.9760307422901053, 0.9723473756535816, 0.9806485892821286, 0.9785579652900807, 0.9802006773331943, 0.9793898528906312, 0.9838083168787296, 0.9768708195125314, 0.9704396014351688, 0.7076622456281703, 0.7164126565072679, 0.6628271022672656, 0.683522245272372, 0.5638188927936278, 0.6887706633684478, 0.6643086635476693, 0.6817522595034982, 0.5998330248170249, 0.3785668461817785, 0.2179411474611488, 0.22775948095546417, 0.21785470203427393, 0.3409014052235252, 0.27087244614800743, 0.23033529216942106, 0.15892362448340303, 0.38409603493128885, 0.22988450428154583, 0.21697135197753792, 0.23189336896183, 0.2643628628294509, 0.19531734634368636, 0.10391033721367748, 0.19321931358787914, 0.21134127072565811, 0.19160446882861903, 0.13159529188746943, 0.10103735968161054, 0.39804567649548717, 0.20816803968110853, 0.12557634961806785, 0.19627252892314262, 0.21136281526566392, 0.24255980979759917, 0.24833371790030123, 9.999999999998899e-05, 0.027106243332058355, 0.06782794730275366, 0.03940748147877404, 0.008857682103386444, 9.999999999998899e-05, 0.12076191707535, 0.005729449941538456, 9.999999999998899e-05, 0.08298607046214834, 0.06686759004188914, 0.16534284740608984, 0.0939161649147029, 0.05656476029469937, 0.02255311191589282, 0.11618031094430536, 0.08079283431921103, 0.10654747186223978, 0.2026503397136904, 0.07049524197035029, 0.04293003144635654, 0.11375930715048621, 0.14863319919749174, 0.18182333666621808, 0.18956952457161313, 0.1385619029348758, 0.06558154938366312, 0.456614105331134, 0.15179812572013907, 0.15805944810402184, 0.15829618012080404, 0.005973196715821194, 0.09820854398647094, 0.21098607796810998, 0.08244691527232384, 0.07882785497731382, 0.5138599122770393, 0.5029383079933318, 0.4998155493474238, 0.5422949961396669, 0.5303533064437753, 0.5359803586677953, 0.5376058504892904, 0.5507376228655556, 0.5690548125870701, 0.07738390352944191, 0.12160996408371427, 0.10760349913379064, 0.17660883312783915, 0.09389259863765331, 0.13097015661004063, 0.15437306537312612, 0.10490302107880578, 0.1341054021275584, 0.3158773085033951, 0.23429561343314276, 0.30108920196496247, 0.17055740275036513, 0.26696840119111787, 0.4414080936980438, 0.38439193259780946, 0.4435329079238257, 0.29493207462736437, 0.4310784434702216, 0.3464077577664527, 0.25211584002226495, 0.3127920779776888, 0.24962306179921723, 0.3826713599366791, 0.24438279875985436, 0.4718744922572461, 0.35787881828939516, 0.27185222536289555, 0.24260445443996836, 0.20994709858182647, 0.2696899111269888, 0.3158045756350012, 0.24498315062663922, 0.21657101350076513, 0.2440044024117306, 0.10826229097753426, 0.2352550278051666, 0.2511857153127548, 0.20652625030263494, 0.22880970522894528, 0.24171564627115427, 0.21899278815218737, 0.247138752793851, 0.29099871127924026, 0.26176772226729816, 0.2017568258789919, 0.29682230643528396, 0.2223408270411913, 0.23932809689005496, 0.20899407724692398, 0.2048453096205004, 0.21648088705393287, 0.24578598029592413, 0.19020234616030918, 0.12608006250543857, 0.12590461334360503, 0.15316275441583094, 0.8586526216436945, 0.19900883943557446, 0.8716665379520092, 0.12234211267973538, 0.17038121015432373, 0.1624140037297479, 0.7756929076341528, 0.20997404054418323, 0.6123096354402712, 0.2077420833454503, 0.16952225360463546, 0.8092245868186297, 0.10523872362171227, 0.16340422831242973, 0.7546940192752875, 0.20693001313826342, 0.21552373152756776, 0.18456342794860925, 0.1919734741647442, 0.19593454694343715, 0.20522425560074598, 0.19448113409463108, 0.22740607734693685, 0.18505837601341013, 0.10833175865306766, 0.10898988715334124, 0.08551012106366651, 0.0899251342322075, 0.10268317444394293, 0.09617876608972986, 0.09979847924744101, 0.10002743273401338, 0.10412645058976033]}, "mutation_prompt": null}
{"id": "7d6cc8c9-6993-4290-9e0d-da86c13da721", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "20c0218f-150f-419d-b9f2-f0c4622956b4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "717e98f1-07dd-449b-abab-2490403640ca", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "77d5e73f-0e4c-4f22-a5fe-27c7e23cf41d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "3e4834bf-937f-4345-99a2-c2e87fdcbe96", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "932ab70d-88f7-4298-b4ac-6551cf1c75f5", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "8f31cf47-b28a-43a7-9f63-4fd128ccd775", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "46cef32a-8d59-4f04-abf3-ec1c0265eb26", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.initial_inertia_weight = 0.9\n        self.final_inertia_weight = 0.4\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            inertia_weight = self.initial_inertia_weight - ((self.initial_inertia_weight - self.final_inertia_weight) * evaluations / self.budget)\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce dynamic inertia weight adjustment to enhance convergence speed and accuracy.", "configspace": "", "generation": 15, "fitness": 0.30903644218431064, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.7338509122733525, 0.7367158547004337, 0.7526613832910987, 0.7741288505558612, 0.747233958229141, 0.7513094030032131, 0.7461463862412232, 0.7665102277141174, 0.7406029680718185, 0.48967209111803556, 0.5210014522797521, 0.6126863952492041, 0.46705385127876775, 0.4713470547772368, 0.5323454570036892, 0.4745072712122661, 0.4883372807594747, 0.46677994908920417, 0.46266123985821517, 0.11960252273822536, 0.4204777316484505, 0.40132097238074194, 0.13258106558207872, 0.1428152238632847, 0.09190248044388705, 0.11620207640758584, 0.10726411171129224, 0.12714975055931732, 0.14280633164559386, 0.11404524810671168, 0.10482953089139979, 0.13462346398384217, 0.14255037218058364, 0.10901628945526431, 0.11176778073163385, 0.16239394724625777, 0.9760185864647116, 0.9723551185498135, 0.9806528663828354, 0.9785613775062019, 0.9802207153841639, 0.9785567269633985, 0.9838129896457753, 0.976880514532016, 0.9707092066584682, 0.5659914531693786, 0.5251503311740555, 0.5660770106561401, 0.5841032213863677, 0.1531232553142241, 0.61915247605742, 0.5697123718036505, 0.5210321106046127, 0.599568413877366, 0.8545161407282917, 0.3580608321499891, 0.3737451370791215, 0.2686328422760953, 0.7424000380313418, 0.2753791927697683, 0.6955257729349372, 0.7091206999450921, 0.23278874134457705, 0.21185908990306013, 0.19970803059037712, 0.17550752441965778, 0.21874934262961243, 0.1886637472142324, 0.10242265554721286, 0.20608391924264158, 0.21371853591128898, 0.18359415655480749, 0.20833556148702337, 0.09671474764352261, 0.33730373092004073, 0.2078463079750722, 0.13202140827498732, 0.23021404588434258, 0.23843705452606745, 0.1930849713802799, 0.23478448437256194, 9.999999999998899e-05, 0.0033996301849082977, 0.0344766528908671, 0.030853149291751425, 0.061720951448578254, 9.999999999998899e-05, 0.13542748241815084, 0.0039606012358189835, 0.037951547577616984, 0.12466624911108082, 0.08611042376719613, 0.15360381008717106, 0.08774880372269345, 0.07450713453657376, 0.03088444384102973, 0.10326672500639911, 0.08561914102229473, 0.12407925048899793, 0.15091686506921653, 0.09804896381056205, 0.036740197603423286, 0.14927659521833592, 0.09922933461761385, 0.18786899070231222, 0.15172391430748666, 0.12689124151326614, 0.057866825717062254, 0.20995131339302475, 0.11397123501205841, 0.1709073881162092, 0.15223970271641774, 0.005651226819958555, 0.0663048905261856, 0.1475513807718145, 0.0749026825956145, 0.07597945293175967, 0.5025949104405911, 0.5004931620901396, 0.5176888519898535, 0.4968214237210403, 0.5064917507306483, 0.5277011965203278, 0.5227488718026811, 0.5219722710257008, 0.5240751796567154, 0.07391302540881717, 0.10788785913113863, 0.13310709289855382, 0.12959403600384434, 0.11613838266455367, 0.0914735522166007, 0.13689863674155744, 0.11938767270739137, 0.10559733754951794, 0.24985168614082331, 0.3999966772461063, 0.26172654860419986, 0.23677956215205276, 0.308156019745662, 0.3079918680805551, 0.25174148921204764, 0.30998734986190835, 0.3795691245010918, 0.3562710212607487, 0.41571849785926285, 0.240108288611536, 0.3082731927544913, 0.38808339059721997, 0.3451000851787501, 0.4362864983161443, 0.43527928574179253, 0.3979336229063154, 0.2673858302776675, 0.22919534413354636, 0.1972899024276572, 0.22738725800451332, 0.2799183235552194, 0.22830986840204837, 0.20975908842083923, 0.22850491180748833, 0.24425741964318348, 0.22165019205120784, 0.23944016467548013, 0.24953487733274127, 0.27925558015095964, 0.21200643245705864, 0.2482651280112168, 0.23957090380749801, 0.2362940321549155, 0.2217573108610872, 0.19870632311407577, 0.6297065198857038, 0.20737767900800386, 0.23963623910042142, 0.1971104620283095, 0.21494526423044313, 0.19111567419807163, 0.5718862732187714, 0.2084990551844953, 0.1255081939036098, 0.12585618210356242, 0.15327872029955303, 0.8468974688364528, 0.19890252822397747, 0.8263859450634636, 0.12224800554400916, 0.17036953091694196, 0.16239924836507702, 0.6587924404842153, 0.2116737001504584, 0.6773097456718236, 0.20866259433050005, 0.16943474032003636, 0.6595245455858716, 0.10520375850323849, 0.16382282948284044, 0.7060371911521894, 0.1888572018204976, 0.19103346153011558, 0.19828032597538614, 0.20019562292499127, 0.18923220095305915, 0.19119324770486879, 0.20216369469075457, 0.18856867786808384, 0.19729987191354903, 0.09023225843475668, 0.10016691660065824, 0.093112112626341, 0.09728608842804864, 0.0929052494627336, 0.09670620476933423, 0.09466009206413506, 0.0952063363850566, 0.10796255628559104]}, "mutation_prompt": null}
{"id": "e01a1f23-41ef-4c71-9221-ee6e1bb6de14", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "5c2ca2a9-a7d3-42da-b11f-b83bee74d2a4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n\n            # Dynamic inertia weight adjustment\n            self.inertia_weight = 0.9 - 0.5 * (evaluations / self.budget)\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduction of dynamic inertia weight adjustment to enhance the balance between exploration and exploitation over iterations.", "configspace": "", "generation": 17, "fitness": 0.30903644218431064, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.7338509122733525, 0.7367158547004337, 0.7526613832910987, 0.7741288505558612, 0.747233958229141, 0.7513094030032131, 0.7461463862412232, 0.7665102277141174, 0.7406029680718185, 0.48967209111803556, 0.5210014522797521, 0.6126863952492041, 0.46705385127876775, 0.4713470547772368, 0.5323454570036892, 0.4745072712122661, 0.4883372807594747, 0.46677994908920417, 0.46266123985821517, 0.11960252273822536, 0.4204777316484505, 0.40132097238074194, 0.13258106558207872, 0.1428152238632847, 0.09190248044388705, 0.11620207640758584, 0.10726411171129224, 0.12714975055931732, 0.14280633164559386, 0.11404524810671168, 0.10482953089139979, 0.13462346398384217, 0.14255037218058364, 0.10901628945526431, 0.11176778073163385, 0.16239394724625777, 0.9760185864647116, 0.9723551185498135, 0.9806528663828354, 0.9785613775062019, 0.9802207153841639, 0.9785567269633985, 0.9838129896457753, 0.976880514532016, 0.9707092066584682, 0.5659914531693786, 0.5251503311740555, 0.5660770106561401, 0.5841032213863677, 0.1531232553142241, 0.61915247605742, 0.5697123718036505, 0.5210321106046127, 0.599568413877366, 0.8545161407282917, 0.3580608321499891, 0.3737451370791215, 0.2686328422760953, 0.7424000380313418, 0.2753791927697683, 0.6955257729349372, 0.7091206999450921, 0.23278874134457705, 0.21185908990306013, 0.19970803059037712, 0.17550752441965778, 0.21874934262961243, 0.1886637472142324, 0.10242265554721286, 0.20608391924264158, 0.21371853591128898, 0.18359415655480749, 0.20833556148702337, 0.09671474764352261, 0.33730373092004073, 0.2078463079750722, 0.13202140827498732, 0.23021404588434258, 0.23843705452606745, 0.1930849713802799, 0.23478448437256194, 9.999999999998899e-05, 0.0033996301849082977, 0.0344766528908671, 0.030853149291751425, 0.061720951448578254, 9.999999999998899e-05, 0.13542748241815084, 0.0039606012358189835, 0.037951547577616984, 0.12466624911108082, 0.08611042376719613, 0.15360381008717106, 0.08774880372269345, 0.07450713453657376, 0.03088444384102973, 0.10326672500639911, 0.08561914102229473, 0.12407925048899793, 0.15091686506921653, 0.09804896381056205, 0.036740197603423286, 0.14927659521833592, 0.09922933461761385, 0.18786899070231222, 0.15172391430748666, 0.12689124151326614, 0.057866825717062254, 0.20995131339302475, 0.11397123501205841, 0.1709073881162092, 0.15223970271641774, 0.005651226819958555, 0.0663048905261856, 0.1475513807718145, 0.0749026825956145, 0.07597945293175967, 0.5025949104405911, 0.5004931620901396, 0.5176888519898535, 0.4968214237210403, 0.5064917507306483, 0.5277011965203278, 0.5227488718026811, 0.5219722710257008, 0.5240751796567154, 0.07391302540881717, 0.10788785913113863, 0.13310709289855382, 0.12959403600384434, 0.11613838266455367, 0.0914735522166007, 0.13689863674155744, 0.11938767270739137, 0.10559733754951794, 0.24985168614082331, 0.3999966772461063, 0.26172654860419986, 0.23677956215205276, 0.308156019745662, 0.3079918680805551, 0.25174148921204764, 0.30998734986190835, 0.3795691245010918, 0.3562710212607487, 0.41571849785926285, 0.240108288611536, 0.3082731927544913, 0.38808339059721997, 0.3451000851787501, 0.4362864983161443, 0.43527928574179253, 0.3979336229063154, 0.2673858302776675, 0.22919534413354636, 0.1972899024276572, 0.22738725800451332, 0.2799183235552194, 0.22830986840204837, 0.20975908842083923, 0.22850491180748833, 0.24425741964318348, 0.22165019205120784, 0.23944016467548013, 0.24953487733274127, 0.27925558015095964, 0.21200643245705864, 0.2482651280112168, 0.23957090380749801, 0.2362940321549155, 0.2217573108610872, 0.19870632311407577, 0.6297065198857038, 0.20737767900800386, 0.23963623910042142, 0.1971104620283095, 0.21494526423044313, 0.19111567419807163, 0.5718862732187714, 0.2084990551844953, 0.1255081939036098, 0.12585618210356242, 0.15327872029955303, 0.8468974688364528, 0.19890252822397747, 0.8263859450634636, 0.12224800554400916, 0.17036953091694196, 0.16239924836507702, 0.6587924404842153, 0.2116737001504584, 0.6773097456718236, 0.20866259433050005, 0.16943474032003636, 0.6595245455858716, 0.10520375850323849, 0.16382282948284044, 0.7060371911521894, 0.1888572018204976, 0.19103346153011558, 0.19828032597538614, 0.20019562292499127, 0.18923220095305915, 0.19119324770486879, 0.20216369469075457, 0.18856867786808384, 0.19729987191354903, 0.09023225843475668, 0.10016691660065824, 0.093112112626341, 0.09728608842804864, 0.0929052494627336, 0.09670620476933423, 0.09466009206413506, 0.0952063363850566, 0.10796255628559104]}, "mutation_prompt": null}
{"id": "0c7bccf2-cc48-4bb4-a5c2-0905802ef5f1", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            inertia_decrease = (0.9 - 0.4) / self.budget * evaluations # Decrease inertia over time\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = ((self.inertia_weight + inertia_decrease) * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "A refined swarm-based optimization algorithm with an enhanced inertia weighting strategy for better balance between exploration and exploitation.", "configspace": "", "generation": 18, "fitness": 0.3097111001138676, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9439713156132927, 0.944406976047858, 0.9407728708489909, 0.9363656799140782, 0.9281631719786093, 0.9376805112064144, 0.9297585486265288, 0.9320266804523101, 0.937696915332211, 0.08163292711971859, 0.8505898530394402, 0.8055393238403485, 0.8548934370396124, 0.8208004069385514, 0.85823102465945, 0.8268031036759688, 0.823474637010557, 0.8060233786067643, 0.14779493817161016, 0.1483243489497017, 0.07733870634073792, 0.11367652450885923, 0.14876315702991227, 0.12872752746134575, 0.10241015523927544, 0.11961717996104348, 0.12757289712767073, 0.10067802241676294, 0.09222504037824764, 0.06096089362118495, 0.1131016088606771, 0.08669133176658994, 0.1115980600299461, 0.11163028726692936, 0.06497771947159492, 0.06646383553877311, 0.9750428601151879, 0.9651194486506648, 0.9764287380184284, 0.9658618573480722, 0.9697364494353776, 0.9747895399163086, 0.9711422495978501, 0.9631615703203392, 0.9591716170210691, 0.6997087207850912, 0.7683652645831575, 0.6849921743488855, 0.8532311508867704, 0.15427999519039093, 0.8668737868878155, 0.8377934470743355, 0.7961318104955614, 0.842139677804451, 0.24709426561490566, 0.22139767513763742, 0.12953616410497393, 0.19496343399094662, 0.3906652105912518, 0.28315267746750883, 0.1484704854844262, 0.22195799827397356, 0.1806977989119266, 0.23730977644374618, 0.18604357129848081, 0.21820938282970148, 0.12848224701815725, 0.21839241358412087, 0.17763966645195584, 0.13684987345135036, 0.13547258101840032, 0.22719073082747643, 0.24923943523149283, 0.21632833559707942, 0.1379254576431549, 0.13769562773226973, 0.24054686974194506, 0.24389055390038317, 0.2580645578294025, 0.23027810732576515, 0.21889982309720812, 9.999999999998899e-05, 0.008441986360703257, 0.04858697009079205, 0.05800135361196246, 0.002314422246588954, 0.03239025943934759, 0.035657433573895836, 0.04121554700102026, 0.0937678350418708, 0.10508764104079804, 0.056845238486032734, 0.04958103634051181, 0.08492268503567191, 0.012385488420164958, 0.02353878755876504, 0.10972741581522438, 0.1625764405954384, 0.04309388108153689, 0.14110260234546657, 0.10714278219193307, 0.14492411173012354, 0.08389975862400623, 0.11772574533616786, 0.14639901163090907, 0.1181204297261178, 0.07849471409520159, 0.08004589806031381, 0.14662768731120035, 0.05664588440862883, 0.13779352712935888, 0.15425855924287957, 0.06735508760696773, 0.06112030786101719, 0.08588696980364019, 0.1816364378578621, 0.08551401275418502, 0.5796758699842719, 0.5418938669237823, 0.5749743332799135, 0.6246102137804874, 0.6367995706076651, 0.5998050997241673, 0.5824380818446129, 0.6105026301559091, 0.6855315889329212, 0.03616567328905784, 0.06229617252150821, 0.04031250030274003, 0.08657198393170362, 0.08250584657906324, 0.11894879652745116, 0.13566523609552517, 0.11168462687120695, 0.07144236016070826, 0.23932571186642548, 0.34251310925158196, 0.4318303930101032, 0.20054060383342454, 0.23776362045655008, 0.20772177448845341, 0.2044976178290714, 0.2629112209833864, 0.32313708321961954, 0.1869043342267097, 0.343970177491671, 0.15311334770603646, 0.2287002509086672, 0.24354604943131686, 0.3244900469618818, 0.26491312105268094, 0.39667307733633006, 0.17591382410990009, 0.16546995411045995, 0.27108405749665576, 0.14142082863444627, 0.2293983048536613, 0.2513661510172769, 0.24205995158371607, 0.1516797188256198, 0.19867751848400672, 0.11836922811251371, 0.21805160361194798, 0.2275934610093162, 0.18365490535641793, 0.26494000529675665, 0.20827404965574514, 0.24409370569524458, 0.2350288609126714, 0.21934672585732173, 0.21543326225027548, 0.18182398177483028, 0.19395661199852499, 0.2286428366594372, 0.1940545016887264, 0.2026232467491933, 0.21061707704943577, 0.2280608998495407, 0.21158522886342013, 0.1758068482347238, 0.12680590847744422, 0.12666341453095664, 0.15404042861174327, 0.1736173124690904, 0.20176367980634402, 0.9675069939816032, 0.10011651630894502, 0.18241785966176483, 0.15457948997440396, 0.8876166440467946, 0.21396835874445275, 0.8697407710032264, 0.2129552994047218, 0.16973454636081842, 0.21322144616699135, 0.1053872876165306, 0.8969327627542079, 0.8420325616955688, 0.23669035720444775, 0.19455375137412434, 0.23644188741394023, 0.2265468593763159, 0.21317844222553595, 0.20894774621378132, 0.21886925710157834, 0.206338418476117, 0.24385148731879958, 0.09576631084352571, 0.10396293169141313, 0.10351412101779356, 0.07940193731281775, 0.09813953864477587, 0.10619036704003704, 0.08583317506798538, 0.08903213941814325, 0.1031582493030011]}, "mutation_prompt": null}
{"id": "51bf15f6-218d-4f95-9ac3-9662edfc1421", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Slightly increased inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced inertia dynamics in swarm-based optimization for improved convergence speed and precision.", "configspace": "", "generation": 19, "fitness": 0.20060460487895568, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.4363122849072454, 0.3557159902967014, 0.36588751802722685, 0.41192850589379826, 0.3456399641134561, 0.38443620267674516, 0.3923505179587131, 0.4683759111458776, 0.4131788069600578, 0.01712683200313536, 0.04371037786016463, 0.04005368567859424, 0.009827634307817745, 0.014546551520843276, 0.00045106657681848183, 0.0052255344211953325, 0.015417259159689611, 0.0016062642005996164, 0.11816721138124608, 0.1105405187151619, 0.12307176681676679, 0.10524063297278807, 0.12962964871977656, 0.11554352499074283, 0.09660760614831165, 0.12673983715492887, 0.13119030174866442, 0.09752165005916436, 0.09866508809287133, 0.06824755528333426, 0.11729434756520585, 0.11551417428685362, 0.10213991967219704, 0.09055273731196944, 0.07832172150208316, 0.09366649549849848, 0.9760052810887785, 0.9726670586480848, 0.9806603417755373, 0.9785780580989902, 0.9802777592414389, 0.9770965502504223, 0.9838233342705412, 0.9768997187353841, 0.9658145816339723, 0.22683463881048038, 0.2114727670025871, 0.21328994392720557, 0.24126906623808742, 0.14565225053325626, 0.24879863126091672, 0.20740807268048944, 0.21846459742290458, 0.26412385699473284, 0.23615200241183076, 0.2402407806356146, 0.31668791242877414, 0.23481595215710815, 0.28549091378147473, 0.2454395634309794, 0.27021372400504984, 0.24956872439548605, 0.24821881405495982, 0.12809449891482305, 0.16563657847159574, 0.12686307086182091, 0.11538962502348149, 0.12624491002160376, 0.10537178941427305, 0.1197662770297615, 0.1554988825254442, 0.14297093838485453, 0.1233108261926198, 0.11543361281933817, 0.14894600589835572, 0.13022672495370502, 0.15982420904351624, 0.13287275968780854, 0.146408700799317, 0.20122401229716724, 0.1352143306745094, 9.999999999998899e-05, 0.004817757464209205, 0.0032560652740450946, 0.029000150508388778, 9.999999999998899e-05, 9.999999999998899e-05, 0.006938670564882288, 9.999999999998899e-05, 0.011935386702629502, 0.11802295097280202, 0.09800260424180907, 0.16824632270411488, 0.09915591965324, 0.06612169651900623, 0.03348025112749986, 0.105137337801954, 0.08658652382007381, 0.047444971203710495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0185641133735287, 0.06262021120768257, 0.07353979371258268, 0.09259603136430306, 0.07093078416566001, 0.003593561850962601, 0.0038106783535238886, 0.08476897223031321, 0.04952378577010408, 0.058471359273420065, 0.33615545229172206, 0.37702496278988096, 0.3423424075756287, 0.3656587333661889, 0.35794339129995223, 0.3289847637704041, 0.3808020162848188, 0.42145412367765933, 0.3644857757152564, 0.07358130245377381, 0.07848233179849484, 0.12188836384023594, 0.11533925381387666, 0.09865334735455467, 0.1093384953835923, 0.09863987401757024, 0.09982587890688444, 0.09258033645281682, 0.19988776298493094, 0.2103437910884779, 0.18497061915010105, 0.2005865589285819, 0.2012726051627265, 0.1576718250241631, 0.2538285621299098, 0.1411616494868354, 0.17824199055617718, 0.259340268638261, 0.25563283764101374, 0.23443131762511793, 0.2904552136039089, 0.2535447318581575, 0.2530881408226412, 0.2559931633467587, 0.24877973040051615, 0.261368888326748, 0.18820176526397447, 0.19149586379331074, 0.1501610754842806, 0.1715351615059293, 0.21820091695368793, 0.16926574082860446, 0.19514871190312333, 0.18343322286314068, 0.17550898087422684, 0.21108665349878597, 0.216181692293816, 0.23689062751399603, 0.22059897830309017, 0.20754442850618193, 0.21902217221308873, 0.24178159291645884, 0.20900747648756457, 0.21041151371199696, 0.1947474547608229, 0.204604438103003, 0.19398896821543132, 0.19814234542427323, 0.181697469108834, 0.18660605001642172, 0.18753258382624727, 0.2012393356104204, 0.1890654804871098, 0.12605552616864313, 0.12430926171194512, 0.15266207434772683, 0.5320833424427455, 0.1974659449618188, 0.4620949390545477, 0.12076259722721205, 0.1702333504434007, 0.16168414308100942, 0.47238789507839285, 0.20788302780900303, 0.44281369193284537, 0.20574831134651772, 0.16924230623680614, 0.47885829908995403, 0.10499936557990064, 0.16704528744525127, 0.39124934367632835, 0.18725809602024168, 0.18470620801229165, 0.18258126586251766, 0.18109519622572978, 0.19885740760055182, 0.19036322455371524, 0.19030481637379226, 0.18669398829789308, 0.18562440875132447, 0.0882643322487684, 0.08426349021411206, 0.0854724592400471, 0.09359827820876454, 0.08288298261405302, 0.0945988580002024, 0.0859661628417181, 0.08833696531084823, 0.08179244338886782]}, "mutation_prompt": null}
{"id": "180fd510-149d-4ab5-a130-1cb57dfca160", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Initial inertia weight changed\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                # Update inertia weight dynamically\n                self.velocities[i] = ((0.4 + 0.5 * (1 - evaluations / self.budget)) * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced Adaptive Swarm Optimizer that introduces dynamic inertia weight adjustment for improved convergence.", "configspace": "", "generation": 20, "fitness": 0.30903644217423376, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.7338509122734325, 0.7367158547004948, 0.7526613832910843, 0.7741288505556636, 0.7472339582289804, 0.751309403003271, 0.7461463862412805, 0.7665102277140842, 0.740602968071782, 0.4896720912007553, 0.5210014522898316, 0.6126863952631625, 0.46705385126048893, 0.471347054563365, 0.5323454570022726, 0.47450727130207704, 0.4883372807335411, 0.46677994916131316, 0.4626612398582437, 0.11960252273822536, 0.42047773164832114, 0.40132097238086395, 0.13258106558207872, 0.1428152238632847, 0.09190248044388705, 0.11620207640758584, 0.10726411171129224, 0.12714975055931466, 0.14280633164559386, 0.11404524810671168, 0.10482953089139979, 0.13462346398384217, 0.14255037218058364, 0.10901628945526431, 0.11176778073163385, 0.162393947246258, 0.9760185864647116, 0.9723551185498135, 0.9806528663828354, 0.9785613775062019, 0.9802207153841639, 0.9785567269633985, 0.9838129896457753, 0.976880514532016, 0.9707092066584682, 0.5659914531699515, 0.5251503311719166, 0.5660770106427414, 0.5841032213871518, 0.1531232553142241, 0.6191524760564728, 0.5697123717984511, 0.5210321106151207, 0.5995684138791357, 0.8545161407282917, 0.3580608321499891, 0.3737451370791215, 0.2686328422760953, 0.7424000380313418, 0.2753791927697683, 0.6955257729349372, 0.7091206999450921, 0.23278874134457705, 0.21185908990305558, 0.19970803059037012, 0.17550752441958994, 0.21874934262958534, 0.18866374721423473, 0.10242265554721286, 0.20608391924265468, 0.2137185359112297, 0.18359415655480726, 0.20833556148701482, 0.09671474764352261, 0.33730373092005284, 0.2078463079750591, 0.13202140827498732, 0.23021404588434258, 0.23843705452606678, 0.1930849713802799, 0.23478448437255683, 9.999999999998899e-05, 0.0033996301849065214, 0.0344766528908671, 0.030853149291751425, 0.06172095144859091, 9.999999999998899e-05, 0.13542748241816494, 0.0039606012358189835, 0.037951547577616984, 0.12466624911108082, 0.08611042376719613, 0.15360381008717106, 0.08774880372269345, 0.07450713453657376, 0.030884443841034614, 0.10326672500643963, 0.08561914102229473, 0.12407925048899793, 0.1509168650692243, 0.09804896381057604, 0.036740197603423286, 0.1492765952183459, 0.09922933461760786, 0.1878689907022777, 0.15172391430722942, 0.12689124151325926, 0.057866825717062254, 0.2099513133927684, 0.11397123501201445, 0.17090738811621764, 0.15223970271639553, 0.005651226819918698, 0.06630489052617827, 0.14755138077180996, 0.0749026825956145, 0.07597945293175967, 0.5025949104405478, 0.5004931620901452, 0.5176888519899512, 0.49682142372128923, 0.5064917507307994, 0.5277011965205767, 0.5227488718026634, 0.5219722710259198, 0.5240751796565706, 0.07391302540881717, 0.10788785913113863, 0.13310709289855382, 0.12959403600384434, 0.11613838266455245, 0.0914735522166007, 0.13689863674155744, 0.11938767270739137, 0.10559733754951794, 0.24985168614078535, 0.3999966772429021, 0.2617265486041842, 0.23677956215202545, 0.30815601974561013, 0.3079918680805419, 0.2517414892120591, 0.30998734986191645, 0.37956912450139246, 0.356271017152635, 0.41571848273441825, 0.24010828863832112, 0.30827319258505537, 0.388083390032128, 0.3451000850935101, 0.436286512488384, 0.43527928647629077, 0.3979336236433235, 0.2673858301418416, 0.22919534425137267, 0.19728990226055843, 0.22738725803394633, 0.2799183236256133, 0.22830987049958062, 0.20975908869509585, 0.2285049118832816, 0.2442574194788638, 0.22165019205120784, 0.2394401646754838, 0.24953487733277668, 0.2792555801509582, 0.21200643245704676, 0.24826512801121403, 0.23957090380829105, 0.23629403215491052, 0.22175731086108785, 0.19870632311407577, 0.6297065198676413, 0.20737767900800386, 0.23963623910042142, 0.1971104620283095, 0.21494526423044313, 0.19111567419806708, 0.5718862732405579, 0.20849905518449519, 0.1255081939036098, 0.12585618210356242, 0.15327872029955303, 0.8468974688364528, 0.19890252822397747, 0.8263859450634858, 0.12224800554400916, 0.17036953091694196, 0.16239924836507702, 0.6587924404842035, 0.2116737001504584, 0.677309745671797, 0.20866259433050005, 0.16943474032003636, 0.6595245455860543, 0.10520375850323849, 0.16382282948284044, 0.706037191152149, 0.1888572018208441, 0.19103346153008804, 0.1982803259753354, 0.20019562292498572, 0.18923220095304105, 0.19119324770487534, 0.20216369469076, 0.18856867786808107, 0.19729987191355547, 0.09023225843475535, 0.10016691660065824, 0.09311211262633079, 0.09728608842804864, 0.09290524946273182, 0.09670620476931235, 0.09466009206890069, 0.09520633638505915, 0.10796255628559226]}, "mutation_prompt": null}
{"id": "f1fa367c-2b84-4c70-b85a-22dee0405c90", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "7ade3e72-76e4-455d-8200-209652902487", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.5\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "An adaptive swarm-based optimization algorithm that balances exploration and exploitation using velocity control and dynamic neighborhood strategies.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9395731607446945, 0.9350971226413357, 0.9426690031166337, 0.9311267535994443, 0.9332137576430314, 0.9429381498984728, 0.9354731589551684, 0.9325992026561332, 0.9325850187911401, 0.08089236838382408, 0.8528649689640033, 0.8542363251955325, 0.7991952896598387, 0.8424993235412261, 0.843647519013466, 0.8808414404932386, 0.8856935272649512, 0.8449267571958194, 0.16365481847898156, 0.14896410242868152, 0.08632772329583349, 0.09483767057498027, 0.14790462500354729, 0.12863797965602464, 0.08742736057659517, 0.09396183370060496, 0.12796085224828535, 0.11778335269160634, 0.07954973971904933, 0.06288567494040997, 0.09853040423407944, 0.0932018350062348, 0.09790450367342451, 0.11876140915805777, 0.06619557671312637, 0.059220999386716544, 0.9768450984590454, 0.9650379757170221, 0.9763949148768318, 0.9681612595664961, 0.9711751312866144, 0.9746399578408412, 0.9698776434098326, 0.9601201213260981, 0.959095192590969, 0.88076046997783, 0.8343667882804281, 0.8584521550088547, 0.8413519252308248, 0.15442376774451239, 0.8506929065292752, 0.769864267799835, 0.8481903082283275, 0.8333875536140498, 0.2166624886278743, 0.14164322889021463, 0.1403161053965729, 0.19497690130997025, 0.3925146858760451, 0.28416651524450953, 0.1289393351143182, 0.1315653978845156, 0.2379892355071147, 0.21669328883960426, 0.1827023222486881, 0.17548594896799818, 0.1297018843256188, 0.25694524314083234, 0.19194722568844558, 0.1366165168287029, 0.1342152069944601, 0.23775681517201286, 0.27252231847624564, 0.22770250190939922, 0.1380483814577037, 0.13788339777161962, 0.257439422238004, 0.17205252036301977, 0.2891081236263262, 0.2774963586676418, 0.2845046235886399, 9.999999999998899e-05, 0.006447251498808648, 0.006175496398845848, 0.0580665601269873, 9.999999999998899e-05, 0.1242011883345765, 0.04691371576276926, 0.03528640514804371, 0.08418232095632916, 0.10089691018104752, 0.05440756351424303, 0.038705565604720826, 0.07067449223204936, 0.005909606095001796, 0.02245703672638122, 0.10123444469786613, 0.18890780221710946, 0.04306364840708743, 0.14532095118510846, 0.08467383888014557, 0.1544581602791264, 0.08505976436113194, 0.10433420731530874, 0.142475263804703, 0.12014310852483845, 0.07890481423227524, 0.07960135487452824, 0.12916857156529882, 0.05661762352637778, 0.15582002732775269, 0.12548150500251354, 0.06060153358960141, 0.04545891216890008, 0.08589787022966355, 0.23157516203965667, 0.08567681477742461, 0.5784509728502187, 0.5589142131783433, 0.651893587876859, 0.575685759502762, 0.5797342854544805, 0.5527633209220035, 0.6148477805204162, 0.6236468622971381, 0.6277671515261911, 0.04136024206383282, 0.05755888680918342, 0.06432530177167772, 0.07661301703536427, 0.048603269630299484, 0.10287176505048445, 0.1253209914157929, 0.16558038892849358, 0.0714950070882936, 0.2859863287636979, 0.36813416369553564, 0.18433934902044447, 0.20678726808069037, 0.22073864676176602, 0.20044671450946738, 0.2130560031493991, 0.3259152952365868, 0.3777032206880524, 0.18397731085673463, 0.2927756041490652, 0.15257863089745116, 0.25676250311449633, 0.24511952220750632, 0.48192036854669074, 0.23576403378360888, 0.3842778337506817, 0.13437785638639033, 0.14608594907752182, 0.24014964683088835, 0.15107009874561428, 0.21498313115047174, 0.1890413602519876, 0.2867143139537289, 0.14431240718127958, 0.4537110992995643, 0.10525522218617989, 0.22528124102719826, 0.20552254894040034, 0.24194005799920026, 0.29849287206572994, 0.2898650241467373, 0.24409209148089783, 0.24884681022986088, 0.27608100625978027, 0.22784733917605537, 0.19044087898114304, 0.19404253138658156, 0.20092137149119804, 0.19391395095280062, 0.20261721896135332, 0.19022071412006303, 0.22922370650623802, 0.21185666832716143, 0.17541059750758847, 0.1269894825689193, 0.1268098678106, 0.15402320714825424, 0.17361842433983876, 0.20178996365655655, 0.9657540581851316, 0.10011730856165324, 0.17039042832031337, 0.15457334798700573, 0.8923990679041134, 0.21351195720428517, 0.8908245944372803, 0.2126538267889745, 0.16973075324296627, 0.21326845648270143, 0.10538900924820149, 0.92634144238845, 0.8883390005632821, 0.22247990180482624, 0.21598042486222013, 0.20674193432908727, 0.2059917468495298, 0.21057114480928507, 0.19263973945629131, 0.24576045379723488, 0.21912502761928054, 0.2294718216745627, 0.09647260458090279, 0.09114348502849157, 0.08387412011762518, 0.0786679866506913, 0.09143445960984953, 0.10170519514592635, 0.09000101169254171, 0.08201593847182553, 0.097736709159147]}, "mutation_prompt": null}
{"id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced AdaptiveSwarmOptimizer using dynamic inertia weight decay for improved convergence.", "configspace": "", "generation": 23, "fitness": 0.3150324065759425, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "c3927f30-3ed9-4fca-af94-d760e07cf507", "metadata": {"aucs": [0.9024897458234687, 0.9019498027916357, 0.9069026652111352, 0.9003265939347345, 0.9146396561376198, 0.9030922256831636, 0.9119685162493476, 0.8995029172401336, 0.9118985645073173, 0.24494255328899128, 0.7957970154559321, 0.8237985762227974, 0.5543401472153927, 0.8188571373158697, 0.5882281747168006, 0.8138596069009552, 0.19850292587969143, 0.7629422177190531, 0.15899891924511522, 0.18512043810090384, 0.1446558210293417, 0.15499500745185646, 0.13186436076972385, 0.11711472957069602, 0.1150727575378021, 0.16041916991886518, 0.15921987928779213, 0.12340673267194213, 0.07892172655566387, 0.12010179867651072, 0.14290395837869652, 0.11585061217904824, 0.1028031796079043, 0.09163582265678105, 0.10836415179106784, 0.1567711563490518, 0.975803691117059, 0.9713889428165957, 0.9806066922889528, 0.9784730390808976, 0.9789474014803816, 0.9790334830323862, 0.9836092491342838, 0.9769978705153424, 0.968970631966384, 0.6574740466097684, 0.5940045979691904, 0.5478132660973665, 0.5238982507061637, 0.35590947088840097, 0.5064092986571163, 0.46629001661462566, 0.7529588438994961, 0.7265718532333045, 0.9120939992176333, 0.17074867008109973, 0.22889014760988047, 0.27970918444217474, 0.21364436380171714, 0.2785019801523998, 0.17763833557605102, 0.23544747087313722, 0.23823637031146172, 0.22824560293327378, 0.12717348045345933, 0.13228530441323205, 0.24710228885063756, 0.13464778100766017, 0.1671848915377856, 0.17288339339457637, 0.18106873264772116, 0.18490061353612086, 0.19972125388144912, 9.999999999998899e-05, 0.4299242587532722, 0.1510358121181774, 0.21361479515233406, 0.19391216811643486, 0.23697843913351013, 0.28361843930894837, 0.2611846971592219, 9.999999999998899e-05, 0.08955645713219673, 0.0701913840232693, 0.06271456213915794, 0.009091420436393882, 9.999999999998899e-05, 0.0763405493953836, 9.999999999998899e-05, 9.999999999998899e-05, 0.11463539304626069, 0.05028651185338928, 0.16894776697786507, 0.06845331776805597, 0.04186492980411238, 0.028102051695346963, 0.12683586977369088, 0.06562759455517586, 0.062003397402002336, 0.2328130781682679, 0.0715759012530387, 0.05117006405698887, 0.21984255787560525, 0.16653818716205993, 0.1836290442568379, 0.10193895006440512, 0.15941738570191843, 0.08032948020738817, 0.45087607340503055, 0.13194609047939743, 0.18770011455502622, 0.07195848180614028, 0.006432008751781182, 0.07616787885794163, 0.14708078877788577, 0.08407430952374706, 0.08337343428921318, 0.4928706801798163, 0.5390376111005328, 0.5052047428688222, 0.5003657904471007, 0.5270250016903227, 0.5793594899508009, 0.5669133020085471, 0.5534820564050005, 0.5502497468017048, 0.07603868623753496, 0.0825247350785876, 0.15713666103956403, 0.11610109999813323, 0.17781204680862595, 0.0987812793830557, 0.11131150706181148, 0.08646935712114556, 0.13286499689431153, 0.3330793146108665, 0.23583296811464272, 0.2112756480679967, 0.29204553961504287, 0.5084084129913807, 0.15723676587054358, 0.25807874528258834, 0.28849376126254955, 0.2696525467054173, 0.47036614016682987, 0.3522421021744577, 0.4057267280473652, 0.2630928680650938, 0.26071165976519595, 0.36880285995553885, 0.4554500770984642, 0.3754033461826016, 0.33110347032413645, 0.2578794577527599, 0.290903624205032, 0.3120229966554252, 0.3360823886130756, 0.28700658283915303, 0.24893906725887704, 0.2084327401204844, 0.24714614210662533, 0.101475877316759, 0.24278222221176082, 0.21637693288599802, 0.22517208363552532, 0.24157154722234742, 0.1921430566407064, 0.25113285168291655, 0.21102314773425346, 0.24714847188647182, 0.24525239561291023, 0.1914972626576481, 0.25242131703404513, 0.21337085463299277, 0.22483303213838213, 0.19414879647050287, 0.18943728797261095, 0.20857001163590716, 0.2259227555735953, 0.19838384166701262, 0.9151997773452712, 0.12648461562654867, 0.15429152397162338, 0.9241857891498352, 0.2010528100727027, 0.9352023328365511, 0.12240637251408315, 0.17042549847315858, 0.15373365617391643, 0.922262719043616, 0.21274879327511576, 0.6562089432938267, 0.21124207257172256, 0.16918151341785992, 0.8341458600214918, 0.10529586325447038, 0.16671872964830747, 0.5133593963208037, 0.21335034726534452, 0.19666829473615266, 0.19918340998713824, 0.209756022244321, 0.1993235856420128, 0.18445470237080286, 0.203110453153163, 0.20517567708982676, 0.23294612301768625, 0.10479539934531457, 0.0936637236448723, 0.10410946529861342, 0.1044758050261766, 0.10695744638589799, 0.10450120710204724, 0.10516324652399489, 0.07396584569225628, 0.08979688748828596]}, "mutation_prompt": null}
{"id": "cda0a162-42dc-4337-82bc-3e10e6e15345", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced AdaptiveSwarmOptimizer using dynamic inertia weight decay for improved convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.9024897458234687, 0.9019498027916357, 0.9069026652111352, 0.9003265939347345, 0.9146396561376198, 0.9030922256831636, 0.9119685162493476, 0.8995029172401336, 0.9118985645073173, 0.24494255328899128, 0.7957970154559321, 0.8237985762227974, 0.5543401472153927, 0.8188571373158697, 0.5882281747168006, 0.8138596069009552, 0.19850292587969143, 0.7629422177190531, 0.15899891924511522, 0.18512043810090384, 0.1446558210293417, 0.15499500745185646, 0.13186436076972385, 0.11711472957069602, 0.1150727575378021, 0.16041916991886518, 0.15921987928779213, 0.12340673267194213, 0.07892172655566387, 0.12010179867651072, 0.14290395837869652, 0.11585061217904824, 0.1028031796079043, 0.09163582265678105, 0.10836415179106784, 0.1567711563490518, 0.975803691117059, 0.9713889428165957, 0.9806066922889528, 0.9784730390808976, 0.9789474014803816, 0.9790334830323862, 0.9836092491342838, 0.9769978705153424, 0.968970631966384, 0.6574740466097684, 0.5940045979691904, 0.5478132660973665, 0.5238982507061637, 0.35590947088840097, 0.5064092986571163, 0.46629001661462566, 0.7529588438994961, 0.7265718532333045, 0.9120939992176333, 0.17074867008109973, 0.22889014760988047, 0.27970918444217474, 0.21364436380171714, 0.2785019801523998, 0.17763833557605102, 0.23544747087313722, 0.23823637031146172, 0.22824560293327378, 0.12717348045345933, 0.13228530441323205, 0.24710228885063756, 0.13464778100766017, 0.1671848915377856, 0.17288339339457637, 0.18106873264772116, 0.18490061353612086, 0.19972125388144912, 9.999999999998899e-05, 0.4299242587532722, 0.1510358121181774, 0.21361479515233406, 0.19391216811643486, 0.23697843913351013, 0.28361843930894837, 0.2611846971592219, 9.999999999998899e-05, 0.08955645713219673, 0.0701913840232693, 0.06271456213915794, 0.009091420436393882, 9.999999999998899e-05, 0.0763405493953836, 9.999999999998899e-05, 9.999999999998899e-05, 0.11463539304626069, 0.05028651185338928, 0.16894776697786507, 0.06845331776805597, 0.04186492980411238, 0.028102051695346963, 0.12683586977369088, 0.06562759455517586, 0.062003397402002336, 0.2328130781682679, 0.0715759012530387, 0.05117006405698887, 0.21984255787560525, 0.16653818716205993, 0.1836290442568379, 0.10193895006440512, 0.15941738570191843, 0.08032948020738817, 0.45087607340503055, 0.13194609047939743, 0.18770011455502622, 0.07195848180614028, 0.006432008751781182, 0.07616787885794163, 0.14708078877788577, 0.08407430952374706, 0.08337343428921318, 0.4928706801798163, 0.5390376111005328, 0.5052047428688222, 0.5003657904471007, 0.5270250016903227, 0.5793594899508009, 0.5669133020085471, 0.5534820564050005, 0.5502497468017048, 0.07603868623753496, 0.0825247350785876, 0.15713666103956403, 0.11610109999813323, 0.17781204680862595, 0.0987812793830557, 0.11131150706181148, 0.08646935712114556, 0.13286499689431153, 0.3330793146108665, 0.23583296811464272, 0.2112756480679967, 0.29204553961504287, 0.5084084129913807, 0.15723676587054358, 0.25807874528258834, 0.28849376126254955, 0.2696525467054173, 0.47036614016682987, 0.3522421021744577, 0.4057267280473652, 0.2630928680650938, 0.26071165976519595, 0.36880285995553885, 0.4554500770984642, 0.3754033461826016, 0.33110347032413645, 0.2578794577527599, 0.290903624205032, 0.3120229966554252, 0.3360823886130756, 0.28700658283915303, 0.24893906725887704, 0.2084327401204844, 0.24714614210662533, 0.101475877316759, 0.24278222221176082, 0.21637693288599802, 0.22517208363552532, 0.24157154722234742, 0.1921430566407064, 0.25113285168291655, 0.21102314773425346, 0.24714847188647182, 0.24525239561291023, 0.1914972626576481, 0.25242131703404513, 0.21337085463299277, 0.22483303213838213, 0.19414879647050287, 0.18943728797261095, 0.20857001163590716, 0.2259227555735953, 0.19838384166701262, 0.9151997773452712, 0.12648461562654867, 0.15429152397162338, 0.9241857891498352, 0.2010528100727027, 0.9352023328365511, 0.12240637251408315, 0.17042549847315858, 0.15373365617391643, 0.922262719043616, 0.21274879327511576, 0.6562089432938267, 0.21124207257172256, 0.16918151341785992, 0.8341458600214918, 0.10529586325447038, 0.16671872964830747, 0.5133593963208037, 0.21335034726534452, 0.19666829473615266, 0.19918340998713824, 0.209756022244321, 0.1993235856420128, 0.18445470237080286, 0.203110453153163, 0.20517567708982676, 0.23294612301768625, 0.10479539934531457, 0.0936637236448723, 0.10410946529861342, 0.1044758050261766, 0.10695744638589799, 0.10450120710204724, 0.10516324652399489, 0.07396584569225628, 0.08979688748828596]}, "mutation_prompt": null}
{"id": "172fc9c3-d429-42ab-8f0e-c7053c311f6a", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced AdaptiveSwarmOptimizer using dynamic inertia weight decay for improved convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.9024897458234687, 0.9019498027916357, 0.9069026652111352, 0.9003265939347345, 0.9146396561376198, 0.9030922256831636, 0.9119685162493476, 0.8995029172401336, 0.9118985645073173, 0.24494255328899128, 0.7957970154559321, 0.8237985762227974, 0.5543401472153927, 0.8188571373158697, 0.5882281747168006, 0.8138596069009552, 0.19850292587969143, 0.7629422177190531, 0.15899891924511522, 0.18512043810090384, 0.1446558210293417, 0.15499500745185646, 0.13186436076972385, 0.11711472957069602, 0.1150727575378021, 0.16041916991886518, 0.15921987928779213, 0.12340673267194213, 0.07892172655566387, 0.12010179867651072, 0.14290395837869652, 0.11585061217904824, 0.1028031796079043, 0.09163582265678105, 0.10836415179106784, 0.1567711563490518, 0.975803691117059, 0.9713889428165957, 0.9806066922889528, 0.9784730390808976, 0.9789474014803816, 0.9790334830323862, 0.9836092491342838, 0.9769978705153424, 0.968970631966384, 0.6574740466097684, 0.5940045979691904, 0.5478132660973665, 0.5238982507061637, 0.35590947088840097, 0.5064092986571163, 0.46629001661462566, 0.7529588438994961, 0.7265718532333045, 0.9120939992176333, 0.17074867008109973, 0.22889014760988047, 0.27970918444217474, 0.21364436380171714, 0.2785019801523998, 0.17763833557605102, 0.23544747087313722, 0.23823637031146172, 0.22824560293327378, 0.12717348045345933, 0.13228530441323205, 0.24710228885063756, 0.13464778100766017, 0.1671848915377856, 0.17288339339457637, 0.18106873264772116, 0.18490061353612086, 0.19972125388144912, 9.999999999998899e-05, 0.4299242587532722, 0.1510358121181774, 0.21361479515233406, 0.19391216811643486, 0.23697843913351013, 0.28361843930894837, 0.2611846971592219, 9.999999999998899e-05, 0.08955645713219673, 0.0701913840232693, 0.06271456213915794, 0.009091420436393882, 9.999999999998899e-05, 0.0763405493953836, 9.999999999998899e-05, 9.999999999998899e-05, 0.11463539304626069, 0.05028651185338928, 0.16894776697786507, 0.06845331776805597, 0.04186492980411238, 0.028102051695346963, 0.12683586977369088, 0.06562759455517586, 0.062003397402002336, 0.2328130781682679, 0.0715759012530387, 0.05117006405698887, 0.21984255787560525, 0.16653818716205993, 0.1836290442568379, 0.10193895006440512, 0.15941738570191843, 0.08032948020738817, 0.45087607340503055, 0.13194609047939743, 0.18770011455502622, 0.07195848180614028, 0.006432008751781182, 0.07616787885794163, 0.14708078877788577, 0.08407430952374706, 0.08337343428921318, 0.4928706801798163, 0.5390376111005328, 0.5052047428688222, 0.5003657904471007, 0.5270250016903227, 0.5793594899508009, 0.5669133020085471, 0.5534820564050005, 0.5502497468017048, 0.07603868623753496, 0.0825247350785876, 0.15713666103956403, 0.11610109999813323, 0.17781204680862595, 0.0987812793830557, 0.11131150706181148, 0.08646935712114556, 0.13286499689431153, 0.3330793146108665, 0.23583296811464272, 0.2112756480679967, 0.29204553961504287, 0.5084084129913807, 0.15723676587054358, 0.25807874528258834, 0.28849376126254955, 0.2696525467054173, 0.47036614016682987, 0.3522421021744577, 0.4057267280473652, 0.2630928680650938, 0.26071165976519595, 0.36880285995553885, 0.4554500770984642, 0.3754033461826016, 0.33110347032413645, 0.2578794577527599, 0.290903624205032, 0.3120229966554252, 0.3360823886130756, 0.28700658283915303, 0.24893906725887704, 0.2084327401204844, 0.24714614210662533, 0.101475877316759, 0.24278222221176082, 0.21637693288599802, 0.22517208363552532, 0.24157154722234742, 0.1921430566407064, 0.25113285168291655, 0.21102314773425346, 0.24714847188647182, 0.24525239561291023, 0.1914972626576481, 0.25242131703404513, 0.21337085463299277, 0.22483303213838213, 0.19414879647050287, 0.18943728797261095, 0.20857001163590716, 0.2259227555735953, 0.19838384166701262, 0.9151997773452712, 0.12648461562654867, 0.15429152397162338, 0.9241857891498352, 0.2010528100727027, 0.9352023328365511, 0.12240637251408315, 0.17042549847315858, 0.15373365617391643, 0.922262719043616, 0.21274879327511576, 0.6562089432938267, 0.21124207257172256, 0.16918151341785992, 0.8341458600214918, 0.10529586325447038, 0.16671872964830747, 0.5133593963208037, 0.21335034726534452, 0.19666829473615266, 0.19918340998713824, 0.209756022244321, 0.1993235856420128, 0.18445470237080286, 0.203110453153163, 0.20517567708982676, 0.23294612301768625, 0.10479539934531457, 0.0936637236448723, 0.10410946529861342, 0.1044758050261766, 0.10695744638589799, 0.10450120710204724, 0.10516324652399489, 0.07396584569225628, 0.08979688748828596]}, "mutation_prompt": null}
{"id": "0845a8ec-a874-4ef8-a0dc-0ee46359aded", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced AdaptiveSwarmOptimizer using dynamic inertia weight decay for improved convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.9024897458234687, 0.9019498027916357, 0.9069026652111352, 0.9003265939347345, 0.9146396561376198, 0.9030922256831636, 0.9119685162493476, 0.8995029172401336, 0.9118985645073173, 0.24494255328899128, 0.7957970154559321, 0.8237985762227974, 0.5543401472153927, 0.8188571373158697, 0.5882281747168006, 0.8138596069009552, 0.19850292587969143, 0.7629422177190531, 0.15899891924511522, 0.18512043810090384, 0.1446558210293417, 0.15499500745185646, 0.13186436076972385, 0.11711472957069602, 0.1150727575378021, 0.16041916991886518, 0.15921987928779213, 0.12340673267194213, 0.07892172655566387, 0.12010179867651072, 0.14290395837869652, 0.11585061217904824, 0.1028031796079043, 0.09163582265678105, 0.10836415179106784, 0.1567711563490518, 0.975803691117059, 0.9713889428165957, 0.9806066922889528, 0.9784730390808976, 0.9789474014803816, 0.9790334830323862, 0.9836092491342838, 0.9769978705153424, 0.968970631966384, 0.6574740466097684, 0.5940045979691904, 0.5478132660973665, 0.5238982507061637, 0.35590947088840097, 0.5064092986571163, 0.46629001661462566, 0.7529588438994961, 0.7265718532333045, 0.9120939992176333, 0.17074867008109973, 0.22889014760988047, 0.27970918444217474, 0.21364436380171714, 0.2785019801523998, 0.17763833557605102, 0.23544747087313722, 0.23823637031146172, 0.22824560293327378, 0.12717348045345933, 0.13228530441323205, 0.24710228885063756, 0.13464778100766017, 0.1671848915377856, 0.17288339339457637, 0.18106873264772116, 0.18490061353612086, 0.19972125388144912, 9.999999999998899e-05, 0.4299242587532722, 0.1510358121181774, 0.21361479515233406, 0.19391216811643486, 0.23697843913351013, 0.28361843930894837, 0.2611846971592219, 9.999999999998899e-05, 0.08955645713219673, 0.0701913840232693, 0.06271456213915794, 0.009091420436393882, 9.999999999998899e-05, 0.0763405493953836, 9.999999999998899e-05, 9.999999999998899e-05, 0.11463539304626069, 0.05028651185338928, 0.16894776697786507, 0.06845331776805597, 0.04186492980411238, 0.028102051695346963, 0.12683586977369088, 0.06562759455517586, 0.062003397402002336, 0.2328130781682679, 0.0715759012530387, 0.05117006405698887, 0.21984255787560525, 0.16653818716205993, 0.1836290442568379, 0.10193895006440512, 0.15941738570191843, 0.08032948020738817, 0.45087607340503055, 0.13194609047939743, 0.18770011455502622, 0.07195848180614028, 0.006432008751781182, 0.07616787885794163, 0.14708078877788577, 0.08407430952374706, 0.08337343428921318, 0.4928706801798163, 0.5390376111005328, 0.5052047428688222, 0.5003657904471007, 0.5270250016903227, 0.5793594899508009, 0.5669133020085471, 0.5534820564050005, 0.5502497468017048, 0.07603868623753496, 0.0825247350785876, 0.15713666103956403, 0.11610109999813323, 0.17781204680862595, 0.0987812793830557, 0.11131150706181148, 0.08646935712114556, 0.13286499689431153, 0.3330793146108665, 0.23583296811464272, 0.2112756480679967, 0.29204553961504287, 0.5084084129913807, 0.15723676587054358, 0.25807874528258834, 0.28849376126254955, 0.2696525467054173, 0.47036614016682987, 0.3522421021744577, 0.4057267280473652, 0.2630928680650938, 0.26071165976519595, 0.36880285995553885, 0.4554500770984642, 0.3754033461826016, 0.33110347032413645, 0.2578794577527599, 0.290903624205032, 0.3120229966554252, 0.3360823886130756, 0.28700658283915303, 0.24893906725887704, 0.2084327401204844, 0.24714614210662533, 0.101475877316759, 0.24278222221176082, 0.21637693288599802, 0.22517208363552532, 0.24157154722234742, 0.1921430566407064, 0.25113285168291655, 0.21102314773425346, 0.24714847188647182, 0.24525239561291023, 0.1914972626576481, 0.25242131703404513, 0.21337085463299277, 0.22483303213838213, 0.19414879647050287, 0.18943728797261095, 0.20857001163590716, 0.2259227555735953, 0.19838384166701262, 0.9151997773452712, 0.12648461562654867, 0.15429152397162338, 0.9241857891498352, 0.2010528100727027, 0.9352023328365511, 0.12240637251408315, 0.17042549847315858, 0.15373365617391643, 0.922262719043616, 0.21274879327511576, 0.6562089432938267, 0.21124207257172256, 0.16918151341785992, 0.8341458600214918, 0.10529586325447038, 0.16671872964830747, 0.5133593963208037, 0.21335034726534452, 0.19666829473615266, 0.19918340998713824, 0.209756022244321, 0.1993235856420128, 0.18445470237080286, 0.203110453153163, 0.20517567708982676, 0.23294612301768625, 0.10479539934531457, 0.0936637236448723, 0.10410946529861342, 0.1044758050261766, 0.10695744638589799, 0.10450120710204724, 0.10516324652399489, 0.07396584569225628, 0.08979688748828596]}, "mutation_prompt": null}
{"id": "5da87ecf-eb97-4359-9618-cbec4c10ba7a", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n            self.cognitive_weight = max(0.5, 1.5 * self.gbest_score / (self.gbest_score + 1e-9))  # Adaptive cognitive weight\n            self.social_weight = 2.0 - self.cognitive_weight  # Adaptive social weight\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Improved AdaptiveSwarmOptimizer with adaptive cognitive and social weights influenced by convergence progress.", "configspace": "", "generation": 27, "fitness": 0.25071232695919854, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.9313682740888606, 0.9311544729098858, 0.7079939856769467, 0.9324916272456998, 0.9376649102725861, 0.9390678010856062, 0.9311838734245659, 0.7937507235381194, 0.933020138307176, 0.14601501954211016, 0.0940178794848302, 0.012898910502731842, 9.999999999998899e-05, 0.05631554182771392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09139554968773533, 0.12428231093305109, 0.06854030136200362, 0.15187937780887661, 0.17748880647248666, 0.11294699811144004, 0.11190108978160607, 0.12369715215869348, 0.15457865757547262, 0.15265864155804376, 0.1118002513258689, 0.08455077550939727, 0.13464966337632722, 0.08974906229702484, 0.1111839965191701, 0.1183695661238715, 0.08277648857766251, 0.09130748557855173, 0.974490641254716, 0.9641300928634288, 0.9687483271140364, 0.9716966634597469, 0.9764107859947113, 0.9585059070712921, 0.9821241225410307, 0.9733972662636464, 0.9777941942556817, 0.31701673133825214, 0.37315218897667146, 0.18129313987347728, 0.29615099022820546, 0.29719746283221626, 0.43371135543439054, 0.35205154191990073, 0.0885030529425962, 0.16680888787680592, 0.39616018511379614, 0.22656930118997798, 0.22831677112084903, 0.21364992730944743, 0.20989433999868812, 0.9149932183970897, 0.17638512980481158, 0.1786235336790689, 0.24918540626399188, 0.3652123064216677, 0.12950194762035605, 0.1299522561527463, 0.26027653124973504, 0.12408093410218624, 0.18595396236284245, 0.1801875328412692, 0.15618778161737723, 0.1808679321119273, 0.17219142457121817, 9.999999999998899e-05, 0.1540935888192132, 0.16359120273186323, 0.15261865582921963, 0.13213052659223745, 0.13286177615741435, 0.008865290444221463, 0.17492483297591788, 9.999999999998899e-05, 9.999999999998899e-05, 0.005550705381464294, 0.07478962626903818, 9.999999999998899e-05, 9.999999999998899e-05, 0.012641185608378014, 9.999999999998899e-05, 0.055920647652514366, 0.18692237512834697, 0.07543565308234534, 0.13270279027853427, 0.09809805245699865, 0.021411444813783098, 0.02162507900607502, 0.1290076050335518, 0.10343876277365194, 0.07514545395683381, 0.15836297239034525, 0.09507907167288232, 0.051824691955077995, 0.4148342364197283, 0.14825324573971355, 0.14087237986832346, 0.1069902161041193, 0.11437475609096293, 0.07894976656949293, 0.06966789481692592, 0.2502292768357066, 0.20669587614700224, 0.17726486019899657, 0.007474628049029319, 0.04155258364306724, 0.1480485730083817, 0.1352332221959005, 0.09380538038063768, 0.6214768057755304, 0.5507336415011138, 0.4259123235164609, 0.5159335075787471, 0.47063402168426915, 0.5059850909973183, 0.5449738437286571, 0.5336874325162209, 0.4551380792490404, 0.05795053993894961, 0.08747506130058536, 0.07997852783499315, 0.13924779292491163, 0.1082449767269743, 0.13365064232774804, 0.13999199593262635, 0.12839457013802624, 0.08201632794442393, 0.21433760195455354, 0.16295572668219915, 0.24728893191040457, 0.16469680713727408, 0.17052501475574477, 0.19781667116142077, 0.24654558054048592, 0.1512904745474294, 0.12402664416954867, 0.24921363956811804, 0.3592948983168941, 0.17468783728701387, 0.24437824163480537, 0.34154780324389267, 0.2695165318727608, 0.2571478892488447, 0.283240686077079, 0.14298390411662043, 0.27928366099521884, 0.2875005630719164, 0.21023717534192488, 0.23109507501278193, 0.22620409240596917, 0.27861491793069404, 0.23846372865520582, 0.33340379290393607, 0.06933844706391701, 0.20619341305397654, 0.22057011484847366, 0.2354893044872851, 0.2950310728401512, 0.24164478480822693, 0.2533525099975974, 0.2384376637174821, 0.25250281513208894, 0.2284533279989518, 0.17942124904409773, 0.20709792104558777, 0.20730785956815823, 0.22187771496337128, 0.21079911857945033, 0.19496548842886974, 0.21239832812853665, 0.19731628342069174, 0.18657766597699887, 0.12558172634085385, 0.1878422417832427, 0.15400959030352201, 0.7094926739990121, 0.20057613639311522, 0.9457408968942431, 0.12208278883302903, 0.1701710721443076, 0.16170870388144742, 0.5347436900988691, 0.21251006892467816, 0.39514985298811267, 0.21227565340529042, 0.16946779041988758, 0.212711436902277, 0.10525595326658477, 0.3039740319530603, 0.22435658604948117, 0.18713758755862564, 0.20037408981542726, 0.1880195768081233, 0.17874695566253485, 0.17706208840449178, 0.19754812677423783, 0.19363606046142667, 0.1886073628429472, 0.195111049598936, 0.09517937555902589, 0.09004826802344235, 0.09648344893480187, 0.11122184949391833, 0.09735133876145974, 0.08157468929014522, 0.08861596991728093, 0.10023746008244672, 0.08829628144148627]}, "mutation_prompt": null}
{"id": "242def67-1da4-4b5f-8adb-b3dedda15661", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= 0.99  # Added inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhanced AdaptiveSwarmOptimizer using dynamic inertia weight decay for improved convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.9024897458234687, 0.9019498027916357, 0.9069026652111352, 0.9003265939347345, 0.9146396561376198, 0.9030922256831636, 0.9119685162493476, 0.8995029172401336, 0.9118985645073173, 0.24494255328899128, 0.7957970154559321, 0.8237985762227974, 0.5543401472153927, 0.8188571373158697, 0.5882281747168006, 0.8138596069009552, 0.19850292587969143, 0.7629422177190531, 0.15899891924511522, 0.18512043810090384, 0.1446558210293417, 0.15499500745185646, 0.13186436076972385, 0.11711472957069602, 0.1150727575378021, 0.16041916991886518, 0.15921987928779213, 0.12340673267194213, 0.07892172655566387, 0.12010179867651072, 0.14290395837869652, 0.11585061217904824, 0.1028031796079043, 0.09163582265678105, 0.10836415179106784, 0.1567711563490518, 0.975803691117059, 0.9713889428165957, 0.9806066922889528, 0.9784730390808976, 0.9789474014803816, 0.9790334830323862, 0.9836092491342838, 0.9769978705153424, 0.968970631966384, 0.6574740466097684, 0.5940045979691904, 0.5478132660973665, 0.5238982507061637, 0.35590947088840097, 0.5064092986571163, 0.46629001661462566, 0.7529588438994961, 0.7265718532333045, 0.9120939992176333, 0.17074867008109973, 0.22889014760988047, 0.27970918444217474, 0.21364436380171714, 0.2785019801523998, 0.17763833557605102, 0.23544747087313722, 0.23823637031146172, 0.22824560293327378, 0.12717348045345933, 0.13228530441323205, 0.24710228885063756, 0.13464778100766017, 0.1671848915377856, 0.17288339339457637, 0.18106873264772116, 0.18490061353612086, 0.19972125388144912, 9.999999999998899e-05, 0.4299242587532722, 0.1510358121181774, 0.21361479515233406, 0.19391216811643486, 0.23697843913351013, 0.28361843930894837, 0.2611846971592219, 9.999999999998899e-05, 0.08955645713219673, 0.0701913840232693, 0.06271456213915794, 0.009091420436393882, 9.999999999998899e-05, 0.0763405493953836, 9.999999999998899e-05, 9.999999999998899e-05, 0.11463539304626069, 0.05028651185338928, 0.16894776697786507, 0.06845331776805597, 0.04186492980411238, 0.028102051695346963, 0.12683586977369088, 0.06562759455517586, 0.062003397402002336, 0.2328130781682679, 0.0715759012530387, 0.05117006405698887, 0.21984255787560525, 0.16653818716205993, 0.1836290442568379, 0.10193895006440512, 0.15941738570191843, 0.08032948020738817, 0.45087607340503055, 0.13194609047939743, 0.18770011455502622, 0.07195848180614028, 0.006432008751781182, 0.07616787885794163, 0.14708078877788577, 0.08407430952374706, 0.08337343428921318, 0.4928706801798163, 0.5390376111005328, 0.5052047428688222, 0.5003657904471007, 0.5270250016903227, 0.5793594899508009, 0.5669133020085471, 0.5534820564050005, 0.5502497468017048, 0.07603868623753496, 0.0825247350785876, 0.15713666103956403, 0.11610109999813323, 0.17781204680862595, 0.0987812793830557, 0.11131150706181148, 0.08646935712114556, 0.13286499689431153, 0.3330793146108665, 0.23583296811464272, 0.2112756480679967, 0.29204553961504287, 0.5084084129913807, 0.15723676587054358, 0.25807874528258834, 0.28849376126254955, 0.2696525467054173, 0.47036614016682987, 0.3522421021744577, 0.4057267280473652, 0.2630928680650938, 0.26071165976519595, 0.36880285995553885, 0.4554500770984642, 0.3754033461826016, 0.33110347032413645, 0.2578794577527599, 0.290903624205032, 0.3120229966554252, 0.3360823886130756, 0.28700658283915303, 0.24893906725887704, 0.2084327401204844, 0.24714614210662533, 0.101475877316759, 0.24278222221176082, 0.21637693288599802, 0.22517208363552532, 0.24157154722234742, 0.1921430566407064, 0.25113285168291655, 0.21102314773425346, 0.24714847188647182, 0.24525239561291023, 0.1914972626576481, 0.25242131703404513, 0.21337085463299277, 0.22483303213838213, 0.19414879647050287, 0.18943728797261095, 0.20857001163590716, 0.2259227555735953, 0.19838384166701262, 0.9151997773452712, 0.12648461562654867, 0.15429152397162338, 0.9241857891498352, 0.2010528100727027, 0.9352023328365511, 0.12240637251408315, 0.17042549847315858, 0.15373365617391643, 0.922262719043616, 0.21274879327511576, 0.6562089432938267, 0.21124207257172256, 0.16918151341785992, 0.8341458600214918, 0.10529586325447038, 0.16671872964830747, 0.5133593963208037, 0.21335034726534452, 0.19666829473615266, 0.19918340998713824, 0.209756022244321, 0.1993235856420128, 0.18445470237080286, 0.203110453153163, 0.20517567708982676, 0.23294612301768625, 0.10479539934531457, 0.0936637236448723, 0.10410946529861342, 0.1044758050261766, 0.10695744638589799, 0.10450120710204724, 0.10516324652399489, 0.07396584569225628, 0.08979688748828596]}, "mutation_prompt": null}
{"id": "09bae8df-d9f5-4525-a77d-6bcac6b4e593", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = self.cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a randomness-based adaptive inertia weight reduction to balance exploration and exploitation.", "configspace": "", "generation": 29, "fitness": 0.3255807690322559, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "734e4d49-bf76-42ce-b3c0-8401a0d3a4d6", "metadata": {"aucs": [0.8748667325415969, 0.855760049404486, 0.8659418371294494, 0.8626668116521427, 0.8676072985781631, 0.8643485502170045, 0.8628011694112935, 0.853076501323147, 0.888159805769243, 0.7724627849765571, 0.7777878732644109, 0.7889714933541689, 0.762784692180601, 0.7528832448525429, 0.7586520210235423, 0.7336331382776706, 0.7657876233651073, 0.7572650663180358, 0.0796951249715947, 0.18351189539612967, 0.11373001945241523, 0.11430948214636483, 0.5794668790920485, 0.08954308028559299, 0.0990939668326637, 0.11564989675721904, 0.15973571755261584, 0.1143540578957194, 0.12104426036015681, 0.11133640289420477, 0.1380704226400552, 0.14051540363480342, 0.10890396562367621, 0.11801994313282593, 0.11593850604205147, 0.11343775508725995, 0.9816110426853937, 0.9722977676431614, 0.9813217388748797, 0.9764038069474634, 0.9814496649790414, 0.9759287442199936, 0.9801176204324871, 0.9778811966345522, 0.9742302565783417, 0.6119858743601818, 0.6166649296146218, 0.7692082708114132, 0.451158180812969, 0.5852465357373029, 0.752499686937977, 0.7034882415067911, 0.548561816488117, 0.7954938795747029, 0.22994262600276738, 0.22600449285228152, 0.3818511682847937, 0.21464054510171648, 0.37534165757408877, 0.27811605677666207, 0.17369416542073846, 0.17949591234185192, 0.8533477508330702, 0.11223985725103758, 0.1836467776802938, 0.16552458608206688, 0.19682894455192412, 0.132997035864323, 0.2152301944120978, 0.18987031897780893, 0.18620207580039938, 0.21885051085303298, 0.23316144622981716, 9.999999999998899e-05, 0.1502627655100629, 0.2724654331423966, 0.22708338116737947, 0.18773879878486543, 0.12821972246475255, 0.23366164137322598, 0.20497726913920422, 9.999999999998899e-05, 0.015423854141230597, 0.06151474855622274, 0.033208687301956474, 0.02442656346691674, 9.999999999998899e-05, 0.010646319391949377, 9.999999999998899e-05, 0.12031140428521214, 0.09718025204553982, 0.04919949417064673, 0.1239085513779673, 0.08120161748616561, 0.027684964618919894, 0.014969889441148743, 0.11504073563243988, 0.0616717550204543, 0.0800758440342566, 0.23972583511708567, 0.04875021795703638, 0.04779883149455055, 0.10768309185846925, 0.10802053143766022, 0.09458463501816294, 0.10908942226958918, 0.10657945028596005, 0.06898170537503101, 0.08523428624424045, 0.11730967059639752, 0.37198837474664914, 0.1309955172781183, 0.06419971911474243, 0.006286196879965789, 0.09717321455294736, 0.19301776609742238, 0.09036687804158905, 0.5644663219501412, 0.5456914355683864, 0.5392935890527998, 0.5624874709504064, 0.5220942559170988, 0.5895209788841421, 0.582210083611415, 0.5351709839291034, 0.5653690312492503, 0.08500171565207637, 0.1747993491763009, 0.1050642398953201, 0.1307440569115812, 0.13111831737586976, 0.11418190949427987, 0.12135961253790228, 0.09280079068297165, 0.07665388041699317, 0.6383545771584825, 0.39622774363898683, 0.1947553855617109, 0.34481575499611994, 0.3469397859146739, 0.39960032543732127, 0.1959151654424428, 0.3605651037766775, 0.41597757503579724, 0.42035539159066215, 0.3810914530220809, 0.25542289370326043, 0.3999041893027915, 0.23304456209666968, 0.3587542175636135, 0.23155010401585274, 0.3554898982469552, 0.24354892065177003, 0.2314083219634514, 0.3533962185804138, 0.16901097615580052, 0.24085060688903714, 0.20241053473072623, 0.27821256407935957, 0.23565429924790104, 0.24816794264091557, 0.12738903850109196, 0.23624979838057303, 0.2741368808659217, 0.19288801323916938, 0.2829524851148183, 0.25018091813414556, 0.24741010818866338, 0.2763266050700729, 0.24450362131645775, 0.256138296596478, 0.20889658129489863, 0.22660623550132863, 0.1896221334513265, 0.20069722886473118, 0.8137258410951587, 0.17394976098837756, 0.22340738427627627, 0.2100193183266722, 0.22067743658696037, 0.1264063289242391, 0.12605232675760214, 0.1543612681617671, 0.9001788995989503, 0.20023429950401672, 0.9015786863948569, 0.09983775579865306, 0.16996978907838, 0.15410732643732694, 0.8280989987637426, 0.2113229059614984, 0.5726965671963646, 0.7822217735154298, 0.16950031023948564, 0.7847678056223278, 0.10540937810312168, 0.6165467235856146, 0.568132605883315, 0.21014875515029996, 0.18840780743530394, 0.20673102626037176, 0.1884143656729832, 0.1855085985431526, 0.231002479304518, 0.21871257547895206, 0.20348253130496163, 0.20501822265756953, 0.11306938773095276, 0.10492779306789868, 0.07552022572618278, 0.08892928211300644, 0.0927552278551429, 0.1301173234438715, 0.10863165793970708, 0.10279707394820237, 0.10120991922962363]}, "mutation_prompt": null}
{"id": "19100f35-3203-4fc6-a6ce-5142d959dd2d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                eval_ratio = evaluations / self.budget  # Added evaluation ratio\n                cognitive_component = (self.cognitive_weight + eval_ratio) * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = (self.social_weight - eval_ratio) * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a dynamic cognitive and social weight adaptation based on the current evaluation ratio to enhance convergence.", "configspace": "", "generation": 30, "fitness": 0.32464059411589574, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "09bae8df-d9f5-4525-a77d-6bcac6b4e593", "metadata": {"aucs": [0.8699302614840931, 0.8636306943013519, 0.8697424094098507, 0.8749616925625501, 0.8584209117193109, 0.866936174823321, 0.8636897060965062, 0.8628667717012419, 0.8629494370042591, 0.7521307741918958, 0.7361325962054582, 0.7588671780005287, 0.7597672986484165, 0.7727003975840372, 0.7953619846418464, 0.31004161686215526, 0.2742185535216296, 0.7450636444958583, 0.12663691587918602, 0.1832461096440373, 0.11764936331595943, 0.14974241016218726, 0.1524356275691443, 0.13688368505904813, 0.14380615420948872, 0.1572046277772815, 0.15385842348159073, 0.10830326416743197, 0.13617003901100944, 0.11035216884575749, 0.10683607797932493, 0.15186100119298995, 0.12266827639016842, 0.1221485557075126, 0.11678949314925191, 0.14498810816021324, 0.9816107654055461, 0.9741162174935067, 0.981319262547099, 0.9764001922265595, 0.9814480751697008, 0.9768675152597326, 0.9801147706855206, 0.9778864939891863, 0.9742263040562452, 0.7254524088425895, 0.6853206046371645, 0.5887898900163914, 0.6129717506456269, 0.702879681583199, 0.6662976303266703, 0.7724786610985305, 0.6560298658760866, 0.4988304830695268, 0.849021500919181, 0.8488410729734422, 0.2291609351441385, 0.35963453866534334, 0.3783334819024615, 0.3590392772449431, 0.23474097713352626, 0.12682588410165807, 0.39199325145627073, 0.11255069850816357, 0.19556703911199524, 0.18157550719174986, 0.17335777358388627, 0.13132803604911036, 0.31930637190037514, 0.20334914096574486, 0.17319438819626465, 0.1802897235252774, 0.21017499140893914, 9.999999999998899e-05, 0.1317622965888886, 0.2087233400307914, 0.17731272510863605, 0.18740309181483927, 0.22225360298276708, 0.25511194467891196, 0.19018501567344748, 9.999999999998899e-05, 0.05087381857041984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06567626045824071, 9.999999999998899e-05, 0.0010730727354073544, 0.11259134354419953, 0.043693525353867835, 0.08231876245396941, 0.06759178854555359, 0.02421978028035887, 0.021508127090635765, 0.09287010559146147, 0.06110332718081879, 0.06655384187187519, 0.20330984091283433, 0.0662102508592376, 0.047460675089904036, 0.09847164449931534, 0.1654881258722537, 0.15151081038282777, 0.09531842299391902, 0.14940767878273253, 0.07233382110106235, 0.09343681327185427, 0.10122772439639682, 0.19608385624969904, 0.09961278580221444, 0.0910087655738725, 0.006172014671635195, 0.08019512197600287, 0.07914994859835611, 0.08091813395684444, 0.5216243706628267, 0.5343273512376928, 0.498225431117191, 0.5116204357167964, 0.5075898592768732, 0.6083262278435538, 0.5833716035969372, 0.5429835217731909, 0.5155379522193482, 0.07636547319466458, 0.15456755289112822, 0.11566037021645825, 0.18346980960405246, 0.12985012125978923, 0.1519150237962138, 0.14145337446987938, 0.10279235437212286, 0.10498109573702008, 0.33323665361755517, 0.2492145951579089, 0.16438574649337556, 0.24941751292089764, 0.2708951139471567, 0.4578820182781731, 0.16565806299138475, 0.25441172056887296, 0.465244767576652, 0.3012131832650159, 0.4547605374092103, 0.396962591659737, 0.5017327295196856, 0.2359446307682318, 0.37808108164164533, 0.2457793502428619, 0.4912029875134837, 0.23067492324642502, 0.31207647906571345, 0.2923958327881234, 0.2712719425859469, 0.2541843052241366, 0.2434587569191915, 0.3564225436443401, 0.24554239094472097, 0.2320475709328239, 0.08409308524387649, 0.23283384864933232, 0.18580587560093398, 0.21440673467130344, 0.25661222631681824, 0.26135302363371504, 0.23498764647759152, 0.21610464211504454, 0.2468451626617505, 0.2217665724972152, 0.20665086455761983, 0.7915900039776165, 0.2166405917628642, 0.24793926675425682, 0.7958893074186482, 0.19967124013770376, 0.22045179556544914, 0.25089949163050207, 0.21474229805153355, 0.1263173813638332, 0.12610408866599132, 0.15425468964928624, 0.8932401865561873, 0.20008900408455121, 0.9130247902963146, 0.12216461789180699, 0.1699056283175976, 0.15392062693303976, 0.7986123521458024, 0.21167980432332167, 0.5703506308941761, 0.743073030408788, 0.16944972530245195, 0.7516740779088726, 0.10539334603924777, 0.776637187745192, 0.6109678954994232, 0.20981988447446587, 0.19107984103250142, 0.20432736030773757, 0.20328820891634047, 0.21083360451032462, 0.22763794380836633, 0.18865556483823798, 0.20359536056173644, 0.20679488832375637, 0.08841312268132229, 0.10795000984823477, 0.09588704161101491, 0.09228559711846884, 0.10480316067158879, 0.13006477752381962, 0.07585439732877353, 0.10216094668406495, 0.09285414572075001]}, "mutation_prompt": null}
{"id": "33d46c46-36ae-470d-91f9-4589932657fb", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a stochastic cognitive weight component for enhanced individual particle diversity.", "configspace": "", "generation": 31, "fitness": 0.3305079810582466, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "09bae8df-d9f5-4525-a77d-6bcac6b4e593", "metadata": {"aucs": [0.868584831386224, 0.8575523175007644, 0.8603526503852195, 0.8639141098293945, 0.8507570336403655, 0.8590856400257972, 0.8813292001857667, 0.8741792313768768, 0.8615667113836377, 0.7572522450284419, 0.7401748738859723, 0.7111451774351241, 0.729835313942854, 0.7024195597579952, 0.7529746319040367, 0.7325745510682888, 0.7229873426209343, 0.7351622325586249, 0.12836281351961099, 0.15603846599246995, 0.11805445148288185, 0.120808205218502, 0.10914759639087956, 0.16088724067473759, 0.09421594753580176, 0.7402049175116323, 0.1475170630832614, 0.10846624995407983, 0.13610675049780208, 0.14265635506556062, 0.13757734452607817, 0.15171687922088128, 0.12341984889367053, 0.1498327907741146, 0.12763722815916845, 0.1671538365746481, 0.9760097073880227, 0.9653322220842039, 0.9782165846053457, 0.979585174027666, 0.9794625420946214, 0.9809359242243547, 0.9806546624341054, 0.9736379769439617, 0.9816555939684578, 0.798425732373454, 0.7438229361034728, 0.5083061217664365, 0.6700005280318819, 0.6280083954476956, 0.779088901192871, 0.5637153374981201, 0.7325243216394317, 0.670688558173776, 0.22587547084403747, 0.2258422165998073, 0.22735348457929672, 0.27891121700376187, 0.21336287011633548, 0.8752271578088291, 0.23256722304856947, 0.8392886596565798, 0.3851532447863444, 0.19644299203158544, 0.17958476128896805, 0.14155043625542696, 0.22006066025956283, 0.13371375465888813, 0.12456880017975747, 0.13130157897911954, 0.19650330198698585, 0.19567183523343878, 0.2019070134798593, 0.10663003077440913, 0.23094640938337685, 0.225271970300569, 0.18681689448472127, 0.2032888545130479, 0.22825158730382422, 0.3231164668200607, 0.11141052577597221, 9.999999999998899e-05, 0.08104390885301982, 0.04703782574564097, 0.04252730964658147, 9.999999999998899e-05, 0.023233995773354388, 0.028957888338879467, 9.999999999998899e-05, 0.06235678317637172, 0.09798315060627427, 0.08969461960148328, 0.12607853808479486, 0.07096823510492634, 0.013126384073347985, 0.01889062749331749, 0.09184436349027292, 0.09297941994045544, 0.029795529579606184, 0.04589854822468464, 0.08220342154085425, 0.04785050874595198, 0.07271174675747438, 0.06978328064870587, 0.1998742977511221, 0.1778673413348193, 0.07821609605722535, 0.06936133306451608, 0.106948869233784, 0.23417465924541403, 0.17443328655446166, 0.20474829840345932, 0.13126312161145903, 0.006278853485146785, 0.08848686046379806, 0.049105483176921316, 0.08091354442661702, 0.55562325067185, 0.521550117534651, 0.5727258025595456, 0.5267747220591077, 0.5627087341761275, 0.5775950789925228, 0.5609033257999023, 0.5423131561374841, 0.5687017430825554, 0.08427351219813428, 0.17907752583823655, 0.07880194881551872, 0.11134039532228068, 0.11436221035103977, 0.14144145040614187, 0.14224304676592614, 0.11707446260663223, 0.10246507069116018, 0.26230949867764297, 0.27510226556718875, 0.18889086188671478, 0.48618867220654205, 0.4000133415064441, 0.35855568994572984, 0.4700456566811618, 0.23950245237581003, 0.28278416981398946, 0.47556068047355415, 0.322629022184021, 0.31826272508423603, 0.37394841859094374, 0.377589500717891, 0.3418567748087902, 0.23066676821452636, 0.5134849057571672, 0.5118263042074699, 0.26475475321573483, 0.3572841977868192, 0.25343927282334344, 0.20251985780005777, 0.3090477692044782, 0.2830497550987173, 0.27275343025479704, 0.22757336073791412, 0.10217441328397614, 0.24314493584147734, 0.21050969131642872, 0.25335583945906137, 0.25062728657747146, 0.2484517559661562, 0.23847783039236292, 0.2376440803574581, 0.24786792160004834, 0.2394797868294679, 0.186747985583125, 0.7810410180798564, 0.1964359993616006, 0.1934664272395833, 0.19791688578387234, 0.18141056913640774, 0.20289508537756695, 0.23994112187770789, 0.22186597132846342, 0.126044043525682, 0.8845531802988807, 0.1872116433282125, 0.902475662965282, 0.20064740164189154, 0.8907420701203207, 0.12253366635610363, 0.17009034070086415, 0.15333669699730068, 0.6266395579242592, 0.21131917174821668, 0.5139417744375052, 0.29108746629683924, 0.15546436469453784, 0.20997920329604625, 0.1052209765131713, 0.7956268117047376, 0.7750385893225648, 0.20363542391324907, 0.1996281300435021, 0.18420580839570222, 0.20492077117457097, 0.19092073369497853, 0.1880673763913271, 0.21338190194187856, 0.23612095439634417, 0.21907804776435713, 0.0992995599750951, 0.14092729554130057, 0.10354693787176672, 0.09874304284877922, 0.09013136172674074, 0.12042791477294523, 0.09134405987617644, 0.0907010267946935, 0.11034026718498002]}, "mutation_prompt": null}
{"id": "013e6421-6b18-4430-8e29-18380f00f2f5", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a stochastic cognitive weight component for enhanced individual particle diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.868584831386224, 0.8575523175007644, 0.8603526503852195, 0.8639141098293945, 0.8507570336403655, 0.8590856400257972, 0.8813292001857667, 0.8741792313768768, 0.8615667113836377, 0.7572522450284419, 0.7401748738859723, 0.7111451774351241, 0.729835313942854, 0.7024195597579952, 0.7529746319040367, 0.7325745510682888, 0.7229873426209343, 0.7351622325586249, 0.12836281351961099, 0.15603846599246995, 0.11805445148288185, 0.120808205218502, 0.10914759639087956, 0.16088724067473759, 0.09421594753580176, 0.7402049175116323, 0.1475170630832614, 0.10846624995407983, 0.13610675049780208, 0.14265635506556062, 0.13757734452607817, 0.15171687922088128, 0.12341984889367053, 0.1498327907741146, 0.12763722815916845, 0.1671538365746481, 0.9760097073880227, 0.9653322220842039, 0.9782165846053457, 0.979585174027666, 0.9794625420946214, 0.9809359242243547, 0.9806546624341054, 0.9736379769439617, 0.9816555939684578, 0.798425732373454, 0.7438229361034728, 0.5083061217664365, 0.6700005280318819, 0.6280083954476956, 0.779088901192871, 0.5637153374981201, 0.7325243216394317, 0.670688558173776, 0.22587547084403747, 0.2258422165998073, 0.22735348457929672, 0.27891121700376187, 0.21336287011633548, 0.8752271578088291, 0.23256722304856947, 0.8392886596565798, 0.3851532447863444, 0.19644299203158544, 0.17958476128896805, 0.14155043625542696, 0.22006066025956283, 0.13371375465888813, 0.12456880017975747, 0.13130157897911954, 0.19650330198698585, 0.19567183523343878, 0.2019070134798593, 0.10663003077440913, 0.23094640938337685, 0.225271970300569, 0.18681689448472127, 0.2032888545130479, 0.22825158730382422, 0.3231164668200607, 0.11141052577597221, 9.999999999998899e-05, 0.08104390885301982, 0.04703782574564097, 0.04252730964658147, 9.999999999998899e-05, 0.023233995773354388, 0.028957888338879467, 9.999999999998899e-05, 0.06235678317637172, 0.09798315060627427, 0.08969461960148328, 0.12607853808479486, 0.07096823510492634, 0.013126384073347985, 0.01889062749331749, 0.09184436349027292, 0.09297941994045544, 0.029795529579606184, 0.04589854822468464, 0.08220342154085425, 0.04785050874595198, 0.07271174675747438, 0.06978328064870587, 0.1998742977511221, 0.1778673413348193, 0.07821609605722535, 0.06936133306451608, 0.106948869233784, 0.23417465924541403, 0.17443328655446166, 0.20474829840345932, 0.13126312161145903, 0.006278853485146785, 0.08848686046379806, 0.049105483176921316, 0.08091354442661702, 0.55562325067185, 0.521550117534651, 0.5727258025595456, 0.5267747220591077, 0.5627087341761275, 0.5775950789925228, 0.5609033257999023, 0.5423131561374841, 0.5687017430825554, 0.08427351219813428, 0.17907752583823655, 0.07880194881551872, 0.11134039532228068, 0.11436221035103977, 0.14144145040614187, 0.14224304676592614, 0.11707446260663223, 0.10246507069116018, 0.26230949867764297, 0.27510226556718875, 0.18889086188671478, 0.48618867220654205, 0.4000133415064441, 0.35855568994572984, 0.4700456566811618, 0.23950245237581003, 0.28278416981398946, 0.47556068047355415, 0.322629022184021, 0.31826272508423603, 0.37394841859094374, 0.377589500717891, 0.3418567748087902, 0.23066676821452636, 0.5134849057571672, 0.5118263042074699, 0.26475475321573483, 0.3572841977868192, 0.25343927282334344, 0.20251985780005777, 0.3090477692044782, 0.2830497550987173, 0.27275343025479704, 0.22757336073791412, 0.10217441328397614, 0.24314493584147734, 0.21050969131642872, 0.25335583945906137, 0.25062728657747146, 0.2484517559661562, 0.23847783039236292, 0.2376440803574581, 0.24786792160004834, 0.2394797868294679, 0.186747985583125, 0.7810410180798564, 0.1964359993616006, 0.1934664272395833, 0.19791688578387234, 0.18141056913640774, 0.20289508537756695, 0.23994112187770789, 0.22186597132846342, 0.126044043525682, 0.8845531802988807, 0.1872116433282125, 0.902475662965282, 0.20064740164189154, 0.8907420701203207, 0.12253366635610363, 0.17009034070086415, 0.15333669699730068, 0.6266395579242592, 0.21131917174821668, 0.5139417744375052, 0.29108746629683924, 0.15546436469453784, 0.20997920329604625, 0.1052209765131713, 0.7956268117047376, 0.7750385893225648, 0.20363542391324907, 0.1996281300435021, 0.18420580839570222, 0.20492077117457097, 0.19092073369497853, 0.1880673763913271, 0.21338190194187856, 0.23612095439634417, 0.21907804776435713, 0.0992995599750951, 0.14092729554130057, 0.10354693787176672, 0.09874304284877922, 0.09013136172674074, 0.12042791477294523, 0.09134405987617644, 0.0907010267946935, 0.11034026718498002]}, "mutation_prompt": null}
{"id": "4e7fe0d0-7783-43bc-b67f-1d7d87604e05", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a stochastic cognitive weight component for enhanced individual particle diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.868584831386224, 0.8575523175007644, 0.8603526503852195, 0.8639141098293945, 0.8507570336403655, 0.8590856400257972, 0.8813292001857667, 0.8741792313768768, 0.8615667113836377, 0.7572522450284419, 0.7401748738859723, 0.7111451774351241, 0.729835313942854, 0.7024195597579952, 0.7529746319040367, 0.7325745510682888, 0.7229873426209343, 0.7351622325586249, 0.12836281351961099, 0.15603846599246995, 0.11805445148288185, 0.120808205218502, 0.10914759639087956, 0.16088724067473759, 0.09421594753580176, 0.7402049175116323, 0.1475170630832614, 0.10846624995407983, 0.13610675049780208, 0.14265635506556062, 0.13757734452607817, 0.15171687922088128, 0.12341984889367053, 0.1498327907741146, 0.12763722815916845, 0.1671538365746481, 0.9760097073880227, 0.9653322220842039, 0.9782165846053457, 0.979585174027666, 0.9794625420946214, 0.9809359242243547, 0.9806546624341054, 0.9736379769439617, 0.9816555939684578, 0.798425732373454, 0.7438229361034728, 0.5083061217664365, 0.6700005280318819, 0.6280083954476956, 0.779088901192871, 0.5637153374981201, 0.7325243216394317, 0.670688558173776, 0.22587547084403747, 0.2258422165998073, 0.22735348457929672, 0.27891121700376187, 0.21336287011633548, 0.8752271578088291, 0.23256722304856947, 0.8392886596565798, 0.3851532447863444, 0.19644299203158544, 0.17958476128896805, 0.14155043625542696, 0.22006066025956283, 0.13371375465888813, 0.12456880017975747, 0.13130157897911954, 0.19650330198698585, 0.19567183523343878, 0.2019070134798593, 0.10663003077440913, 0.23094640938337685, 0.225271970300569, 0.18681689448472127, 0.2032888545130479, 0.22825158730382422, 0.3231164668200607, 0.11141052577597221, 9.999999999998899e-05, 0.08104390885301982, 0.04703782574564097, 0.04252730964658147, 9.999999999998899e-05, 0.023233995773354388, 0.028957888338879467, 9.999999999998899e-05, 0.06235678317637172, 0.09798315060627427, 0.08969461960148328, 0.12607853808479486, 0.07096823510492634, 0.013126384073347985, 0.01889062749331749, 0.09184436349027292, 0.09297941994045544, 0.029795529579606184, 0.04589854822468464, 0.08220342154085425, 0.04785050874595198, 0.07271174675747438, 0.06978328064870587, 0.1998742977511221, 0.1778673413348193, 0.07821609605722535, 0.06936133306451608, 0.106948869233784, 0.23417465924541403, 0.17443328655446166, 0.20474829840345932, 0.13126312161145903, 0.006278853485146785, 0.08848686046379806, 0.049105483176921316, 0.08091354442661702, 0.55562325067185, 0.521550117534651, 0.5727258025595456, 0.5267747220591077, 0.5627087341761275, 0.5775950789925228, 0.5609033257999023, 0.5423131561374841, 0.5687017430825554, 0.08427351219813428, 0.17907752583823655, 0.07880194881551872, 0.11134039532228068, 0.11436221035103977, 0.14144145040614187, 0.14224304676592614, 0.11707446260663223, 0.10246507069116018, 0.26230949867764297, 0.27510226556718875, 0.18889086188671478, 0.48618867220654205, 0.4000133415064441, 0.35855568994572984, 0.4700456566811618, 0.23950245237581003, 0.28278416981398946, 0.47556068047355415, 0.322629022184021, 0.31826272508423603, 0.37394841859094374, 0.377589500717891, 0.3418567748087902, 0.23066676821452636, 0.5134849057571672, 0.5118263042074699, 0.26475475321573483, 0.3572841977868192, 0.25343927282334344, 0.20251985780005777, 0.3090477692044782, 0.2830497550987173, 0.27275343025479704, 0.22757336073791412, 0.10217441328397614, 0.24314493584147734, 0.21050969131642872, 0.25335583945906137, 0.25062728657747146, 0.2484517559661562, 0.23847783039236292, 0.2376440803574581, 0.24786792160004834, 0.2394797868294679, 0.186747985583125, 0.7810410180798564, 0.1964359993616006, 0.1934664272395833, 0.19791688578387234, 0.18141056913640774, 0.20289508537756695, 0.23994112187770789, 0.22186597132846342, 0.126044043525682, 0.8845531802988807, 0.1872116433282125, 0.902475662965282, 0.20064740164189154, 0.8907420701203207, 0.12253366635610363, 0.17009034070086415, 0.15333669699730068, 0.6266395579242592, 0.21131917174821668, 0.5139417744375052, 0.29108746629683924, 0.15546436469453784, 0.20997920329604625, 0.1052209765131713, 0.7956268117047376, 0.7750385893225648, 0.20363542391324907, 0.1996281300435021, 0.18420580839570222, 0.20492077117457097, 0.19092073369497853, 0.1880673763913271, 0.21338190194187856, 0.23612095439634417, 0.21907804776435713, 0.0992995599750951, 0.14092729554130057, 0.10354693787176672, 0.09874304284877922, 0.09013136172674074, 0.12042791477294523, 0.09134405987617644, 0.0907010267946935, 0.11034026718498002]}, "mutation_prompt": null}
{"id": "8cccc039-8ecb-420a-9604-4a4c0da761b0", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a stochastic cognitive weight component for enhanced individual particle diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.868584831386224, 0.8575523175007644, 0.8603526503852195, 0.8639141098293945, 0.8507570336403655, 0.8590856400257972, 0.8813292001857667, 0.8741792313768768, 0.8615667113836377, 0.7572522450284419, 0.7401748738859723, 0.7111451774351241, 0.729835313942854, 0.7024195597579952, 0.7529746319040367, 0.7325745510682888, 0.7229873426209343, 0.7351622325586249, 0.12836281351961099, 0.15603846599246995, 0.11805445148288185, 0.120808205218502, 0.10914759639087956, 0.16088724067473759, 0.09421594753580176, 0.7402049175116323, 0.1475170630832614, 0.10846624995407983, 0.13610675049780208, 0.14265635506556062, 0.13757734452607817, 0.15171687922088128, 0.12341984889367053, 0.1498327907741146, 0.12763722815916845, 0.1671538365746481, 0.9760097073880227, 0.9653322220842039, 0.9782165846053457, 0.979585174027666, 0.9794625420946214, 0.9809359242243547, 0.9806546624341054, 0.9736379769439617, 0.9816555939684578, 0.798425732373454, 0.7438229361034728, 0.5083061217664365, 0.6700005280318819, 0.6280083954476956, 0.779088901192871, 0.5637153374981201, 0.7325243216394317, 0.670688558173776, 0.22587547084403747, 0.2258422165998073, 0.22735348457929672, 0.27891121700376187, 0.21336287011633548, 0.8752271578088291, 0.23256722304856947, 0.8392886596565798, 0.3851532447863444, 0.19644299203158544, 0.17958476128896805, 0.14155043625542696, 0.22006066025956283, 0.13371375465888813, 0.12456880017975747, 0.13130157897911954, 0.19650330198698585, 0.19567183523343878, 0.2019070134798593, 0.10663003077440913, 0.23094640938337685, 0.225271970300569, 0.18681689448472127, 0.2032888545130479, 0.22825158730382422, 0.3231164668200607, 0.11141052577597221, 9.999999999998899e-05, 0.08104390885301982, 0.04703782574564097, 0.04252730964658147, 9.999999999998899e-05, 0.023233995773354388, 0.028957888338879467, 9.999999999998899e-05, 0.06235678317637172, 0.09798315060627427, 0.08969461960148328, 0.12607853808479486, 0.07096823510492634, 0.013126384073347985, 0.01889062749331749, 0.09184436349027292, 0.09297941994045544, 0.029795529579606184, 0.04589854822468464, 0.08220342154085425, 0.04785050874595198, 0.07271174675747438, 0.06978328064870587, 0.1998742977511221, 0.1778673413348193, 0.07821609605722535, 0.06936133306451608, 0.106948869233784, 0.23417465924541403, 0.17443328655446166, 0.20474829840345932, 0.13126312161145903, 0.006278853485146785, 0.08848686046379806, 0.049105483176921316, 0.08091354442661702, 0.55562325067185, 0.521550117534651, 0.5727258025595456, 0.5267747220591077, 0.5627087341761275, 0.5775950789925228, 0.5609033257999023, 0.5423131561374841, 0.5687017430825554, 0.08427351219813428, 0.17907752583823655, 0.07880194881551872, 0.11134039532228068, 0.11436221035103977, 0.14144145040614187, 0.14224304676592614, 0.11707446260663223, 0.10246507069116018, 0.26230949867764297, 0.27510226556718875, 0.18889086188671478, 0.48618867220654205, 0.4000133415064441, 0.35855568994572984, 0.4700456566811618, 0.23950245237581003, 0.28278416981398946, 0.47556068047355415, 0.322629022184021, 0.31826272508423603, 0.37394841859094374, 0.377589500717891, 0.3418567748087902, 0.23066676821452636, 0.5134849057571672, 0.5118263042074699, 0.26475475321573483, 0.3572841977868192, 0.25343927282334344, 0.20251985780005777, 0.3090477692044782, 0.2830497550987173, 0.27275343025479704, 0.22757336073791412, 0.10217441328397614, 0.24314493584147734, 0.21050969131642872, 0.25335583945906137, 0.25062728657747146, 0.2484517559661562, 0.23847783039236292, 0.2376440803574581, 0.24786792160004834, 0.2394797868294679, 0.186747985583125, 0.7810410180798564, 0.1964359993616006, 0.1934664272395833, 0.19791688578387234, 0.18141056913640774, 0.20289508537756695, 0.23994112187770789, 0.22186597132846342, 0.126044043525682, 0.8845531802988807, 0.1872116433282125, 0.902475662965282, 0.20064740164189154, 0.8907420701203207, 0.12253366635610363, 0.17009034070086415, 0.15333669699730068, 0.6266395579242592, 0.21131917174821668, 0.5139417744375052, 0.29108746629683924, 0.15546436469453784, 0.20997920329604625, 0.1052209765131713, 0.7956268117047376, 0.7750385893225648, 0.20363542391324907, 0.1996281300435021, 0.18420580839570222, 0.20492077117457097, 0.19092073369497853, 0.1880673763913271, 0.21338190194187856, 0.23612095439634417, 0.21907804776435713, 0.0992995599750951, 0.14092729554130057, 0.10354693787176672, 0.09874304284877922, 0.09013136172674074, 0.12042791477294523, 0.09134405987617644, 0.0907010267946935, 0.11034026718498002]}, "mutation_prompt": null}
{"id": "29dc0c84-cc32-4185-90a2-97d81b7e5804", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                adaptive_cognitive_weight = self.cognitive_weight * (0.5 + 0.5 * np.random.rand())  # Adaptive cognitive weight\n                adaptive_social_weight = self.social_weight * (0.5 + 0.5 * np.random.rand())  # Adaptive social weight\n                cognitive_component = adaptive_cognitive_weight * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = adaptive_social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive cognitive and social weights for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.3018750409708999, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.8780338608070783, 0.8814026736515304, 0.8615528121239435, 0.8818115469843576, 0.883752731289891, 0.890498444749759, 0.8797848793100783, 0.8629977804941256, 0.8681648245680891, 0.7608342137927943, 0.40627210076408515, 0.3383674431078332, 0.7750760908001081, 0.7613369682729003, 0.7697726204147876, 0.7875988602814914, 0.6133013134125849, 0.7571166065651751, 0.1144026537312064, 0.12149398137158951, 0.18104945690818208, 0.12046974756444229, 0.7140576381250298, 0.1096202081548201, 0.15080019754788576, 0.13949029933122414, 0.18003188714724183, 0.11276947908636792, 0.1425000975696714, 0.07685721643067134, 0.12157843464633733, 0.12896069710225821, 0.11474732708061186, 0.09324071186328398, 0.18100439991127004, 0.10413542237563633, 0.9710179391312924, 0.967507202158461, 0.9774994233280582, 0.9710095834734254, 0.9771622458435567, 0.9606425080545329, 0.98320475336564, 0.9757887753014952, 0.9796291166422259, 0.5064326901404559, 0.45849506673032026, 0.5407827506350903, 0.4507740293852316, 0.49912124952746184, 0.4961676607270572, 0.6834850484848336, 0.4841480982320995, 0.6387531202743045, 0.2262875272038949, 0.3860544338746035, 0.3830903741867473, 0.21842066325924558, 0.21296233699036216, 0.27744238834186385, 0.22010167967546523, 0.1254169071783252, 0.23406676989607555, 0.22229509987742535, 0.17514383078610496, 0.17932280891942787, 0.12889333432701822, 0.12874583850236854, 0.16023609141833695, 0.16539208621539148, 0.18064560019735654, 0.17222015554631476, 0.18306299055711173, 9.999999999998899e-05, 0.22163347940063327, 0.19359095866860854, 0.17453735444118634, 0.1935907732598684, 0.20095741197019845, 0.1252380613403722, 0.22427962918664202, 0.056473933486961836, 0.06904272137184331, 0.006064457297579207, 0.047136230637020216, 0.07035326381662232, 0.002627903302796719, 0.06691177891075639, 9.999999999998899e-05, 0.00018038484286753143, 0.09499485283443332, 0.047008838592432434, 0.08881980070987883, 0.0345550096155659, 0.05432743875641555, 0.026754771738772387, 0.10536650100364586, 0.08782613171539666, 0.0527725043449071, 0.048195351804493525, 0.08661227413938455, 0.04823736912273913, 0.23671354548982904, 0.12375506226197519, 0.0746441637804457, 0.10355220438056745, 0.12063992984763627, 0.08694334487547162, 0.07293431853499299, 0.08232995831333723, 0.21340960309918366, 0.006371550501722445, 0.006382818422560055, 0.006394006092294902, 0.08399353843764512, 0.056872209234688165, 0.09156467910367883, 0.5041562154508228, 0.49343150194133667, 0.5698522283844443, 0.5338691629120089, 0.5249621414344745, 0.5178613753931871, 0.5700452879998956, 0.5557865261622453, 0.5449836544713975, 0.08707955247917032, 0.07403617950167185, 0.1229215462273382, 0.11102831230133092, 0.09912650183707228, 0.15806325834523538, 0.16071505488671556, 0.09919547029666886, 0.10612748602825417, 0.2043768518067881, 0.26039806738275373, 0.18121497258553787, 0.266007503307799, 0.4597001575855697, 0.20488033724916754, 0.26896344206456, 0.3182712879591051, 0.2471441876928555, 0.28254581421941216, 0.4338070048216176, 0.3168782178350191, 0.3360352764476594, 0.5176100239497248, 0.37152321452307213, 0.2430898965998316, 0.43862231687870656, 0.23663178035966426, 0.26626119515068714, 0.2419610654021931, 0.3357181837842321, 0.3157796604081783, 0.3181214999610785, 0.2732586868963994, 0.18730571607470403, 0.2525519693060104, 0.12093277594011564, 0.20609817272490638, 0.20067725624793942, 0.22418413972987117, 0.2560004128368252, 0.25107606656824955, 0.222050017437047, 0.23956627038992961, 0.22262972192782648, 0.23839811213687823, 0.20708111353538416, 0.24201448552228721, 0.2227528033047893, 0.8492001793043258, 0.21262396373753112, 0.2245474383172421, 0.2108392552395979, 0.22657794659310482, 0.18772970678469625, 0.126323635411428, 0.12589669219204758, 0.15412082487617718, 0.9091653916183648, 0.20107818969519853, 0.20035744190321192, 0.12281777640682812, 0.1702953237802992, 0.16284407331647366, 0.5036567445933604, 0.20711884723295504, 0.4708229889353215, 0.2118651064428294, 0.42382312195014527, 0.6865201459059243, 0.10515035333816836, 0.6026374944584659, 0.6757624197195506, 0.19882801417809082, 0.22634228363699327, 0.1988109445283539, 0.21286368117675358, 0.23039890794538032, 0.2254856041711547, 0.1974900102268945, 0.21230863043371717, 0.1919797572164581, 0.1115753082691463, 0.08194662225748872, 0.08350825999797618, 0.08635968300601593, 0.08984720260109758, 0.0794609957859358, 0.08418020118697589, 0.10334303481327045, 0.09204558750638903]}, "mutation_prompt": null}
{"id": "388feef9-0bec-4dfe-ab61-37aee0a9941e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                dynamic_cognitive_weight = self.cognitive_weight * (1 - evaluations / self.budget)  # Introduced time-varying cognitive weight\n                cognitive_component = (dynamic_cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Adjusted cognitive weight\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a time-varying cognitive weight for enhanced particle exploration-exploitation balance.", "configspace": "", "generation": 36, "fitness": 0.320174023928793, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.8695021306035754, 0.8617384708050714, 0.8728474628050616, 0.8518472493392282, 0.8545046153967363, 0.867769893480477, 0.8750893201668772, 0.8654276751924104, 0.8697990251740259, 0.4681618316598537, 0.762801186100648, 0.7540926891921887, 0.725892761224822, 0.4438123443934895, 0.7519716377608532, 0.7595269044357611, 0.7518013472316747, 0.7985468484647816, 0.12083329889075012, 0.15004573820964984, 0.14983539960131798, 0.13034534773244155, 0.091447175228895, 0.1896787123322723, 0.18256490190349284, 0.15452978086328972, 0.12439606314798535, 0.14118482410505007, 0.10972809724833077, 0.1300397334300435, 0.08985771670458997, 0.13875475384159364, 0.1420167698052226, 0.0996463301419881, 0.15706336237449392, 0.10112489914965317, 0.9760050049691416, 0.9653322220842039, 0.9782060934294234, 0.979585174027666, 0.9794625327844014, 0.9809359242243547, 0.9806546624341054, 0.973637460783599, 0.9816555933460469, 0.6926252005635747, 0.6295278372766203, 0.6495302220576782, 0.5838503495226451, 0.6588814136047927, 0.5975451755839938, 0.5950674361519295, 0.7335205967948494, 0.08846302691629027, 0.8708130156221903, 0.22701780588257292, 0.22294110805768452, 0.3319461865990633, 0.21399650062024134, 0.38037926256060206, 0.22917209090399848, 0.23308825456637916, 0.8409400151627275, 0.2513029777451954, 0.19114457024005338, 0.21311187840889256, 0.19500230081234804, 0.13285301026366692, 0.19413713863345505, 0.18389214819794064, 0.17399321466718154, 0.29845819024952414, 0.22595384013893383, 9.999999999998899e-05, 0.22660423811564967, 0.19894885408219298, 0.19348304792029436, 0.21071669068861998, 0.19314216631384762, 0.2425995571401992, 0.10963890313476932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04498553929972027, 0.07122352932173359, 0.043571410262197796, 0.014867600035221029, 9.999999999998899e-05, 0.05776822388134917, 0.12554544178067095, 0.10922516766375245, 0.13502912656128407, 0.03861822332027054, 0.016529519667261572, 0.004544887137133857, 0.09773922206998109, 0.06951127996321738, 0.05348087977035465, 0.31228899240716934, 0.07576131688747678, 0.04722570465362752, 0.08105525288724569, 0.07225740899633037, 0.17785308075755324, 0.17375135375872686, 0.11072209668566757, 0.07025209546817801, 0.1722211977002981, 0.15900377979918323, 0.18677303823412716, 0.2070436123525765, 0.19780475172567935, 0.006400866445959386, 0.10028462540673333, 0.049647204862010574, 0.08243078400219095, 0.5666954528578332, 0.5183725400916801, 0.5587610645968349, 0.5774977252125061, 0.514328847645764, 0.5144536305993783, 0.5387383873552692, 0.6045601841037714, 0.5357736447642265, 0.062064730362728415, 0.09169626997759428, 0.11731207035282765, 0.10806158970776636, 0.09574088131688951, 0.18535475749992647, 0.16179440889468477, 0.17566101957520064, 0.0965761874922153, 0.22295079485714708, 0.24851555477648923, 0.42606199232654574, 0.365158108518721, 0.2775785557239512, 0.2821909405377888, 0.2743485570738795, 0.4287615931998331, 0.22352468159697436, 0.42859294425435435, 0.4762099706141577, 0.32417783379888165, 0.24549654283726297, 0.21308697197522797, 0.48859463366206024, 0.211797116012442, 0.5108850542778014, 0.43081618389119447, 0.24111101387645584, 0.27323832180477214, 0.24712580293856312, 0.20703115192492239, 0.32369281002570904, 0.2944830172583862, 0.2503011589711802, 0.2805436341969718, 0.11238102493665958, 0.24947712386276566, 0.20331900059227714, 0.2740638380697422, 0.2921107786478514, 0.19166348421478085, 0.2422669446749114, 0.22699697641205652, 0.2088556251896614, 0.3209822176946848, 0.1956879498187465, 0.2148978715938331, 0.17832154973112846, 0.22207086204153736, 0.2558001093387635, 0.2100549175073294, 0.21071838823896882, 0.20979430301660973, 0.22388469588739612, 0.12616076864449333, 0.8916244925669883, 0.1879248093661866, 0.8798600237562693, 0.2002593591189925, 0.9004132242076208, 0.12265480794892358, 0.17011141396255347, 0.15358630780251226, 0.6026775847524395, 0.21166009189506896, 0.4252579159158508, 0.5586025010658814, 0.1554950783831338, 0.21204472364204463, 0.10518627536765401, 0.7941175220956188, 0.6587119165423903, 0.20329260415952743, 0.18122556441933624, 0.19580315213747412, 0.1863125668635527, 0.1906567575285789, 0.21272926259828817, 0.21501157596225962, 0.21352560155983646, 0.21175957601499118, 0.09677171059459122, 0.12982881646310362, 0.09378961148124632, 0.10199285890191545, 0.09234712259141997, 0.14087326613547224, 0.10973156749681967, 0.08981115576926035, 0.0888051809114968]}, "mutation_prompt": null}
{"id": "894fff11-b234-4885-86ba-35dc651cef38", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                dynamic_cognitive_weight = self.cognitive_weight * (1 - evaluations / self.budget)  # Dynamic adjustment\n                cognitive_component = (dynamic_cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Adjusted weight\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a dynamically adjusted cognitive weight based on the evaluation count to enhance exploration and exploitation balance.", "configspace": "", "generation": 37, "fitness": 0.320174023928793, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.8695021306035754, 0.8617384708050714, 0.8728474628050616, 0.8518472493392282, 0.8545046153967363, 0.867769893480477, 0.8750893201668772, 0.8654276751924104, 0.8697990251740259, 0.4681618316598537, 0.762801186100648, 0.7540926891921887, 0.725892761224822, 0.4438123443934895, 0.7519716377608532, 0.7595269044357611, 0.7518013472316747, 0.7985468484647816, 0.12083329889075012, 0.15004573820964984, 0.14983539960131798, 0.13034534773244155, 0.091447175228895, 0.1896787123322723, 0.18256490190349284, 0.15452978086328972, 0.12439606314798535, 0.14118482410505007, 0.10972809724833077, 0.1300397334300435, 0.08985771670458997, 0.13875475384159364, 0.1420167698052226, 0.0996463301419881, 0.15706336237449392, 0.10112489914965317, 0.9760050049691416, 0.9653322220842039, 0.9782060934294234, 0.979585174027666, 0.9794625327844014, 0.9809359242243547, 0.9806546624341054, 0.973637460783599, 0.9816555933460469, 0.6926252005635747, 0.6295278372766203, 0.6495302220576782, 0.5838503495226451, 0.6588814136047927, 0.5975451755839938, 0.5950674361519295, 0.7335205967948494, 0.08846302691629027, 0.8708130156221903, 0.22701780588257292, 0.22294110805768452, 0.3319461865990633, 0.21399650062024134, 0.38037926256060206, 0.22917209090399848, 0.23308825456637916, 0.8409400151627275, 0.2513029777451954, 0.19114457024005338, 0.21311187840889256, 0.19500230081234804, 0.13285301026366692, 0.19413713863345505, 0.18389214819794064, 0.17399321466718154, 0.29845819024952414, 0.22595384013893383, 9.999999999998899e-05, 0.22660423811564967, 0.19894885408219298, 0.19348304792029436, 0.21071669068861998, 0.19314216631384762, 0.2425995571401992, 0.10963890313476932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04498553929972027, 0.07122352932173359, 0.043571410262197796, 0.014867600035221029, 9.999999999998899e-05, 0.05776822388134917, 0.12554544178067095, 0.10922516766375245, 0.13502912656128407, 0.03861822332027054, 0.016529519667261572, 0.004544887137133857, 0.09773922206998109, 0.06951127996321738, 0.05348087977035465, 0.31228899240716934, 0.07576131688747678, 0.04722570465362752, 0.08105525288724569, 0.07225740899633037, 0.17785308075755324, 0.17375135375872686, 0.11072209668566757, 0.07025209546817801, 0.1722211977002981, 0.15900377979918323, 0.18677303823412716, 0.2070436123525765, 0.19780475172567935, 0.006400866445959386, 0.10028462540673333, 0.049647204862010574, 0.08243078400219095, 0.5666954528578332, 0.5183725400916801, 0.5587610645968349, 0.5774977252125061, 0.514328847645764, 0.5144536305993783, 0.5387383873552692, 0.6045601841037714, 0.5357736447642265, 0.062064730362728415, 0.09169626997759428, 0.11731207035282765, 0.10806158970776636, 0.09574088131688951, 0.18535475749992647, 0.16179440889468477, 0.17566101957520064, 0.0965761874922153, 0.22295079485714708, 0.24851555477648923, 0.42606199232654574, 0.365158108518721, 0.2775785557239512, 0.2821909405377888, 0.2743485570738795, 0.4287615931998331, 0.22352468159697436, 0.42859294425435435, 0.4762099706141577, 0.32417783379888165, 0.24549654283726297, 0.21308697197522797, 0.48859463366206024, 0.211797116012442, 0.5108850542778014, 0.43081618389119447, 0.24111101387645584, 0.27323832180477214, 0.24712580293856312, 0.20703115192492239, 0.32369281002570904, 0.2944830172583862, 0.2503011589711802, 0.2805436341969718, 0.11238102493665958, 0.24947712386276566, 0.20331900059227714, 0.2740638380697422, 0.2921107786478514, 0.19166348421478085, 0.2422669446749114, 0.22699697641205652, 0.2088556251896614, 0.3209822176946848, 0.1956879498187465, 0.2148978715938331, 0.17832154973112846, 0.22207086204153736, 0.2558001093387635, 0.2100549175073294, 0.21071838823896882, 0.20979430301660973, 0.22388469588739612, 0.12616076864449333, 0.8916244925669883, 0.1879248093661866, 0.8798600237562693, 0.2002593591189925, 0.9004132242076208, 0.12265480794892358, 0.17011141396255347, 0.15358630780251226, 0.6026775847524395, 0.21166009189506896, 0.4252579159158508, 0.5586025010658814, 0.1554950783831338, 0.21204472364204463, 0.10518627536765401, 0.7941175220956188, 0.6587119165423903, 0.20329260415952743, 0.18122556441933624, 0.19580315213747412, 0.1863125668635527, 0.1906567575285789, 0.21272926259828817, 0.21501157596225962, 0.21352560155983646, 0.21175957601499118, 0.09677171059459122, 0.12982881646310362, 0.09378961148124632, 0.10199285890191545, 0.09234712259141997, 0.14087326613547224, 0.10973156749681967, 0.08981115576926035, 0.0888051809114968]}, "mutation_prompt": null}
{"id": "8c9f62c0-63d6-4503-b7b2-c6fdbb0c2177", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a stochastic cognitive weight component for enhanced individual particle diversity.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.868584831386224, 0.8575523175007644, 0.8603526503852195, 0.8639141098293945, 0.8507570336403655, 0.8590856400257972, 0.8813292001857667, 0.8741792313768768, 0.8615667113836377, 0.7572522450284419, 0.7401748738859723, 0.7111451774351241, 0.729835313942854, 0.7024195597579952, 0.7529746319040367, 0.7325745510682888, 0.7229873426209343, 0.7351622325586249, 0.12836281351961099, 0.15603846599246995, 0.11805445148288185, 0.120808205218502, 0.10914759639087956, 0.16088724067473759, 0.09421594753580176, 0.7402049175116323, 0.1475170630832614, 0.10846624995407983, 0.13610675049780208, 0.14265635506556062, 0.13757734452607817, 0.15171687922088128, 0.12341984889367053, 0.1498327907741146, 0.12763722815916845, 0.1671538365746481, 0.9760097073880227, 0.9653322220842039, 0.9782165846053457, 0.979585174027666, 0.9794625420946214, 0.9809359242243547, 0.9806546624341054, 0.9736379769439617, 0.9816555939684578, 0.798425732373454, 0.7438229361034728, 0.5083061217664365, 0.6700005280318819, 0.6280083954476956, 0.779088901192871, 0.5637153374981201, 0.7325243216394317, 0.670688558173776, 0.22587547084403747, 0.2258422165998073, 0.22735348457929672, 0.27891121700376187, 0.21336287011633548, 0.8752271578088291, 0.23256722304856947, 0.8392886596565798, 0.3851532447863444, 0.19644299203158544, 0.17958476128896805, 0.14155043625542696, 0.22006066025956283, 0.13371375465888813, 0.12456880017975747, 0.13130157897911954, 0.19650330198698585, 0.19567183523343878, 0.2019070134798593, 0.10663003077440913, 0.23094640938337685, 0.225271970300569, 0.18681689448472127, 0.2032888545130479, 0.22825158730382422, 0.3231164668200607, 0.11141052577597221, 9.999999999998899e-05, 0.08104390885301982, 0.04703782574564097, 0.04252730964658147, 9.999999999998899e-05, 0.023233995773354388, 0.028957888338879467, 9.999999999998899e-05, 0.06235678317637172, 0.09798315060627427, 0.08969461960148328, 0.12607853808479486, 0.07096823510492634, 0.013126384073347985, 0.01889062749331749, 0.09184436349027292, 0.09297941994045544, 0.029795529579606184, 0.04589854822468464, 0.08220342154085425, 0.04785050874595198, 0.07271174675747438, 0.06978328064870587, 0.1998742977511221, 0.1778673413348193, 0.07821609605722535, 0.06936133306451608, 0.106948869233784, 0.23417465924541403, 0.17443328655446166, 0.20474829840345932, 0.13126312161145903, 0.006278853485146785, 0.08848686046379806, 0.049105483176921316, 0.08091354442661702, 0.55562325067185, 0.521550117534651, 0.5727258025595456, 0.5267747220591077, 0.5627087341761275, 0.5775950789925228, 0.5609033257999023, 0.5423131561374841, 0.5687017430825554, 0.08427351219813428, 0.17907752583823655, 0.07880194881551872, 0.11134039532228068, 0.11436221035103977, 0.14144145040614187, 0.14224304676592614, 0.11707446260663223, 0.10246507069116018, 0.26230949867764297, 0.27510226556718875, 0.18889086188671478, 0.48618867220654205, 0.4000133415064441, 0.35855568994572984, 0.4700456566811618, 0.23950245237581003, 0.28278416981398946, 0.47556068047355415, 0.322629022184021, 0.31826272508423603, 0.37394841859094374, 0.377589500717891, 0.3418567748087902, 0.23066676821452636, 0.5134849057571672, 0.5118263042074699, 0.26475475321573483, 0.3572841977868192, 0.25343927282334344, 0.20251985780005777, 0.3090477692044782, 0.2830497550987173, 0.27275343025479704, 0.22757336073791412, 0.10217441328397614, 0.24314493584147734, 0.21050969131642872, 0.25335583945906137, 0.25062728657747146, 0.2484517559661562, 0.23847783039236292, 0.2376440803574581, 0.24786792160004834, 0.2394797868294679, 0.186747985583125, 0.7810410180798564, 0.1964359993616006, 0.1934664272395833, 0.19791688578387234, 0.18141056913640774, 0.20289508537756695, 0.23994112187770789, 0.22186597132846342, 0.126044043525682, 0.8845531802988807, 0.1872116433282125, 0.902475662965282, 0.20064740164189154, 0.8907420701203207, 0.12253366635610363, 0.17009034070086415, 0.15333669699730068, 0.6266395579242592, 0.21131917174821668, 0.5139417744375052, 0.29108746629683924, 0.15546436469453784, 0.20997920329604625, 0.1052209765131713, 0.7956268117047376, 0.7750385893225648, 0.20363542391324907, 0.1996281300435021, 0.18420580839570222, 0.20492077117457097, 0.19092073369497853, 0.1880673763913271, 0.21338190194187856, 0.23612095439634417, 0.21907804776435713, 0.0992995599750951, 0.14092729554130057, 0.10354693787176672, 0.09874304284877922, 0.09013136172674074, 0.12042791477294523, 0.09134405987617644, 0.0907010267946935, 0.11034026718498002]}, "mutation_prompt": null}
{"id": "46cd918f-23ae-43e1-a9b5-d320b8010699", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                progress = evaluations / self.budget  # Calculate progress\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight * (1 - progress)) * r2 * (self.gbest_position - self.positions[i])  # Dynamic social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce dynamic cognitive and social weights based on the iteration progress for enhanced exploration-exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.3084800836607385, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.8756807379669783, 0.8684370068817681, 0.8668281852620456, 0.8729462817375706, 0.871238348140362, 0.8733551145373856, 0.8686528992404249, 0.8628661896102484, 0.8775314553706992, 0.7770579117262952, 0.7464633229990669, 0.7915656657624064, 0.7752883748905541, 0.20831827484578758, 0.45722650222859507, 0.7363498688208293, 0.6040001035641756, 0.7794215407448964, 0.15601744391946526, 0.17858208861744984, 0.17908248742607358, 0.1181798645583465, 0.08397123362360781, 0.1527244239809683, 0.18129243477887447, 0.1810032692540171, 0.15098710711166274, 0.12742409544562927, 0.1402900366243619, 0.10952815091663759, 0.12006839258796242, 0.11150149402526044, 0.11245650689190256, 0.13374545807414195, 0.11459818102422503, 0.15517347909406765, 0.9766901057840308, 0.9654060742540052, 0.9781903919031621, 0.9795803678013018, 0.9761192579226223, 0.9809315121907463, 0.9804315084514902, 0.9736395386965744, 0.9816566001093392, 0.5777292491036692, 0.5005252791396944, 0.40300414066016876, 0.5780118033066612, 0.6483367080324324, 0.6473408934336439, 0.4718935669495502, 0.6455035205551996, 0.6327478980733056, 0.22792102946765758, 0.22628038286203978, 0.22779481885291009, 0.8795739215753423, 0.19411914658986817, 0.3276970477100667, 0.1384815012180357, 0.17861754304791044, 0.22340892506620047, 0.21983529846036398, 0.18109714998776127, 0.16524941101749724, 0.19829895949562493, 0.13379485563920512, 0.12556727765750442, 0.16350277108339195, 0.17814500239620934, 0.22331271441459555, 0.24139777277904462, 9.999999999998899e-05, 0.21373980938306025, 0.17354505342241588, 0.13457967581742414, 0.20447738174153796, 0.19882162523408242, 0.2849672616985318, 0.1118965056461706, 9.999999999998899e-05, 0.0044059697131170195, 9.999999999998899e-05, 0.041574683543894375, 0.04455352284601233, 0.022804585715935355, 0.003370480008454413, 9.999999999998899e-05, 0.027911367244817353, 0.12300030042628574, 0.11655483129185906, 0.07712754674861955, 0.036912186447929374, 0.005175026084995649, 0.021865468575476332, 0.10304023693590403, 0.08685092525085969, 0.04311274180330871, 0.048214160557005226, 0.06278251331116169, 0.047018472874787776, 0.07437237236172678, 0.0744322749603532, 0.1478892479159496, 0.22816982713839884, 0.12347628353295237, 0.07075980463808773, 0.08011527623966153, 0.2063950241402589, 0.12516894326784167, 0.255170436983958, 0.14492557956322305, 0.006295641493055504, 0.11314518578973165, 0.04922096488951644, 0.08302556734669164, 0.5546787777294064, 0.5843975844576934, 0.558432565729425, 0.5136215590305289, 0.5921814652964182, 0.5289175119917475, 0.5073302214402405, 0.5680439509245816, 0.5260379948954833, 0.07476088152231519, 0.13861005557584705, 0.08851628185173577, 0.11079674833632469, 0.11609854765139394, 0.15330354155548376, 0.15506038662623978, 0.14294326533863766, 0.11252069558988353, 0.2357989912720675, 0.35905719424405025, 0.21965305126337498, 0.3358908916123049, 0.266654086724324, 0.26378246079210177, 0.2368929388622536, 0.32700590035379873, 0.3262435863224631, 0.39557501297039255, 0.3065758086719874, 0.35668305304756154, 0.39546074122319075, 0.2557462747713777, 0.339750895730878, 0.23870568847422846, 0.33583798349937766, 0.2642745371473124, 0.2213170569690529, 0.2612737137514106, 0.2133339398927725, 0.18820354188491029, 0.38932473897053943, 0.32851521014282303, 0.24595738907708187, 0.22647844554852825, 0.10205267092429571, 0.21805752358931974, 0.22639847810560554, 0.24771947258830773, 0.26429828770684693, 0.23233545039781311, 0.25153055152511283, 0.22650315018627065, 0.22999484979363827, 0.2202406876266355, 0.20533456990599486, 0.8216944884672216, 0.1897173733435582, 0.18707638662477122, 0.2071450271252876, 0.19067693737784852, 0.25025729010518094, 0.21460257942177563, 0.21887779646972572, 0.12565448118128386, 0.9067555497353789, 0.1879751839883559, 0.9091743259993333, 0.2000623214997551, 0.8891662614442526, 0.12257296388618055, 0.1701210829782811, 0.1540120323270423, 0.5382981266076139, 0.21215240567527305, 0.5772623489175774, 0.46830935876495194, 0.15577161624457492, 0.21084185963544544, 0.1052521970076874, 0.7167477135159406, 0.42988919476818177, 0.1809147373305835, 0.19556256793339943, 0.18503297766443005, 0.21639409998303838, 0.1887414864849406, 0.1927866554236356, 0.21001751167276927, 0.1805881439252065, 0.19324179049145984, 0.11061834772169299, 0.1376152106105254, 0.1039029880519281, 0.08152173161317056, 0.09268505624977896, 0.1446453398744314, 0.10391531739645365, 0.08800273366707556, 0.08778096984049444]}, "mutation_prompt": null}
{"id": "1809d07a-f6aa-4a43-94c9-14daab6115f7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            # Adjust population size dynamically\n            self.population_size = max(10, 30 - int((evaluations / self.budget) * 20))\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = self.social_weight * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a dynamic population size adjustment to balance exploration and exploitation over time.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {}, "mutation_prompt": null}
{"id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 41, "fitness": 0.35379788552702174, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "33d46c46-36ae-470d-91f9-4589932657fb", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "0f9603a0-4582-4cb2-a299-86195c6c1018", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "d2b90359-a499-45f0-a7f7-dbcc76ea3bd7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "6ad4cb81-be99-4d70-9c6b-a84cf7c400c2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "c3b014e9-5ac9-45e0-befa-88f75bf7a90e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "60641239-0dac-4daf-8e01-425a776e6ccf", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + (1 - evaluations/self.budget) * np.random.rand()) * r1 * (self.pbest_positions[i] - self.positions[i])  # Dynamic cognitive component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a dynamic cognitive component to enhance exploration and balance exploration-exploitation trade-off.", "configspace": "", "generation": 46, "fitness": 0.34133314037682644, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8433946495090325, 0.8536905963046018, 0.8407224478343259, 0.8424729281879171, 0.82281340674769, 0.8340214287844745, 0.837176762858923, 0.8475851893600849, 0.8463035559888684, 0.731404070782282, 0.7083009429181796, 0.7047716797699953, 0.7011555386521745, 0.71185919849535, 0.6931441701030705, 0.7115577897718085, 0.724635714307772, 0.7095007377579818, 0.7464484110199152, 0.1704516306009477, 0.1768515855335565, 0.1750134024165242, 0.1823883618709753, 0.14947371995438208, 0.14081980230560898, 0.15636428228203025, 0.13626590480296985, 0.14812429251590908, 0.10948090794071164, 0.11630522527145859, 0.1278031626440559, 0.14890224851568457, 0.1391826550839942, 0.10558182327848886, 0.09700156470086663, 0.11341260611642923, 0.980424522268687, 0.9726117911136823, 0.9777529657598364, 0.9733777148597138, 0.9778564139416274, 0.9793081346648964, 0.9839707016268641, 0.9764070817241741, 0.980982490961971, 0.6955163904539572, 0.7125646886472785, 0.7398736186001087, 0.7283489495331443, 0.7493335902032228, 0.7307518265120123, 0.7104624139452899, 0.704966891326475, 0.6028463426941522, 0.3882170802361322, 0.17149719615269754, 0.36988760019359446, 0.29653650692179934, 0.2769506394432306, 0.8267344713522452, 0.2421773475377652, 0.1604806621190199, 0.7891793189649202, 0.5315031638970391, 0.11928533808594644, 0.20961708973455528, 0.31009610450649816, 0.19119705513435925, 0.1554867462741848, 0.17704949106705858, 0.18629455394776717, 0.2026497489208976, 0.22845628774858506, 9.999999999998899e-05, 0.2183098829731025, 0.2031615983684193, 0.13963227354684116, 0.18782175280559033, 0.20290372803090773, 0.23449800068739568, 0.24680790331378233, 9.999999999998899e-05, 0.15206885825435734, 0.006122510966970918, 0.04381605844228398, 0.011806699859752356, 0.011922593710048224, 0.00502578612918847, 9.999999999998899e-05, 0.06374362078710039, 0.18202785978990843, 0.06151717612192842, 0.13286747702032808, 0.12418127254524025, 0.03854652033760153, 0.028414725395044305, 0.16213806588501245, 0.07502233075801323, 0.049587566271455996, 0.12304763396605212, 0.10757827258044106, 0.044945779284208065, 0.17260634777152517, 0.07716716055897055, 0.09235137536050675, 0.1819744157055483, 0.3486362734218139, 0.06692654408387677, 0.10893447924738064, 0.14527220066242408, 0.4335196302459253, 0.005940729903165076, 0.17958602556168157, 0.1351794688854494, 0.11953110731373362, 0.08052727401027204, 0.07976141887646226, 0.6066145414125412, 0.6324958203186285, 0.4955108751188996, 0.6142449708988784, 0.5124693489373661, 0.5429314352009207, 0.5576718029319093, 0.5389246164126351, 0.5388563283694519, 0.13871040238254395, 0.12698864951931632, 0.1437680757613583, 0.15445808757611268, 0.11661793812844312, 0.10292173741764132, 0.1070253009522718, 0.14636109472429748, 0.1277445687943748, 0.31772100049709673, 0.1779636650263019, 0.29329272160731323, 0.23736619154144623, 0.34806681215292024, 0.6402281088873053, 0.16577760815892983, 0.24670201207981923, 0.3279500551151343, 0.5120578704320341, 0.3942122218063381, 0.3615172643192974, 0.4083036042932322, 0.48103848724618237, 0.3770526135925999, 0.3989551145418371, 0.5554404891472359, 0.2843968289209432, 0.31381271532144095, 0.2722151916612976, 0.24118454916212884, 0.229213157538823, 0.2232772983017277, 0.2596950500455697, 0.21032155935362884, 0.3087044523086383, 0.11829072038217814, 0.2552939252608988, 0.20471270411814002, 0.21938167435923261, 0.252223119710955, 0.23149019080879685, 0.2257021708940612, 0.23138268031816556, 0.26409599412841855, 0.2598431884135578, 0.24373599326089967, 0.22320281926447605, 0.20857141341978058, 0.24010889466588925, 0.7795513686747995, 0.20762686000652475, 0.19408829044414377, 0.19405542390329167, 0.1918821914759017, 0.12599986427150112, 0.1258962513244123, 0.1538612354900153, 0.8776996564784002, 0.2011101850405942, 0.8603520194806548, 0.12243151834561106, 0.878477054686748, 0.15342278732157666, 0.8197736791459903, 0.20978313185928799, 0.6191767329179669, 0.5719956403662073, 0.22663121007374332, 0.6916063958411527, 0.10518386215659159, 0.7441249181792141, 0.7733070168002082, 0.1873913591882207, 0.18703039358019358, 0.18931620568295715, 0.2001597183298781, 0.2231272814136228, 0.20303056835732658, 0.20291170348579612, 0.22414779303247956, 0.18717292005491704, 0.09907537382881015, 0.10939661431487313, 0.07877795487100592, 0.08832495498751591, 0.10801373159846483, 0.13326053544671101, 0.10669244670973099, 0.10466445158393511, 0.09784356821712115]}, "mutation_prompt": null}
{"id": "6f35091f-86d2-4b36-9339-7ae75cb633e4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "76e2210b-56bd-4448-a4d2-67735327854a", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i] * (0.9 + 0.2 * np.random.rand()), self.vel_min, self.vel_max)  # Introduced adaptive velocity scaling\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive velocity scaling to balance exploration and exploitation more effectively.", "configspace": "", "generation": 48, "fitness": 0.32452544200553535, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8668006764917311, 0.8756671844503996, 0.8512877424056406, 0.8501896141675612, 0.8357631148224434, 0.8391496105370126, 0.8571748437140961, 0.8606692319717166, 0.8616028023525764, 0.734978534514361, 0.7680509793270225, 0.6811179873343443, 0.7242084008223595, 0.7585302585620173, 0.7257991929912556, 0.7127598673711939, 0.7427469100443777, 0.7323061205235735, 0.09515006258566738, 0.12322863028847064, 0.08958171640594736, 0.1542391220960022, 0.11902212461248107, 0.12135483786831869, 0.16779569068579092, 0.11434805256968339, 0.14834376212025313, 0.14392621853730359, 0.17867748919149984, 0.13853858797861107, 0.1387170352905288, 0.16559335524098118, 0.15244075504150423, 0.16305865772472827, 0.1474018654971354, 0.09453521753317762, 0.972764335099896, 0.9656492541187632, 0.966347150701962, 0.9782468089789985, 0.9725520744233338, 0.9761127985240909, 0.9701300585640598, 0.9742660286604602, 0.9816093832641458, 0.7582243868492575, 0.7622395141468485, 0.7585227777551034, 0.760000281446139, 0.7737586984966728, 0.6087705721390024, 0.6976007130792448, 0.738220838667438, 0.7181590649811534, 0.22899220324626657, 0.21017916870309805, 0.22644879149915564, 0.3610277483303429, 0.826588512917543, 0.2728307536541902, 0.15043448164879247, 0.12683541982476576, 0.3551705137380118, 0.1252705360315065, 0.1348904307965899, 0.2354737058404318, 0.13020487177879636, 0.1335020282143542, 0.12009814552996612, 0.21869678449215035, 0.13096355713032048, 0.19971133525873253, 0.22301251113770681, 0.10230525362114862, 0.2867261417770288, 0.14425365830653647, 0.12584987668365322, 0.1937278566700581, 0.24339264664615634, 0.23552697504570919, 0.12580122247399117, 9.999999999998899e-05, 0.05674426305756264, 0.01184308914862564, 0.00013804283957363772, 0.05862173674567239, 9.999999999998899e-05, 0.018067724251411343, 9.999999999998899e-05, 0.0015110415307517666, 0.11463413995832761, 0.04367491996845019, 0.11591649693985362, 0.029473522690433462, 0.011305548882474925, 0.03851105778093222, 0.09824059170628774, 0.0916338331652351, 0.02280755727154704, 0.047327967005725835, 0.12896004357071456, 0.2276784035573044, 0.18368127145412128, 0.10712319255551572, 0.17757785677523352, 0.09757978619169949, 0.06912720506749215, 0.06589963335720417, 0.15491139611235416, 0.08383824719885202, 0.24234652390347922, 0.10982266073939573, 0.006325347924313274, 0.006058821086358468, 0.2042212743097679, 0.0813048742425252, 0.08021217259721469, 0.5729937448618538, 0.5168600723297827, 0.5030934643401438, 0.540458793631627, 0.5412971804175927, 0.6365620447914451, 0.543011951479617, 0.5474519928854875, 0.5752661274672386, 0.1207796552835656, 0.11451301882988207, 0.043896694839713146, 0.12967380338978984, 0.12017194383656626, 0.1492968050165664, 0.10834056671833936, 0.1048305233794774, 0.0891511675284592, 0.20943241121431388, 0.2530567178747789, 0.22981058402730048, 0.42484100904025957, 0.25326067640082894, 0.3242521393782556, 0.3385900991072094, 0.2647771018357564, 0.26213606186483573, 0.36602698837056347, 0.3262855693537866, 0.2077893874006409, 0.4270479008355431, 0.5225509417031705, 0.4555859353903656, 0.23298155547383703, 0.2728205023803919, 0.21922246548143032, 0.3026628647699854, 0.256341011531246, 0.2275257798224145, 0.3000156139197663, 0.19157893352380728, 0.22036960768436442, 0.186041567502917, 0.2436875037504127, 0.4253086354284934, 0.24458498611337987, 0.22256820782289122, 0.21275986330746643, 0.25115817096058457, 0.22478021649192048, 0.2930633255670897, 0.24605807222593534, 0.2763516440499648, 0.2178791433106807, 0.19365805677295234, 0.2272098252927609, 0.2122134280572734, 0.20709097537382515, 0.1967605303024953, 0.8003344010768839, 0.20806230677673998, 0.20894406253197562, 0.19908246021896547, 0.12689447554611888, 0.1265184547077064, 0.1875652122780438, 0.9063821056376218, 0.200809000557314, 0.8719096027526478, 0.0997720170744626, 0.1703815509795008, 0.1532571397332968, 0.8664307584368854, 0.21185215740524532, 0.8032209562917303, 0.6931558764477694, 0.16848287114464655, 0.854800468280999, 0.10400987020641095, 0.8421229809275781, 0.7293877452170985, 0.2147913311729991, 0.17999753181345113, 0.23364126482713155, 0.19218963669915945, 0.18724608177215163, 0.1907530877997886, 0.2030835146844756, 0.2041231469591801, 0.2049812223935683, 0.0990248710360494, 0.1101636682401751, 0.07830673375439001, 0.09814367882046204, 0.08610008771741018, 0.1320402056883926, 0.09484310661872641, 0.1000963881964162, 0.10354151087726782]}, "mutation_prompt": null}
{"id": "f651d41a-e70b-4644-ba4e-36d2f463cd40", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                personal_learning = 1.5 + 0.5 * np.random.rand()  # Introduced personal learning factor\n                cognitive_component = personal_learning * r1 * (self.pbest_positions[i] - self.positions[i])  # Adjusted cognitive weight\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce personal learning factors to enhance convergence by adapting cognitive weights dynamically.", "configspace": "", "generation": 49, "fitness": 0.35379788552702174, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "3c6e613b-43c6-4afe-9ecf-877717a93b01", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n\n            # Introduce random perturbation to global best position\n            self.gbest_position += 0.01 * np.random.uniform(-1, 1, self.dim)\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce random perturbation in global best position to escape local optima.", "configspace": "", "generation": 50, "fitness": 0.2852687750774466, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.6531605134373265, 0.6625702245842884, 0.6329622856530275, 0.6561695709427606, 0.6368311526268338, 0.6558364250512423, 0.6448400719007668, 0.6702689131346617, 0.6521056248449723, 0.2006815700799912, 0.1827210059945864, 0.19758509953951964, 0.13209775209900199, 0.08777009657379387, 0.1370115890038982, 0.17820322781042452, 0.21163481909271442, 0.2393817162274413, 0.1813440003301584, 0.15773164697993547, 0.17652378939376234, 0.12166176826318209, 0.1390760047728159, 0.11276407027544832, 0.11352227546141036, 0.1503946113042326, 0.17302895210866898, 0.12399016798082518, 0.17039704459150107, 0.10599506255731594, 0.14658945651084143, 0.09125435133973658, 0.1087853679833215, 0.11364431925979246, 0.11605187821349428, 0.1472987838381281, 0.976327408119686, 0.9711800398302991, 0.9814752952030474, 0.971309831421296, 0.9778155607228588, 0.9764561132546562, 0.9795961012511576, 0.9768908609645245, 0.9810689606258878, 0.4732817560847039, 0.47152250859251243, 0.48067682431530334, 0.473585236731776, 0.47618259549676845, 0.4716866074812689, 0.4703323625327196, 0.48556590334275185, 0.47418395267637237, 0.22795433204030446, 0.17217681391519868, 0.7651502441088744, 0.2766287163921288, 0.844122062147194, 0.2145291460035733, 0.288301789803177, 0.15134642275674326, 0.7937479477051913, 0.17155486317226332, 0.12010898659376812, 0.22272093089876432, 0.2037775329616035, 0.12483388043062438, 0.23583082063101557, 0.2066353387267701, 0.20169383906802751, 0.20521941880271533, 0.21797353933870323, 0.00011497009823324689, 0.2087120672566426, 0.24650559780237513, 0.21380814457497932, 0.20397756407363754, 0.20980130372963934, 0.23013098308536495, 0.231584463658715, 9.999999999998899e-05, 0.011886899779741555, 0.05324677979747816, 0.04093478470972112, 0.049543217934950756, 0.00308539397608687, 9.999999999998899e-05, 9.999999999998899e-05, 0.01471029951649272, 0.10016052861005953, 0.040582138460613204, 0.07330546160723916, 0.10756128039696855, 0.029693134571039614, 0.030655782785939167, 0.2638843172568809, 0.14418969356981648, 0.06729865081425146, 0.11196102349487413, 0.060640680492830334, 0.04028345007904588, 0.11263519298955471, 0.13260907684343348, 0.09074288088478244, 0.09523241878632649, 0.09288844334833646, 0.057714066994728586, 0.21529110523313488, 0.12961691601634362, 0.16273436648769768, 0.13434051340404662, 0.14437693946249142, 0.1851331341235979, 0.213256055368105, 0.211588764080205, 0.07861943398800031, 0.5273843204532574, 0.5325983148151168, 0.5144504678629853, 0.547390000159439, 0.5096379541038503, 0.5169710497380854, 0.5261272750755752, 0.540745955711217, 0.5322776598632966, 0.07715458603286784, 0.10533234533896452, 0.1468250721598935, 0.1524440882901008, 0.142090632799597, 0.10191600101395093, 0.06281669374889154, 0.15587492650174994, 0.12260154176937488, 0.24534078832871742, 0.22664584886270445, 0.20773104965448952, 0.2781086705487523, 0.3248634571970491, 0.4434264500910394, 0.3177723663434786, 0.32347109355457393, 0.2238101946214518, 0.2647294514498797, 0.34918744522901735, 0.2993085401306106, 0.34756297630244026, 0.2673193741312523, 0.3637621568505536, 0.24062579871989598, 0.3966455909061357, 0.39324959620221855, 0.3111597352364369, 0.18107155882927306, 0.19229313427565164, 0.31703039316054715, 0.2229497893538902, 0.25029045989762, 0.22227396215254636, 0.2022395347899607, 0.09922922607686036, 0.24240769923433347, 0.23143612906545918, 0.243784402097718, 0.2110194722626434, 0.24821042579890795, 0.25558849282760876, 0.2504937608101069, 0.2086061357421013, 0.2426391479465856, 0.20523184741089084, 0.2164845071250059, 0.20815222594594673, 0.19677626507637314, 0.18745579841911642, 0.19160249285697817, 0.19020567709185965, 0.20622699875774653, 0.20392436095386268, 0.12509041318770908, 0.17762074251856197, 0.18840735119808072, 0.8683785348538362, 0.20003630920258353, 0.8755953270943118, 0.12206738023404706, 0.9017385332392015, 0.15295765507316705, 0.8187973265508469, 0.21154591612590634, 0.8027125641489101, 0.8147753615942263, 0.09466718616071035, 0.20897677754797395, 0.10483953080983921, 0.7343732346520253, 0.7320093221831924, 0.20032886360511348, 0.19635136329123037, 0.20685484671869714, 0.19452224588081146, 0.2096677890856271, 0.21286922308521328, 0.19373013629293867, 0.21794103596055114, 0.24147789043071888, 0.09766360996769785, 0.10386253358680919, 0.10822408335011335, 0.09328591861152402, 0.10567658415383996, 0.119736164523088, 0.0831349237401302, 0.09792830045649115, 0.09255939580377703]}, "mutation_prompt": null}
{"id": "2956d11e-bded-4c5b-9d3f-ff8622a41150", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n            \n            # Adjust population size based on performance\n            if evaluations < self.budget / 2 and np.var(self.pbest_scores) > 1e-3:\n                self.population_size = min(self.population_size + 1, 40)\n            elif evaluations >= self.budget / 2 and np.var(self.pbest_scores) < 1e-3:\n                self.population_size = max(self.population_size - 1, 10)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance exploration by introducing dynamic population size adjustment based on performance.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {}, "mutation_prompt": null}
{"id": "f6e5b7f6-080c-447d-b130-8b5285d59d5c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically adjust learning factors\n            self.cognitive_weight *= (0.99 + 0.01 * np.random.rand())\n            self.social_weight *= (1.01 - 0.01 * np.random.rand())\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce dynamic learning factors to further enhance convergence and stability.", "configspace": "", "generation": 52, "fitness": 0.2012383803619912, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.4196278319454815, 0.3807216263834221, 0.3505052479290789, 0.3331606469897127, 0.36467149462321935, 0.3613330706246084, 0.354372008995949, 0.38798656266551657, 0.3476803853654902, 9.999999999998899e-05, 0.02919444192199039, 0.0079318060753798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03543534519378333, 0.08737689504625812, 0.1165276174593366, 0.11155399780391084, 0.10455220644299157, 0.11241761917012605, 0.1038258010502151, 0.09522432517529977, 0.10511535163619823, 0.09378839751566048, 0.12214255104150229, 0.08478307564187504, 0.06085429475252391, 0.09267877030281724, 0.08782371171117864, 0.10264380964535758, 0.10171872338741073, 0.09965958322412005, 0.064753515025884, 0.9719149238770548, 0.9746102646295882, 0.9788248594440714, 0.9714932318026596, 0.9804905815155789, 0.9828368932357573, 0.9822426942640047, 0.9795049362794988, 0.981574888994964, 0.2762891132791867, 0.22222213139299474, 0.24134394936569614, 0.21011471820434713, 0.2178993075452892, 0.203849864596642, 0.2423415117400638, 0.08850037479235029, 0.08867115206603082, 0.30924555567790246, 0.2132355035361978, 0.24073480980478823, 0.3046528023889178, 0.23705288210623188, 0.7002448253298785, 0.30004574503631976, 0.12620423213313403, 0.3013977071185533, 0.1061211843799107, 0.18381841127830578, 0.1190252413044236, 0.1248868109478044, 0.11022206376226074, 0.12092660036975156, 0.17065404237558957, 0.13474555204661065, 0.12395345445749573, 0.14681056575457863, 0.06575957672276977, 0.13248263918820835, 0.13199444815418448, 0.1309232086417651, 0.12727536055642685, 0.14623261771361795, 0.15438404476605116, 0.13740422598354285, 9.999999999998899e-05, 0.0635133022683183, 0.00012979938244861433, 0.022349132824280415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028691589001029194, 0.08421870676367693, 0.07264072227800811, 0.12450003423631884, 0.15753944512705598, 0.03867909877587972, 0.02630750626979772, 0.10969771916744708, 0.05357761187587151, 0.0679395993416041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04214352704293611, 0.04759907831475485, 0.05084513792514411, 0.07093670853803324, 0.0016026487143586676, 0.08773528494561511, 0.06940544383422698, 0.06448960351404354, 0.05633808921282746, 0.36300906073704464, 0.3584337554493753, 0.3167709610282071, 0.36801532410405924, 0.36382050959365153, 0.3481047254281695, 0.380445916428214, 0.3317082382478105, 0.3516777426831652, 0.08959751268642069, 0.09297905272755924, 0.10969860423350619, 0.12526817801180246, 0.1018576938425867, 0.11007189048628807, 0.09853307167203418, 0.0887735533655909, 0.09871822751634807, 0.1871049619453109, 0.18584409951529002, 0.22712242387820913, 0.17342707352379805, 0.25205702225687654, 0.22193988150421373, 0.17692440210001092, 0.17231885950110104, 0.1954388895083209, 0.243605306106905, 0.24072875973062724, 0.2565556245895184, 0.2709024752115351, 0.2402410174030789, 0.2461878540835879, 0.21403702543460434, 0.280220500774506, 0.2516006189874749, 0.1910641294519161, 0.17712633078254236, 0.16375878105549513, 0.21433281546350458, 0.18689131427330408, 0.20297619196727024, 0.15951110620400355, 0.18924660486957756, 0.16280715017804925, 0.23745544210348768, 0.2607479400523087, 0.20507730718928907, 0.22679634167503282, 0.24947986477460815, 0.23004751163113346, 0.19617057383240666, 0.2293740916791449, 0.21430377629754416, 0.19457188006587922, 0.21290126989677483, 0.18076022779914325, 0.19565813022349554, 0.20305006203294906, 0.18750689034382306, 0.18242610529818193, 0.1898794249272121, 0.19802006922149307, 0.5000985313741702, 0.174454584599953, 0.1531952339480871, 0.4514452916449081, 0.1961249423349748, 0.41886051714828143, 0.09958589700694209, 0.1688635554035025, 0.15212331043125016, 0.5265400248921784, 0.2056708356092618, 0.43161081087587205, 0.3712226658032426, 0.168460551004732, 0.2096957647501172, 0.10399912334224559, 0.4763278369018994, 0.35478543864023604, 0.18762574278514887, 0.19581245177293394, 0.18618065912688297, 0.20307714460789117, 0.22993883007885663, 0.20754061886162656, 0.1807432696150274, 0.19585003120041733, 0.17952835989561133, 0.08337121741306397, 0.09221887237898596, 0.09209479552533706, 0.08297360165371848, 0.08191186370488068, 0.08170514758107206, 0.10863235210715161, 0.08053870368013305, 0.10089942024216725]}, "mutation_prompt": null}
{"id": "26239ae8-c4e3-4487-b56c-930de3b4b109", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "43b9b5d0-6310-4a5c-bed4-de884dcf2868", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.cognitive_weight *= 0.99  # Adaptive cognitive weight (changed line)\n                self.social_weight *= 1.01    # Adaptive social weight (changed line)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive learning rates for cognitive and social components to enhance exploration and exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.15771248441847024, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.2623349573685646, 0.27077571683883883, 0.27710803191180045, 0.2760064980404263, 0.28765285196390655, 0.2894119108600235, 0.2557671276077065, 0.2575143836723017, 0.27246803931700725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04989836526795899, 0.05230881323460579, 0.04247908631129016, 0.0715106723563167, 0.06586668047182809, 0.06015909116952012, 0.06603073994452024, 0.06582414457458197, 0.06782847001057923, 0.05128127659391357, 0.05941027561781198, 0.027892329436079333, 0.08155821051419809, 0.07073912343808575, 0.04448341540999501, 0.07307950294895527, 0.06426461842042552, 0.04171916282395072, 0.9780403738209764, 0.9710725817105356, 0.9788413025406736, 0.9750199721968249, 0.9782542999378481, 0.9760611619531341, 0.9837827922298245, 0.9779510818511004, 0.9814985252263301, 0.14227973248548065, 0.1433135313323406, 0.1816868653021314, 0.17143552450199218, 0.14696159891715066, 0.14202408107502784, 0.13891753184390676, 0.08831677298102425, 0.08422685886973291, 0.15380355868323092, 0.2148366382037602, 0.1856102571725684, 0.228269182787311, 0.1801033436407753, 0.262745162543383, 0.12386127815113868, 0.12483280599087754, 0.11777269172512117, 9.999999999998899e-05, 0.0616996383112659, 0.06875108823379683, 0.043394167353066226, 0.08888819027340744, 0.10711907755746164, 0.10948312808289717, 0.065151907890737, 0.07813150774964839, 0.10748291690346612, 0.012859755171942155, 0.11593391747171389, 0.0893653408008529, 0.1170470440969158, 0.14175621165220964, 0.07369663413206273, 0.08859960684473134, 0.07168322988925191, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07872309366238861, 0.04753241955006071, 0.13041980860411062, 0.03988228116853354, 0.019839454177307037, 0.015869487001590854, 0.06296177015224003, 0.04342885966920307, 0.02356622317644852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06211128828886325, 0.02731061906555865, 0.0182691419285409, 9.999999999998899e-05, 0.0633905454324386, 0.02256265984382322, 0.021873101590195954, 0.024677978074213347, 0.03299416296308011, 0.2708782012321792, 0.2715566964321795, 0.30580721321193427, 0.2903448562203691, 0.26184656272524176, 0.2845136803241779, 0.32366008463248586, 0.2999196260126903, 0.26697596936787094, 0.04489997758559472, 0.06043327634000051, 0.042978485337974215, 0.07301739742864666, 0.06704556953826868, 0.07024116461045193, 0.0650592289768338, 0.10127109552870173, 0.06044468943248249, 0.18598358345849952, 0.14161802717824068, 0.14192179843124764, 0.12188077261490649, 0.19899480050151674, 0.14292476135621068, 0.1750305288859263, 0.14249833676935975, 0.11074489972237811, 0.2069482359180529, 0.21506220721484848, 0.22747736475743852, 0.21219030021588703, 0.16518241180882942, 0.22199368733234226, 0.13553900000569064, 0.2181401253611689, 0.15637972467807137, 0.25064142428400404, 0.1415878196609074, 0.10904385684690021, 0.18425719366058668, 0.13998236873882108, 0.1555691562956033, 0.17043203719820865, 0.15892552448977204, 0.12594148023144713, 0.2010825197370133, 0.17297136884824138, 0.15697815150603434, 0.19283452114733224, 0.1746955617504906, 0.18468718572428533, 0.17094102585155835, 0.1752490643660276, 0.20738107885730417, 0.17165436182471872, 0.16645162917128453, 0.17026460287189094, 0.15901195375771882, 0.17152635182506615, 0.16084142488533415, 0.16057659258319745, 0.16954659492198754, 0.179521470179419, 0.12253351202384932, 0.15372715099692646, 0.15188340231879627, 0.337060761078961, 0.17581719030471354, 0.3121355638400263, 0.0985933924416289, 0.1678577308311685, 0.15054503802412234, 0.33824593740356845, 0.1657089023378483, 0.2248257129818455, 0.2741295948358563, 0.1992532134451379, 0.26988802463302675, 0.10269330998751813, 0.21806926812519756, 0.16519622259671574, 0.1732700019323209, 0.17000206445630905, 0.19438983205733662, 0.16813459500015737, 0.2117371688137989, 0.1960369403409602, 0.15490282728600147, 0.21058038400359314, 0.19828302934192565, 0.06442743628751446, 0.061181347678780695, 0.07020232959118644, 0.07651671835995966, 0.05832051277480221, 0.06706994729892735, 0.056576317031207135, 0.0816240876410409, 0.04422724335957151]}, "mutation_prompt": null}
{"id": "b50b35df-fff5-4f0d-93cd-b52463c1b028", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n\n                # Normalize velocities\n                norm = np.linalg.norm(self.velocities[i])\n                if norm > self.vel_max:\n                    self.velocities[i] = (self.velocities[i] / norm) * self.vel_max\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Add a velocity normalization step to maintain diversity and enhance exploration.", "configspace": "", "generation": 55, "fitness": 0.3272633022375469, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.29.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8512123836876981, 0.8574554529233629, 0.8568892686346841, 0.8570624537676604, 0.8684528648418414, 0.8517941120625466, 0.8490876102101161, 0.8534319156223195, 0.8420695986638964, 0.7526346786127147, 0.7451323491450557, 0.7226061691493119, 0.7547831296287579, 0.7345885398662109, 0.73108839241033, 0.7290723244679236, 0.7377291041874712, 0.7421522378422092, 0.08701404058982898, 0.18402330473754347, 0.10687278341910655, 0.14090772763941528, 0.17946456615461215, 0.12388171022367278, 0.12217426367001194, 0.1415970912351746, 0.09834731693969256, 0.13464409042076508, 0.10227208432534718, 0.08760600041407729, 0.10078245805210062, 0.11330496423845193, 0.07912992107757832, 0.12712632719692174, 0.15412394261871154, 0.079334642528475, 0.963250649363744, 0.9508346066018558, 0.9643859534180745, 0.9551225299605038, 0.9571732643768964, 0.96334976774177, 0.9623213195877751, 0.9570660729160111, 0.9636833746364439, 0.7625909443902597, 0.717734894139467, 0.7436521515303003, 0.7639891001456816, 0.7529850075629909, 0.6950345105038144, 0.7653883791421501, 0.7119648873318982, 0.7459479428977485, 0.8225126510104359, 0.21472653341097392, 0.1692588369330682, 0.27826798223292104, 0.19284819248533902, 0.8313889892490971, 0.17551557644050175, 0.23363268844395468, 0.2355766593507168, 0.15933881164068175, 0.1319694472555819, 0.18032282428749624, 0.20551798861733284, 0.19273179200902246, 0.2921510932539986, 0.26365428820657844, 0.37824628270734173, 0.198888209889988, 0.23607953257566106, 0.21206440526614456, 0.2090141034251667, 0.23407639655115797, 0.13391822662763575, 0.2478223540268023, 0.2155236893814393, 0.23661319172840078, 0.11968393941719546, 0.15056398278896743, 9.999999999998899e-05, 9.999999999998899e-05, 0.006150938178941745, 9.999999999998899e-05, 9.999999999998899e-05, 0.009153775285583254, 9.999999999998899e-05, 0.15993690005322225, 0.13857900392800038, 0.07534523502225043, 0.10347452284210445, 0.034929204815626336, 0.008581257936936204, 0.0159270335046664, 0.10760315489169536, 0.11474902592656722, 0.045071881224805654, 0.06385561681075358, 0.09331368029143394, 0.11586104586321999, 0.20737068323687136, 0.19443564437113225, 0.0858808761684513, 0.10675854842851318, 0.15837409948891124, 0.0665350255477859, 0.05244908676770321, 0.09882937324188168, 0.13110944266285174, 0.006504218740000067, 0.11852070632455203, 0.0063110101530577944, 0.08076602405195421, 0.10613712624060756, 0.08149932107794833, 0.5775631396883816, 0.5441967583921938, 0.5794413233094662, 0.5507896806381225, 0.5595746349937206, 0.5855908983550706, 0.5526490311542314, 0.5589629461801211, 0.5335654683172073, 0.04144726397179255, 0.09026209374618888, 0.08407778643025798, 0.10558818648230717, 0.09516761543617325, 0.12269276559022513, 0.13996141581739463, 0.12194636055695696, 0.13162946186945412, 0.2598482523814515, 0.21646804084889826, 0.2717505910937733, 0.3343897013273207, 0.4825600512530761, 0.3230080015817296, 0.24307120128159132, 0.1785490487934972, 0.2608077906464654, 0.17260111082149232, 0.32609288550012594, 0.2619754835739976, 0.3786439202793844, 0.2476091895578475, 0.2925073779880645, 0.24420383948743796, 0.588702356950181, 0.16672803033770056, 0.12223108208807276, 0.29354543164129077, 0.16328142033535276, 0.18223914928761764, 0.23609445636758386, 0.23236784198319616, 0.22212422790813646, 0.3070051583329043, 0.10102920336494736, 0.33242260350887287, 0.25678586693128924, 0.25626080870693335, 0.27239240602197634, 0.25490730275373075, 0.2586947174234808, 0.22499891473794664, 0.20367755019926093, 0.21833639626511403, 0.1964028328898969, 0.8095168116272744, 0.2239364291091116, 0.21817780893599292, 0.8131248010032964, 0.1867557790355625, 0.18882466378545804, 0.20854420698124954, 0.2081639412282239, 0.12673005948189242, 0.177304914258819, 0.15349315931290586, 0.8908015290172611, 0.20123969275981157, 0.9099744525437705, 0.12251406787265462, 0.9006160614818635, 0.17677036539647706, 0.5947234379862012, 0.2124263861804917, 0.6539614070532682, 0.8111835683138965, 0.15594471766854856, 0.21172579480078213, 0.10524909864207288, 0.8267239115939942, 0.7929853210678369, 0.19620437032196691, 0.1925832973604107, 0.20473772745586616, 0.22241443748375345, 0.2068830002396469, 0.20727796052294056, 0.2009055870980685, 0.19630839834750802, 0.21527398831215072, 0.09504282068645609, 0.08620593808808041, 0.08914526822476143, 0.08370823463603305, 0.10405224756029419, 0.14478676927426148, 0.10326349568052229, 0.07599490350731553, 0.08050406624586381]}, "mutation_prompt": null}
{"id": "31baebe0-adba-439b-98a2-ab5ff15202da", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + 0.5 * np.random.rand()) * r1 * (self.pbest_positions[i] - self.positions[i])  # Adaptive cognitive weight\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce an adaptive cognitive weight to improve individual exploration.", "configspace": "", "generation": 56, "fitness": 0.35379788552702174, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "09179b06-5f2e-4add-b4cf-679d05afc91e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                random_perturbation = np.random.normal(0, 0.1, self.dim)  # Added line: random perturbation\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component + random_perturbation)  # Modified line\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Incorporate random perturbations in the velocity update to enhance exploration.", "configspace": "", "generation": 57, "fitness": 0.21431046165694442, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.39899669899262313, 0.39893506203784224, 0.39946408550630685, 0.44475788822853124, 0.397194679944585, 0.40772355675220184, 0.40359071895653975, 0.4414999875562218, 0.43468171989087057, 0.024345462449441357, 0.02591186580921223, 0.03300673931873388, 9.999999999998899e-05, 0.016842681101018386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0585284851160528, 0.08648602383526427, 0.1143540814317423, 0.08721475057541739, 0.1397161354439257, 0.10639566769337794, 0.12376299872617569, 0.11309543066038696, 0.1035796958802111, 0.10032250765482809, 0.11032681760651375, 0.10384704122895383, 0.1017722109729855, 0.10717857879802284, 0.10861504627145824, 0.09212942203960606, 0.06995723255897646, 0.10877491023887376, 0.09262582083597204, 0.9671410474138981, 0.9764159717457914, 0.9822241447658968, 0.9744156568123713, 0.9750918466191357, 0.9621266315699445, 0.9798089037683549, 0.9743909973539999, 0.9754033263756134, 0.2647482448116736, 0.2838050998523144, 0.2693897929567831, 0.2753623169954236, 0.2522454054699246, 0.2802904542811313, 0.28581639967551753, 0.2610978450243827, 0.27237713040334444, 0.3360237051993683, 0.25249644622402534, 0.3318454230130422, 0.2722562696174323, 0.3502056848653863, 0.26778870858501336, 0.17654483997813508, 0.2821581913899701, 0.3381553334947408, 0.1383944887217181, 0.15582134729850328, 0.09974865586803483, 0.12581800717323588, 0.14132554595395452, 0.15977678720906063, 0.1692144861746605, 0.15678198066637183, 0.1569945271531631, 0.15910927346393577, 0.07961609047736384, 0.14825448537371744, 0.15776941309161407, 0.1558808052416618, 0.16257472522541394, 0.17202574915662772, 0.11280600305752797, 0.16389578227332635, 0.04959561098950016, 0.05149484501930601, 0.044352253170092615, 0.0212403163654713, 0.028336818934838304, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013622141590308168, 0.03492090965118788, 0.18282056117285894, 0.0738355219822392, 0.07824815673487084, 0.1661136868411779, 0.014808946383245147, 0.03048125551619707, 0.11985562897076829, 0.10284730589217561, 0.05984096181837428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0905265539315544, 0.09020256392464254, 0.10649979784991626, 0.09327390825903636, 0.08933624051514777, 0.07891916035769242, 0.08087460990607309, 0.0938462131462715, 0.08027278433437735, 0.3882132790160253, 0.3834730612148579, 0.3877783010684931, 0.37819187123506637, 0.38250768351244147, 0.3800609324715858, 0.37568738443425154, 0.39237554607166336, 0.40886101278176934, 0.10994499426554061, 0.10498867196974848, 0.09962970395791071, 0.10750015627404685, 0.10882904295866958, 0.14586513074550844, 0.11476651055269227, 0.1253183585688421, 0.10366398643769625, 0.2755493411266745, 0.23525375895446854, 0.21163672569758651, 0.22313696742157896, 0.25032522874253593, 0.22561354986496485, 0.15787135471614766, 0.2575854117474582, 0.26191844257323194, 0.27449401670313045, 0.28530064653940357, 0.25332429554219726, 0.2763696274204561, 0.19957673591732705, 0.2735428232801078, 0.2202011055719626, 0.2829893315223365, 0.2774890911265675, 0.10736898507974435, 0.2196723786246093, 0.22930021521030708, 0.23083213962132398, 0.1813465121063892, 0.18383073954545637, 0.18186635660526007, 0.2268873690801152, 0.21030655912817764, 0.25049101717939615, 0.2223027377232596, 0.21079230139783667, 0.2688804790681232, 0.21239157691955124, 0.24536280677388322, 0.2401488544416639, 0.2343406082470626, 0.20960228932583325, 0.19515647653942136, 0.2611220026881481, 0.20485773802313234, 0.21438999202984366, 0.20440733711587922, 0.20931241215939866, 0.2101693697964494, 0.21164378486019864, 0.19543417079434122, 0.12594982473787497, 0.12601491508193685, 0.15342568069237805, 0.17246341185843372, 0.20004980124115923, 0.5779780736476512, 0.12252314083531779, 0.6011160687667274, 0.1540195395377023, 0.5645867435242968, 0.21103960213569672, 0.05168440841557187, 0.4218803802600699, 0.15501520588662754, 0.21033063051584722, 0.10511973986058543, 0.5121755787748725, 0.492749013853343, 0.19378337179016325, 0.18737341909765592, 0.1974022338293372, 0.20968961924087537, 0.20790422771043415, 0.19477988584792472, 0.18733104358622132, 0.18767478013104677, 0.19147903042811398, 0.09766322236311864, 0.08653064617465966, 0.07273691713997099, 0.09483042344121262, 0.0899854198101393, 0.1060009333754941, 0.08979913995658972, 0.08139061658492897, 0.08928292663797277]}, "mutation_prompt": null}
{"id": "79a30329-e803-4b3b-af09-369c7599b03e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        improvement_count = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n                    improvement_count += 1\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically adjust inertia weight based on improvement ratio\n            if evaluations > 0:\n                improvement_ratio = improvement_count / evaluations\n                self.inertia_weight = 0.9 - 0.5 * improvement_ratio\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance convergence by dynamically adjusting the inertia weight based on the ratio of global improvements over iterations.", "configspace": "", "generation": 58, "fitness": 0.19956730885823082, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.3373450678733819, 0.36033736648859793, 0.3628254475493806, 0.42458666150896973, 0.3697817629203076, 0.36218601349602164, 0.36677918466030124, 0.3515695239432005, 0.37592595014401176, 9.999999999998899e-05, 0.0027701645752052917, 0.00204161806552694, 9.999999999998899e-05, 9.999999999998899e-05, 0.023972510137478142, 9.999999999998899e-05, 9.999999999998899e-05, 0.005497800521409246, 0.09586940051662818, 0.10697189444498523, 0.09094674369605438, 0.1072772597787558, 0.11866474455521636, 0.115077407701626, 0.12514980365201722, 0.11391524800067221, 0.0983459775095824, 0.09057581944671622, 0.08229140419354974, 0.07407542337606265, 0.09677960182853751, 0.08988359324885353, 0.09420833940118989, 0.11769379963572013, 0.07780487184301743, 0.09187952403287347, 0.9832896768319298, 0.9730075053912721, 0.9777877014178131, 0.9749637624010749, 0.9725536810953457, 0.9765522419282873, 0.982479124132169, 0.9744770893086513, 0.9798127297649768, 0.2549415296123261, 0.28384846321189805, 0.21650879349046548, 0.2362442926448418, 0.23929129417882788, 0.2434681560171713, 0.2183049264903285, 0.21640181746025, 0.27206817417676765, 0.27274815002615094, 0.2308133635939611, 0.25417887679788864, 0.3490231274022936, 0.18888979996571575, 0.2906772793661154, 0.29492592238409343, 0.24917811433039183, 0.2447753599745489, 0.1315499635534516, 0.11108261730063806, 0.1360476991963837, 0.11993908717766932, 0.14151803731145352, 0.09258853933382871, 0.1410196219489187, 0.15024928389504288, 0.11037269270631367, 0.13390019351595106, 0.13186970477380222, 0.13069221458794056, 0.12645451713260714, 0.14414689667576353, 0.12073994672538069, 0.12715027416066516, 0.1381696827681531, 0.16363355663638446, 9.999999999998899e-05, 9.999999999998899e-05, 0.009160041123484564, 0.011143619737580823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07035091971326057, 0.05284681013238368, 0.07181590992783271, 0.08055184711507113, 0.07512435251330629, 0.02546639257415495, 0.0326077016752786, 0.10879369917082893, 0.07864085216280015, 0.05500345561735798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058967460899829294, 0.028984645920677066, 0.0741035603916762, 0.05054280250464649, 0.0764882933064106, 0.05064532031044966, 0.059011539364694165, 0.06759293866073335, 0.06588092040346016, 0.3467423851050274, 0.3322437536320383, 0.37051028017513876, 0.36062766777582145, 0.35122977343677353, 0.30992190811033205, 0.3510302565578559, 0.33830093253888815, 0.3574750068007849, 0.06412524967773736, 0.07251068407510952, 0.0895968669549444, 0.09330752445094781, 0.0985182253414838, 0.09970454571886445, 0.11581026495765945, 0.09296378050146936, 0.0917187339032629, 0.16784510177584122, 0.2013407538448324, 0.18762623900861375, 0.18789994540919486, 0.162625698491776, 0.21251028313995857, 0.22140144030739073, 0.17696264142625806, 0.22568902573054583, 0.2561442781092017, 0.24905993926751513, 0.25098226402167045, 0.24473866843030978, 0.23327633778917334, 0.2587381593106356, 0.252364366533918, 0.25439277697637763, 0.20551855145365072, 0.20468204497796882, 0.1803595942532925, 0.1433405272545839, 0.177375010213369, 0.21519073101774755, 0.20298603220579847, 0.21574969994699178, 0.19144597843572142, 0.18778496630938235, 0.22959739189987705, 0.2137675118426674, 0.22869723522612107, 0.21256267783026428, 0.24319542112985093, 0.20656163208081724, 0.22128505839151102, 0.22967877144025028, 0.22185876872315324, 0.18071922360499504, 0.18495013249450643, 0.20181664104910157, 0.2053927919575682, 0.18893971341492544, 0.1953363376425855, 0.20489061066418202, 0.20092534978974597, 0.1724704816125957, 0.12424792931836104, 0.12505186125565937, 0.15271184090363443, 0.49691791371373006, 0.19709904095800268, 0.5492268497355065, 0.12116491135466445, 0.16962965320916756, 0.14977866054758726, 0.4948110177725824, 0.20260385937328484, 0.5960519877286043, 0.454564925797727, 0.1678626512634933, 0.5321994554077825, 0.10488811980372015, 0.16720819150227761, 0.38531185980077465, 0.1969911316777796, 0.17598225163923076, 0.18992526938606769, 0.1939639451259486, 0.1898003681376158, 0.20063466313381972, 0.21340329199094066, 0.17767413229229112, 0.18790405390122256, 0.09029597731655103, 0.09373853357001882, 0.0867082126824733, 0.08429943267753792, 0.0834810556593013, 0.09458460675846914, 0.07727223907297853, 0.09626386634319262, 0.09418181164760753]}, "mutation_prompt": null}
{"id": "1ef80ad7-274a-4319-bb54-dce39b5584cb", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                diversity = np.std(self.positions)  # Calculate diversity\n                cognitive_component = (self.cognitive_weight + 0.5 * diversity) * r1 * (self.pbest_positions[i] - self.positions[i])  # Adjusted cognitive component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i])  # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Integrate a dynamic cognitive weight adjustment based on particle diversity to improve exploration.", "configspace": "", "generation": 59, "fitness": 0.3172674246940385, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8082468756239973, 0.7975217485149949, 0.8291210234580666, 0.7692558177637299, 0.7366734168988818, 0.7385470115578983, 0.8436739169558963, 0.8308206286440616, 0.8333447605425293, 0.6872281509284276, 0.7100387041465057, 0.7111478472379487, 0.6932047007516158, 0.7027324643940818, 0.7314368195796389, 0.6267898277677397, 0.685252504076129, 0.6965429728302213, 0.16708694839083327, 0.16516652614578708, 0.15064442039305015, 0.4804947409859991, 0.11813522262057685, 0.1286850650076976, 0.1541843228213836, 0.16131421147632174, 0.22795741506368272, 0.11745599177321397, 0.07740005632223823, 0.12451016779965973, 0.12782486866553866, 0.1651025096410107, 0.16874330697366058, 0.1140463436578919, 0.13343342108543854, 0.10987989836987266, 0.9681110822039959, 0.9721792205971878, 0.9780826425538228, 0.980056983870972, 0.9750303818897639, 0.9815114572547037, 0.9809292287555704, 0.9758296905260591, 0.981660814421555, 0.6600978288353319, 0.56175891352826, 0.6145903431577731, 0.4900210862283183, 0.4274265362141212, 0.4726210351314041, 0.42051728246479647, 0.3929576957099329, 0.39977119934490124, 0.8525530234965092, 0.6262045171164206, 0.3717794662784466, 0.3208887602610061, 0.7875853981947553, 0.6339354151610094, 0.23442428496539103, 0.5503765847549252, 0.3744250362476922, 0.178701135183855, 0.1852736021230751, 0.19556400901961724, 0.19261676077241563, 0.12482276812608395, 0.19562179248914802, 0.18204178832573015, 0.18523693769517047, 0.1757023869434099, 0.19038422172311265, 0.08812134506059588, 0.21217959349733506, 0.16995949326102278, 0.20790212508435335, 0.23471096587595175, 0.24230715011805604, 0.1316872703570955, 0.24218722025966488, 0.0054165087733339945, 0.0985970947342395, 0.0042914024744749035, 0.017466494607956573, 0.01893128873518579, 0.0008173243160108923, 0.0037944345111895483, 9.999999999998899e-05, 0.011592504099566026, 0.11483941536026832, 0.11324893564191807, 0.09226290129322767, 0.12676267529110752, 0.03864694153799553, 0.018582827397293333, 0.11242443930319335, 0.09811268668681317, 0.056508438375155845, 0.043014086196556445, 0.12928563053588749, 0.04341027202222758, 0.06405265030119012, 0.06028647905722917, 0.06416108757279815, 0.08774051329471677, 0.16872356974378966, 0.061483713683779806, 0.18439002849549258, 0.10579934854572015, 0.20983686850159722, 0.1179657329610716, 0.14634628109804804, 0.005636388917369506, 0.07949186851973467, 0.0799364491097665, 0.07983130187560805, 0.5113815013269942, 0.5430874048979619, 0.5125545300095019, 0.48207959103965303, 0.4836803948492432, 0.4933972033960127, 0.5480089589798043, 0.5224135022690721, 0.5370112906969234, 0.11970240212505556, 0.1584464656281771, 0.0888655524990396, 0.10950622423767253, 0.09924936225472736, 0.1562836749135953, 0.12876773370202177, 0.1120365822555548, 0.12347583072845669, 0.3474540048029209, 0.241854619131172, 0.19249658111403511, 0.2874263670436997, 0.2522599486188124, 0.2643785039840021, 0.16394878640940203, 0.17993416782875304, 0.2597485889665596, 0.4476603758474177, 0.25330225590506206, 0.35512201711517244, 0.38247721289263936, 0.37841379712066414, 0.4049923687492972, 0.38344180541667505, 0.34683299114860244, 0.38160886631642355, 0.3149081483302164, 0.26525696255865383, 0.16935324352945735, 0.2280996036216162, 0.244341026056332, 0.26424618142150447, 0.28605889818546526, 0.2895395699118588, 0.10291389468658019, 0.25583278689444156, 0.26262002749577085, 0.2378446154693683, 0.26584874270437453, 0.21107442769763796, 0.24245167414421298, 0.26512927623115634, 0.215371205777957, 0.25580929822934106, 0.18769258069518557, 0.22059218559879668, 0.24621498568268685, 0.23940065677115763, 0.7289759076321054, 0.19610385212621984, 0.1891591149586861, 0.20203060252433447, 0.20324444638410333, 0.1263766040241544, 0.12681034308398065, 0.1872683520422872, 0.8601744338814503, 0.19941615892388354, 0.8594292155055223, 0.12221043097902407, 0.17006336019456958, 0.16587110755807866, 0.6832514983064052, 0.21197900287491567, 0.5960429732617631, 0.6911568021433914, 0.16888406563792124, 0.2106896476795952, 0.6252769287373898, 0.8035569417040439, 0.7187928799833281, 0.19288439655293899, 0.2058026742912089, 0.20887996892897243, 0.19639135737103475, 0.18430337201134317, 0.1996774633272832, 0.2137244563753895, 0.18939417063628794, 0.18404549305807405, 0.08969935457974554, 0.10471275598220764, 0.09282105128981766, 0.10117085928494363, 0.09687408635595163, 0.09034328911910794, 0.1031870031493789, 0.09323519028966987, 0.10417097772922201]}, "mutation_prompt": null}
{"id": "84a461dc-b08b-417a-b344-23c9b835e06c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n            # Introduce dynamic mutation for exploration\n            mutation_strength = 0.01 * (1 - evaluations/self.budget)\n            self.positions += mutation_strength * np.random.uniform(-1, 1, self.positions.shape)\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance global search by introducing a dynamic mutation mechanism for exploration.", "configspace": "", "generation": 60, "fitness": 0.28374558139532446, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.6682589575053435, 0.6658864327550336, 0.6622502301976592, 0.6519446448684858, 0.6580979754028514, 0.6715756890522497, 0.6741792899868878, 0.6598678878051509, 0.6537045482560899, 0.19834249209896138, 0.20141799307127073, 0.2131332890593014, 0.20995918457544038, 0.24821180522705222, 0.19754417498917287, 0.18059435844180227, 0.2121609187701211, 0.28525066161186263, 0.14635937448547665, 0.14922728921842754, 0.14222056916693637, 0.15442915886494357, 0.11272771210256982, 0.14091317717174245, 0.126418695239209, 0.11995423946873196, 0.15742101220049476, 0.11186888350539592, 0.13749589460775657, 0.13551378358659572, 0.12151381211769474, 0.1072005237121475, 0.11164397180595298, 0.08716318944243817, 0.16653756338873715, 0.1075398374261255, 0.9760134416382296, 0.9710633323193423, 0.9797334779931671, 0.9718530138560498, 0.9747996239152485, 0.9787373137768146, 0.9793457214219045, 0.9592037720228144, 0.9783688077002585, 0.5151343054767282, 0.5184561766217328, 0.5036200222013438, 0.49376155445963554, 0.48802598713596224, 0.504610194943359, 0.4962644379708381, 0.49152242707915106, 0.5116234650245686, 0.7530901726033141, 0.17494763234496546, 0.22664985888139766, 0.28019570191427157, 0.8377652733514326, 0.2762723011968554, 0.23242203298898445, 0.2228367383874449, 0.2317607875136387, 0.204062221979598, 0.12826917470567245, 0.20192273772542957, 0.20598389422053365, 0.2057576120570349, 0.18078488702436613, 0.21234560329511531, 0.12901710287434476, 0.20266164490072347, 0.13170801765106677, 9.999999999998899e-05, 0.12964803087289345, 0.1353172182610991, 0.22700127834496797, 0.209416717987307, 0.267002839535018, 0.2240785173200729, 0.23822871229930775, 0.004909785084654894, 9.999999999998899e-05, 0.0707215876322993, 0.05501151872293708, 0.012796046669877659, 9.999999999998899e-05, 0.06201367444877248, 9.999999999998899e-05, 0.0948567118369743, 0.12140924233373296, 0.032636757302347164, 0.09343287301120728, 0.13397809463693844, 0.002542795602741732, 0.03484120835932969, 0.12010259175734228, 0.1365707721108843, 0.1301431432335528, 0.1416972319236124, 0.07950937299584782, 0.07863420380733455, 0.13682291845530703, 0.06317163790254765, 0.16129376547510987, 0.07806393329421113, 0.12163391975504234, 0.07882574577598012, 0.16258535893025805, 0.11224601976315518, 0.19220943967904813, 0.06946922339303385, 0.20970648575083117, 0.0842139149842075, 0.08162792095336224, 0.15278929624542703, 0.08167771911958333, 0.5515167793805554, 0.5315958762697, 0.5551820943055429, 0.5248797381813957, 0.5469980658985828, 0.5453508842584511, 0.5762518524128633, 0.5396944004702711, 0.5301608721480664, 0.09115368966157444, 0.13000425332096333, 0.09143277738543198, 0.13058489702123477, 0.13859440992569672, 0.09965986832457907, 0.09737456053617277, 0.11372450265313183, 0.17965977480545514, 0.2558798096402748, 0.21616615512516246, 0.2669831402645898, 0.1996391811423054, 0.33243679903108647, 0.30568153744867954, 0.2650576095099003, 0.3122695114813163, 0.18736764584523102, 0.3977612284147132, 0.3420716401327397, 0.2583637754038607, 0.40775481971734984, 0.2695039742121924, 0.3531361081509996, 0.28936458999314174, 0.40785123272409807, 0.3909027487163993, 0.26469736388573906, 0.270398877411566, 0.2127596248045922, 0.2308429317259958, 0.2892971115397409, 0.24880553578728282, 0.19081598849326475, 0.2562796483519536, 0.25592066955431936, 0.2466595749740007, 0.21381635863260628, 0.20616719824236618, 0.23612484205919193, 0.23275015090233042, 0.29343738857415014, 0.24004816742198032, 0.29697866830647557, 0.23052176242083644, 0.1894798456160367, 0.2114914863982189, 0.24519052060686686, 0.24923681420542942, 0.24588056503854416, 0.22487365140625437, 0.22108632211410595, 0.22406893758041524, 0.1971668168594941, 0.12654961286906075, 0.12629816289600027, 0.1540869525434988, 0.9005949433852172, 0.20047465620259763, 0.9073738106304557, 0.12253690989675581, 0.17008548606032292, 0.153837005223475, 0.711282330796692, 0.21312136951713578, 0.724285413829809, 0.7496063741076805, 0.16925781495258618, 0.2115377382154897, 0.793338369462553, 0.16810085872074365, 0.7334005656753815, 0.1987713701564191, 0.2134611484630764, 0.2074115327027226, 0.1977904008244008, 0.24183027697712556, 0.21214023851006014, 0.22286613990427317, 0.22407439239239635, 0.20760762740480165, 0.09852758002128903, 0.17602131865105564, 0.09052536007326706, 0.10128656050151019, 0.09864231291803294, 0.11958115006087244, 0.09677767742806731, 0.0857119237279883, 0.10108465093218832]}, "mutation_prompt": null}
{"id": "41380088-7a17-42b5-b2b1-7f821a6f4576", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply a non-linear inertia weight decay\n            self.inertia_weight *= (0.5 * (1 + np.cos(np.pi * evaluations / self.budget)))\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance exploration by introducing a non-linear inertia weight decay based on a cosine function.", "configspace": "", "generation": 61, "fitness": 0.2918844849129727, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8983477992096108, 0.8969097132184383, 0.8921240537842281, 0.8974959781334766, 0.8936992173487517, 0.8972370519768933, 0.8858204855145334, 0.8978593248488327, 0.8935102726976211, 0.8244210730111965, 0.6390150596481343, 0.7938915283732646, 0.42449768587942305, 0.4139058100087045, 0.24417994029437906, 0.2999786883269092, 0.7226309992069806, 0.2952956458896754, 0.14135919086509297, 0.1435249697523745, 0.206554368727068, 0.18115846659004609, 0.13398212287423106, 0.12438541754866583, 0.12918683947370224, 0.11931450809312505, 0.1291029537368651, 0.1549998091352527, 0.11101610066188072, 0.12149318217222349, 0.14086538240686586, 0.11241865933936002, 0.1829605256346264, 0.09870500391251857, 0.12860335439436998, 0.1313452405175427, 0.9795250586490887, 0.9723352053877478, 0.9792685171742614, 0.9750170940309579, 0.973638676808961, 0.9746618193167047, 0.9839489365097284, 0.9757813901744076, 0.9817842353537399, 0.3677414076757918, 0.45526583898296136, 0.4076899916982857, 0.41620970832609294, 0.3255530957523417, 0.4358140443894726, 0.37992301959165564, 0.41275940413337664, 0.3727239423382078, 0.3907750830400305, 0.1709340224060586, 0.22715727552670406, 0.38505060890772147, 0.1913671315132901, 0.37702628784735626, 0.1761717045552894, 0.12658749427448324, 0.325245234982958, 0.1490425236538191, 0.12651028837266698, 0.16911335744253464, 0.1603494330888765, 0.15690530262473912, 0.1393818177166366, 0.16621320726631383, 0.1594828945253055, 0.24599593594589209, 0.16563366260093992, 9.999999999998899e-05, 0.18988446011850213, 0.1588931899777415, 0.14620639300695804, 0.20326690229643662, 0.13452541621983893, 0.17754497933309576, 0.12815531314507667, 9.999999999998899e-05, 0.08419608402028567, 0.06550429939606783, 0.05983189659333965, 0.010539659984747374, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12128448159429284, 0.09255186339316102, 0.0670017330334125, 0.07246203867297041, 0.07910937629630332, 0.038843350510907704, 0.019931000673478416, 0.08370608265687518, 0.10782236996008743, 0.0716599296711623, 0.04944568768111679, 0.061307067096804335, 0.04913684410703534, 0.44658548121704744, 0.079072790000283, 0.19091764665262856, 0.1465634403063204, 0.1535729366572579, 0.0726792566457738, 0.17680981937194795, 0.113528825100629, 0.13602938264689057, 0.04298906709915595, 0.1440867489898484, 0.006235185559452683, 0.23221207366468644, 0.08223868501493581, 0.08218608232340863, 0.5384211742501432, 0.4997689208788253, 0.5123001466780992, 0.5948047370371043, 0.5428093435397134, 0.5762251507706487, 0.5108215252451374, 0.5598278397299394, 0.5253830585692165, 0.05673856159987134, 0.09410656305583376, 0.14119229440509606, 0.15764139218527584, 0.1409986140648103, 0.1154846692147079, 0.141210054204, 0.1127528552668835, 0.1463976191944657, 0.19942159376814939, 0.24071443930967173, 0.18924044884923696, 0.16185353519196088, 0.31185021810046687, 0.37664149688845694, 0.19819200154604655, 0.2422535436423161, 0.1943350004310589, 0.4545399360599709, 0.3209556635679792, 0.3424333172187304, 0.33963417780694494, 0.3880100521477349, 0.3368448378786534, 0.3001382214807864, 0.43949227440098637, 0.41208720025202017, 0.22599596172176384, 0.31995210682779185, 0.21258504756448704, 0.27286349724449765, 0.2465092648818068, 0.2672887653994047, 0.17746029205779068, 0.3103352288058818, 0.21663713257018546, 0.25465233602237636, 0.19992796548068592, 0.19881870176024408, 0.31244769559438934, 0.22435250153300623, 0.24938496640488994, 0.22261223452842427, 0.27403229197948886, 0.21551409833961677, 0.19209108120416218, 0.20788332583209213, 0.2273243664544381, 0.22269128824666173, 0.20865579174525228, 0.18940714873019182, 0.22292789552448855, 0.6762523321462544, 0.20372673538361785, 0.12658685717634222, 0.12689126997791678, 0.15382977863854108, 0.9111905062802872, 0.20026772781047697, 0.9212720543451067, 0.12247522651530363, 0.169601529376192, 0.15352327873121996, 0.6754877305501409, 0.2119699561775844, 0.4624019501753194, 0.4684732556629432, 0.1683923546837528, 0.6082642681586068, 0.10490236845034473, 0.16810434498840932, 0.5811731068765478, 0.20195692481213168, 0.20204387708490001, 0.18369635838150256, 0.20339839455500464, 0.190932539889346, 0.21731401104131465, 0.18725837607435836, 0.21114144377365496, 0.1855781204549346, 0.1078346444784749, 0.0633039783379119, 0.0828982999965745, 0.08509215354578792, 0.0747639911738528, 0.11968941282547818, 0.09798501135705506, 0.08127698837329478, 0.08882520157441753]}, "mutation_prompt": null}
{"id": "a11fb83b-d646-4ac9-908d-bbbe53cc121c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "039652af-8eee-43bf-a102-a43dce6d069c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "7e2f1448-687e-42e1-af10-19a7ba052037", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "430f01b5-1d86-4507-9bc3-009d147369e3", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "ef4e2216-8375-47f7-b615-73832d359bfe", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "00ac650a-ffac-4e0e-94d5-3c3bf1136396", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "a9d58c0c-7911-4382-8cb5-9b0a7ee08e6c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        self.momentum = 0.5  # Added momentum factor\n\n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Apply momentum to velocity update\n                self.velocities[i] = self.momentum * self.velocities[i] + (1 - self.momentum) * np.copy(self.velocities[i])\n\n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance local exploration by introducing momentum in velocity updates to maintain diversity in the swarm.", "configspace": "", "generation": 68, "fitness": 0.35379788552702174, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "380083cf-b09e-4481-8bb7-a6ba9b6ac7d4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "e0aef94a-9dfb-4394-92cc-940e9cfc203c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand() + np.sin(np.sum(self.positions[i]))) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight with diversity\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Refine the adaptive swarm dynamics by adding diversity through a slight modification to the social weight.", "configspace": "", "generation": 70, "fitness": 0.32284378352254284, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8596743660177528, 0.884699643222447, 0.8734929818228849, 0.8069690294474747, 0.8502280328898173, 0.8196924295669277, 0.7783021175048556, 0.7748037097882694, 0.7932367865921318, 0.7034571077833042, 0.7114491104787913, 0.6903522360463489, 0.6776145507281042, 0.6409181747343322, 0.6523697127316312, 0.7288507469518358, 0.7138113645545059, 0.689454321680952, 0.17005420721884434, 0.15441305052726761, 0.1579872002012771, 0.12543710912650552, 0.15080405691448107, 0.1804233271879453, 0.17238177172556646, 0.14948966351826143, 0.152686050237414, 0.0978741389068446, 0.12206488608759702, 0.09141411624409901, 0.1275169198038968, 0.1472041837753192, 0.14466931490214718, 0.1139169969740369, 0.11466716882024808, 0.13735822311831414, 0.9672241667328284, 0.9708979833348799, 0.9779567070597547, 0.9730894169773919, 0.9756739690220589, 0.9783530130213645, 0.9839370581705842, 0.9757846759384864, 0.9793993082063432, 0.5331452302065478, 0.5468965988058441, 0.5336577491499823, 0.4455306937062915, 0.5751286422316115, 0.15269308539933923, 0.4387037097655495, 0.5130134007773622, 0.46874313456082584, 0.35042755728957187, 0.2091976123205782, 0.22470542130566495, 0.8594973510740018, 0.21743047472717547, 0.35178111303529613, 0.22836855650306964, 0.12768573323985843, 0.38232543829250043, 0.15304845711551718, 0.11751065845502129, 0.18056364978532324, 0.2122715199483124, 0.1522592834227937, 0.11920712071951989, 0.17493862751323197, 0.3445343648122656, 0.13258780077178256, 0.19983872846495554, 0.2024072781839933, 0.19544152831218975, 0.2790710082026603, 0.19764993322328783, 0.189592124358277, 0.24740852021331727, 0.2305941945631772, 0.23331196128854526, 9.999999999998899e-05, 0.04664030843621514, 0.07553101242323357, 0.08503056200898695, 9.999999999998899e-05, 0.04345285038270741, 9.999999999998899e-05, 9.999999999998899e-05, 0.04972482061236916, 0.16853733398010462, 0.04878578632178121, 0.1482525961180039, 0.08034524406529109, 0.019454936080136265, 0.011493182443466088, 0.1314338605438461, 0.07690862667725251, 0.09481205482502808, 0.16702365658543017, 0.07243873344764051, 0.0467068977347852, 0.2765414326537271, 0.06819038312045089, 0.3303016158406672, 0.09546268428168769, 0.07531314461113447, 0.06314491546722034, 0.09847477176358466, 0.3593451369548315, 0.2164599781799319, 0.06232228439880505, 0.1669747842423034, 0.06573179110856686, 0.0801270281048686, 0.2537567171719558, 0.08123638880004291, 0.5006269882973441, 0.5078621186230685, 0.5789612433451706, 0.546766440289302, 0.5251360424570406, 0.576348556011445, 0.5582598738205623, 0.5681455035188654, 0.5534961709866736, 0.09199454999624213, 0.12896674911917194, 0.07586460373535953, 0.1716003196521615, 0.12492967802806887, 0.10383255791011214, 0.15305771611918484, 0.0932982497275543, 0.11831511370066838, 0.5941701188577514, 0.24261081623644032, 0.4790492575789984, 0.23890619015606396, 0.35168209204564327, 0.44422262666981627, 0.387952742797543, 0.2810778393828365, 0.3858416941790399, 0.36838583945183645, 0.45192975647045763, 0.37335893810166576, 0.39490644648840156, 0.2985869325086673, 0.33547006745174435, 0.2120368935271676, 0.36444781848874697, 0.46402614138099174, 0.2580250440185917, 0.22956078948561953, 0.2390208340186467, 0.29244602011658105, 0.23790805397381765, 0.27791194965466726, 0.21150794435339448, 0.36543563084841857, 0.19343476338888577, 0.21340451818316275, 0.23570551875493406, 0.20113672544282069, 0.23376928361301663, 0.23241270841463346, 0.22547176264001323, 0.2328065224893574, 0.2622747205389099, 0.22693977943097599, 0.22650569488630112, 0.22560863654014462, 0.22528271739235484, 0.7977689567803795, 0.22198927843450755, 0.20948208113791789, 0.22071106896726866, 0.22808834782358767, 0.19398288963292065, 0.125126392366122, 0.12626801830569256, 0.1543459229382803, 0.8769625950642033, 0.20126307203166338, 0.8744699455485829, 0.12290835587383064, 0.9085353522395454, 0.1540168300711815, 0.6824655315353806, 0.21220067136206267, 0.7960233419201186, 0.6742102184372857, 0.16970265417726327, 0.8431983589904433, 0.5699891537380839, 0.16742611504060623, 0.5334459533235113, 0.20244469017732336, 0.21135013607732922, 0.20831607149637676, 0.18883293582647798, 0.1958666067015985, 0.19917971276918167, 0.18876499566547333, 0.18312183247989156, 0.18629841947115588, 0.10765893932758153, 0.10422844730568193, 0.0909370620728649, 0.10141739142861295, 0.07317512658448921, 0.09916722087472751, 0.12198297155810289, 0.09723990950917827, 0.0934204730782916]}, "mutation_prompt": null}
{"id": "1cf594b9-67fb-45f6-9638-78749b64ec0b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "9993230d-c743-4323-85f1-9fe94c714e47", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "bedf8831-0aee-40ca-a990-32f54befab7b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "9f8a23a1-c8e4-47a5-a2bd-0d14fb644a12", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n            # Dynamic particle scaling\n            self.population_size = max(10, int(self.population_size * 0.995))  # Decrease population size over time\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce dynamic particle scaling to enhance exploration and exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.3205890207299816, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.9090170964181615, 0.9293177315655164, 0.9253763824017829, 0.9066511346835434, 0.9221918195803571, 0.9101779710705634, 0.9025799496845797, 0.9164355144845902, 0.9095423841697313, 0.8302187950470328, 0.858047876764034, 0.8335720283669348, 0.8454508238385812, 0.8555282448766879, 0.8485937646318154, 0.8334688579238113, 0.8571763417299675, 0.8220718421137247, 0.15688533380759362, 0.14427749650264887, 0.09900823906632228, 0.1420521954108772, 0.11661053072870986, 0.11686551522790656, 0.12422019360446435, 0.14395860971786134, 0.1457082400677595, 0.14464100026875382, 0.07035721305536768, 0.11132296441018885, 0.11695307790109821, 0.11539989309568643, 0.08226271224167647, 0.11751977119350465, 0.14652629376649384, 0.10459586433118839, 0.9837928788706651, 0.9802741461786526, 0.982703420650274, 0.9796837141009875, 0.9827873224499687, 0.9762502433103184, 0.9821574068125388, 0.981820646788861, 0.9847967623135692, 0.6901265152592598, 0.7689960606096351, 0.43875438022736757, 0.7271934010375342, 0.4825686848630161, 0.45705692144226906, 0.7014372916028173, 0.48241803238484593, 0.08883553096832753, 0.23007691077575232, 0.22627678177166344, 0.22508935891215187, 0.2798899172659637, 0.19450292671385072, 0.3662422158732832, 0.12690273623937887, 0.23632877630732851, 0.23751402928102094, 0.3508427330844365, 0.18153159692039622, 0.12322123418794251, 0.15585345190239697, 0.13355982975896152, 0.21108198363175845, 0.18434824769085978, 0.1795726340950543, 0.24595309408539756, 0.1831226398162451, 9.999999999998899e-05, 0.2087223611992307, 0.18872114400768392, 0.13217827488241984, 0.15231896789755228, 0.2286882372487936, 0.19525847509379546, 0.19036349399752994, 9.999999999998899e-05, 9.999999999998899e-05, 0.006945995511014713, 0.058473041442138274, 0.0667101609368117, 0.016746272220585334, 0.00880420825472683, 9.999999999998899e-05, 0.10391714611547853, 0.12218778775543693, 0.03200888502621346, 0.09814651257605678, 0.07358555683078105, 0.013470138650696017, 9.999999999998899e-05, 0.06135187573069312, 0.10482064665784163, 0.044263650221783246, 0.19148407285617397, 0.23303480409268718, 0.1076743346814224, 0.25540913198567317, 0.08192092642641746, 0.1763471041623359, 0.0993105209397418, 0.242695535358194, 0.11600681923872602, 0.36973288088771883, 0.18891691737412686, 0.19337001892401506, 0.08304168668063217, 0.1317999949118952, 0.006590562814422274, 0.08436866055479808, 0.23924341881030797, 0.08320846409287497, 0.5010352390801802, 0.558967177848928, 0.545997498912671, 0.5433715942901971, 0.5739817353519886, 0.620757572512348, 0.5815059048291749, 0.5757264606431851, 0.560903899298894, 0.07905148906844839, 0.09769483219690633, 0.10941822757262232, 0.10562732039374856, 0.10379226882664805, 0.15570031948620144, 0.1105087764895123, 0.18813142827340823, 0.11147817236680424, 0.1932857366199432, 0.2014099845062568, 0.2409779139326923, 0.20040578901058248, 0.3109179176190271, 0.16574422411241996, 0.17357368065141687, 0.35166090847473797, 0.27656524028272256, 0.22037130922105042, 0.28238805191924277, 0.3680737140095103, 0.35927263630419903, 0.3156287695291138, 0.4430566467262954, 0.35403823170457616, 0.3284724123891094, 0.3832355840832078, 0.26695834740133806, 0.28885414972147316, 0.18551502373630668, 0.2556336031489188, 0.2594292273991329, 0.2452438086308485, 0.2741919560997562, 0.23439213445130436, 0.08300278703724795, 0.2261622948121068, 0.21947125723972816, 0.19584710926973525, 0.2592613626654048, 0.31340611065901114, 0.23776067920707322, 0.22373118038610929, 0.2501724145936829, 0.21536630706696835, 0.20393536176711502, 0.1942408255057908, 0.20523160949188513, 0.20014767067369965, 0.21272744722539338, 0.22557753520659785, 0.18638239831469228, 0.22687819212767968, 0.20026135396590306, 0.9371161521340108, 0.12631739099179762, 0.15335122543977087, 0.9385991081974027, 0.2011848970262503, 0.9274192374282185, 0.09976530435761743, 0.16904783094872144, 0.15904624360625752, 0.5896199923914873, 0.21334303846509106, 0.9040263768603002, 0.4860352269318021, 0.3782703504038065, 0.21169544577415678, 0.6102873066699712, 0.6404259456007888, 0.5370971543220834, 0.18250482386229594, 0.20455667113501508, 0.2256788894356654, 0.23521707465995156, 0.2143058316329267, 0.2114391317483788, 0.21500011929384155, 0.20548952658284747, 0.24991893142037314, 0.08887821585294109, 0.11072667322908492, 0.08589031363082666, 0.0911343144144161, 0.0883382669242121, 0.14089128692477937, 0.08020140784728025, 0.09571255880232588, 0.10569854740275642]}, "mutation_prompt": null}
{"id": "9dc7e930-8fdb-4218-bed9-2863b5de7c45", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities and introduce dynamic velocity update\n                self.velocities[i] = np.clip(self.velocities[i], \n                                             self.vel_min * (1.0 + 0.1 * np.random.rand()), \n                                             self.vel_max * (1.0 + 0.1 * np.random.rand()))\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce a dynamic velocity update mechanism to improve exploration and exploitation balance.", "configspace": "", "generation": 75, "fitness": 0.31899399039473825, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8405430472326245, 0.8571049613421018, 0.8619393886046569, 0.8514301298835556, 0.8540656999585137, 0.861561992760858, 0.8471051760968884, 0.8609718377745162, 0.8535839141442384, 0.745124328111948, 0.722884021708806, 0.7337988918688598, 0.7582186334024823, 0.04406376289364522, 0.04203864442649197, 0.7206709896462669, 0.7110338503563638, 0.7276484600048461, 0.1426623888172066, 0.17847102212067367, 0.16237124915650725, 0.16418419234686532, 0.15661930235343569, 0.15626842959468445, 0.13706605330432908, 0.1203851697720213, 0.11130402239891701, 0.14047519934990027, 0.17366109947460995, 0.11910941464031455, 0.1293607468902277, 0.11383598078085722, 0.11289429941703422, 0.14392406517636114, 0.1368284209867301, 0.14837216068442538, 0.984730195312312, 0.9622087068794971, 0.9794088885553767, 0.9804288848905447, 0.980221908075024, 0.9698863569613243, 0.9843015251601871, 0.9727194261718156, 0.9833782941046887, 0.7404735472655557, 0.7345968458768326, 0.6972404368549765, 0.7112869007614271, 0.7476207766322068, 0.6557471169398815, 0.7337686663316074, 0.7499699306370382, 0.7359873453972032, 0.735388207472301, 0.20693690315711255, 0.22505938343604437, 0.27730614369012374, 0.21940921648718548, 0.192732418117313, 0.22527055911839844, 0.8106624369149772, 0.7947343161783332, 0.11718162526917586, 0.11666495699735202, 0.19822483044118877, 0.127412854348524, 0.2168511996064898, 0.11078327902488161, 0.13143131642136707, 0.1975828264103784, 0.19343490639003558, 0.23061287790875418, 0.16544926671506033, 0.18843296050815128, 0.20115012805555765, 0.20614529420085748, 0.20279142471845635, 0.23275096195361344, 0.24078095185011616, 0.23760447892183878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025704089998078605, 9.999999999998899e-05, 0.017473043658443377, 0.03221227467437149, 9.999999999998899e-05, 0.09971909767088705, 0.09662261541904904, 0.0459242072984154, 0.11700527571489416, 0.06554858463412949, 0.03985467103618212, 0.01695901661732424, 0.07151729659562844, 0.051615574182295676, 0.08543091874651854, 0.10912768550211549, 0.1120135641183182, 0.04666352706149812, 0.07303953733878465, 0.159458723319178, 0.08447744233519949, 0.09344262346210175, 0.11147340232587033, 0.06708879014168978, 0.13366679779290536, 0.14398614262777176, 0.14395386746839944, 0.25358898489601656, 0.12260410972498192, 0.006125829369294844, 0.09264359061314753, 0.09185855103940688, 0.08260189185806999, 0.5137250263188022, 0.52957629159594, 0.5495690055389244, 0.5675684799164287, 0.5488396417482124, 0.5142329143673678, 0.5306463601813236, 0.5391029807742719, 0.5550418788289047, 0.07191875582870455, 0.1204832681515633, 0.1369362277639058, 0.10635861243111577, 0.10686761600439987, 0.13527277905146695, 0.15836927132685052, 0.13409204438658473, 0.07746421722643193, 0.26962498324391493, 0.27438426705028907, 0.26553583217752375, 0.23237252225840155, 0.22837109935684619, 0.3827479628460515, 0.27019422122386316, 0.2364810901702733, 0.28348431847293365, 0.2770520012187264, 0.3879870592386907, 0.4278857436815575, 0.48075904053345175, 0.4267836227634034, 0.30931899746754976, 0.42477450120693183, 0.5167083168291682, 0.4764064672042706, 0.30303421258188323, 0.24527778601639505, 0.2744996256753942, 0.2817111237010642, 0.19576378172211173, 0.3518636944820158, 0.36268818557293925, 0.22521216966082747, 0.3415027583227177, 0.24240141052194508, 0.235774321912274, 0.2248478810712642, 0.226159859415902, 0.20491109768504812, 0.2247588274970076, 0.2501672684267796, 0.29499109107474086, 0.2593872346955862, 0.251961149657034, 0.2050777497845243, 0.2096721098292248, 0.24900650464694085, 0.19782177151938762, 0.22501428006025403, 0.18426245258818585, 0.19860274941251888, 0.19553721775576427, 0.12527863319750143, 0.17811753017286613, 0.15416540862090788, 0.1732073918239435, 0.20008240724240767, 0.8965625174773525, 0.09971732091215746, 0.8886178023650658, 0.15281350120741133, 0.8231609761465501, 0.21171947599117946, 0.8488503681992818, 0.20998093042440813, 0.15398696887704122, 0.20978007755138972, 0.1050982568805986, 0.7758606755170604, 0.7247680152720026, 0.21208757012760693, 0.21378703043410574, 0.19014413236226646, 0.23626631764926065, 0.20823282295047885, 0.2026494185206349, 0.2264908527986208, 0.19270153776660115, 0.23263137052724592, 0.08346891271268031, 0.08434481217520828, 0.09358230180352656, 0.13370611373277985, 0.09708918255417975, 0.09579526265206473, 0.08476006428187544, 0.10912597834371407, 0.10298010047188477]}, "mutation_prompt": null}
{"id": "ff5fc962-86f0-4d3c-a056-79efa0c8816d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(np.tanh(self.velocities[i]), self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.98 + 0.02 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance velocity update with adaptive inertia weight decay and introduce hyperbolic tangent function for velocity modulation.", "configspace": "", "generation": 76, "fitness": 0.3162153521736958, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.9007123146453243, 0.9019169392250858, 0.9022796817829548, 0.8979532108162863, 0.8881479935585478, 0.8957052742856064, 0.8947714256689632, 0.9051773803686681, 0.8953835983379096, 0.8185546861083873, 0.7850326344504125, 0.7633198029210985, 0.7878893453544648, 0.8087582267102195, 0.7884272982765073, 0.7954555400062241, 0.7976889332204771, 0.7994983025357665, 0.11542824589331235, 0.14326747737438095, 0.09217190808940545, 0.11187027276573613, 0.18592456779444244, 0.12350281512377914, 0.09844039536887972, 0.18385799209553033, 0.11639046674886466, 0.0716659445259491, 0.11738186336279888, 0.13888414760514622, 0.11634632183105764, 0.09104691226072759, 0.11584986012391274, 0.10122584908884691, 0.11487438696379071, 0.09046770239067048, 0.974521381068305, 0.9689229693602719, 0.9725364377426116, 0.9699000193394985, 0.9727741995597671, 0.9727544851969732, 0.9788629092811243, 0.9727506898562445, 0.9766589393146374, 0.6286661814359666, 0.787390838931182, 0.6741269067205221, 0.599303044612925, 0.6499570599749506, 0.15374114244120685, 0.8021045861238074, 0.6688329148068752, 0.6550913064606343, 0.39588568832533233, 0.1417421531602766, 0.22662851340497114, 0.3595161964777682, 0.19428623797640798, 0.2140025992593163, 0.23638791631645495, 0.15225298590995773, 0.17843410203585386, 0.18863961331125667, 0.1987621905461785, 0.2016748872872326, 0.2879947797079352, 0.1308606142478651, 0.14247202675839277, 0.19182356671692302, 0.20006549228364745, 0.12969680326181499, 0.19809104821238532, 9.999999999998899e-05, 0.308905059767723, 0.18303552337499673, 0.13327472732153345, 0.20101385166464392, 0.25523287936124983, 0.22399980599862457, 0.13400714830276883, 9.999999999998899e-05, 0.05736647381936966, 0.011153711028053848, 0.06351139967282182, 9.999999999998899e-05, 9.999999999998899e-05, 0.017957919502233355, 9.999999999998899e-05, 0.07471220387645772, 0.11574253897579145, 0.07383707627163605, 0.1945050401263606, 0.062482589267419786, 0.02104772019638823, 0.028119252829439167, 0.1187250665821239, 0.05964670308594178, 0.06474255382531102, 0.22375775930970065, 0.08292741211713295, 0.12426926298814811, 0.13098469524126233, 0.08808870961143989, 0.16092466999048938, 0.0989171297452518, 0.22159815973113273, 0.07347953900314463, 0.08988526645126171, 0.09856783885375042, 0.25736988461149, 0.08579106811159543, 0.08948494481882263, 0.006753506995012648, 0.22566264247898593, 0.3627610080963929, 0.08335013790290502, 0.5262658061642237, 0.545382965912137, 0.516235286802037, 0.5417286502774534, 0.543982560747971, 0.5134196753337115, 0.6587504193101853, 0.5745684853539323, 0.540091356490831, 0.03843907049097184, 0.15694320594266542, 0.14205011373542753, 0.11645389057093891, 0.16358565732193642, 0.14211703512778062, 0.11851914629743154, 0.15632045624115576, 0.07364352874127578, 0.2663919911295457, 0.26897641473756106, 0.16706242551760875, 0.2791464029502231, 0.3147376532642421, 0.26054206884834996, 0.24194401495310147, 0.42419427926620756, 0.2260171851762819, 0.17460597957434287, 0.4305615163713622, 0.16904306168463556, 0.3972102730670597, 0.25052201974268484, 0.25264317171257056, 0.24119160799434725, 0.5205982041762898, 0.18085887775621612, 0.20726187439125987, 0.27793558961158993, 0.17186305957644765, 0.3024967239857429, 0.22228179053117425, 0.2283476097122369, 0.32128218225197647, 0.26830865805238013, 0.10708555387986796, 0.2090448151679304, 0.21610427947848165, 0.20960803885096424, 0.2658091891303309, 0.2214607616302765, 0.22141127899326118, 0.2734044055659659, 0.22112117544461618, 0.21910767074379434, 0.20871576952842708, 0.21056122104970054, 0.2510544268629966, 0.18966306728512616, 0.19425941729686114, 0.20102009389745013, 0.2263835378047916, 0.1774628062250394, 0.18786360628903487, 0.1268853122638346, 0.12687344536588074, 0.1544742065262662, 0.9197968073427466, 0.20158925312198495, 0.9357918615751305, 0.12279230576450095, 0.17033101729179378, 0.15403908501931673, 0.6161574812154154, 0.21178883742794408, 0.7491072245442991, 0.594392497485154, 0.16947384493075246, 0.9191494758877411, 0.10522392334912234, 0.8493069982013894, 0.6618918348872405, 0.2001367051049322, 0.20664126798985138, 0.21344077917293658, 0.21791052337498873, 0.208472710262528, 0.18567321929767633, 0.2369531567424067, 0.2141766347597267, 0.22585222558385099, 0.08374032205593229, 0.09769898688499157, 0.08346605195550105, 0.08820317769831998, 0.087716882410656, 0.13966112187602175, 0.0995538956346218, 0.07037221090976564, 0.09664169756422836]}, "mutation_prompt": null}
{"id": "867e6bcd-54b2-4fd7-8db1-7dfa2a4e775c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + 0.5 * (1 - score/self.gbest_score)) * r1 * (self.pbest_positions[i] - self.positions[i])  # Adjusted cognitive component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Enhance convergence by dynamically adjusting both cognitive and social weights based on performance.", "configspace": "", "generation": 77, "fitness": 0.24200644103216137, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8511849607956801, 0.857353268380591, 0.860620424535589, 0.868019029270801, 0.8684046515748255, 0.8627399104857738, 0.8786150223182909, 0.8718637811163389, 0.8536421604530579, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11548911614437907, 0.1517168037235348, 0.10759749445273903, 0.15598502515158907, 0.09439493846441982, 0.09634750275310566, 0.09639191952509896, 0.681195351314081, 0.15121295436084803, 0.13355986679802478, 0.09383036728104721, 0.11399443139591547, 0.03234903055704397, 0.024956916578650623, 0.017679467309948294, 0.11740768786483602, 0.07055115979141557, 0.04505548810020721, 0.9796916902345992, 0.9721792205971878, 0.9778379762072857, 0.980056983870972, 0.9785268492703384, 0.9815114666143789, 0.9809287749150196, 0.9689530921839293, 0.981660814421555, 0.03819960574679282, 0.0908518491108341, 0.0889930110150482, 0.06341574040890774, 0.07690873810540944, 0.050789283719093525, 0.7006335901750125, 0.706476650169892, 0.08804866594948257, 0.22686937104378946, 0.9004113812820193, 0.13955498372910713, 0.12939470012360055, 0.19449479415944138, 0.19495942082220186, 0.07256962654196608, 0.05931056463008866, 0.11138230426380147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.42224772401475874, 0.1332909889681767, 0.1919710988840888, 9.999999999998899e-05, 0.010460270944813943, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01944599216153564, 0.02737148898709907, 0.031845688166542985, 0.07511022663495004, 9.999999999998899e-05, 0.09122722918216108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00848001776148144, 0.053791768228352854, 0.022713919749976275, 9.999999999998899e-05, 9.999999999998899e-05, 0.054177372448187655, 0.0499395010534196, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03491911092094724, 0.00799773706167739, 0.009745805249595119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07953853757203011, 0.16950082801427158, 0.0818275877049276, 0.5726341350825455, 0.49021816966767884, 0.6284880096257623, 0.5014539995570197, 0.5211296215103449, 0.5330899101577744, 0.5999719801555509, 0.5367231782267494, 0.5812980208836094, 0.08289168666877089, 0.10032149527610368, 0.11565091621603807, 0.1779725280388893, 0.11457809266279273, 0.08474829380633786, 0.15607128670017123, 0.11337252438727574, 0.10533026858074068, 0.36330260689076643, 0.26124412199495095, 0.2490761019485208, 0.1563300468187765, 0.34026462955691683, 0.2638830297516751, 0.19451921259921146, 0.3136459107270846, 0.5130117980328238, 0.3623376848865978, 0.3334088495828067, 0.3155174259251745, 0.38559870543558705, 0.24255835640140821, 0.3470310307111131, 0.3620810761820621, 0.43843671351233926, 0.44582725664887857, 0.26414462600008837, 0.29314730728337324, 0.06955741010290517, 0.17353025099246588, 0.2161125493657322, 0.17236273971936011, 0.20730174508223287, 0.35397831318383755, 0.19088588984678356, 0.25024519015158064, 0.21970250400914293, 0.21003667362384026, 0.22199819959615097, 0.2807043714911278, 0.23363627522405206, 0.2627752204052213, 0.20199978692872822, 0.24584497598512167, 0.19309923387740202, 0.20691281082977186, 0.21984732026692633, 0.15079960503970746, 0.1652992421163446, 0.15517064419052606, 0.14777138283693947, 0.14061247141125133, 0.16245508982784918, 0.12492850676429257, 0.17787581672162667, 0.18813114335515702, 0.3911739769680971, 0.1207914665021157, 0.12818708469391882, 0.12094601479539402, 0.1698550902801913, 0.16142905819761255, 0.6909174400783133, 0.21090494025999018, 0.8154562978350463, 0.5731424559328402, 0.583507881100142, 0.8704920824472149, 0.7575790778912962, 0.7851925827648042, 0.755311819050294, 0.19370113072371142, 0.221169923589159, 0.23028976982394855, 0.1588420936341659, 0.17870388100066392, 0.15521095540172447, 0.24036310598561417, 0.21479270713199317, 0.20039055487813695, 0.09592555802839342, 0.11284106553807705, 0.0969587416906299, 0.08852411778290259, 0.11033959394422121, 0.17701170817316847, 0.1039707835849063, 0.09898357806911828, 0.06892598061008703]}, "mutation_prompt": null}
{"id": "7bd94bb0-6efd-4f87-998a-517cedf4a262", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i])  # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + \n                                      0.9 * social_component)  # Added momentum to social component\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n            # Dynamically adjust cognitive weight\n            self.cognitive_weight *= 0.995  # Decay cognitive weight to balance exploration-exploitation\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce momentum to social component and dynamically adjust cognitive weight for enhanced exploration-exploitation balance.", "configspace": "", "generation": 78, "fitness": 0.3153840750764528, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8686709782675178, 0.861337895096148, 0.8607309693074419, 0.868544981902595, 0.8642560903033855, 0.8682887907302204, 0.8770084381751259, 0.8522248063490694, 0.8682470331317749, 0.7502759224808404, 0.7110297512110415, 0.7544349743952097, 0.7624367186694267, 0.04481070574212076, 0.7322120075755636, 0.7249060686022153, 0.7648106994418381, 0.7443449346316862, 0.0909776832350484, 0.10782644232227179, 0.15301196493651426, 0.15556376754059276, 0.14384573769360254, 0.11513975543348565, 0.09039458599555161, 0.15516288036988557, 0.1242778292403125, 0.11304041698556788, 0.13556435186223448, 0.11770876787134077, 0.1399375690284671, 0.12288266821913385, 0.11737726316929387, 0.1536429327084492, 0.11021763263800277, 0.11504841228244111, 0.9802399053852351, 0.972934981495058, 0.9777357691605734, 0.971172495444386, 0.9778615711442413, 0.9796015508331741, 0.9839627138750631, 0.9761450602050501, 0.9809205989887276, 0.7837608877840908, 0.7894694911333382, 0.5281895588863434, 0.5362298417750788, 0.22531395606212123, 0.523879215907142, 0.7654358045742851, 0.6644329584942328, 0.08846329679051157, 0.38378863916871564, 0.14066285476537654, 0.8285671090164928, 0.8565974926495256, 0.2738621843790091, 0.27766512687580847, 0.16633064901285066, 0.12674096755041175, 0.23479517160856944, 0.14397094237557484, 0.19517054663385025, 0.2124579586297044, 0.19480353517493, 0.18076310579415533, 0.15504815814071737, 0.17418960190130806, 0.1712675558868112, 0.16823537300368885, 0.20969186064499112, 9.999999999998899e-05, 0.26901596481686496, 0.2570343343121885, 0.2160208256077124, 0.1424335536477278, 0.23431330919876292, 0.22152951940953158, 0.236089239750239, 9.999999999998899e-05, 0.005899836769771349, 0.01321146242349791, 0.050563061009234245, 0.012480255480579738, 9.999999999998899e-05, 0.0448399056634482, 9.999999999998899e-05, 0.0856939683210467, 0.10263021406854222, 0.068614510261652, 0.11108623250932181, 0.06632344573138704, 0.023604708081324866, 0.06408515595083886, 0.1392957748063327, 0.051781908041951485, 0.11530564327682769, 0.18293971839126066, 0.12075745819680195, 0.0457561313089172, 0.2992237671108883, 0.20340176736674898, 0.10555228046282228, 0.10872086941462278, 0.14598293367702608, 0.0938226726581799, 0.07073141980747255, 0.1358844865672354, 0.09979159457552456, 0.19773420043737444, 0.10425755000846715, 0.006274206578167796, 0.10047949048118698, 0.09911347228722711, 0.11062949538775924, 0.49426284411653265, 0.581064757512579, 0.5299101112707392, 0.5480937721376468, 0.5804938355897675, 0.5600546933168227, 0.5643517132529072, 0.5859256931937765, 0.5608407881964838, 0.07044295376386123, 0.1022156277571108, 0.07023968529727465, 0.10841907282924201, 0.1129097640174277, 0.12954231628512103, 0.1150979595531495, 0.11257944886535098, 0.1794946358363666, 0.2139701423477065, 0.29527937189538966, 0.4277173097959851, 0.5315970545394333, 0.4660601908566707, 0.21678833755192606, 0.24372861181946537, 0.18794695253904858, 0.25353371347805764, 0.3345578438127724, 0.32168964633486385, 0.21911593137767071, 0.5218306239769623, 0.23956642501638026, 0.357219813855979, 0.29321927552725335, 0.32467033538570955, 0.1493336036947025, 0.25239564309599627, 0.22294918266554298, 0.23177234256893764, 0.2399602379372131, 0.22519304613021207, 0.23291232581523513, 0.21100768203051934, 0.3116508253827114, 0.10777126664659786, 0.2805361823904474, 0.21508071423259856, 0.22238343314283515, 0.2780719178788965, 0.22884843976803126, 0.25061509155621997, 0.2151151077811877, 0.22854930008834795, 0.2294931627613681, 0.2227711632379663, 0.2507768473557317, 0.22488333208648392, 0.19370235309353834, 0.22368084664261423, 0.20974230293408658, 0.1927341431400661, 0.38204622966032686, 0.19954631703348247, 0.12562644623603048, 0.12633161965645356, 0.15417560770226613, 0.915829483760947, 0.20053669948274733, 0.8832189689235765, 0.09979164649313865, 0.9217995837971744, 0.1533267166060598, 0.5125529878194457, 0.2099487142761377, 0.6735046512673739, 0.29231068403893146, 0.4219873102991146, 0.5237201221985044, 0.10525995946056244, 0.7414126974140727, 0.8177122292379593, 0.20587690588467522, 0.1943693602251667, 0.21751422483901584, 0.20040280874868366, 0.1939931490208593, 0.21081937692160724, 0.2598390765283969, 0.20381522937127028, 0.20579419238358776, 0.09750338030962413, 0.0963157647627424, 0.09472510606188245, 0.09898904147014742, 0.10993919306757982, 0.1154392503428644, 0.09337928660335437, 0.08400076162615167, 0.06938642346734558]}, "mutation_prompt": null}
{"id": "ce977cb0-67cd-4d31-a19b-682771213b42", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "86169cad-21a0-4f9e-95cc-18bbcf7267f2", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "338ce121-422c-46c1-96fa-c72b7e7a2dd4", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Adaptive velocity clamping\n                vel_scale = 0.1 + 0.9 * (self.budget - evaluations) / self.budget # New adaptive velocity scaling factor\n                self.vel_max = vel_scale * (self.upper_bound - self.lower_bound) # Update vel_max based on remaining budget\n                self.vel_min = -self.vel_max\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive velocity clamping to facilitate diversified exploration and exploitation in the search space.", "configspace": "", "generation": 81, "fitness": 0.25082061014046775, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.26.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8289533985141156, 0.7923642690468335, 0.8062314032577008, 0.18877428968498355, 0.18917273102826548, 0.15743915813136122, 0.8054809057998545, 0.8062631507344312, 0.7861506950864076, 0.7174591929880059, 0.7066772210279386, 9.999999999998899e-05, 0.6491949840800253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7081075297740274, 0.6796208490052953, 0.13727515666514678, 0.1183240769135867, 0.1659119425911203, 0.1671061103081083, 0.3214578913597609, 0.06747981626844524, 0.6574908519008502, 0.04847718727158101, 0.6521679476912619, 0.10532478662688805, 0.13262422271816054, 0.1005171101362734, 0.13616572801868732, 0.11330894013865256, 0.11081587602450305, 0.12116306632132268, 0.06563489298935798, 0.13868451962991968, 0.9943990578045052, 0.9897807640907653, 0.9958081690278235, 0.9888036109675864, 0.9912928983281496, 0.9922106736302186, 0.9944523056663975, 0.9938305258038438, 0.9941199219308174, 0.6880792994933869, 0.05462373920547037, 0.055383741584435264, 0.6917508072314524, 0.6551027239506171, 0.1469994617919641, 0.08292848005482267, 0.08518817383776967, 0.048732857106329686, 0.31125222087881144, 0.1956059760614266, 0.16514577593280177, 0.366461455788357, 0.24927828020275078, 0.3559167247827053, 0.12205139745228766, 0.7965244868678945, 0.21289562087532277, 0.1155579222579376, 0.15295593396675466, 0.17405144804572314, 0.0886951974767175, 9.999999999998899e-05, 0.18095361095801787, 0.17291796262455994, 0.20030075434107608, 0.2031851539552969, 0.16144928709444906, 0.022139146964938794, 0.015941066378258983, 0.11758086266378287, 0.10536848104974794, 0.12685125869558356, 0.20890549067315045, 0.09504500514863246, 0.15951281259438765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04646936758889553, 0.027852630859071525, 0.09271865006744084, 0.12745002747175382, 9.999999999998899e-05, 0.011941443495427473, 0.047790541917045126, 0.026802529040794942, 0.029181511901628654, 0.04424883165622928, 9.999999999998899e-05, 0.11575368047419399, 0.1775936357594281, 0.08440403660321394, 0.06602363955520996, 0.09206210484980637, 0.08974261387940619, 0.06586017400440614, 0.24023738603794598, 0.03853614154573193, 0.24055437634877253, 9.999999999998899e-05, 0.1424828648686982, 0.005972145122234207, 0.04797682768443878, 9.999999999998899e-05, 0.07131242823628237, 0.5044193863275654, 0.5245382624561714, 0.5063855824267989, 0.5463465976265722, 0.5186079123020197, 0.2085600469154787, 0.5677460962346228, 0.13929856708305544, 0.5465231385306466, 0.062405730109179935, 0.051089268375868024, 0.10263189070363754, 0.10879451510704352, 0.1389636139245356, 0.11594225632952371, 0.08459169758745444, 0.08488831675996933, 0.0956998095622783, 0.2589799414967945, 0.14675306661273246, 0.14174089539893464, 0.26882066725618536, 0.2002058215814041, 0.1559470299235063, 0.193209958564443, 0.23676877833474086, 0.2013092626220575, 0.39846762881328734, 0.21650434565165344, 0.37201528648931703, 0.3404225600001418, 0.26343068308598805, 0.2104704567531812, 0.2926935910966083, 0.27072711184650133, 0.26243285898248114, 0.20764934272429214, 0.17887761360492094, 0.1446267995215178, 0.4062773364897567, 0.18652386640845975, 0.3599117540229788, 0.12976656305991197, 0.2433250580852936, 0.06641565865700072, 0.19730767885160116, 0.21319466278050014, 0.22305029024905165, 0.2103266814093958, 0.20286449633652948, 0.2114689141023448, 0.2022191872277993, 0.22087622868348378, 0.21692134269497, 0.19809458370705868, 0.19035632762106247, 0.5440191366391971, 0.2135840024497766, 0.23739154862254208, 0.20227870798825598, 0.21138589993227286, 0.7129924091677067, 0.2024785291373018, 0.2601095626926654, 0.16776468555325685, 0.12451830337088943, 0.8577339886658885, 0.20076655928253428, 0.8084798346231492, 0.09922369771065565, 0.16984847667590297, 0.15120158860850275, 0.17236111946675248, 0.20417118202311535, 0.11182268639596182, 0.19471036801470332, 0.42638530571899136, 0.2217273677837377, 0.18805172921754632, 0.10479939313311037, 0.6254022073583632, 0.18925058094028124, 0.24290171048088027, 0.20479355508907615, 0.18296197189090557, 0.2099728398495886, 0.19415289251917112, 0.19607257499270048, 0.21356559866534908, 0.2021676634222067, 0.07753729576285584, 0.07514018001678957, 0.08760655980429688, 0.0888274650332267, 0.06884609316894563, 0.088418189159018, 0.09463296998717852, 0.0720787791667199, 0.0901115251101059]}, "mutation_prompt": null}
{"id": "39c2cf68-b689-49a7-a8e0-d6695e61b0a3", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "a3ef7a3b-462a-4050-a94f-837eabebf70d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "40eaf8cf-a50c-48f6-8c42-4b560591719d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "f749faba-f75a-4c29-a4f3-a1a02ff6b0c7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "2d1995fe-7739-42e8-a37d-20b7b0a253ad", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Introduce elite learning by moving top individuals towards gbest\n                if np.random.rand() < 0.1 and self.pbest_scores[i] < np.median(self.pbest_scores):\n                    self.positions[i] = (self.positions[i] + self.gbest_position) / 2\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce an elite learning mechanism by updating some particles directly towards the global best.", "configspace": "", "generation": 86, "fitness": 0.32706572008664686, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8468450708828279, 0.8586570826349043, 0.8795434159436664, 0.8744432788959198, 0.8618706221927113, 0.8363562536706225, 0.8745779724403505, 0.873628162533887, 0.8502081197548175, 0.7162591764905795, 0.7703513817534198, 0.7423168187094651, 0.7358791696989568, 0.7425387209720933, 0.7242051757005061, 0.6877048042040936, 0.7475002397787256, 0.7288942084816177, 0.11476992579496348, 0.1341345152619604, 0.15249652569567373, 0.1371607530968436, 0.18162700403176946, 0.17399061630650325, 0.12082649834003767, 0.12152197323207292, 0.14257632878341098, 0.10588893234101293, 0.1181200620117836, 0.13695437229388496, 0.13319920474531244, 0.09291581197034338, 0.11308989166820427, 0.0779975638883108, 0.14476372942006877, 0.11044882622230634, 0.9675178238589051, 0.9714882910562087, 0.9750203826939723, 0.9784617960103701, 0.9745526005385704, 0.9657802350652154, 0.9837048657057399, 0.9741791707286768, 0.9816051651852389, 0.5759804605495622, 0.7359584033206956, 0.739017196402878, 0.7518041641418941, 0.7030412821307614, 0.6208648417508893, 0.7221634034348683, 0.7195244208404733, 0.7400691866051099, 0.23001013105739154, 0.2242363015068941, 0.16905392753956383, 0.1937834135157116, 0.27969353542239206, 0.2748262754352324, 0.23533187011044776, 0.17813073965803816, 0.38428870495484, 0.1704109845537689, 0.19561509952876444, 0.12829212860997008, 0.1971051491262914, 0.12141122543513916, 0.15263797716610517, 0.1319841640018451, 0.19584989239382844, 0.20105058829405276, 0.22811088012019065, 0.342918390364347, 0.2532842824763335, 0.19511675085544256, 0.2246055597176173, 0.21815808985054674, 0.23624154312256218, 0.2240888987808869, 0.182169049708088, 9.999999999998899e-05, 0.014432037113652929, 0.01527852317445244, 0.05462742077109073, 0.06557982433434084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13884862136156184, 0.09903727081389357, 0.04558725984542911, 0.10110961199920931, 0.14853090613681852, 0.005851956279384618, 0.025190353640262453, 0.08129747434458112, 0.08792473603139184, 0.05770000524650676, 0.04584971537330662, 0.12153510467079964, 0.10801863608981999, 0.07587895069625139, 0.11819891997971677, 0.20751443954686355, 0.11224676774202724, 0.09259045939118127, 0.0700865251430638, 0.16478127936292908, 0.18398788191099213, 0.1249766568657682, 0.11708699376360998, 0.10335737761937858, 0.006430429457757403, 0.2948650787755994, 0.08171456669895472, 0.1191655575131082, 0.5200464945859402, 0.5854639683044817, 0.5748101632432858, 0.5441214802766435, 0.5325743942166413, 0.5096476130313303, 0.5372479828112232, 0.5761227979664845, 0.5495340377478087, 0.08741225478176806, 0.17794050585005916, 0.08674578407861755, 0.143574338374436, 0.0775115819537937, 0.15045484906054551, 0.12669621570759848, 0.11475360973505233, 0.0912787844908135, 0.2934160789965711, 0.3846553824254788, 0.32187120138664926, 0.24488909985028684, 0.4934859907364385, 0.32002736667350207, 0.34344233120848733, 0.3717295733608459, 0.2523322051230702, 0.3920500810782298, 0.22294249780966957, 0.4560878862403467, 0.3798602950708302, 0.41023165467940736, 0.3713536745983249, 0.47951273586237964, 0.39528709459861944, 0.21479261115440162, 0.3423636007418446, 0.3232551362419296, 0.23309191645137994, 0.34135505303771085, 0.17126520589504068, 0.3311414345044087, 0.30499671234837, 0.2250994604130676, 0.2250996984249084, 0.2257539874863459, 0.21507712699404447, 0.22823967900116982, 0.2198698004937798, 0.20977030971742217, 0.2587492307222109, 0.2873038639418469, 0.27316239800085307, 0.24287446276011526, 0.2485988610231984, 0.22618413765568057, 0.20869156234922948, 0.21079420346947286, 0.24655552310169482, 0.23836391276642377, 0.20747953514158213, 0.2018094094327505, 0.2157890166785591, 0.8877175469702426, 0.12669293388440273, 0.18773049266654296, 0.9027212062137727, 0.20033044681743928, 0.864387041120907, 0.09971957366154094, 0.17036870721389952, 0.15215356676912561, 0.5994055505129334, 0.21095967990129927, 0.5941624418105369, 0.6373736507856516, 0.16921676546156794, 0.6836615220855117, 0.10527218678493977, 0.8201764457393363, 0.755560385267548, 0.19375182161201043, 0.2206324334617038, 0.21019971704556373, 0.19066742870774678, 0.1983396677802366, 0.20571951264623534, 0.21360102320535113, 0.21463845291354233, 0.23892599306355577, 0.0998471440522608, 0.11102555878325981, 0.08193869257418429, 0.10573887821614758, 0.10830624363047259, 0.1437348817847598, 0.08634981625158966, 0.10469887148747226, 0.15074660710366516]}, "mutation_prompt": null}
{"id": "1f488d61-ba15-4b1f-b718-0f7557358966", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "0754c170-f7c5-4ea8-a65a-e73ca8527f25", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i]) \n                social_component = (self.social_weight + 0.2 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i])  # Slightly reduced stochastic component\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.98 + 0.01 * np.random.rand())  # Adjusted inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Refine the adaptive social weight and inertia decay to enhance convergence stability.", "configspace": "", "generation": 88, "fitness": 0.3096996736909378, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.9174440013881422, 0.9134562125856406, 0.9131144392297538, 0.9162102988413483, 0.9145025831755775, 0.9020447314930541, 0.9170866887554308, 0.9237527409337006, 0.9175275676695093, 0.8385322313466816, 0.39151640158943335, 0.19581298258909463, 0.8363670136014812, 0.29162170245187946, 0.8416196764036389, 0.8496031382815626, 0.3539152365257421, 0.839368035635695, 0.18610821500549013, 0.1246515827857384, 0.1625147694775857, 0.14279381580917183, 0.16128704952107253, 0.12524067683759965, 0.09633793762347664, 0.1876522517993231, 0.15709481064894082, 0.12218183342338074, 0.11828641109542659, 0.15977277255677924, 0.13829234414530944, 0.11783131563829097, 0.08893978055771368, 0.09551193940192948, 0.12125850255375603, 0.08775084166751224, 0.979843660395089, 0.9727305530198455, 0.977616242384308, 0.973281054340321, 0.976436969746399, 0.9782315398636521, 0.9838708191258947, 0.9760830530215293, 0.9809042196982996, 0.6182285416335385, 0.598231342809076, 0.7414348531970051, 0.46190092391682336, 0.3543157221803154, 0.15369833212802309, 0.5032776054731313, 0.5183876826347849, 0.0886902501020369, 0.3973275872190214, 0.1411910745420002, 0.17093876080537118, 0.28195630584184783, 0.28078378088262357, 0.87594060555154, 0.17800642661317034, 0.1269184845241591, 0.2294464563127394, 0.171149464444747, 0.19013987027039436, 0.1302455251812138, 0.20122899837749786, 0.16820347480106979, 0.16020236953137157, 0.16355532496414293, 0.1743536679671681, 0.18171339386867413, 0.17947323714220476, 9.999999999998899e-05, 0.25991189124259595, 0.1968908048056558, 0.1587767299762498, 0.1348860355168997, 0.18472603671291465, 0.2064878099736227, 0.14154237850584306, 9.999999999998899e-05, 0.10962326057805605, 9.999999999998899e-05, 0.06026794236830191, 0.11352113237612504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11035898803751554, 0.13599866526111892, 0.06008694917321267, 0.07685599331825854, 0.07846900150729397, 0.00607334827006667, 0.026928582468991213, 0.1109969764236084, 0.06585622290745907, 0.06158602498532506, 0.3084789055222795, 0.0885784799053978, 0.051490545051019576, 0.16054151173833342, 0.2679544659388413, 0.12963770681268139, 0.1917522794019021, 0.226644906812699, 0.13463152353720054, 0.0968904205373603, 0.25804059749547803, 0.2541427523634222, 0.05386579320964613, 0.1379458240710797, 0.05936989073857035, 0.2238397790087423, 0.08402503031726882, 0.13082216196802587, 0.5711832997843249, 0.5110792953707055, 0.5643980865397371, 0.5334198057522056, 0.4986637268563162, 0.5423128679774064, 0.5802304683623738, 0.578863207881013, 0.534026776981207, 0.07748162325081287, 0.12330389750563187, 0.06934295647581568, 0.1244274736979536, 0.08252806511719069, 0.1433179127391513, 0.10163046523107755, 0.15964848919478059, 0.09737149721718108, 0.15533410785550694, 0.44718623211566333, 0.20537280124108725, 0.15638365008096722, 0.24897510693557878, 0.36298181607893565, 0.15935370804529414, 0.20329561513307348, 0.18419253537550362, 0.35318905635303854, 0.4383374297073679, 0.2964064479945495, 0.29536933034627866, 0.25032398268098055, 0.41289035060208035, 0.24794633290581447, 0.3222333164692387, 0.15774529149270566, 0.2739784325645994, 0.24590674563632497, 0.18791517133951707, 0.21376886402888162, 0.28062353915528215, 0.2908547812684372, 0.22216610106564672, 0.22364498458278126, 0.08703119715899543, 0.2031776875425707, 0.23356852518418236, 0.2629317061357077, 0.3674896429225454, 0.24053368373620565, 0.27070041131513267, 0.23871821752281508, 0.2342867313026462, 0.2120489781882373, 0.22506928629088463, 0.2020498287424637, 0.19038949062826005, 0.23129758672619283, 0.256249767931203, 0.21200415454686072, 0.18283284833242053, 0.8911267759423058, 0.22497307568557767, 0.1262893625479321, 0.12662103994463536, 0.15432263992029016, 0.9397805321507723, 0.20155007986055973, 0.9277019682828044, 0.12271252809324329, 0.9326099183401682, 0.15358051035711984, 0.47638893501800716, 0.21230579142938244, 0.9176310862207817, 0.6188286186352568, 0.2907082656878912, 0.8728815496826718, 0.10527768994160902, 0.46772960468769365, 0.38802333303079584, 0.2142324615785547, 0.21891339692009693, 0.18743327588445935, 0.1989417527931565, 0.2259449911238155, 0.18878088767170642, 0.21313889427101163, 0.21243144644885759, 0.1927206787608874, 0.1136504790668399, 0.07456340264409789, 0.0680500308322387, 0.07746027466203176, 0.08430413943240578, 0.13928634011594188, 0.0873475096807299, 0.0927806883783987, 0.10808211392453848]}, "mutation_prompt": null}
{"id": "6fafb90e-d934-44d4-bf58-f6b00188a751", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "b4aacc4c-e14f-4cd4-94bf-2491ffbcc30d", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "d0c2f174-05a1-4cc4-a272-f3aa573954c9", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand()) * (1 - evaluations / self.budget)  # Temperature-based inertia reduction\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Incorporate temperature-based inertia reduction to balance exploration and exploitation.", "configspace": "", "generation": 91, "fitness": 0.2841367208153194, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.918451539069646, 0.9344378070053595, 0.7665090989336517, 0.9359568626275019, 0.941613832882903, 0.9351485264988777, 0.931091634528322, 0.9335026711698425, 0.9075168474302657, 0.15748353223521172, 0.15029848965066683, 0.16049791117353762, 0.3063984633617405, 0.2784311462493476, 0.18065826326865153, 0.07226693437213583, 0.386038008401442, 0.25164543258365635, 0.08910137643139238, 0.1358030831307011, 0.11585956017641763, 0.14733791242841454, 0.19067615944831473, 0.19086914090535922, 0.11788947593787047, 0.11787111484514334, 0.18642915068336152, 0.11821669016581293, 0.08260024873785221, 0.10148290695406303, 0.09795752704854144, 0.09293427847709734, 0.10529065884649813, 0.09599172125171285, 0.0661440830983363, 0.15680406154978532, 0.9798176591379404, 0.972111602670207, 0.9776729577093525, 0.9733284711050426, 0.9769546613965457, 0.9794711005058034, 0.9839053036581529, 0.9760855835942083, 0.9809525231419077, 0.43415325285918027, 0.29007202562033707, 0.43796454140179675, 0.4262162511207702, 0.5832563697774907, 0.15467082017355804, 0.348353925499303, 0.449758885749577, 0.2573618430375926, 0.3527723789809287, 0.22797936998988477, 0.1710676639940606, 0.32885183052659495, 0.2150904384032991, 0.38533075547467266, 0.16809697298654025, 0.16339840323732913, 0.23505775216980251, 0.16424607782987355, 0.19459616221012543, 0.1663855823472692, 0.5628839087782029, 0.1822736781947294, 0.16074482914145116, 0.13006517247121197, 0.16000919158938198, 0.21152348197562099, 0.17141962574707237, 9.999999999998899e-05, 0.18070363516801413, 0.17750125858361387, 0.14694270189441827, 0.13595944506155577, 0.14738646035624736, 0.1801277733157589, 0.1408297228270674, 0.0034205550060343315, 9.999999999998899e-05, 0.057858192972246925, 0.05587201226505856, 0.00930645152115539, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11535632230581871, 0.05593412226712413, 0.08585980052253983, 0.08401748987404722, 0.009200190505539108, 0.006597549540578229, 0.18951165349356303, 0.08505049008082843, 0.09107852596614652, 0.17884734877483754, 0.05123016031112693, 0.05385184671725807, 0.40564745119612133, 0.1488175548046251, 0.10118171163889911, 0.17813342082495365, 0.10761751147978627, 0.09408148035191244, 0.4299478612109432, 0.0864964165285994, 0.17951108950209238, 0.006764591978012824, 0.1697427468689673, 0.13337803209161214, 0.32754796438691003, 0.0845812315829878, 0.08479992098947697, 0.5651366012217811, 0.5001845659407115, 0.5803758923383244, 0.5936248440635705, 0.49993456549085047, 0.515939140654269, 0.5247408688467339, 0.4798930988832919, 0.4651611170225529, 0.048303998297283934, 0.11801422340845802, 0.09615223178410892, 0.12773492664356256, 0.14579666797619228, 0.165365832343094, 0.1547188831800802, 0.14742269972038324, 0.07991150032501515, 0.14607744977242398, 0.2651125968487279, 0.18866288872586823, 0.18449542982147793, 0.33388721021338186, 0.20814237600290175, 0.185903974188935, 0.4012468078698256, 0.15868815891621124, 0.2543678141085055, 0.3360079853425225, 0.3054684464391909, 0.3150558905654407, 0.31233081579062005, 0.3000447688689526, 0.3707038932571871, 0.39830692325120565, 0.32774434940368424, 0.2834584101949563, 0.3018057456257558, 0.2007308991068426, 0.23061931101003574, 0.25252226810226164, 0.3123565502422613, 0.23807296300662306, 0.29391804998837223, 0.1043324957524886, 0.2557818987029433, 0.21430511087491855, 0.21903000993420996, 0.22172463420867217, 0.23215418028767343, 0.23934870254275142, 0.225811255163751, 0.21928638327342076, 0.23211974903721966, 0.20269652709393382, 0.1915388366638262, 0.22495637904023225, 0.20517777668539583, 0.2297778067042331, 0.21162660616069373, 0.22585599827698166, 0.7293550430683975, 0.18726925182952892, 0.12386186317366665, 0.12661049463349283, 0.15432796154365136, 0.9537297415654835, 0.2017914196669096, 0.950910508407864, 0.09978382344389103, 0.7499685667152153, 0.15406757281318983, 0.8569987710890097, 0.21304185956353539, 0.5611159322840458, 0.3889506617580455, 0.29248495176441747, 0.8614255134841259, 0.10526586832441409, 0.424136987427313, 0.29056316670393045, 0.1815243750894926, 0.1810583531650316, 0.23050354002369167, 0.18376505926549136, 0.20016561501789776, 0.19752642924753983, 0.2101025457453638, 0.18268619204838665, 0.22808573591124448, 0.08601175180137344, 0.12828928768416392, 0.10690072617624047, 0.10441327576420245, 0.09758096067067179, 0.10308585280385685, 0.0751257109252016, 0.09058914913120719, 0.11838929063729575]}, "mutation_prompt": null}
{"id": "26dabb62-adaa-4288-83e9-e201b506c20c", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "0acd3484-1a82-4e23-8206-47541302fef7", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "9ce29d92-3c55-451e-a83f-ac1bc1ef10fc", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "0855b8d2-1841-4b0c-bea5-5c880f0a549e", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "15aaefe0-5407-4262-8051-e9a0aa37cf51", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive social weight to enhance convergence towards the global best.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8548284692602084, 0.8569821749594366, 0.8655677164465057, 0.8550702049522475, 0.8540674018192481, 0.8562414888766277, 0.8617482425033706, 0.8607467709829808, 0.832267928820818, 0.7320477240947313, 0.7211179391901056, 0.6989409930386179, 0.7271015899703734, 0.6725831312623822, 0.7435349620700669, 0.6904184533651478, 0.7365824374715111, 0.692778339934135, 0.6837268020129127, 0.5071750863660687, 0.17311404629140803, 0.17674059039203316, 0.6371785434875386, 0.13546037875680272, 0.11026411355765597, 0.7074172631992146, 0.17608766222830108, 0.1266722813497605, 0.11427902204968998, 0.13989755161475592, 0.1021001075651724, 0.10723732956633703, 0.12978331210187555, 0.10974713401567626, 0.10086813241061499, 0.06306201702838554, 0.9804305175435324, 0.9726117911136823, 0.9777487266013667, 0.9733777148597138, 0.9778606084992876, 0.9793079122697003, 0.9839772237200284, 0.9761292464789291, 0.9809823946549106, 0.7191212709416667, 0.6447665058182603, 0.7501666741768889, 0.6766412474652704, 0.741975458938158, 0.6448237421236847, 0.7228421752377732, 0.7298077130964955, 0.6484780719333135, 0.8849159890359092, 0.36576568904330564, 0.2262524784475608, 0.7086373004761296, 0.811011854801055, 0.27087559809100115, 0.23290980474001266, 0.3240341619104513, 0.2366514041699206, 0.19950647271733213, 0.19416831674986235, 0.18271246628390514, 0.1336557845602343, 0.18887802246128926, 0.16804237063189253, 0.18551328217759, 0.19735787479408606, 0.23359352187834126, 0.2082918855277931, 9.999999999998899e-05, 0.2115791578147017, 0.2156590236048137, 0.13965256603295273, 0.21554687872564604, 0.19935338294325733, 0.23558438802749182, 0.22196538238416996, 0.025163234780660404, 9.999999999998899e-05, 0.08533659159817941, 0.05122597554783026, 0.11979605453002518, 0.0035554783531411838, 0.01048953655010132, 9.999999999998899e-05, 0.007745861468650195, 0.13718568538789166, 0.05277822996240533, 0.12327486485894568, 0.1792330361090333, 0.004592611090248444, 0.008017390780551747, 0.19737864155207907, 0.0770804680919317, 0.09466821629321243, 0.2277581158059251, 0.10442783388331212, 0.04691972317930171, 0.33141789505391084, 0.10068631768003455, 0.08905901029977925, 0.13992630862162836, 0.12173597488799459, 0.09237231827043668, 0.24982356836034558, 0.2762236991233207, 0.16320368411804198, 0.0059430497781332026, 0.2894769843288315, 0.17446274731188405, 0.09519431266698208, 0.1779916428938323, 0.08023653106826001, 0.5765309997974055, 0.5944720300907638, 0.5066325761148668, 0.5467539090895476, 0.5173328871565549, 0.5513900674061298, 0.5706851235930661, 0.5578325596692675, 0.5338035380457559, 0.08450436758864033, 0.12425969831427974, 0.1138910644114296, 0.12887268196951496, 0.10329655901780155, 0.12554619794661448, 0.13944745058865615, 0.17224352171252555, 0.09678090295727337, 0.5028317887024936, 0.1652212453485692, 0.38702241401227344, 0.17484524103814691, 0.3297491530496657, 0.4270209865533505, 0.26943385220823435, 0.31023877436934044, 0.25915789148084045, 0.3751302693690486, 0.5145182224995012, 0.34446059893250813, 0.4312690663250187, 0.3551283013272212, 0.30286125635919714, 0.38791809355266293, 0.31163625335139966, 0.340249396568131, 0.26188832590496225, 0.23914433833555848, 0.24500139621593398, 0.32534086892074143, 0.26314133513338445, 0.22719718524901933, 0.23820091438704272, 0.3531972927560155, 0.11643434656025442, 0.22552011264052718, 0.20927276502368208, 0.20745369068945851, 0.2313886266645342, 0.27351973177882416, 0.21247742613853637, 0.24147491786767872, 0.2593432448635171, 0.2653343463212394, 0.1976742841235819, 0.20005719865408778, 0.22278921120144712, 0.22450210181982744, 0.7965116051988699, 0.20738763654893733, 0.20707210648557872, 0.7463929468576802, 0.18304536920557768, 0.1257632838663474, 0.12613304077278842, 0.1542534284492464, 0.9119595920554657, 0.20091258743299767, 0.8894145229035996, 0.12088795414658193, 0.8818938417859153, 0.1539491502008552, 0.7378564190908777, 0.20987364895321747, 0.818762703471388, 0.7569977763782302, 0.5336797890054852, 0.8770085506297355, 0.10516686747566162, 0.8037850653047085, 0.8139787941152428, 0.19623016221571965, 0.1964283224065808, 0.1851655404596867, 0.19252459355946516, 0.2180344297465756, 0.22750625963943982, 0.22029775768820115, 0.19576359656864206, 0.186666833567544, 0.11265730284249842, 0.1034733336843554, 0.08190502075124673, 0.10288775976457232, 0.09950086515606271, 0.13245992841790089, 0.10687467443342735, 0.09527853642060202, 0.09939608360869256]}, "mutation_prompt": null}
{"id": "c5621f30-e37b-4952-b8ae-c82877ededff", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            # self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n            progress_ratio = evaluations / self.budget\n            self.inertia_weight = 0.9 - 0.5 * progress_ratio  # Adaptive scaling based on progress\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce adaptive inertia weight scaling based on iteration progress to enhance exploration-exploitation balance.", "configspace": "", "generation": 97, "fitness": 0.3017819315575165, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.6996265222400981, 0.7207254766787325, 0.6975424211089349, 0.6797578714771595, 0.617248925056207, 0.7163416196511427, 0.6959147062986518, 0.7004539429800913, 0.7501010225102132, 0.4998870829529045, 0.4200374196679957, 0.4384602510067196, 0.4394112942126618, 0.47773949214935363, 0.41415506966515436, 0.44066724280883085, 0.4717776328827161, 0.4385400887046892, 0.5135318929542242, 0.14231269110688705, 0.15869075693526724, 0.392301980604711, 0.1483286091589755, 0.1412807921125554, 0.49677356252426574, 0.14164702558779574, 0.23537110694570063, 0.1433839956917511, 0.10962614965150441, 0.09968725174486226, 0.311180121171299, 0.07915699208748306, 0.1300297409138642, 0.13499065984891545, 0.13431588921173465, 0.1259380745160582, 0.9795323163970221, 0.9729706480730111, 0.9792612986745398, 0.9750128403092384, 0.973636645097132, 0.9746788538509168, 0.983942253097731, 0.976737346456734, 0.981780554064163, 0.5482345002612579, 0.47868706395833205, 0.5284540235016224, 0.5502131518228464, 0.49399690202448754, 0.5273014736046351, 0.5429711760848082, 0.489988811666365, 0.44932669079224596, 0.6751507079283843, 0.6062141974856117, 0.6145334537123904, 0.7309094485001285, 0.18974561090567532, 0.7031833758312989, 0.3440078823702001, 0.1269325654930935, 0.6448183965398527, 0.1575409085363466, 0.16609066165642816, 0.1694452913859863, 0.15383637176525922, 0.16222462223201894, 0.12181144417646206, 0.16706514686175944, 0.2727571969744609, 0.18962425917037584, 0.21629269510850135, 0.011153057268283528, 0.20419261830651647, 0.12011855494004464, 0.1752734359030963, 0.17694467235647904, 0.20346822354518745, 0.21712208558725998, 0.12295664888936297, 9.999999999998899e-05, 0.05650389151199264, 0.019242180202499903, 0.04396882238642463, 0.09606884340162836, 0.02524819887602503, 0.004592637791323462, 0.006743176917375027, 0.004798506104742639, 0.08229970492494376, 0.06151875997423084, 0.11154838846687254, 0.0711559638733874, 0.02905925107601781, 0.003431392529748112, 0.06752626321143218, 0.06948167122800075, 0.07971943953703209, 0.03392613260584565, 0.046903529703761326, 0.03384037254779848, 0.07542242518050679, 0.0561738862826735, 0.09356495267289044, 0.18080284820411896, 0.12698516259430725, 0.05013160796228511, 0.08707927850700414, 0.07127735961775683, 0.1362486977574997, 0.14500033871505746, 0.12451639897876399, 0.0050351931196177535, 0.07782749853744131, 0.07449200207271967, 0.0746483672452023, 0.476551773674321, 0.46882969731223434, 0.5054566275740886, 0.48253459041466296, 0.4664561499298663, 0.4946158062882242, 0.49871078269792346, 0.4804044379660011, 0.5009306564678621, 0.07371245923984915, 0.10172324477125927, 0.08623684042591706, 0.11831336990102048, 0.11298836720129735, 0.16112252652513648, 0.15706909200612884, 0.09581930215518952, 0.12389572945815885, 0.22403344988797347, 0.31816802374770137, 0.29873548574531994, 0.16755531886620667, 0.20321351115419162, 0.2608481219045411, 0.3444552999497372, 0.3707222665418014, 0.18175003525582856, 0.32266090927142255, 0.356248221713924, 0.35197889263718884, 0.23130474542961565, 0.3013227422704936, 0.3141315078182101, 0.38692540155307853, 0.419938224357592, 0.40103264400555516, 0.2581962697650455, 0.2968881609103603, 0.1752682882761637, 0.3292226882465017, 0.2521268564800182, 0.31783607262346714, 0.22073591415815497, 0.25162527460900697, 0.22104974657982446, 0.22644582438735616, 0.2268651760831797, 0.23226842137016546, 0.24139998171810106, 0.26214549028729284, 0.2234053024900413, 0.23597274639645993, 0.23984773114638103, 0.2232005099874389, 0.19524728515458578, 0.617097354231144, 0.5147344599900363, 0.2123023575644707, 0.5659329539720541, 0.19726960041585373, 0.21411797550799117, 0.5541892154354087, 0.1961774955802632, 0.12636093860832154, 0.12658476626641368, 0.15371291895959072, 0.7891860837756978, 0.1973811822449607, 0.8639455180426426, 0.12140688273346312, 0.16960994694736597, 0.15262506019618227, 0.7553555283337954, 0.21134576759253654, 0.5676074548693688, 0.5267896300854015, 0.16820448848856107, 0.7426153155300104, 0.10484464925406245, 0.16738550890768256, 0.5916639198575797, 0.19168827111335895, 0.2003457038457236, 0.23477129638518213, 0.19550341482937506, 0.21086303203143164, 0.19512652126837005, 0.2144603573873104, 0.1818965340883213, 0.19900208292794563, 0.10829222031708907, 0.11507859267647724, 0.09641371368458695, 0.10159476522098376, 0.09680097717774405, 0.1257378458888243, 0.099386583390218, 0.1037259212533308, 0.08165981045078274]}, "mutation_prompt": null}
{"id": "899d436a-80ed-45e5-8f7f-baec3582a85b", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                cognitive_component = (self.cognitive_weight + np.random.rand() * 0.5) * r1 * (self.pbest_positions[i] - self.positions[i])  # Added stochastic component\n                social_component = (self.social_weight + 0.5 * np.random.rand()) * r2 * (self.gbest_position - self.positions[i]) # Adaptive social weight\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Dynamic velocity clamping based on iteration progress\n                progress_ratio = evaluations / self.budget\n                dynamic_vel_max = self.vel_max * (1 - progress_ratio)\n                dynamic_vel_min = self.vel_min * (1 - progress_ratio)\n                self.velocities[i] = np.clip(self.velocities[i], dynamic_vel_min, dynamic_vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce dynamic velocity clamping based on iteration progress to balance exploration and exploitation.", "configspace": "", "generation": 98, "fitness": 0.3403865197176104, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.28.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8346141235250788, 0.8581416501533032, 0.850571669249034, 0.8607357970977252, 0.8304484875864209, 0.8633084114805744, 0.8236290183076639, 0.8696999146053023, 0.837047034420611, 0.7141872264598852, 0.7345743375965764, 0.7124333623875257, 0.7308548075960695, 0.7228529953530665, 0.7057334797230543, 0.694466523318948, 0.7144437047857435, 0.7161414268442513, 0.12253866373452582, 0.15131229587525796, 0.15771171804654172, 0.15448781235706632, 0.12501389805532181, 0.15202701002345842, 0.11849963771570493, 0.704808290242571, 0.17622007474718138, 0.11654464460448, 0.10722272203290617, 0.14984564189341487, 0.11009848836683744, 0.10635210737493295, 0.0807500093852952, 0.1282380758378303, 0.13828776208268645, 0.13766684626532444, 0.9799255965963188, 0.9725840896280077, 0.9777009193640449, 0.9733331222205757, 0.9778319077706487, 0.9793092658691762, 0.983945505590801, 0.976105620622845, 0.9809620808634788, 0.7388996713476697, 0.7529453071599097, 0.7141678794933517, 0.7755224978660307, 0.6650517578345354, 0.6789786742889521, 0.722197824574569, 0.7412245261263857, 0.74201742624035, 0.38290786370520535, 0.17171218908991592, 0.22444712718589144, 0.21396615500708716, 0.2783316607800389, 0.27274483957180695, 0.8644810397442142, 0.21438893652489432, 0.3580155290609731, 0.27606083630271083, 0.24572641490737934, 0.20460635441862174, 0.21330010828846568, 0.13131692442108434, 0.1894093092069684, 0.19030349504162203, 0.21061498962603675, 0.18868546645445483, 0.2388582979232231, 9.999999999998899e-05, 0.2645263928635153, 0.2279310261354066, 0.19539761771377395, 0.13112003240847847, 0.2022568982800661, 0.2095248546354468, 0.24331301323110266, 0.004399382168949861, 0.1489998115364367, 0.05420095563765004, 0.05709440580408687, 0.09928166183530607, 0.0013661366534981623, 0.0102323985399837, 9.999999999998899e-05, 0.07718179559324267, 0.12735899444050025, 0.04501328847553254, 0.08237912266669134, 0.07993913496221738, 0.03211370402202518, 0.012953594583754224, 0.10374929047886872, 0.0471341798917807, 0.11515816434004134, 0.24838193342890458, 0.1127673971186337, 0.046419369580424585, 0.23877581746322063, 0.10870214213143514, 0.08889908848487649, 0.390830249422931, 0.3091261603451605, 0.08568386239390458, 0.15353285928547777, 0.2392827568324064, 0.1735165170185784, 0.1071724379296013, 0.14276118386090075, 0.18526974832137166, 0.336521520376615, 0.08164137898108725, 0.07990041613768517, 0.501962040460859, 0.5313848036070031, 0.5370466070361644, 0.5651384709028078, 0.5493263354349497, 0.5800378217544875, 0.548673190162879, 0.5633488940271241, 0.5414323760764315, 0.08330910543984815, 0.1215185493198736, 0.07240900337417844, 0.13081308657898605, 0.09327904317772628, 0.15253161057963915, 0.11926780013153859, 0.1399838789515978, 0.11111726366055774, 0.20739836333314698, 0.3524411648203333, 0.21549185142275618, 0.21335092604852612, 0.3634185814886206, 0.19689475150722202, 0.2569253726087273, 0.15195216675838785, 0.2448502787813055, 0.43758405211094864, 0.32991486509009094, 0.41390010849857684, 0.36102423801411465, 0.4229398258164401, 0.36478911432520256, 0.25358274712112006, 0.5815850733556923, 0.5099664202698508, 0.2777559027686929, 0.23967753622295462, 0.1851589207887755, 0.22236372076024669, 0.3285290185631463, 0.3324735114585843, 0.2108335114172183, 0.3134477968927577, 0.11746019714820399, 0.23872609382386878, 0.22423207327520656, 0.23286130013111495, 0.22583536831784334, 0.2098076977013804, 0.2167262166862567, 0.22936620132278795, 0.23560243876829323, 0.2422630764437932, 0.221492929276499, 0.22258941517920372, 0.24812226040899177, 0.20685176583760356, 0.7725146142775442, 0.19529504092970684, 0.19460679118800928, 0.2232725121434681, 0.19713226458902822, 0.12604987335162932, 0.12544296770379681, 0.15418331844468158, 0.9059827054650315, 0.2008680205715776, 0.9045399277373251, 0.09981114696487425, 0.8845565286089905, 0.1542050796662492, 0.6492742106794069, 0.21145545381508668, 0.8722858690178515, 0.741739825697997, 0.5212889521939985, 0.805657254539654, 0.105154098900901, 0.7612404765623285, 0.8216828868003593, 0.1924924828745216, 0.21473604245708244, 0.22062118968415112, 0.18487545042765274, 0.20321872143879094, 0.1808992670497419, 0.21881316581299182, 0.19632180263631416, 0.2523697936577314, 0.09624746615729729, 0.13976752166840922, 0.07954169064283156, 0.09391781251473907, 0.09314734408449787, 0.1000159990891496, 0.10664831548096987, 0.093195647653875, 0.10955041472049032]}, "mutation_prompt": null}
{"id": "6bae0da0-62af-4af0-805c-092c0e2bfbbf", "solution": "import numpy as np\n\nclass AdaptiveSwarmOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.inertia_weight = 0.9  # Increased initial inertia weight\n        self.cognitive_weight = 1.5\n        self.social_weight = 1.5\n        self.vel_max = 0.1 * (self.upper_bound - self.lower_bound)\n        self.vel_min = -self.vel_max\n        \n        # Initialize particles' positions and velocities\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(self.vel_min, self.vel_max, (self.population_size, self.dim))\n        \n        # Initialize personal bests and global best\n        self.pbest_positions = np.copy(self.positions)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        self.gbest_position = None\n        self.gbest_score = np.inf\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                # Evaluate the fitness of the particle\n                score = func(self.positions[i])\n                evaluations += 1\n\n                # Update personal best\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.positions[i]\n                \n                # Update global best\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.positions[i]\n        \n            # Update velocities and positions\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                # Introduce time-varying cognitive and social weights\n                cognitive_component = (self.cognitive_weight * (0.5 + 0.5 * evaluations / self.budget)) * r1 * (self.pbest_positions[i] - self.positions[i])\n                social_component = (self.social_weight * (0.5 + 0.5 * (1 - evaluations / self.budget))) * r2 * (self.gbest_position - self.positions[i])\n                self.velocities[i] = (self.inertia_weight * self.velocities[i] + \n                                      cognitive_component + social_component)\n                \n                # Clamp velocities\n                self.velocities[i] = np.clip(self.velocities[i], self.vel_min, self.vel_max)\n                \n                # Update position\n                self.positions[i] += self.velocities[i]\n                \n                # Clamp positions\n                self.positions[i] = np.clip(self.positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamically reduce inertia weight\n            self.inertia_weight *= (0.99 + 0.01 * np.random.rand())  # Added randomness to inertia weight decay\n\n        return self.gbest_score, self.gbest_position", "name": "AdaptiveSwarmOptimizer", "description": "Introduce time-varying cognitive and social weights for enhanced adaptation over iterations.", "configspace": "", "generation": 99, "fitness": 0.28895795234688193, "feedback": "The algorithm AdaptiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bdc0f9b1-b3a7-4a61-87e7-ced4a380e77f", "metadata": {"aucs": [0.8738306720724753, 0.8644439845705693, 0.8794767979421433, 0.8769520399984273, 0.8717470133624425, 0.8623953148882972, 0.8813141368186684, 0.8682388909123605, 0.8883256271328306, 0.7631341391423299, 0.2742398695946998, 0.7697478543163638, 0.4447190417939131, 0.2544249557922197, 0.3622934283409942, 0.7805220718229489, 0.09818780430667007, 0.2431521797211854, 0.08115853311729193, 0.0988705817194383, 0.090128548290067, 0.1583123064410773, 0.09093965340186094, 0.15899928632498506, 0.10017948680705291, 0.14539044941846258, 0.12858286057789392, 0.11477968028761332, 0.0831428907720414, 0.10793462549364963, 0.09222291875109712, 0.10508551527942311, 0.08350600601210312, 0.08736415221196281, 0.12236084367574585, 0.10856582844877849, 0.9808375402007807, 0.9722995256339746, 0.9813198626170853, 0.9764010827930978, 0.9798303032771455, 0.9712116408438658, 0.9804247862829841, 0.9778751194160251, 0.9748913199824594, 0.5278685273206727, 0.5120833450699925, 0.5231435053157564, 0.3940932456577432, 0.1531077448284126, 0.5783719550092178, 0.08791225891252685, 0.6312589849378457, 0.6079511386569061, 0.2299285404106819, 0.22924119251132535, 0.2159380829262295, 0.2789295627044759, 0.21880129831232054, 0.2785265701023798, 0.176304497533315, 0.1263541148620958, 0.8073971117090704, 0.11104407088440371, 0.13201566159532319, 0.17365418047341286, 0.17228922137436598, 0.098311950025612, 0.13310258733351488, 0.12744644171642716, 0.13154962930301795, 0.17998156791207276, 0.21469266563489908, 9.999999999998899e-05, 0.1271825759855827, 0.23511212726534103, 0.1983179038188987, 0.1374947204466176, 0.19335384873133166, 0.12965400449443076, 0.25127460623261133, 9.999999999998899e-05, 0.08532249050360496, 9.999999999998899e-05, 0.05658406322040721, 9.999999999998899e-05, 0.027119928342285715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035178736891557927, 0.18526853068052218, 0.029117387131342376, 0.09858182221756029, 0.0772812999276693, 0.004004986916573916, 0.019136615676626723, 0.13398809112842158, 0.0838107755584353, 0.07014429495536967, 0.07857794135294915, 0.14321002066473087, 0.05026608850531611, 0.20620144007493912, 0.07849327445104337, 0.08513262864114435, 0.10298859804885596, 0.06846475232949345, 0.06953948425037926, 0.17293250848409547, 0.06836290268721712, 0.23775469568861285, 0.03833666772321953, 0.00618276176637278, 0.12194482773989002, 0.11586601505435934, 0.12383148016111811, 0.08167393700010339, 0.5309512741978228, 0.4795249193397574, 0.5942978014940461, 0.5360173567192095, 0.48226958578400514, 0.5091573055433153, 0.572572748521709, 0.5227886594063976, 0.5815529149106198, 0.06803295645861074, 0.13066353440424938, 0.07927407023031996, 0.1427583023636193, 0.10334358380239506, 0.1407152551405747, 0.07848586778773259, 0.10488510971221043, 0.09518069256103645, 0.3928443151049201, 0.40404637973673796, 0.335682788182197, 0.22989269031933535, 0.250739814817998, 0.21876129512290776, 0.21093512465040898, 0.17547411347208852, 0.19129164560045875, 0.35463313626569515, 0.3262682150970915, 0.3839027539750566, 0.3929827342260004, 0.26781658887716897, 0.3238075509552214, 0.27651762669466307, 0.539013396482794, 0.2580009788887647, 0.2745925766692672, 0.25944486145493206, 0.18595468950682104, 0.24156954376521567, 0.2772757510182108, 0.2257992489891396, 0.23870997850328235, 0.24954347123405707, 0.16460259802798205, 0.22690172490634863, 0.20121993410971573, 0.23970181235727928, 0.3031234753816979, 0.23747397869874942, 0.2091379092818395, 0.2575418951522831, 0.2211755411897095, 0.23028880321927803, 0.20759783691341982, 0.20714457755567683, 0.19299249435870747, 0.25177586534345564, 0.22765582569198928, 0.2059695175455607, 0.1998883454742827, 0.18839250285836417, 0.2510243165742583, 0.1266768102475596, 0.12649461199738687, 0.15401141145390662, 0.8900764804421417, 0.19990784268588901, 0.9266383420675911, 0.09971170033701926, 0.17010859738385153, 0.15406669807287088, 0.7801117573735195, 0.21066952352861779, 0.36693238981112997, 0.5625524737884767, 0.1696528406511072, 0.7658966851145197, 0.1053984757242089, 0.8334497556820215, 0.8963206171339699, 0.20121591387143667, 0.21167161164389736, 0.1929560705719897, 0.1983947781267522, 0.21370820265939006, 0.2503504112695891, 0.18977275986251063, 0.19430181687786086, 0.2021697129013461, 0.10651334346853669, 0.06846895192836766, 0.08802535102172837, 0.09707620852780996, 0.11051849473235509, 0.17122621960175388, 0.07922645949337459, 0.11693373630305959, 0.0644396927521339]}, "mutation_prompt": null}
