{"id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting for enhanced exploration-exploitation balance.", "configspace": "", "generation": 0, "fitness": 0.13664030813170014, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.21844610195802372, 0.2113342647987948, 0.3070798330458917, 0.1628026505659309, 0.18317001282119538, 0.18777861561841125, 0.12680282095361672, 0.1664013387164961, 0.17146815790041947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007342318545110915, 0.007019546607854088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08430806723573969, 0.06193065600178993, 0.060205724037950104, 0.04154393725170635, 0.07274190925401869, 0.05782950971003464, 0.03983296069028475, 0.05652189389726847, 0.05851817466105658, 0.05764407878308064, 0.03247577023342929, 0.031233228963121085, 0.07323693714331747, 0.003064670531764957, 0.03720537763492249, 0.0271776862151637, 0.05848253243622459, 0.043211057998368996, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.08515497570313513, 0.05340054569238295, 0.12498124485898898, 0.08024282171416175, 0.090257136468327, 0.07998257975663747, 0.05136161510541404, 0.08076743744832948, 0.1854519522814212, 0.13338681052654067, 0.12092532930192901, 0.1722927008875369, 0.1386827821706914, 0.1649175725048444, 0.1186204289852163, 0.12151305300458481, 0.026523942016353774, 0.06923820064967712, 0.04061697640120332, 0.054899524963028634, 0.027054658406097443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07657962011763952, 0.00890358513789491, 0.01249775800784736, 0.05871182217436821, 0.04070149677517565, 0.08807598293053631, 0.07300950551100815, 0.0056337941360979915, 0.03107034292779609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03163739079882866, 0.05702180811567936, 0.01968326250797725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.01628013088601199, 0.011940497198676736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032523192478851604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004706755195142631, 0.0005059107408494912, 9.999999999998899e-05, 0.047402118538045546, 9.999999999998899e-05, 9.999999999998899e-05, 0.042810660445516624, 0.2534861414980253, 0.28076001250371396, 0.25478828789234154, 0.2055194081087236, 0.18354557423353157, 0.20163095474352022, 0.2954470636899815, 0.24675546719188546, 0.25001900687074774, 0.047577132766840946, 0.0471237417514383, 0.04338885884579724, 0.07000886039399956, 0.06107439483715338, 0.06747636646341648, 0.032457901919724974, 0.055272012829738704, 0.06571043066645577, 0.09681638200195097, 0.14084064074970282, 0.15827627631238828, 0.14919588776704662, 0.16899396694410684, 0.19067156321466738, 0.14558599103696246, 0.12808739771920286, 0.1417573605740563, 0.22171127300387194, 0.19138092580702837, 0.17741882759524763, 0.17479124041740812, 0.1841146389171765, 0.16928301553874803, 0.17205547102893093, 0.23336929729368827, 0.16045181701561562, 0.1244319143965984, 0.11070785379802728, 0.12618770108205357, 0.10899727559404004, 0.13941189750263927, 0.11503696517190853, 0.11781153834762514, 0.13983047390362646, 0.17804807158060654, 0.16553440820428056, 0.11250381104582596, 0.15449888799819322, 0.16550202762143784, 0.15216310396542831, 0.18238981265032161, 0.1668136529106018, 0.14841918942095256, 0.16259650579852625, 0.15960667334965672, 0.16621932630992342, 0.16576568378812684, 0.15865007655846708, 0.1325380282741644, 0.15035596384088457, 0.15315890262157716, 0.13355364984260998, 0.17049298729149664, 0.1612523679128004, 0.1642490122882415, 0.12129065411879403, 0.37507175884197375, 0.30468175807674536, 0.15777548347664083, 0.11794415405975756, 0.14959568399876566, 0.32520379766355767, 0.2071673326729082, 0.1586654302757492, 0.1354877088342351, 0.10691715224109155, 0.1857795729354571, 0.23591430596729035, 0.18127570171506147, 0.18443319731508867, 0.17763076813473677, 0.20137550281806949, 0.18928761815080786, 0.19541558412863247, 0.17375224204569006, 0.18358659603035554, 0.19092256247267902, 0.17739874174957238, 0.19148874238688152, 0.21358529345622024, 0.03981042477411334, 0.031974363386246485, 0.0716216931628767, 0.030001315900013648, 0.05556651144657321, 0.02958865366218033, 0.05902154991721342, 0.05106282765900283, 0.07669200551013378]}, "mutation_prompt": null}
{"id": "8af4931e-b243-4b1a-8848-93dfdc0678f3", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.21844610195802372, 0.2113342647987948, 0.3070798330458917, 0.1628026505659309, 0.18317001282119538, 0.18777861561841125, 0.12680282095361672, 0.1664013387164961, 0.17146815790041947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007342318545110915, 0.007019546607854088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08430806723573969, 0.06193065600178993, 0.060205724037950104, 0.04154393725170635, 0.07274190925401869, 0.05782950971003464, 0.03983296069028475, 0.05652189389726847, 0.05851817466105658, 0.05764407878308064, 0.03247577023342929, 0.031233228963121085, 0.07323693714331747, 0.003064670531764957, 0.03720537763492249, 0.0271776862151637, 0.05848253243622459, 0.043211057998368996, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.08515497570313513, 0.05340054569238295, 0.12498124485898898, 0.08024282171416175, 0.090257136468327, 0.07998257975663747, 0.05136161510541404, 0.08076743744832948, 0.1854519522814212, 0.13338681052654067, 0.12092532930192901, 0.1722927008875369, 0.1386827821706914, 0.1649175725048444, 0.1186204289852163, 0.12151305300458481, 0.026523942016353774, 0.06923820064967712, 0.04061697640120332, 0.054899524963028634, 0.027054658406097443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07657962011763952, 0.00890358513789491, 0.01249775800784736, 0.05871182217436821, 0.04070149677517565, 0.08807598293053631, 0.07300950551100815, 0.0056337941360979915, 0.03107034292779609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03163739079882866, 0.05702180811567936, 0.01968326250797725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.01628013088601199, 0.011940497198676736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032523192478851604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004706755195142631, 0.0005059107408494912, 9.999999999998899e-05, 0.047402118538045546, 9.999999999998899e-05, 9.999999999998899e-05, 0.042810660445516624, 0.2534861414980253, 0.28076001250371396, 0.25478828789234154, 0.2055194081087236, 0.18354557423353157, 0.20163095474352022, 0.2954470636899815, 0.24675546719188546, 0.25001900687074774, 0.047577132766840946, 0.0471237417514383, 0.04338885884579724, 0.07000886039399956, 0.06107439483715338, 0.06747636646341648, 0.032457901919724974, 0.055272012829738704, 0.06571043066645577, 0.09681638200195097, 0.14084064074970282, 0.15827627631238828, 0.14919588776704662, 0.16899396694410684, 0.19067156321466738, 0.14558599103696246, 0.12808739771920286, 0.1417573605740563, 0.22171127300387194, 0.19138092580702837, 0.17741882759524763, 0.17479124041740812, 0.1841146389171765, 0.16928301553874803, 0.17205547102893093, 0.23336929729368827, 0.16045181701561562, 0.1244319143965984, 0.11070785379802728, 0.12618770108205357, 0.10899727559404004, 0.13941189750263927, 0.11503696517190853, 0.11781153834762514, 0.13983047390362646, 0.17804807158060654, 0.16553440820428056, 0.11250381104582596, 0.15449888799819322, 0.16550202762143784, 0.15216310396542831, 0.18238981265032161, 0.1668136529106018, 0.14841918942095256, 0.16259650579852625, 0.15960667334965672, 0.16621932630992342, 0.16576568378812684, 0.15865007655846708, 0.1325380282741644, 0.15035596384088457, 0.15315890262157716, 0.13355364984260998, 0.17049298729149664, 0.1612523679128004, 0.1642490122882415, 0.12129065411879403, 0.37507175884197375, 0.30468175807674536, 0.15777548347664083, 0.11794415405975756, 0.14959568399876566, 0.32520379766355767, 0.2071673326729082, 0.1586654302757492, 0.1354877088342351, 0.10691715224109155, 0.1857795729354571, 0.23591430596729035, 0.18127570171506147, 0.18443319731508867, 0.17763076813473677, 0.20137550281806949, 0.18928761815080786, 0.19541558412863247, 0.17375224204569006, 0.18358659603035554, 0.19092256247267902, 0.17739874174957238, 0.19148874238688152, 0.21358529345622024, 0.03981042477411334, 0.031974363386246485, 0.0716216931628767, 0.030001315900013648, 0.05556651144657321, 0.02958865366218033, 0.05902154991721342, 0.05106282765900283, 0.07669200551013378]}, "mutation_prompt": null}
{"id": "49be1760-b24a-42ac-b1c9-00a2a9ae5a70", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.21844610195802372, 0.2113342647987948, 0.3070798330458917, 0.1628026505659309, 0.18317001282119538, 0.18777861561841125, 0.12680282095361672, 0.1664013387164961, 0.17146815790041947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007342318545110915, 0.007019546607854088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08430806723573969, 0.06193065600178993, 0.060205724037950104, 0.04154393725170635, 0.07274190925401869, 0.05782950971003464, 0.03983296069028475, 0.05652189389726847, 0.05851817466105658, 0.05764407878308064, 0.03247577023342929, 0.031233228963121085, 0.07323693714331747, 0.003064670531764957, 0.03720537763492249, 0.0271776862151637, 0.05848253243622459, 0.043211057998368996, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.08515497570313513, 0.05340054569238295, 0.12498124485898898, 0.08024282171416175, 0.090257136468327, 0.07998257975663747, 0.05136161510541404, 0.08076743744832948, 0.1854519522814212, 0.13338681052654067, 0.12092532930192901, 0.1722927008875369, 0.1386827821706914, 0.1649175725048444, 0.1186204289852163, 0.12151305300458481, 0.026523942016353774, 0.06923820064967712, 0.04061697640120332, 0.054899524963028634, 0.027054658406097443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07657962011763952, 0.00890358513789491, 0.01249775800784736, 0.05871182217436821, 0.04070149677517565, 0.08807598293053631, 0.07300950551100815, 0.0056337941360979915, 0.03107034292779609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03163739079882866, 0.05702180811567936, 0.01968326250797725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.01628013088601199, 0.011940497198676736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032523192478851604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004706755195142631, 0.0005059107408494912, 9.999999999998899e-05, 0.047402118538045546, 9.999999999998899e-05, 9.999999999998899e-05, 0.042810660445516624, 0.2534861414980253, 0.28076001250371396, 0.25478828789234154, 0.2055194081087236, 0.18354557423353157, 0.20163095474352022, 0.2954470636899815, 0.24675546719188546, 0.25001900687074774, 0.047577132766840946, 0.0471237417514383, 0.04338885884579724, 0.07000886039399956, 0.06107439483715338, 0.06747636646341648, 0.032457901919724974, 0.055272012829738704, 0.06571043066645577, 0.09681638200195097, 0.14084064074970282, 0.15827627631238828, 0.14919588776704662, 0.16899396694410684, 0.19067156321466738, 0.14558599103696246, 0.12808739771920286, 0.1417573605740563, 0.22171127300387194, 0.19138092580702837, 0.17741882759524763, 0.17479124041740812, 0.1841146389171765, 0.16928301553874803, 0.17205547102893093, 0.23336929729368827, 0.16045181701561562, 0.1244319143965984, 0.11070785379802728, 0.12618770108205357, 0.10899727559404004, 0.13941189750263927, 0.11503696517190853, 0.11781153834762514, 0.13983047390362646, 0.17804807158060654, 0.16553440820428056, 0.11250381104582596, 0.15449888799819322, 0.16550202762143784, 0.15216310396542831, 0.18238981265032161, 0.1668136529106018, 0.14841918942095256, 0.16259650579852625, 0.15960667334965672, 0.16621932630992342, 0.16576568378812684, 0.15865007655846708, 0.1325380282741644, 0.15035596384088457, 0.15315890262157716, 0.13355364984260998, 0.17049298729149664, 0.1612523679128004, 0.1642490122882415, 0.12129065411879403, 0.37507175884197375, 0.30468175807674536, 0.15777548347664083, 0.11794415405975756, 0.14959568399876566, 0.32520379766355767, 0.2071673326729082, 0.1586654302757492, 0.1354877088342351, 0.10691715224109155, 0.1857795729354571, 0.23591430596729035, 0.18127570171506147, 0.18443319731508867, 0.17763076813473677, 0.20137550281806949, 0.18928761815080786, 0.19541558412863247, 0.17375224204569006, 0.18358659603035554, 0.19092256247267902, 0.17739874174957238, 0.19148874238688152, 0.21358529345622024, 0.03981042477411334, 0.031974363386246485, 0.0716216931628767, 0.030001315900013648, 0.05556651144657321, 0.02958865366218033, 0.05902154991721342, 0.05106282765900283, 0.07669200551013378]}, "mutation_prompt": null}
{"id": "468f1010-4d32-432e-853e-21f67d25287b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.21844610195802372, 0.2113342647987948, 0.3070798330458917, 0.1628026505659309, 0.18317001282119538, 0.18777861561841125, 0.12680282095361672, 0.1664013387164961, 0.17146815790041947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007342318545110915, 0.007019546607854088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08430806723573969, 0.06193065600178993, 0.060205724037950104, 0.04154393725170635, 0.07274190925401869, 0.05782950971003464, 0.03983296069028475, 0.05652189389726847, 0.05851817466105658, 0.05764407878308064, 0.03247577023342929, 0.031233228963121085, 0.07323693714331747, 0.003064670531764957, 0.03720537763492249, 0.0271776862151637, 0.05848253243622459, 0.043211057998368996, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.08515497570313513, 0.05340054569238295, 0.12498124485898898, 0.08024282171416175, 0.090257136468327, 0.07998257975663747, 0.05136161510541404, 0.08076743744832948, 0.1854519522814212, 0.13338681052654067, 0.12092532930192901, 0.1722927008875369, 0.1386827821706914, 0.1649175725048444, 0.1186204289852163, 0.12151305300458481, 0.026523942016353774, 0.06923820064967712, 0.04061697640120332, 0.054899524963028634, 0.027054658406097443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07657962011763952, 0.00890358513789491, 0.01249775800784736, 0.05871182217436821, 0.04070149677517565, 0.08807598293053631, 0.07300950551100815, 0.0056337941360979915, 0.03107034292779609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03163739079882866, 0.05702180811567936, 0.01968326250797725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.01628013088601199, 0.011940497198676736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032523192478851604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004706755195142631, 0.0005059107408494912, 9.999999999998899e-05, 0.047402118538045546, 9.999999999998899e-05, 9.999999999998899e-05, 0.042810660445516624, 0.2534861414980253, 0.28076001250371396, 0.25478828789234154, 0.2055194081087236, 0.18354557423353157, 0.20163095474352022, 0.2954470636899815, 0.24675546719188546, 0.25001900687074774, 0.047577132766840946, 0.0471237417514383, 0.04338885884579724, 0.07000886039399956, 0.06107439483715338, 0.06747636646341648, 0.032457901919724974, 0.055272012829738704, 0.06571043066645577, 0.09681638200195097, 0.14084064074970282, 0.15827627631238828, 0.14919588776704662, 0.16899396694410684, 0.19067156321466738, 0.14558599103696246, 0.12808739771920286, 0.1417573605740563, 0.22171127300387194, 0.19138092580702837, 0.17741882759524763, 0.17479124041740812, 0.1841146389171765, 0.16928301553874803, 0.17205547102893093, 0.23336929729368827, 0.16045181701561562, 0.1244319143965984, 0.11070785379802728, 0.12618770108205357, 0.10899727559404004, 0.13941189750263927, 0.11503696517190853, 0.11781153834762514, 0.13983047390362646, 0.17804807158060654, 0.16553440820428056, 0.11250381104582596, 0.15449888799819322, 0.16550202762143784, 0.15216310396542831, 0.18238981265032161, 0.1668136529106018, 0.14841918942095256, 0.16259650579852625, 0.15960667334965672, 0.16621932630992342, 0.16576568378812684, 0.15865007655846708, 0.1325380282741644, 0.15035596384088457, 0.15315890262157716, 0.13355364984260998, 0.17049298729149664, 0.1612523679128004, 0.1642490122882415, 0.12129065411879403, 0.37507175884197375, 0.30468175807674536, 0.15777548347664083, 0.11794415405975756, 0.14959568399876566, 0.32520379766355767, 0.2071673326729082, 0.1586654302757492, 0.1354877088342351, 0.10691715224109155, 0.1857795729354571, 0.23591430596729035, 0.18127570171506147, 0.18443319731508867, 0.17763076813473677, 0.20137550281806949, 0.18928761815080786, 0.19541558412863247, 0.17375224204569006, 0.18358659603035554, 0.19092256247267902, 0.17739874174957238, 0.19148874238688152, 0.21358529345622024, 0.03981042477411334, 0.031974363386246485, 0.0716216931628767, 0.030001315900013648, 0.05556651144657321, 0.02958865366218033, 0.05902154991721342, 0.05106282765900283, 0.07669200551013378]}, "mutation_prompt": null}
{"id": "12b3930a-fd40-4fb6-9748-6ccaca054868", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0 * (1 - self.evaluations / self.budget), 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a decay factor to the cognitive component to balance exploration and exploitation over time.", "configspace": "", "generation": 4, "fitness": 0.13654671161251614, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.2185368163045236, 0.1514894195458093, 0.17249388399771615, 0.15448739768460162, 0.18688610414763873, 0.15918160817367166, 0.12881199704649227, 0.1664013387164961, 0.17123738016255663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05918393709527425, 0.06193065600178993, 0.04441074262314482, 0.07044446471602972, 0.0336357167733351, 0.05645220156032815, 0.043007763815520184, 0.10177327956354498, 0.04241267673102045, 0.06797095512718498, 0.014547473400198796, 0.0394664102531882, 0.09322126377106055, 0.003064670531764957, 0.03720537763492249, 0.031446808374188895, 0.060286355803153446, 0.049527852935553174, 0.9893270326790639, 0.9859428366796463, 0.9900827472023876, 0.9685091632625294, 0.9855702197105539, 0.9842131573807323, 0.9865572265612526, 0.9902285331480313, 0.9818551170262909, 0.08162421553052646, 0.07222678639136138, 0.049762264760375374, 0.1355199676943739, 0.024382883196868765, 0.09705485805826852, 0.08036079927419448, 0.05137085808546049, 0.08232312544802922, 0.20010696246756443, 0.13564174669855278, 0.09852093148730112, 0.19030473454625185, 0.1762962566972749, 0.1739079087138925, 0.11375858411272843, 0.1217431964408876, 0.026523942016353774, 0.07599910003009303, 9.999999999998899e-05, 9.999999999998899e-05, 0.06400312324951951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10221765498935365, 0.09687255403785477, 0.009838191434490384, 0.12024862402847325, 0.07745390166733801, 0.10442795441727903, 0.02734748988701252, 0.025260728673646704, 0.08157397432047075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012355123958822545, 0.04744751969937555, 0.02464574415861409, 0.08015022032321106, 9.999999999998899e-05, 0.017970872629217927, 0.0026620677051077957, 0.021548763317886577, 0.01807286008340503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062343341681324604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005395916868116024, 9.999999999998899e-05, 0.0036793307220376326, 0.0032187609145905016, 9.999999999998899e-05, 0.11879184997930259, 9.999999999998899e-05, 9.999999999998899e-05, 0.015704712491888317, 0.24648441369438134, 0.2893898028326056, 0.18489073945301826, 0.20552414309574563, 0.14906629791722936, 0.19896645956862313, 0.366617510537676, 0.3386753002448166, 0.1748742390024265, 0.03419624590067072, 0.04303770166309573, 0.04366484076116972, 0.0604635512205256, 0.07327120175303659, 0.06331995624226161, 0.06588296405707894, 0.05884180512474213, 0.0653970250945517, 0.09704356608440323, 0.14863491702594023, 0.15130605921970108, 0.14817885110021667, 0.18669494237515027, 0.1374166672330166, 0.1662995124615263, 0.12220104542082644, 0.12640620595524577, 0.19129294188349433, 0.16315420114497536, 0.1640384296560745, 0.17594869604209784, 0.2061118083265906, 0.13389633510496024, 0.15066509681608387, 0.20754721861205827, 0.1730960245894706, 0.12598328516647328, 0.14524018100376068, 0.12151810861316426, 0.11905073191307625, 0.11482156248338238, 0.1274577848805547, 0.10928577539264894, 0.12590941825644042, 0.18717697680824186, 0.15482936885395793, 0.11250381104582596, 0.1690540670371924, 0.1497080463139444, 0.18622942010946664, 0.1469176017322541, 0.17338817113526672, 0.15075721707090906, 0.1604334881348477, 0.16253505285867453, 0.1625107611625516, 0.16017385246518678, 0.19597055514251205, 0.14553749231828517, 0.1589737681622837, 0.1612147032825898, 0.14472428532663983, 0.16094768037595053, 0.17653853311886236, 0.15521286246903632, 0.12129065411879403, 0.5445926105554926, 0.24048555247816517, 0.15073072152207057, 0.11515642888716793, 0.14403871325075357, 0.326641561793685, 0.2071673326729082, 0.16485772584285574, 0.14905935284219085, 0.10798017202533738, 0.187478298168114, 0.16819192188237808, 0.18280455339033608, 0.18875404702653376, 0.18039923549043602, 0.2181721365495427, 0.16813003673553217, 0.19290987747578836, 0.14725376046347993, 0.14971751495281715, 0.17894494216776224, 0.18750541004398347, 0.17117011970817053, 0.17191779018563558, 0.0686513357575399, 0.04803999679073945, 0.05054675092191796, 0.030001315900013648, 0.07138757107965099, 0.04093602728979717, 0.058909352295711814, 0.07072617186828756, 0.052287454803725986]}, "mutation_prompt": null}
{"id": "3598f646-26dc-4472-87cc-fea29afa944b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting for enhanced exploration-exploitation balance.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.21844610195802372, 0.2113342647987948, 0.3070798330458917, 0.1628026505659309, 0.18317001282119538, 0.18777861561841125, 0.12680282095361672, 0.1664013387164961, 0.17146815790041947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007342318545110915, 0.007019546607854088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08430806723573969, 0.06193065600178993, 0.060205724037950104, 0.04154393725170635, 0.07274190925401869, 0.05782950971003464, 0.03983296069028475, 0.05652189389726847, 0.05851817466105658, 0.05764407878308064, 0.03247577023342929, 0.031233228963121085, 0.07323693714331747, 0.003064670531764957, 0.03720537763492249, 0.0271776862151637, 0.05848253243622459, 0.043211057998368996, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.08515497570313513, 0.05340054569238295, 0.12498124485898898, 0.08024282171416175, 0.090257136468327, 0.07998257975663747, 0.05136161510541404, 0.08076743744832948, 0.1854519522814212, 0.13338681052654067, 0.12092532930192901, 0.1722927008875369, 0.1386827821706914, 0.1649175725048444, 0.1186204289852163, 0.12151305300458481, 0.026523942016353774, 0.06923820064967712, 0.04061697640120332, 0.054899524963028634, 0.027054658406097443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07657962011763952, 0.00890358513789491, 0.01249775800784736, 0.05871182217436821, 0.04070149677517565, 0.08807598293053631, 0.07300950551100815, 0.0056337941360979915, 0.03107034292779609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03163739079882866, 0.05702180811567936, 0.01968326250797725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.01628013088601199, 0.011940497198676736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032523192478851604, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004706755195142631, 0.0005059107408494912, 9.999999999998899e-05, 0.047402118538045546, 9.999999999998899e-05, 9.999999999998899e-05, 0.042810660445516624, 0.2534861414980253, 0.28076001250371396, 0.25478828789234154, 0.2055194081087236, 0.18354557423353157, 0.20163095474352022, 0.2954470636899815, 0.24675546719188546, 0.25001900687074774, 0.047577132766840946, 0.0471237417514383, 0.04338885884579724, 0.07000886039399956, 0.06107439483715338, 0.06747636646341648, 0.032457901919724974, 0.055272012829738704, 0.06571043066645577, 0.09681638200195097, 0.14084064074970282, 0.15827627631238828, 0.14919588776704662, 0.16899396694410684, 0.19067156321466738, 0.14558599103696246, 0.12808739771920286, 0.1417573605740563, 0.22171127300387194, 0.19138092580702837, 0.17741882759524763, 0.17479124041740812, 0.1841146389171765, 0.16928301553874803, 0.17205547102893093, 0.23336929729368827, 0.16045181701561562, 0.1244319143965984, 0.11070785379802728, 0.12618770108205357, 0.10899727559404004, 0.13941189750263927, 0.11503696517190853, 0.11781153834762514, 0.13983047390362646, 0.17804807158060654, 0.16553440820428056, 0.11250381104582596, 0.15449888799819322, 0.16550202762143784, 0.15216310396542831, 0.18238981265032161, 0.1668136529106018, 0.14841918942095256, 0.16259650579852625, 0.15960667334965672, 0.16621932630992342, 0.16576568378812684, 0.15865007655846708, 0.1325380282741644, 0.15035596384088457, 0.15315890262157716, 0.13355364984260998, 0.17049298729149664, 0.1612523679128004, 0.1642490122882415, 0.12129065411879403, 0.37507175884197375, 0.30468175807674536, 0.15777548347664083, 0.11794415405975756, 0.14959568399876566, 0.32520379766355767, 0.2071673326729082, 0.1586654302757492, 0.1354877088342351, 0.10691715224109155, 0.1857795729354571, 0.23591430596729035, 0.18127570171506147, 0.18443319731508867, 0.17763076813473677, 0.20137550281806949, 0.18928761815080786, 0.19541558412863247, 0.17375224204569006, 0.18358659603035554, 0.19092256247267902, 0.17739874174957238, 0.19148874238688152, 0.21358529345622024, 0.03981042477411334, 0.031974363386246485, 0.0716216931628767, 0.030001315900013648, 0.05556651144657321, 0.02958865366218033, 0.05902154991721342, 0.05106282765900283, 0.07669200551013378]}, "mutation_prompt": null}
{"id": "b732104d-2855-47cc-9402-3a68038c2eb4", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.5 - (2.0 * (self.evaluations / self.budget)), 2.0  # Slight modification\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "A dynamic population-based particle swarm optimization with adaptive inertia weighting and learning coefficients for enhanced exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.1356378329792431, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.2685405874013792, 0.13534641590611196, 0.2487591607716949, 0.154331476944376, 0.187247898156653, 0.1889877487881082, 0.12663674970111338, 0.1664013387164961, 0.17194634907860218, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01604474350823859, 9.999999999998899e-05, 9.999999999998899e-05, 0.02745192061995516, 9.999999999998899e-05, 0.0521896092564621, 0.06193065600178993, 0.04723615859097785, 0.0587063789431268, 0.057595345907169415, 0.06088098481425064, 0.030188530446030204, 0.05274449217547117, 0.03279199400032917, 0.04460489873809215, 0.03492348627470998, 0.02521974051973752, 0.032588836876471405, 0.031076384633217602, 0.03720537763492249, 0.04943522850139215, 0.0599242591883794, 0.028842956863682212, 0.9893270326790639, 0.9859287325958611, 0.9900827472023876, 0.9728838612567248, 0.9855699930383072, 0.9842107879131058, 0.9865572265612526, 0.9902285331480313, 0.981873441378546, 0.1896878195889633, 0.11465758718283292, 0.057315188246437554, 0.11970721681617091, 0.1816368539269152, 0.1206021635854988, 0.07789082748273835, 0.051164791599402126, 0.08776118317298387, 0.23474850520656787, 0.13508722122195815, 0.13366980790314065, 0.18120072965525036, 0.16362834736802867, 0.1696121903700596, 0.1244659949618735, 0.12048038535410965, 0.061899467410052034, 0.07755350168509445, 0.04084812771294166, 0.029554892897254437, 0.054902325356851356, 0.04001367998667826, 9.999999999998899e-05, 0.0449744221273799, 0.03297393074484278, 9.999999999998899e-05, 0.1144366138381927, 0.1008516612936422, 0.0681354712557588, 0.08274404104629485, 0.08720641375999771, 0.08613070893684183, 0.05607767461053137, 0.006103870345153695, 0.07017022831648723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02560760686732988, 9.999999999998899e-05, 0.033063618072417866, 9.999999999998899e-05, 0.003992348358695774, 9.999999999998899e-05, 0.004166448217727936, 0.02574231358454604, 0.01666671607499215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004911076114334945, 9.999999999998899e-05, 9.999999999998899e-05, 0.037601823538182866, 9.999999999998899e-05, 9.999999999998899e-05, 0.038009777633768005, 0.3155426979113588, 0.28365643337399393, 0.18489073945301826, 0.20547061319886406, 0.17141810487033327, 0.2003052320062627, 0.3141704408865328, 0.24084588951845465, 0.27835449262380463, 0.04410546934366033, 0.04619606941796717, 0.06003028481070327, 0.07781621616379053, 0.018421663568227498, 0.06898458800529028, 0.04328821417392703, 0.026603380316479908, 0.05759554161495983, 0.14988888104351406, 0.132070326972057, 0.13516507805448197, 0.16612733038968586, 0.19780570977105116, 0.14596714914521292, 0.14509383382858743, 0.11740984642398544, 0.12873012161150177, 0.22204221532126833, 0.17523932463641834, 0.1640384296560745, 0.16567320656069828, 0.1674259905954696, 0.17679581231527786, 0.14702760061281517, 0.23111754340354718, 0.1666621624356982, 0.10917727960846424, 0.145722160710541, 0.12994108179995079, 0.10718734005389363, 0.15322135000352155, 0.13872362529098536, 0.1069177847209607, 0.1755409219853281, 0.12019374384551629, 0.16322547281359945, 0.13565194640762235, 0.1612753566916636, 0.17605525348692685, 0.16565342345461975, 0.15581376269015568, 0.15142413306363067, 0.16736485387414746, 0.15522970083442034, 0.1826001656207369, 0.15590523618137486, 0.15352101755168135, 0.11408759161226567, 0.17168734378760597, 0.14087740238408164, 0.1427945737109747, 0.08306450877950888, 0.14370944057867707, 0.10968786314250933, 0.1331210836583787, 0.12129065411879403, 0.12259308748248099, 0.2972755953433319, 0.16532354937255278, 0.14441241430576135, 0.16585430845195892, 0.12622189337487866, 0.2071673326729082, 0.16635423235071722, 0.15064723176598693, 0.10328039472919914, 0.1914147362924219, 0.0895535619251292, 0.1809537592804732, 0.19454577136285522, 0.17664921003531509, 0.17950178531979544, 0.1897533028552577, 0.18764563727935601, 0.15447021127729055, 0.1657695884377064, 0.19415758332311495, 0.21009150438546842, 0.1879362091734229, 0.18881818941303197, 0.054646263238199544, 0.031974363386246485, 0.049391621681961984, 0.0613955648679374, 0.06265743215518083, 0.046011808781806884, 0.04372454131433423, 0.06105983389623104, 0.03617905932554166]}, "mutation_prompt": null}
{"id": "7bb43dfe-a333-4572-bfe0-e90382200de5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            # Adaptive learning factors\n            c1 = 2.0 - (1.5 * (self.evaluations / self.budget))\n            c2 = 2.0 + (1.5 * (self.evaluations / self.budget))\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce an adaptive cognitive and social learning factor adjustment to improve convergence speed.", "configspace": "", "generation": 7, "fitness": 0.13163895953552135, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.24299775235543797, 0.18992808279180806, 0.2979541876049817, 0.1540150292388791, 0.18760002782590113, 0.18620708884477433, 0.14848840098253713, 0.16693632972364647, 0.17326088815851326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028807158256122234, 9.999999999998899e-05, 0.00010250403895806226, 9.999999999998899e-05, 9.999999999998899e-05, 0.05325873135051917, 0.06458689715877441, 0.06050548844331716, 0.03562469297431348, 0.042751120932745246, 0.0626205109617114, 0.031573819993837016, 0.057289873151402215, 0.041385801206273, 0.09578458054387007, 0.028449268208803558, 0.03549606272655126, 0.09160378926555457, 0.003170062696520981, 0.03971435516564947, 0.05899463138872474, 0.04217575364705883, 0.025889681561039657, 0.9895151285298655, 0.9859601750346585, 0.9900848870675929, 0.9685161975428852, 0.9855715499559131, 0.9842157076341671, 0.9865692453977262, 0.9902299381497373, 0.9818586435390205, 0.08261260066990361, 0.07295043060072626, 0.052953346376302, 0.12010712944015467, 0.02398925140106478, 0.08577846908601372, 0.08155727833606019, 0.051266789820253456, 0.08109754260187496, 0.15605387029206919, 0.13250304027682758, 0.08245288406889306, 0.19332755715275074, 0.137180234308238, 0.13980583522203993, 0.11793101505843984, 0.12421409571146758, 0.026523942016353774, 0.050938272684280306, 9.999999999998899e-05, 9.999999999998899e-05, 0.005712557410954777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00636969146530042, 9.999999999998899e-05, 0.058972340469456874, 0.02665086085298496, 0.015092192097015733, 0.047256938856210406, 0.052340176299980556, 0.09106317843705458, 0.06438940370775614, 0.017649380598876663, 0.020244624191033678, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02922840758381029, 0.05154732757528924, 0.009247451587097943, 0.02546442164551077, 9.999999999998899e-05, 0.008419861360474679, 0.018893305021586815, 0.02055800898781468, 0.0441874275161277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003930602178558007, 9.999999999998899e-05, 9.999999999998899e-05, 0.001176658785806417, 9.999999999998899e-05, 0.06150670585983953, 9.999999999998899e-05, 9.999999999998899e-05, 0.024959172655684037, 0.24157602850552895, 0.22150924721132947, 0.1872404590800988, 0.20368838349273666, 0.20202349356370242, 0.20352311397349754, 0.30406762258273246, 0.19903733940639456, 0.1688242344243306, 0.052029904413878114, 0.05024001156701774, 0.03930002823011969, 0.050402470082438366, 0.028529140073977444, 0.0597102672403258, 0.06634673984077966, 0.037393098370027245, 0.038791550128033814, 0.13031604903754046, 0.12090961586679749, 0.14988653652067097, 0.12181396553222112, 0.20722829936279108, 0.14967920924767497, 0.14072188476135705, 0.11595706402011696, 0.11227453342835292, 0.1900849732938671, 0.13734318415479907, 0.21381037250604396, 0.2028366776676107, 0.21699359705137866, 0.16583083165287626, 0.15864422902324327, 0.19271725990566024, 0.16480964152022548, 0.15260024496177826, 0.0860159980503582, 0.13627064229478258, 0.09589903746175477, 0.09026541966734203, 0.175874268344002, 0.12458456491764391, 0.12840383640920772, 0.09114958833396936, 0.16284470423076713, 0.12671511931392143, 0.15494094126679536, 0.15903316382609178, 0.14448597878407532, 0.1848101045410856, 0.14125984311179707, 0.15788085437584798, 0.1488988735314335, 0.15965194761384516, 0.1676571471758045, 0.16737029615711185, 0.15691479892656057, 0.13665459066466978, 0.15360032092002018, 0.16144580427409128, 0.1264750707918063, 0.16427085026801946, 0.17532677282795717, 0.16455027262240496, 0.12183770465593802, 0.3097947793463377, 0.19878759530850998, 0.15807866290717032, 0.15731431695140996, 0.14926677507436492, 0.2971448853732569, 0.2066453023153706, 0.16085230017646923, 0.14738483102134248, 0.10756663866552374, 0.1514538628416271, 0.22685900083899724, 0.1811752543034194, 0.18473698658653193, 0.1757674108401852, 0.18842982063677594, 0.1775063826242398, 0.18257630065418295, 0.17937203928600398, 0.19705654219259439, 0.18826274801840714, 0.18755788998010936, 0.1579617307127813, 0.17261674572183305, 0.04592329392883543, 0.032551127820204195, 0.06767378655044465, 0.037418351713539466, 0.06445654813453017, 0.04041952696172613, 0.03795226474965219, 0.05753864680478438, 0.03656121168317272]}, "mutation_prompt": null}
{"id": "6950c448-91ee-46ec-8ea9-5a5f3fd8c946", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 2.0, 2.0\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n\n            # Add diversification step\n            if self.evaluations % (self.budget // 10) == 0:\n                reset_indices = np.random.choice(self.swarm_size, self.swarm_size // 10, replace=False)\n                self.positions[reset_indices] = np.random.uniform(self.lower_bound, self.upper_bound, (len(reset_indices), self.dim))\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Integrate a diverse exploration phase by periodically resetting a random fraction of particles to new positions.", "configspace": "", "generation": 8, "fitness": 0.13526697892859993, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.26570353870693864, 0.13534641590611196, 0.30411448731850255, 0.15410453188701811, 0.1847642644660702, 0.1881857348000051, 0.13141535358356793, 0.1664013387164961, 0.16959462201094844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024657949978190707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05611973834673367, 0.06193065600178993, 0.05188296941598369, 0.04166917109618751, 0.03868058819097664, 0.05031072410035309, 0.04204212707808641, 0.06726566551746471, 0.05049753749545072, 0.07106464811701285, 0.03314508714615827, 0.031811505992538014, 0.06341388328010056, 0.024855144155814357, 0.037821293680034396, 0.0265320737295055, 0.06716825139782501, 0.051123950935435425, 0.9893270326790639, 0.985942677798616, 0.9900827472023876, 0.9685504641819654, 0.9855702105866486, 0.9842130257813276, 0.9865572265612526, 0.9902285331480313, 0.9818551637672968, 0.08162421553052646, 0.12006648730350988, 0.05305116684497302, 0.1206320874920841, 0.033818632026658246, 0.10046858827708771, 0.07998257975663747, 0.05941470458369591, 0.0806406009921955, 0.1934442592634753, 0.13556201525548828, 0.09852093148730112, 0.1865534551625908, 0.13772079012845773, 0.16253462992584478, 0.10382618492896367, 0.12262377032558813, 0.026523942016353774, 0.042480248645234364, 0.022056360790261187, 9.999999999998899e-05, 0.04814361601088202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004320883971985157, 9.999999999998899e-05, 0.07856049623988459, 0.040104755216374355, 0.01249775800784736, 0.049215026248106364, 0.0725034619491769, 0.07210268584367618, 0.039059714052758876, 0.013543538828163726, 0.057876708183390635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032497729690966426, 0.05702180811567936, 0.020106519572721138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024369448587068465, 0.016517909687610133, 0.012042595128529121, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007661137567417264, 9.999999999998899e-05, 0.004688437553995173, 9.999999999998899e-05, 0.0017349071546852723, 0.0007986833630185819, 9.999999999998899e-05, 0.021992005570636297, 9.999999999998899e-05, 9.999999999998899e-05, 0.03415867087322677, 0.2641233925111317, 0.3011442342503221, 0.2570754576166452, 0.2055194081087236, 0.1882150105671243, 0.1965774373767668, 0.3049739754196805, 0.21309480601397734, 0.25668751054485406, 0.03971604273289153, 0.048257209258977696, 0.048568515703949156, 0.0642956463748462, 0.052515195888497734, 0.06883628333427771, 0.04626195470168881, 0.0651633291028273, 0.06608253547293064, 0.09724066878823923, 0.14633479754429413, 0.13476099346325865, 0.15352084932859966, 0.14329035189839834, 0.17709988018788358, 0.16661840877928424, 0.14152327379697394, 0.10360456565701115, 0.19138594257897024, 0.17982294848377445, 0.16894805652058764, 0.15197264063664262, 0.17181396253126746, 0.16827764218838748, 0.17730711828067647, 0.22482268503225067, 0.17319216404532634, 0.1321483883929766, 0.12184306236163833, 0.13101311960657536, 0.11521793554703763, 0.1378943767947467, 0.11975652850076168, 0.11781153834762514, 0.13983047390362646, 0.14480271270382072, 0.16056159356452349, 0.1194674241871746, 0.15882743263158028, 0.16313384571801837, 0.15042043174530517, 0.1778789444024278, 0.17057703061121388, 0.15015701121538128, 0.16061163996996275, 0.15568225050554918, 0.16329074892707374, 0.17006497354898342, 0.1449524725329311, 0.12529314176353, 0.1490800550392356, 0.147617898246038, 0.14816216397049697, 0.1587886900809221, 0.17037748986478296, 0.16428962437627104, 0.12129065411879403, 0.27023017842446084, 0.3328486073471104, 0.141346508410929, 0.1505999966168884, 0.1522095391337096, 0.31806731403029964, 0.22102440453642735, 0.16213477796713394, 0.14478624177531696, 0.10843486156629734, 0.17661238869235552, 0.34421921178576, 0.18071621915459368, 0.18458051001546505, 0.1526445085042607, 0.2084997196706957, 0.19978100856420822, 0.19645210250435663, 0.17455396851558835, 0.1800109372390014, 0.18152944490033873, 0.1693858210637723, 0.19059818357781833, 0.21358529345622024, 0.04191816782463631, 0.031974363386246485, 0.054584441931877725, 0.030001315900013648, 0.057481662511339904, 0.02958865366218033, 0.041035640449531674, 0.056581706392952014, 0.051638873232610294]}, "mutation_prompt": null}
{"id": "df4a5022-0440-461c-9ada-773261a0eebe", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 9, "fitness": 0.1375887435053542, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "656a50eb-ed96-41b7-b15a-50577cfb495e", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "13b009af-d9c5-4193-bd4d-2d100a561681", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "300942e4-48af-4dd0-96bf-0f8cba02357f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "590b48c7-13eb-4e2b-838f-fc747dac757a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "360ab1fd-8da4-4cae-870e-17141d6e21a2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "7664b0eb-01f2-4278-a38b-6fe61c268358", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "50feff76-7db8-416e-8c2c-ce615cbd8fd0", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "747eefa5-3b7f-4ec3-8d07-603b7d012494", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "681a56fd-8c75-43ea-ad1a-fc352be925fb", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "924ba35f-1517-477a-93cd-c78b7f9c9101", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "cf906f85-7159-48ad-ba7f-dd95847f8380", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "8043a367-b06c-4f9d-a67e-038835e0d1a8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "69367173-246e-4620-a7d5-6509a99dbb0d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.5 * (self.evaluations / self.budget))\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with improved exploration by altering the cognitive coefficient `c1`.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.3081635376123646, 0.22656509915755652, 0.1671008346818026, 0.15158467969876388, 0.16378708051225388, 0.16010812816312414, 0.13876003323095942, 0.1664013387164961, 0.17383888256539126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02809485723832239, 9.999999999998899e-05, 0.0546911578182151, 0.06193065600178993, 0.032119263780406415, 0.0399243025117777, 0.04622892051665639, 0.06079259594683095, 0.044079375108109886, 0.06943388886437862, 0.04533929582854146, 0.08461608486541539, 0.03405400576461248, 0.024264070726237708, 0.03703454107215243, 0.01266627927103292, 0.03720537763492249, 0.07845037489677886, 0.06384973524529469, 0.03539886894420674, 0.9893270326790639, 0.9859472304584058, 0.9900827472023876, 0.95905188237209, 0.9855704401343363, 0.9841819410615946, 0.9865572265612526, 0.9902285331480313, 0.9818288830158066, 0.13294402184344523, 0.06949237341006265, 9.999999999998899e-05, 0.13448367731016841, 0.0769823613652516, 0.1261662679711919, 0.08079329991484885, 0.050920604914504675, 0.08052400923547898, 0.16976911483505008, 0.16692538157832548, 0.09852093148730112, 0.18822072253552502, 0.17324987754614118, 0.1883634493049241, 0.11023832023025482, 0.12050467253660357, 0.026523942016353774, 0.045051367199538395, 0.0755179626513709, 0.05329874249343669, 0.029049461589354952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002025844362149698, 0.08117786529576188, 0.08057227377903908, 0.1147310787490633, 0.07655279664131998, 0.12429343142024829, 0.11479509162979307, 0.023813681600570846, 0.014679542042060012, 0.09046227118182104, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006311970086311236, 0.012804815254581214, 0.014852977818541002, 0.023138043981740908, 0.007567127667815643, 0.01627129562719487, 9.999999999998899e-05, 0.03630448631686012, 0.018360899106333872, 0.019620671002152257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018344942726562508, 9.999999999998899e-05, 0.013340843032248584, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001919736104101455, 9.999999999998899e-05, 0.0025963793129820667, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029418053335957817, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356221178252161, 0.2847436799113292, 0.2124006272463418, 0.18837884843656305, 0.20547782133680537, 0.14906629791722936, 0.2416340684244177, 0.37645517908184334, 0.3396868755437801, 0.27994686413184977, 0.03419624590067072, 0.06186897109505041, 0.047140925482971774, 0.061468947636750815, 0.02446952640031086, 0.07215368946610212, 0.08213740557549298, 0.02995331413748792, 0.0710934560728057, 0.09844869829885827, 0.14969546077804752, 0.1528821156798693, 0.1669472463893633, 0.13983116807332863, 0.15920665232686548, 0.1593086090486957, 0.1218745096133611, 0.09901138855377412, 0.20441555564066438, 0.1746728137964445, 0.1640384296560745, 0.1578918931994414, 0.15958954114589285, 0.1671971265475206, 0.167722397341451, 0.19169819200524385, 0.18623667282658263, 0.147433797134917, 0.12448192270707936, 0.1434442500328611, 0.10867724706215309, 0.14504234476352174, 0.15078852930418085, 0.10199113982976793, 0.1687348566110517, 0.1689453273225685, 0.14739817272977584, 0.11925308532729628, 0.1708763444779241, 0.14309733446953288, 0.17834372829561584, 0.1586596340323082, 0.17027898579269163, 0.1772079800923273, 0.18567021296106434, 0.16604939087386483, 0.17248050999012376, 0.1841530432273073, 0.16880249484446852, 0.14843938536061474, 0.15645614328998858, 0.1640696230739057, 0.0984938706970937, 0.19773186845348678, 0.1091639483998833, 0.1646643334718787, 0.12129065411879403, 0.2516526859877902, 0.43881424621548315, 0.15595607345116969, 0.11838612228423084, 0.14943028717430784, 0.3162651059784689, 0.2071673326729082, 0.16221682379977087, 0.14454710706151852, 0.10783002552156717, 0.18424521546554795, 0.1211498575547224, 0.18307628246248753, 0.18381873875938293, 0.1791089702826112, 0.18348400440342116, 0.20318122715833653, 0.1927377244668721, 0.19218142810831873, 0.1662610880227232, 0.17893696716164176, 0.1948332400457391, 0.20227825787399467, 0.19651570175584343, 0.047454421863030616, 0.031974363386246485, 0.0579244937447565, 0.030001315900013648, 0.0683560527859749, 0.03590619088466229, 0.0625668020678628, 0.06727909554839806, 0.02951936853908721]}, "mutation_prompt": null}
{"id": "8444fb32-7a62-4278-9acb-5781c149b0c9", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.7 * (self.evaluations / self.budget)) # Changed decay factor from 0.5 to 0.7\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance diversification by adjusting the inertia weight decay more aggressively.", "configspace": "", "generation": 22, "fitness": 0.14426439493589852, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.20.", "error": "", "parent_id": "df4a5022-0440-461c-9ada-773261a0eebe", "metadata": {"aucs": [0.23718023668031063, 0.1353769024159459, 0.2119774060294728, 0.15461036795088856, 0.16365784400716543, 0.16033759890780241, 0.1414081274614628, 0.16637105981624023, 0.17372120352010134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0341183865583935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06513822272649084, 0.0620016390825785, 0.05596425117649939, 0.040559769346946495, 0.0406874848334583, 0.059259325017517184, 0.03828892050624455, 0.0585424816727278, 0.031653526971079704, 0.08688746451525042, 0.006292886391023211, 0.03634027355192071, 0.08290152538180351, 0.0030627163540620783, 0.03713806434490585, 0.14144911324904608, 0.05144310550928599, 0.03345352764917675, 0.9893270826195264, 0.9859473443689428, 0.990082755683341, 0.9591196685148261, 0.9855702067927739, 0.9841820183932717, 0.9865566113257994, 0.9902284878145028, 0.9818239507111878, 0.19804270263319046, 0.22515971867108264, 9.999999999998899e-05, 0.1282460094001946, 0.03887626393752419, 0.13711665968666498, 0.08091477013017268, 0.051424651049458814, 0.08108199254411319, 0.1636544294169494, 0.1679043388949022, 0.12392802889986465, 0.1937342249398395, 0.1806286476829777, 0.18913923977506297, 0.11528844761603996, 0.12367034345089245, 0.026523942016353774, 0.016989404594821456, 0.06477309865940406, 0.0026931749196306143, 0.05964114533756815, 9.999999999998899e-05, 9.999999999998899e-05, 0.03844831856472064, 9.999999999998899e-05, 0.004545682370590498, 0.07844656633639646, 0.12586942099343557, 0.1316170469240564, 0.1065991041329607, 0.11547163329062338, 0.06790774600059735, 0.14190406954631984, 0.005107724556858151, 0.02764323597656526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001551708466851487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01189486915581961, 0.03171999084051791, 0.02166119285244128, 0.007434620959710259, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828453793080222, 0.01189359201712381, 0.03522785966258413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04011906640104901, 0.0382317308636142, 9.999999999998899e-05, 0.03178619492381074, 9.999999999998899e-05, 0.006667470582200297, 9.999999999998899e-05, 0.00403202841546868, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033386456174228085, 9.999999999998899e-05, 9.999999999998899e-05, 0.03867832608976074, 0.3828995525737623, 0.23443772856779732, 0.40021327711188703, 0.2055805342012169, 0.14906220207178122, 0.27026995049879365, 0.43320822093568556, 0.3147905059506526, 0.3385149589349665, 0.034718035730917696, 0.04526960993650919, 0.045843928322008676, 0.08308848933132285, 0.018251291558287863, 0.07886130733063523, 0.07069694523292014, 0.058718252525115866, 0.07545890723147108, 0.09721733773132857, 0.1329248526838479, 0.16710408221936868, 0.1807628798275871, 0.1708528517284107, 0.11734419041035493, 0.15943598972192208, 0.13439326150763897, 0.14200111770738166, 0.24638893232790637, 0.36088387974718217, 0.16424588002157958, 0.1626609649765891, 0.16450218606847888, 0.18321489318387063, 0.1982669370374177, 0.19958489547430847, 0.16883182103119343, 0.14935918780844515, 0.12551155422526405, 0.1355571529749634, 0.11307978152135167, 0.14555948846250288, 0.13789472905014644, 0.16584422947425626, 0.20693448812103765, 0.19676948319909437, 0.2166999539521346, 0.11532029080866701, 0.17854144952939366, 0.19588039967736148, 0.18133570823214096, 0.1787486404220423, 0.16273848621707454, 0.17806611146245, 0.1618452335330165, 0.16428540060336472, 0.16938298881410574, 0.1859796022557243, 0.17019931305586977, 0.1678195407453752, 0.16691411935242761, 0.16585299439736612, 0.09704893040535467, 0.16440527642187786, 0.10911654641997937, 0.16142597016169513, 0.12132896853695563, 0.15826530725977295, 0.4730608368750332, 0.1521279683266068, 0.11859331159450592, 0.15271361157365881, 0.4734415876987549, 0.21517490312728338, 0.15708543669460673, 0.10647756760769012, 0.10823215843550793, 0.18805177209489654, 0.11636203049841531, 0.1830444650422054, 0.1833624260599529, 0.18307779116646006, 0.16831711879566724, 0.1665689729066382, 0.1737063191857946, 0.18583555157010334, 0.1872425384877754, 0.17630296430254278, 0.20373714648703223, 0.1934239068271265, 0.18778694829531928, 0.054094231701848905, 0.031874580400822916, 0.07665096407471739, 0.032199162002231385, 0.08017538396391155, 0.0334643961250517, 0.062291104902645555, 0.0722275622952433, 0.026113970519904606]}, "mutation_prompt": null}
{"id": "ff8ba59d-38ed-4bb8-b4e2-ad8ac9ad7d01", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.7 * (self.evaluations / self.budget)) # Changed decay factor from 0.5 to 0.7\n            c1, c2 = 1.5, 2.0  # Changed c1 from 2.0 to 1.5\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance diversification by adjusting the inertia weight decay more aggressively.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8444fb32-7a62-4278-9acb-5781c149b0c9", "metadata": {"aucs": [0.23718023668031063, 0.1353769024159459, 0.2119774060294728, 0.15461036795088856, 0.16365784400716543, 0.16033759890780241, 0.1414081274614628, 0.16637105981624023, 0.17372120352010134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0341183865583935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06513822272649084, 0.0620016390825785, 0.05596425117649939, 0.040559769346946495, 0.0406874848334583, 0.059259325017517184, 0.03828892050624455, 0.0585424816727278, 0.031653526971079704, 0.08688746451525042, 0.006292886391023211, 0.03634027355192071, 0.08290152538180351, 0.0030627163540620783, 0.03713806434490585, 0.14144911324904608, 0.05144310550928599, 0.03345352764917675, 0.9893270826195264, 0.9859473443689428, 0.990082755683341, 0.9591196685148261, 0.9855702067927739, 0.9841820183932717, 0.9865566113257994, 0.9902284878145028, 0.9818239507111878, 0.19804270263319046, 0.22515971867108264, 9.999999999998899e-05, 0.1282460094001946, 0.03887626393752419, 0.13711665968666498, 0.08091477013017268, 0.051424651049458814, 0.08108199254411319, 0.1636544294169494, 0.1679043388949022, 0.12392802889986465, 0.1937342249398395, 0.1806286476829777, 0.18913923977506297, 0.11528844761603996, 0.12367034345089245, 0.026523942016353774, 0.016989404594821456, 0.06477309865940406, 0.0026931749196306143, 0.05964114533756815, 9.999999999998899e-05, 9.999999999998899e-05, 0.03844831856472064, 9.999999999998899e-05, 0.004545682370590498, 0.07844656633639646, 0.12586942099343557, 0.1316170469240564, 0.1065991041329607, 0.11547163329062338, 0.06790774600059735, 0.14190406954631984, 0.005107724556858151, 0.02764323597656526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001551708466851487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01189486915581961, 0.03171999084051791, 0.02166119285244128, 0.007434620959710259, 9.999999999998899e-05, 9.999999999998899e-05, 0.03828453793080222, 0.01189359201712381, 0.03522785966258413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04011906640104901, 0.0382317308636142, 9.999999999998899e-05, 0.03178619492381074, 9.999999999998899e-05, 0.006667470582200297, 9.999999999998899e-05, 0.00403202841546868, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033386456174228085, 9.999999999998899e-05, 9.999999999998899e-05, 0.03867832608976074, 0.3828995525737623, 0.23443772856779732, 0.40021327711188703, 0.2055805342012169, 0.14906220207178122, 0.27026995049879365, 0.43320822093568556, 0.3147905059506526, 0.3385149589349665, 0.034718035730917696, 0.04526960993650919, 0.045843928322008676, 0.08308848933132285, 0.018251291558287863, 0.07886130733063523, 0.07069694523292014, 0.058718252525115866, 0.07545890723147108, 0.09721733773132857, 0.1329248526838479, 0.16710408221936868, 0.1807628798275871, 0.1708528517284107, 0.11734419041035493, 0.15943598972192208, 0.13439326150763897, 0.14200111770738166, 0.24638893232790637, 0.36088387974718217, 0.16424588002157958, 0.1626609649765891, 0.16450218606847888, 0.18321489318387063, 0.1982669370374177, 0.19958489547430847, 0.16883182103119343, 0.14935918780844515, 0.12551155422526405, 0.1355571529749634, 0.11307978152135167, 0.14555948846250288, 0.13789472905014644, 0.16584422947425626, 0.20693448812103765, 0.19676948319909437, 0.2166999539521346, 0.11532029080866701, 0.17854144952939366, 0.19588039967736148, 0.18133570823214096, 0.1787486404220423, 0.16273848621707454, 0.17806611146245, 0.1618452335330165, 0.16428540060336472, 0.16938298881410574, 0.1859796022557243, 0.17019931305586977, 0.1678195407453752, 0.16691411935242761, 0.16585299439736612, 0.09704893040535467, 0.16440527642187786, 0.10911654641997937, 0.16142597016169513, 0.12132896853695563, 0.15826530725977295, 0.4730608368750332, 0.1521279683266068, 0.11859331159450592, 0.15271361157365881, 0.4734415876987549, 0.21517490312728338, 0.15708543669460673, 0.10647756760769012, 0.10823215843550793, 0.18805177209489654, 0.11636203049841531, 0.1830444650422054, 0.1833624260599529, 0.18307779116646006, 0.16831711879566724, 0.1665689729066382, 0.1737063191857946, 0.18583555157010334, 0.1872425384877754, 0.17630296430254278, 0.20373714648703223, 0.1934239068271265, 0.18778694829531928, 0.054094231701848905, 0.031874580400822916, 0.07665096407471739, 0.032199162002231385, 0.08017538396391155, 0.0334643961250517, 0.062291104902645555, 0.0722275622952433, 0.026113970519904606]}, "mutation_prompt": null}
{"id": "15f7105e-15db-483f-826e-00b702d2094b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.7 * (self.evaluations / self.budget)) # Changed decay factor from 0.5 to 0.7\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Adjust cognitive and social coefficients dynamically during iterations to improve convergence.", "configspace": "", "generation": 24, "fitness": 0.15043646136784325, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "8444fb32-7a62-4278-9acb-5781c149b0c9", "metadata": {"aucs": [0.4622503116281137, 0.13558973316816758, 0.3690649215758893, 0.15450217695257906, 0.1636935508045022, 0.1601836518605536, 0.14175462973263353, 0.1661845884688442, 0.17219565027842876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2924798546098498, 9.999999999998899e-05, 9.999999999998899e-05, 0.0223695447926342, 9.999999999998899e-05, 0.0498770612058681, 0.27596592721866087, 0.05688350153364752, 0.059237964418105915, 0.056942731712582795, 0.069923666525601, 0.04128633846495444, 0.07615181381838376, 0.04750165802152517, 0.09257717750085526, 0.03079925123410554, 0.03901754871562335, 0.04296647833999667, 0.0031061849024665023, 0.037186476630332255, 0.08602906366348673, 0.09336112965826582, 0.03285336706780895, 0.9893266709545928, 0.9859415716267629, 0.9900820518978987, 0.959537318958732, 0.9855697574153001, 0.9841811230926382, 0.9865528095487881, 0.9902280217424962, 0.981822011642298, 0.33454908570462216, 0.17039003095415772, 9.999999999998899e-05, 0.13843332523075824, 0.09524137786296638, 0.12744291098072957, 0.08104466045225289, 0.0510538607890918, 0.08072494014734588, 0.17136613028112568, 0.16492383985478265, 0.1160796959841196, 0.18825178969734924, 0.17750930180817015, 0.19296605188850724, 0.11431186191080556, 0.1249335843813073, 0.026523942016353774, 0.07671853038373067, 0.08263593735275676, 0.06805089943258658, 0.057839065268427636, 0.016605882515804304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04833971909879997, 0.08701377123621623, 0.0873887893127614, 0.11343166855274955, 0.07653384389067763, 0.15307889757163962, 0.1260987882400646, 0.10483237549541824, 0.011066545912106096, 0.0633714993634007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00015903937011441105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012733306061765925, 0.010050053265133418, 0.021626645316005888, 0.04959796401096506, 9.999999999998899e-05, 9.999999999998899e-05, 0.10245159733883125, 0.003154763112954373, 0.03470724689510629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0329436625385815, 0.04383624379454609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006948399760320023, 9.999999999998899e-05, 0.003984286829320949, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020374424731910423, 9.999999999998899e-05, 9.999999999998899e-05, 0.05313246754639511, 0.4154410123810106, 0.36729008382381045, 0.3930256974994921, 0.20620087638317097, 0.17253534545594862, 0.20160753354559913, 0.38921832553888924, 0.33719353544665065, 0.3547394798211968, 0.04386076107570758, 0.0509756150144729, 0.04910637126887962, 0.07593077240184887, 0.02403904400780843, 0.06323781283070296, 0.07400662626932408, 0.0480865322066224, 0.0753067976434999, 0.09883409922018327, 0.14503087611159649, 0.14917613012020048, 0.14144707304271598, 0.14751249818041612, 0.13998630200195972, 0.17445840050917194, 0.1702735609117173, 0.1665683476706743, 0.2543401002862512, 0.17644834026821843, 0.16737957642715684, 0.18259979649393, 0.25121561424992334, 0.17262793283813893, 0.1751029429448132, 0.27308715513467374, 0.21001258752343122, 0.12449128378942409, 0.1244897796779102, 0.14196403578753014, 0.1363487959133981, 0.16958536922727274, 0.13819405623163927, 0.12317892382026707, 0.19434496902916076, 0.1209220862833077, 0.1801223052890082, 0.13057166872042492, 0.17993747466306176, 0.17136065546599966, 0.1721812110743074, 0.15951754799581452, 0.17785096049516946, 0.15688307574885874, 0.17937438765985336, 0.1781304290034581, 0.17078737106977382, 0.17759451025013295, 0.1682343586247218, 0.17316623872262682, 0.1665400078174556, 0.18238278117877538, 0.14478483945044196, 0.17218776504864786, 0.10922468768045368, 0.1664265763336894, 0.12597100130055638, 0.16176892646429786, 0.6163187623743172, 0.1450973168319788, 0.11856082680336166, 0.1590112430508014, 0.1744447462522447, 0.30290456477695815, 0.16109829598971215, 0.14740929377462686, 0.10801339687510769, 0.18557053398869872, 0.11866304393314675, 0.18333486134405252, 0.18434381089142438, 0.18316944072211583, 0.16399081868614995, 0.1784371312191303, 0.17033393288929344, 0.18657825606427636, 0.17597988645660312, 0.17000502315758426, 0.1985562020091839, 0.18823057755630113, 0.1777654449929028, 0.056260226951493686, 0.02342290387045487, 0.07605629828806071, 0.059628641223237855, 0.06616526813963342, 0.053788194466129036, 0.051189452823386494, 0.06266513907320836, 0.036267470342522534]}, "mutation_prompt": null}
{"id": "8cd09b4a-9d36-4f83-9d6b-e33ad1dc431f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.sin((np.pi / 2) * (self.evaluations / self.budget)))  # Non-linear decay for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a non-linear decay for inertia weight to enhance exploration-exploitation balance.", "configspace": "", "generation": 25, "fitness": 0.1574320823613528, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "15f7105e-15db-483f-826e-00b702d2094b", "metadata": {"aucs": [0.2576649396999444, 0.13567526837609345, 0.16709769393192475, 0.1535261225883342, 0.16310538480107628, 0.1892862182670918, 0.1394627888882315, 0.16610002858803197, 0.17325920393720695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3052639099281771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4312934317601582, 0.037028562288526023, 0.06076679151629505, 0.05101928751515694, 0.04202611404732992, 0.06721195499100319, 0.06950275364188696, 0.04262299188384899, 0.18613227957110634, 0.06051210212803215, 0.08381286293590806, 0.03688637404884543, 0.03708255922131487, 0.08677034612306211, 0.0030796801436941967, 0.036619772191884836, 0.11006825101578799, 0.09990991822272188, 0.10263445985751407, 0.9893268097251401, 0.9859414015490132, 0.990082076127222, 0.9596063673225717, 0.9855691095663021, 0.9841813483590134, 0.98655113764986, 0.9902278959864171, 0.9818087984256401, 0.24550427014964882, 0.35057787176154775, 9.999999999998899e-05, 0.12907143223332063, 0.040558447661944386, 0.1350487362523317, 0.08025332526733142, 0.05131342012987383, 0.0828905173127138, 0.16994280229761605, 0.16961355983728277, 0.20232301848499468, 0.19227485340015293, 0.18116086728497616, 0.11817441075003776, 0.12187732192800538, 0.12441849596453736, 0.026523942016353774, 0.12949213507153146, 0.097013649872697, 0.060772666182484336, 0.08266692635606909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03651495805566052, 0.06810850796495216, 0.10310285506280692, 0.14794583794558525, 0.14151096922844975, 0.11153800386712209, 0.10407962342640553, 0.14038977192569368, 0.06768292832963285, 0.07413383025188991, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033047550613250265, 0.011973864320272476, 0.03838416846419623, 0.057126246638324996, 9.999999999998899e-05, 9.999999999998899e-05, 0.10873190026821267, 0.03863483320355954, 0.03597450109642508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03922742059983486, 9.999999999998899e-05, 0.037650688754324424, 0.05137813333549457, 9.999999999998899e-05, 9.999999999998899e-05, 0.008209081013615283, 9.999999999998899e-05, 0.008233802685457148, 0.047403124193229784, 9.999999999998899e-05, 0.0021693606676302934, 9.999999999998899e-05, 9.999999999998899e-05, 0.05637266867110213, 0.4429089119958598, 0.4351234401587517, 0.24759512363577396, 0.2064868063014832, 0.14938168067729385, 0.203148637768771, 0.26581057005962316, 0.4544196457699049, 0.3661460927252359, 0.06299090156331877, 0.057733962252271676, 0.04952398667501112, 0.111458056169227, 0.03399962568852932, 0.06556017442673778, 0.055479194038398405, 0.04651987577198724, 0.07621114003204077, 0.0992569100866535, 0.1387572167541351, 0.14980226006021635, 0.20207699950161817, 0.15463025201377822, 0.17382949380503865, 0.3221312368270851, 0.15489376740282224, 0.14848901858821484, 0.2712984969829285, 0.17105514874131533, 0.16800147067121285, 0.17018205747126192, 0.2318803060118022, 0.18134322134178638, 0.18316025533026636, 0.26253477318331075, 0.19943968524636735, 0.17151067017407529, 0.11164644731617956, 0.16188230799253722, 0.1371090967179902, 0.1496446392619879, 0.12883738826727786, 0.1282901327983762, 0.22230662296440018, 0.13319273025228617, 0.2004830972559759, 0.12733692152387743, 0.18654312631702774, 0.175112419080952, 0.13782973645079832, 0.14539494481419246, 0.17222899885806364, 0.15868189287988466, 0.19009075276222465, 0.18385434641357712, 0.21351470028713715, 0.21596940767977957, 0.5031804638975099, 0.18575732248592614, 0.3107395899994694, 0.2068978584101101, 0.16481012843544263, 0.16979400771602327, 0.10930130578099762, 0.17367030499998215, 0.12124461531317499, 0.15542365903636657, 0.697158452798184, 0.16143589238932055, 0.17078372090737304, 0.15768070840572002, 0.16103342951922006, 0.3296340379730215, 0.16458678032891727, 0.10723136124510635, 0.10205798952810596, 0.16867536025225804, 0.0964412574232647, 0.18009389251619234, 0.1837075457090731, 0.16946459609970155, 0.18064799476928328, 0.1693395739334128, 0.1793850500702613, 0.18795169619006324, 0.19045722435571433, 0.1859515322513685, 0.1786756566116352, 0.19497502495366714, 0.18349708827856104, 0.0679271085273192, 0.022453964149270922, 0.06770113344379047, 0.055334121770319156, 0.07913215678705132, 0.08233566561915828, 0.03956750922940078, 0.07494257732792031, 0.03651535719496857]}, "mutation_prompt": null}
{"id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 26, "fitness": 0.28391917717539567, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "8cd09b4a-9d36-4f83-9d6b-e33ad1dc431f", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "84486d85-95ac-425c-b802-d2d93c9a695e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "f14bd69e-6dd7-489c-87b4-2d44e3af2360", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "e05ad15b-b13d-4a5f-a555-e400332b7cb5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "494f9a00-0387-469d-acb2-90ff2312764c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "9c83990c-e986-4b7a-be88-f383093a4883", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with non-linear variation\n            c1 = 1.5 + 0.5 * np.sin((np.pi / 2) * (self.evaluations / self.budget))  # Non-linear time-varying c1\n            c2 = 2.0 - 0.5 * np.cos((np.pi / 2) * (self.evaluations / self.budget))  # Non-linear time-varying c2\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce non-linear time-varying control for c1 and c2 to balance exploration and exploitation more effectively.", "configspace": "", "generation": 31, "fitness": 0.22416556955334427, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.6922610068511075, 0.940966867840624, 0.9585858478059265, 0.6885771001111485, 0.6863833263156074, 0.9395478443002232, 0.6746327266688358, 0.9471889809968707, 0.7923592158234976, 0.20347446848410655, 0.0649490957550708, 0.06942120402583718, 9.999999999998899e-05, 0.2578188567127989, 0.04223969239600234, 0.05723849680652915, 0.03335236224582727, 0.030035529576663667, 0.13522915823243542, 0.16527375501380115, 0.10290231574389619, 0.12602648959824236, 0.1291445933709494, 0.13919977270065798, 0.15784666619986454, 0.15923020899742057, 0.1918977012512677, 0.11314467402783324, 0.1300458260692703, 0.12476736793408616, 0.09689939537219638, 0.06664946704669106, 0.13611097370282021, 0.10752636880290334, 0.11935298452407528, 0.08534647130260309, 0.9752342632980036, 0.9715011641875976, 0.5664040979972497, 0.378431213957368, 0.20439119061928124, 0.8439268187768311, 0.7267887271646776, 0.9580366919281844, 0.9199934251743027, 0.18088998780681909, 0.5712939249258491, 0.11286941861548383, 0.3889996400418788, 0.2110216044943959, 0.27124212242381596, 0.11194097009790271, 0.13244010873872636, 0.18579094872810187, 0.8576439100108659, 0.23031698653577382, 0.17250134949391338, 0.21617506193167824, 0.2665085801160596, 0.28137877624895535, 0.38776905875730094, 0.15363655770717144, 0.40928051508852836, 0.306781984436025, 0.11412131745799359, 9.999999999998899e-05, 0.10390576923516204, 0.11822973715838836, 9.999999999998899e-05, 0.15960061217216914, 0.4148553479186947, 0.13367053608472257, 0.1303633644322033, 0.13245577190553648, 0.1648648044404033, 0.15195841768978713, 0.2943372774869526, 0.15315791691276648, 0.12988049963850112, 9.999999999998899e-05, 0.13653087662205543, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05283837666014335, 0.031820189514292, 9.999999999998899e-05, 0.007791730280987341, 9.999999999998899e-05, 0.0070896904300625785, 0.07600652460662949, 0.04570840505756801, 0.0868822658181525, 0.06595837980874986, 0.015019417358357323, 0.015279394210981123, 0.03346739593684256, 0.054333765177783655, 0.03811854223289557, 0.16967412563453976, 0.11923526096247583, 0.12669538673321346, 0.023791112612403076, 0.13947165067909828, 0.3007459666970974, 0.10788621874323834, 0.16962282667878048, 0.15764672382798328, 0.20053776256194766, 0.07579904356530387, 0.08076265838101648, 0.055584875612121665, 0.07210001388489984, 0.1614626223324891, 0.0847448491802254, 0.12819042028296213, 0.08473275131100322, 0.33717445113366196, 0.45514936463502875, 0.4405701652051569, 0.45564116057517534, 0.381551016428778, 0.20439046232155966, 0.5156835590093014, 0.3659695419901027, 0.35327662297450024, 0.11703387739082283, 0.1048392136375329, 0.07302139658115125, 0.16420861743123438, 0.09354491312054214, 0.1082282079183271, 0.1908151040712064, 0.038722406255228825, 0.0902506886763107, 0.20845704797786602, 0.24045031019492902, 0.17565869763392605, 0.22964622283809188, 0.26926480399010966, 0.16519810185328077, 0.23334498444207108, 0.17033421689776984, 0.19466421771678888, 0.2667545068603745, 0.216282207768136, 0.29268032466043825, 0.29445810452889387, 0.214322652543663, 0.24088921919294415, 0.17665979498018625, 0.25310808116666816, 0.25499205487589305, 0.19303008844207603, 0.21552202111977514, 0.2585193918352183, 0.13689007195073644, 0.23358180774262804, 0.20439093163243416, 0.22383100669849976, 0.21649632809789132, 0.21927084158681143, 0.2205480590343767, 0.18686829785035874, 0.27662492056071886, 0.21544244958083747, 0.20763483510783243, 0.1891768885693167, 0.23232429279030853, 0.24950382283216155, 0.22087991764214987, 0.20099127927874683, 0.19084865167727216, 0.19600571434390546, 0.2050250504212261, 0.25474332694723834, 0.20343033375940467, 0.20947828633695098, 0.2307865591705912, 0.22792135330348795, 0.17491038275516602, 0.173566570970053, 0.15486033208251226, 0.9253113741804254, 0.20171150871563692, 0.1699467074531814, 0.14083918959092157, 0.12697522614900447, 0.21353985807743958, 0.42887626082448405, 0.1931881153154107, 0.07361541829985141, 0.2795029223653106, 0.20932708387763332, 0.15458896054646576, 0.10523048371243782, 0.1052617966934154, 0.10732581146322806, 0.20841094065118437, 0.21335196544346358, 0.2019662428841943, 0.20188829301547562, 0.2010726094567995, 0.19607688249358457, 0.19781834206526105, 0.21711704984603397, 0.17974807255446645, 0.07467631362548532, 0.06948292765811126, 0.08581192172688845, 0.08643558519909311, 0.09418609157259106, 0.07369002183702889, 0.09260407922340697, 0.08605755436646645, 0.10714077119962817]}, "mutation_prompt": null}
{"id": "c2106c0c-b1b7-4471-9d68-a35acaa23478", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            decay = (1 - self.evaluations / self.budget) ** 2  # Non-linear decay factor\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions)) * decay\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance convergence by adding a non-linear decay factor to the velocity update rule.", "configspace": "", "generation": 32, "fitness": 0.2306538608644171, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.7857664673270062, 0.935433264922336, 0.9100995605299695, 0.5456825151946619, 0.9433816071290203, 0.19098367684524542, 0.8208804746403765, 0.7451646850721761, 0.9317277843897409, 0.08459152664341996, 0.19111061055267964, 0.060846645661824406, 0.06533691153367904, 0.036529872703122024, 0.15488991705546473, 0.05237665061675556, 0.06374978972196566, 9.999999999998899e-05, 0.16014517021394037, 0.10940408614620811, 0.16126999499094585, 0.14731412493069362, 0.12426815765687549, 0.14200764702798208, 0.07532781887005624, 0.18779193161157515, 0.16427522803744576, 0.11713574504571256, 0.13009857437559713, 0.12456741689780937, 0.09672388576193969, 0.09697214949186528, 0.1469239149372661, 0.14661501377741737, 0.08150826586445814, 0.13564917135187338, 0.9863966751843993, 0.9816822483898048, 0.9806690313572064, 0.9769817390148413, 0.9623905696546737, 0.9717559716294357, 0.9837470963500387, 0.9825575121468936, 0.9817885450860645, 0.1995290484322888, 0.31973192506344594, 0.09119863524365357, 0.27315196587555535, 0.1506885153615467, 0.1379724735317479, 0.11330627796148218, 0.08827138121210354, 0.09520220574797245, 0.24535307589417232, 0.21801578516481235, 0.20891126462677778, 0.19519390050411967, 0.22519589182060618, 0.1801876965149164, 0.23747320945852157, 0.15177420078691206, 0.17242857044285298, 0.13863142128735162, 0.10494262422215339, 0.15869009570039105, 0.11916074257337572, 0.14849302929409203, 0.0002500791702677585, 0.35457068644049206, 0.15940082912438702, 0.13040568676023667, 0.23227174981062648, 0.19185203673257067, 0.1386180428669218, 0.1902422940562699, 0.15165155465906688, 0.13275881785251165, 0.1341401081530348, 9.999999999998899e-05, 0.2132199710357885, 9.999999999998899e-05, 0.012790780897896203, 9.999999999998899e-05, 0.0123612229671487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008071953626987094, 0.021771985851962383, 0.033432164054872926, 0.11453666361353732, 0.054914226245636244, 9.999999999998899e-05, 0.01704232740038336, 0.13814593876117032, 0.08358938493127388, 0.07457535483374922, 0.12116983387679647, 0.0378935822172054, 0.05354811869631504, 0.10747342804000093, 0.11115494774517243, 0.25158041304698886, 0.10886111495397599, 0.08904761922352322, 0.13107752995362865, 0.12251635492159207, 0.13004525886612683, 0.13703749086522188, 0.18649412926943842, 0.06991033668467084, 0.17747229774140583, 0.14932480984118957, 0.08307179606726989, 0.08528664000614494, 0.4604626396869147, 0.43325333806276245, 0.4907117691273051, 0.6194943728202773, 0.5087967842040655, 0.5285539645020405, 0.49978989703031595, 0.49419993326387746, 0.4199231346371689, 0.047323325930404114, 0.07980466977076484, 0.08356298551012897, 0.16274997848862893, 0.09651176094252656, 0.11973784880406779, 0.08003243712203278, 0.09237909543271583, 0.09244492623674527, 0.24824635046342403, 0.18804952772992867, 0.17774390565738518, 0.1778007303363034, 0.189228822536183, 0.20911965769449703, 0.22536945356715865, 0.2246037178277931, 0.3896594936165909, 0.34101614674145786, 0.2967740490299646, 0.46002913881732743, 0.22323397746726037, 0.24532647405152297, 0.31959295490295536, 0.25626907783729835, 0.2118970071416556, 0.28942322410221, 0.1916745980101463, 0.32105670015935706, 0.17893643099607015, 0.27019986612688185, 0.18694312899510723, 0.21530254169506713, 0.29696143080220394, 0.2956119484600628, 0.20014672648035015, 0.23882935696613927, 0.15576072613155012, 0.19322359375431164, 0.198149753302301, 0.2050542277911236, 0.28066739770118954, 0.19476050821495616, 0.21430575684530317, 0.2097428259522225, 0.2116785634657835, 0.1787473664189667, 0.21418645245156076, 0.2281385406765929, 0.19855899857195503, 0.22637883188438956, 0.21413398399762673, 0.2274434846976614, 0.2096819769467112, 0.17111226995584583, 0.12655271689233794, 0.15477489317056536, 0.37211153846722933, 0.20134057558584528, 0.11997590271596581, 0.142845584074607, 0.12266833944106348, 0.4821902500697729, 0.5349742819141754, 0.21442992834738583, 0.07359185223896625, 0.19256608047104862, 0.16913442291167502, 0.15831019670245772, 0.10524847627974454, 0.3685845636278885, 0.2230497482857079, 0.19400390712237292, 0.1820313384237624, 0.19682613141883654, 0.1810765339935836, 0.18453675854844476, 0.22830887997487448, 0.21295406202548162, 0.1889935558065361, 0.16999466369499228, 0.09120831806229523, 0.08733445049707045, 0.09044182095925446, 0.07710190124463501, 0.10485120290887695, 0.1003308294083326, 0.09321884116587664, 0.061231607651699105, 0.10143208913885993]}, "mutation_prompt": null}
{"id": "9758e3bd-f56b-4bfc-808c-7c5ea1aeb2f0", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "6eb22de8-191a-4864-9192-5ce2250b328b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "4aef4673-f4a4-4887-aad9-514794ca4580", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * np.sin((np.pi / 2) * (1 - self.evaluations / self.budget))  # Change with non-linear sin function\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a non-linear function for c2 adaptation to enhance exploration in later stages of AdaptivePSO.", "configspace": "", "generation": 35, "fitness": 0.21691846512179114, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.5537052327805763, 0.940419947576833, 0.9590589842108311, 0.6883358002267844, 0.6464696191306484, 0.941301293758861, 0.696573614904324, 0.9440660030773291, 0.7617093587883697, 0.20145989922980778, 0.07348802191985593, 0.05958530222164049, 9.999999999998899e-05, 0.2754047421807654, 0.06219242393516111, 0.05714720292126041, 0.032763750197971064, 0.029576641208761245, 0.11287173559480346, 0.16527693419288847, 0.10289998166645653, 0.14745222450465967, 0.12250823029545066, 0.13524527566707145, 0.12458155118070013, 0.14606835774382032, 0.19286602590299828, 0.11314561868029249, 0.10614559141907631, 0.11794285374538904, 0.08711072990834634, 0.07162183018885881, 0.13610282338337165, 0.10656398133773326, 0.11933424305872142, 0.08231761299633855, 0.9752342638559468, 0.9720275618564785, 0.5664041266510491, 0.37845342679669025, 0.20418985894564434, 0.8438767206487914, 0.7267503740824764, 0.9580288452576066, 0.9199508908954844, 0.18153511109703546, 0.30558960596538076, 0.11298368264256076, 0.2029675954644563, 0.20662628167435093, 0.2750923799868982, 0.11179025656641717, 0.1323565360273089, 0.2288657048136481, 0.2503025738645256, 0.23042038475436877, 0.17250134949391338, 0.21617506193167824, 0.26175711582879724, 0.23841631929509322, 0.24149703276283463, 0.1498594959710926, 0.41019175615849524, 0.30973466254872206, 0.1137125710268223, 9.999999999998899e-05, 0.10480822770571518, 0.1182298044732959, 9.999999999998899e-05, 0.15750588947943378, 0.41584587252421534, 0.13344718418723478, 0.13046949070900937, 0.13242418780524, 0.1657574226773455, 0.15295364804780676, 0.2935809924081023, 0.1532595885885497, 0.12987918968910783, 9.999999999998899e-05, 0.13614898229030292, 9.999999999998899e-05, 0.0012175871964418272, 9.999999999998899e-05, 0.05452659571895291, 9.999999999998899e-05, 9.999999999998899e-05, 0.0070817905264204395, 9.999999999998899e-05, 0.010075470995961622, 0.07824667153926534, 0.0433024012301334, 0.08820829173858724, 0.059386036320219104, 0.011530304407109337, 0.034618427083179304, 0.05269330647360204, 0.06368958734791719, 0.03715497592809591, 0.16974633056380695, 0.11758384366710783, 0.12672920151350087, 0.05238426596624701, 0.07205296189444343, 0.2985250559346978, 0.10765947890838345, 0.16960306161249283, 0.15771035707356118, 0.23782227592782212, 0.07545972718068128, 0.08104692846942341, 0.05558068536746341, 0.07215300229877286, 0.1646307484051629, 0.08498073752392887, 0.12875578257281683, 0.0847219583686698, 0.32894376706939765, 0.45160395676746, 0.4378589502896334, 0.43839236753944955, 0.3843151116235667, 0.20435480654775762, 0.48757401815995804, 0.34754369950157094, 0.35338041225514216, 0.11647882357971506, 0.10509467724293486, 0.07303641332624189, 0.16414405025092416, 0.09368450811180484, 0.1082265526276015, 0.19103726265798027, 0.03918391426189993, 0.09015763452303382, 0.13152373471841816, 0.24457794322936255, 0.17663404929191562, 0.23861694720700755, 0.258722605705474, 0.1485155842531647, 0.2315972543144531, 0.14949624478936618, 0.3833826700968017, 0.2977426445651087, 0.2096238836226676, 0.29792635901915, 0.24054865453193575, 0.22423387227155234, 0.26011729312614207, 0.1717462630593234, 0.28277429194096637, 0.2621794595313184, 0.1978936475041695, 0.22153902871062303, 0.326374796346646, 0.13746595237797865, 0.22217589042116936, 0.21561854528145463, 0.1876785438192201, 0.21196553544416463, 0.2075155533760109, 0.22001981401175663, 0.19709954047901024, 0.2467502144953675, 0.2702060118572678, 0.17980949514039968, 0.16071939208346409, 0.21422381652960365, 0.2501759957921881, 0.22012113101384145, 0.20099108893438167, 0.19652269086620588, 0.19596358327530883, 0.20504164345658327, 0.25439311719419233, 0.2034110469077104, 0.20905481427231387, 0.23108684028895898, 0.22792681393619774, 0.1754297026266196, 0.12662494198081353, 0.15486029947243662, 0.9229901953288002, 0.20171232277649964, 0.16994677026841987, 0.14106614687418773, 0.13601523742123423, 0.21354027966101696, 0.46609674929607126, 0.19540568068363262, 0.07361547589603257, 0.26419861003957223, 0.2039007857978118, 0.13270603291021665, 0.10523121252536616, 0.1052613585621952, 0.1049066358613816, 0.1911817254095095, 0.1951471233790104, 0.20293083930963884, 0.1917478882231155, 0.1969849421519474, 0.2050517520511077, 0.2025291974525495, 0.1752468741765011, 0.1793136889080803, 0.09458335329530743, 0.06511714140833302, 0.08601209311557034, 0.08897164234045574, 0.08277426303432078, 0.07389761999019795, 0.08646518338420772, 0.07864092725636607, 0.09287523107041362]}, "mutation_prompt": null}
{"id": "f080300e-513a-442f-bde1-2e29d5025668", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            damping_factor = 0.5 + 0.5 * (self.evaluations / self.budget)  # Progressive dampening factor\n            self.velocities = (damping_factor * (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions)))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a progressive dampening factor to adaptively control velocity magnitude for smoother convergence in AdaptivePSO.", "configspace": "", "generation": 36, "fitness": 0.13450362154880816, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.26145717379145395, 0.236900553924967, 0.2617394864201328, 0.1448345762673009, 0.1891913871632599, 0.2786274491084245, 0.2351142657632176, 0.18879506971971938, 0.11918756033540301, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044520996838515514, 9.999999999998899e-05, 9.999999999998899e-05, 0.014595522381397164, 9.999999999998899e-05, 0.06540969819409315, 0.124028468131678, 0.09928155418056273, 0.08966111799015886, 0.11294221252527537, 0.09855388280973132, 0.08104857823822298, 0.07492871428281267, 0.09586379100043108, 0.07091813177846473, 0.09650706038715329, 0.07221557173859727, 0.10835083505878029, 0.07602563297098242, 0.10660720925761213, 0.11272427580416611, 0.07992558677929595, 0.03494510569403597, 0.06971969629326324, 0.058140108558601966, 0.05304125856354913, 0.05961315271086709, 0.05248971529563318, 0.050563760975131156, 0.07166390495850827, 0.05683537243146364, 0.06528795574463186, 0.06403351003712399, 0.09196397670926726, 0.05101321563293515, 0.08988603936768591, 0.11642629007058913, 0.05328710941743042, 9.999999999998899e-05, 0.08876874231206111, 0.20753728569584196, 0.176637724092494, 0.25729973331554457, 0.9706888925686417, 0.34088582666280764, 0.32953646169921735, 0.17819721400317579, 0.12199182168862677, 0.1553116706558787, 0.0938749000461021, 0.2372043760236564, 0.13713922407138213, 9.999999999998899e-05, 0.09013040491101221, 0.05857923483339933, 9.999999999998899e-05, 0.2932058523941168, 0.027390819507087327, 0.15330432638029667, 0.12834186436002548, 0.014749020691326997, 0.07887271286562914, 0.1157659242878033, 0.14069796345019425, 0.1444712047736777, 0.12788164224856213, 9.999999999998899e-05, 0.017164313849352353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007717362547836837, 9.999999999998899e-05, 9.999999999998899e-05, 0.08114083140826056, 0.03804943600959432, 0.09793672080034144, 0.06318719353028279, 0.00718188487364646, 0.016122631921025254, 0.0526153573052105, 0.09114018276487079, 0.09408552096199785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010842081796513803, 0.04711045445291462, 0.016882215996447347, 9.999999999998899e-05, 9.999999999998899e-05, 0.04621019957445738, 0.0024620033893172355, 9.999999999998899e-05, 0.0323287877786268, 0.27425850611451275, 0.321417086108584, 0.24201899007940042, 0.3662367160939609, 0.17804958150467387, 0.21133999136411208, 0.4386455205578932, 0.27515252085022956, 0.4292732345605035, 0.1113829186932015, 0.07371136225073893, 0.06118795011801559, 0.11857193358831519, 0.07294147025516629, 0.16170665481100654, 0.13592934881344432, 0.07063605183599042, 0.07992076898224965, 0.14586273087215995, 0.15383166544067628, 0.17103282299789424, 0.23505887717288698, 0.20856925873502574, 0.19165756063685324, 0.1530615499259146, 0.13826460833472998, 0.17530153770952672, 0.1839396840874028, 0.2628222202023103, 0.23667308392708375, 0.2061143308132567, 0.2138210079034698, 0.3010677941174146, 0.21643338395397282, 0.268485275445023, 0.245560844701586, 0.21017541248437854, 0.0846469945460292, 0.12936144464834065, 0.17284970857174664, 0.20455991959464281, 0.20758143662449957, 0.2169260146523142, 0.2540539705133107, 0.1791606011538306, 0.2487515186937661, 0.21611207014332767, 0.17840022836470038, 0.22827911525899391, 0.21955960666930607, 0.2473638581339932, 0.209363577283171, 0.2133122375121549, 0.2395965302342541, 0.16426887198492712, 0.17657495284896663, 0.18666906281289697, 0.1809619659569789, 0.1846731715653087, 0.18292015209644263, 0.2014856597250556, 0.18347346216567673, 0.16934680689283343, 0.521570030075887, 0.1257467719837868, 0.11309910136560775, 0.5935198723567292, 0.19227961702645824, 0.17648400016244137, 0.14238036241480745, 0.14770094276304213, 0.33888475212458535, 0.2492352986944144, 0.29815478244556737, 0.07356678906099856, 0.196695952321994, 0.15945298923132012, 0.14258348333365212, 0.10282696045777284, 0.1616365208339846, 0.17025635098224612, 0.17232517893193766, 0.18860227740002078, 0.2064955584540854, 0.17636906525571483, 0.18997734424676604, 0.21849063990788642, 0.18543615572844163, 0.21991225995328045, 0.22641853266437673, 0.09513339262542575, 0.10247004706926277, 0.059763948585296545, 0.09818856960770606, 0.09586603563659735, 0.08874744204012108, 0.05459388364559781, 0.08904529877610967, 0.08589629388582032]}, "mutation_prompt": null}
{"id": "721a8b30-895c-47dd-ba56-9a1db313b32d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "ee9d5615-d254-480d-9e21-44d79f262981", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1 = np.random.random((self.swarm_size, self.dim))\n            r2 = 1 - r1  # Ensure r1 and r2 add to 1 to keep exploration stable\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by tweaking the random components' correlation in velocity update.", "configspace": "", "generation": 38, "fitness": 0.2786624837520943, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9356685107716239, 0.925326933091182, 0.9359094979645238, 0.9341159527599571, 0.9317519556560961, 0.939724554984331, 0.9403097122639587, 0.9397630470558295, 0.9428423064553069, 0.43151175095852434, 0.3755867305694547, 0.4730089417876774, 0.41744175049010035, 0.8843069605745333, 0.44781751578513374, 0.054469489896278867, 0.019178184922829633, 0.528076863492323, 0.12332340286969279, 0.4879913063239678, 0.24999442315982967, 0.16146652367855208, 0.16604354186897652, 0.12510671998224354, 0.1555996028736425, 0.1864500565946603, 0.1552431108918052, 0.12281208060919346, 0.1399907128471315, 0.12789295283474644, 0.11694729295276574, 0.1483397200631159, 0.11824978687765575, 0.09539518429041838, 0.1567392149752137, 0.11182522484309942, 0.9692740421699132, 0.9753360975926305, 0.9848260022896016, 0.972520113432323, 0.9594149708930996, 0.979776206406055, 0.9736693830292491, 0.971010673550802, 0.9770561427493025, 0.6945651926101319, 0.6278148389092386, 0.05917272261494766, 0.6535736580308258, 0.15356305304782014, 0.1520415013807085, 0.737016394643792, 0.6650444092747299, 0.6647377995043273, 0.17220642257107788, 0.21922271580874597, 0.18517239654299744, 0.22247949194331196, 0.36287830008347743, 0.23702444925020283, 0.1511318579845442, 0.13816986755359617, 0.17467570452377457, 0.19951641201430081, 0.13211299665942755, 0.1671907933172515, 0.16273616085841458, 0.1538034251110808, 0.13511790282113723, 0.13429817386152554, 0.19062160546554796, 0.16990335233442433, 0.20770756904149423, 0.12883411888558183, 0.2778964977689552, 0.26548972325669506, 0.1042165556304393, 0.13655021564851066, 0.13001359615728214, 0.11341350482558443, 0.07149301228483695, 0.0027081547021090557, 0.0013347170863536872, 9.999999999998899e-05, 0.0010125042508217774, 9.999999999998899e-05, 9.999999999998899e-05, 0.011283554807262064, 9.999999999998899e-05, 0.014180177669453897, 0.047153127498297365, 0.032991321509428406, 0.16630696954250468, 0.05989969235976511, 0.026559066310263058, 0.005204983765625948, 0.08590193451770989, 0.05229933378823115, 0.10056582024245342, 0.3369021509569301, 0.045768368709372065, 0.14472421815616798, 0.1496755440360521, 0.18892009498266693, 0.09022058406621469, 0.10660001079929493, 0.18039950694818818, 0.17100628526243855, 0.15259400047152027, 9.999999999998899e-05, 0.156988152703892, 0.17580061117646584, 0.3340718541405855, 0.006637476088976135, 0.2690150758664691, 0.12630146322346614, 0.08463335148371876, 0.5449690244922569, 0.5732956738248233, 0.48374057621904465, 0.5552325866340742, 0.5925616909572295, 0.6714107102375331, 0.5903962422924445, 0.5749714148878193, 0.6215663930636313, 0.10661933256807754, 0.08710232277373031, 0.07766458333975712, 0.11175497770678833, 0.08333530210410323, 0.1341098072300798, 0.0828571302498301, 0.10251926925836163, 0.11863847737077782, 0.15461683604639054, 0.17042567248061657, 0.18227121856822714, 0.2030561024053874, 0.2636008067578608, 0.2821282542823963, 0.255779396894777, 0.18794320354302363, 0.18361378549416374, 0.31368926296152766, 0.2620074265711966, 0.2588802059938573, 0.3460518061459599, 0.25135954880869826, 0.21171551402366973, 0.29293451437712603, 0.22367952613971132, 0.2745335231238277, 0.22556967443568854, 0.23854893471042482, 0.3328023541099113, 0.1702934474578689, 0.153616427348774, 0.3011215340380826, 0.27571050740468006, 0.28660232506042127, 0.21408941240533919, 0.21553121195581182, 0.2156186794803019, 0.21566360642791738, 0.24771116166450324, 0.21913080409243335, 0.18929865180265737, 0.2432100466036874, 0.2027908874433284, 0.2027325961424954, 0.20032328205747763, 0.17876819187313053, 0.22228352966755727, 0.21044438546345556, 0.2005333315829635, 0.19875534994391408, 0.21176988993796575, 0.21593537418605802, 0.1986878532629538, 0.1674459229824795, 0.12669667936711104, 0.15412368626720963, 0.940793376226941, 0.20164514431652436, 0.20134885179937168, 0.14305907752452962, 0.15648738566238785, 0.21374314362414415, 0.6943693898609831, 0.21254285375143223, 0.18187343405647893, 0.533764987418597, 0.2260202973823252, 0.1528342930396155, 0.10500004417371489, 0.10399875373465073, 0.5045325118352763, 0.1876315657282691, 0.1887060771408393, 0.18813567289621502, 0.20076058289137777, 0.1885245685437239, 0.20050300762854611, 0.20595762023887265, 0.1955355609202809, 0.17598666280731468, 0.0918208022883833, 0.07794631563297594, 0.08868833189826508, 0.09554256430448149, 0.09298216120595804, 0.0810588513960685, 0.08973792717419726, 0.07130527779179718, 0.08274588707964936]}, "mutation_prompt": null}
{"id": "546aed2e-d3bd-4e92-827d-d3f4cb1697e2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "dc47066c-b985-45b9-bb60-c0a6b7d70eb6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "8d230c94-1990-44de-9f08-8f185f090d4a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 1.0 * (self.evaluations / self.budget)  # Decrease influence of global best dynamically\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by dynamically adjusting the global influence weight based on the remaining budget.", "configspace": "", "generation": 41, "fitness": 0.27885667506658157, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9450143964790545, 0.9353120700890581, 0.9344279384339816, 0.938289953018601, 0.9348917111930208, 0.19097006528389993, 0.9369988195388681, 0.9423495379916995, 0.9238168283698485, 0.8285447827147127, 0.3426484373333717, 9.999999999998899e-05, 0.26897564704915544, 0.8100359849597951, 0.29462557033896486, 0.05499964313441774, 0.8932430391963411, 0.513699597228862, 0.14516302325697528, 0.12240036670280063, 0.16045333492810532, 0.16857672742931373, 0.156735475138436, 0.17269809158142602, 0.12347522580865444, 0.16265977130631493, 0.14448513304691657, 0.11137486855841927, 0.09732599477208859, 0.11858028130852905, 0.14492035693327743, 0.06214386034160402, 0.15959855341048057, 0.12447259628277374, 0.10523030290892399, 0.11572532302689797, 0.9864116506677255, 0.9816896120802524, 0.9819569916597901, 0.9791959021980059, 0.9644253481705676, 0.9730647669048137, 0.983804009615899, 0.9826242442743074, 0.9818133490578768, 0.6213883319711977, 0.6291410149701235, 0.250834190404466, 0.6039516172123485, 0.28659185573091195, 0.2932827667222153, 0.28076580066557555, 0.6119927729170369, 0.08903924472056546, 0.22788213713661298, 0.2168770694248774, 0.16144417107324371, 0.21595829662583632, 0.2828450379465809, 0.18029450706482475, 0.1477767384452533, 0.1388528686623116, 0.17140814447169328, 0.15292637061629155, 0.10570912099542507, 0.14857858793233758, 0.13501140683537938, 0.1498717998750917, 0.14468928675151072, 0.3312670780380589, 0.516145889627821, 0.13051250536570003, 0.13397158898268968, 0.21304495815614333, 0.19186233729679814, 0.20464708903357898, 0.13380543629629738, 0.3054334970282977, 0.13617858104020342, 0.08052468324134532, 0.18766534451454464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04388323644459091, 9.999999999998899e-05, 0.01832303778551647, 0.07238217658011525, 9.999999999998899e-05, 0.011665646726114032, 0.037280467794734595, 0.0807331985445, 0.061188383685935155, 0.05751910573181851, 0.021142094180933935, 0.036421016242429105, 0.12939412610582457, 0.07314274306165847, 0.04110549395437191, 0.12083912620594417, 0.038813908537815744, 0.1121027662329307, 0.1036952511249365, 0.10241470197754765, 0.2130394465840082, 0.10963535126418666, 0.09347042511624748, 0.12314711549439072, 0.10396857463917408, 0.21142962083586658, 0.1175187199649621, 0.3426592992869216, 0.07375395370270066, 0.1731008792641342, 0.10988192993239554, 0.08333158897910742, 0.08572797308073221, 0.5247442750333497, 0.5265885333482787, 0.5198601761128985, 0.5829104671785321, 0.5770188757987399, 0.5649731722215484, 0.5580804743770922, 0.6082854637704651, 0.550466532455191, 0.07442770977228885, 0.05235425260365578, 0.08380323801873946, 0.10119225163753165, 0.11921834710421075, 0.14738518630049036, 0.10001987674885549, 0.11680185292296896, 0.1265712971379106, 0.2644032157400855, 0.19005231909042475, 0.1842739156768628, 0.15511117985935885, 0.2599795038540218, 0.20033315605130386, 0.2228055550315311, 0.21433614916737698, 0.3395401207667874, 0.42028989698968044, 0.28728727772454166, 0.2711160158747491, 0.21871200107233835, 0.246139093294795, 0.2772836626252505, 0.26429604912496596, 0.2476563565899097, 0.615512073489545, 0.15543746026888317, 0.22522191419017212, 0.26384796548637146, 0.19984422243617084, 0.24167387546175967, 0.36139266375572787, 0.26244912829454214, 0.2865388587376776, 0.35159858585115866, 0.23747842021976417, 0.1614161502324667, 0.20761508972633413, 0.224695151474536, 0.2939264375686135, 0.18927850441468463, 0.23484514912664667, 0.18538362191920854, 0.23017915438690784, 0.17928367503666054, 0.21788195755915696, 0.2272301772267451, 0.22878690031629956, 0.19367036190071307, 0.227286369736457, 0.21358859671745645, 0.8135306626840082, 0.21080969373529856, 0.17644820845344567, 0.12634546993368168, 0.15479490318133116, 0.6277508233409665, 0.2012476189533916, 0.1199904250357069, 0.47019671786676087, 0.15832211205574132, 0.9270370387016253, 0.482230592307071, 0.21431867696322215, 0.07358914447543174, 0.3462024284530647, 0.168981630102782, 0.26897956391698985, 0.10419178378535998, 0.43752506832481053, 0.23977498092214777, 0.20614175610943408, 0.21609664151283225, 0.1745873608998889, 0.1913650442364656, 0.19934181414256613, 0.18711443868037836, 0.19908467362360505, 0.17824539436738174, 0.24004056624307413, 0.06204133626392738, 0.1047196203341586, 0.08797584861393082, 0.11289068341278286, 0.08978400370528539, 0.0841042548323172, 0.08472693289385025, 0.08130106612224064, 0.08150024800270095]}, "mutation_prompt": null}
{"id": "2dcb3244-3ea8-453a-9e8f-ab958f7bde80", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "1d5c943a-80f2-4440-be56-6890dcfb453f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "bfd2a648-82c6-4b7d-8824-4914c3286775", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "c172cd75-3eeb-46fc-90d6-7b9eb9d93bc5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "a6027c0f-cf2e-4fdf-8f7b-d7d3b20e9c8d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.swarm_size, dim))  # Adjusted to smaller range for better control\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a dynamic adjustment to the velocities initialization to balance exploration and exploitation.", "configspace": "", "generation": 46, "fitness": 0.2835453892193294, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9391739930759252, 0.9376833262170612, 0.9351812357683826, 0.9416255557865518, 0.9389484960203476, 0.19097217885268247, 0.9437528476116773, 0.9308257639389089, 0.9284058825000584, 0.3110095838076583, 0.4380842796192743, 0.3766488575481506, 0.6512507869986881, 0.5147200613210801, 0.4964191024470407, 0.43774935246708946, 0.8615783655371156, 0.841470969707507, 0.15888741234969062, 0.11827975068592456, 0.14814107577079538, 0.12037965257476257, 0.15393535336650843, 0.16544412093638694, 0.1300237790587968, 0.1586441754701713, 0.12464749266962971, 0.15732348659261075, 0.11224809836817295, 0.11474811893763015, 0.123835332216783, 0.10833678197016783, 0.16043504163093691, 0.1568874426628003, 0.09246122528023082, 0.12245136509856269, 0.986407914659459, 0.9816971600460067, 0.9816644272646958, 0.9792114888765009, 0.9645540654936305, 0.9730683602671419, 0.9838196100750188, 0.982645592105423, 0.981811640431185, 0.6491043757988553, 0.5593699802185548, 0.33968804634954153, 0.6995125883258306, 0.1509941586337985, 0.6733168051568419, 0.5319261950712508, 0.4139674780038819, 0.45897475330830406, 0.37355232048137343, 0.22489171917883455, 0.1872610729503238, 0.21603497698682572, 0.28237549431402775, 0.2078917517401715, 0.17561042688842332, 0.13918648930102717, 0.21378644983671435, 0.16618136845674414, 0.10766314044100889, 0.168194799930509, 0.1330348341333698, 0.15339705764243916, 0.15476740044847026, 0.3847208059238708, 0.25982484011092877, 0.1622119058935646, 0.19631787520700483, 0.14438032456418182, 0.1361440397160706, 0.20788918708601078, 0.13427962606819388, 0.19992209755733148, 0.13448690676029562, 9.999999999998899e-05, 0.21149751633659108, 0.05897730622327968, 0.057454321743788395, 9.999999999998899e-05, 0.03166026568568847, 9.999999999998899e-05, 9.999999999998899e-05, 0.04854800178562746, 9.999999999998899e-05, 0.014314055261180458, 0.043231014379418564, 0.061008108456474086, 0.08955605438084369, 0.06811959101716913, 0.01378369463601592, 0.03235608461671491, 0.0763582520997581, 0.08086253168203583, 0.04499886056021096, 0.12400148504180253, 0.03875617723636571, 0.09438087514855487, 0.09793195771966678, 0.21090269199503964, 0.23998814825676695, 0.10718635157550693, 0.153872095654789, 0.11497652694136817, 0.10608987405350523, 0.21241244957178718, 0.13528646442159808, 0.006853826647883032, 0.08707045052840057, 0.22327946916674923, 0.11589932184980734, 0.08344288523059151, 0.08593845610251105, 0.5309128863889583, 0.5413644448978114, 0.5379068601581731, 0.5202417955111796, 0.555380546220467, 0.5775824780794652, 0.614073620048688, 0.5641900073134737, 0.5483057260896902, 0.09579945292225689, 0.06645052397110285, 0.11756420789079258, 0.09599798213406707, 0.034822250246746456, 0.1021931493989181, 0.097340587992085, 0.18452020049002216, 0.09709892471546422, 0.22366778304440327, 0.19347519785713552, 0.17796045140634287, 0.28688480960260954, 0.2190830445776777, 0.26363918851235024, 0.21200907620579268, 0.2067683300480624, 0.16864739784548, 0.33961289795966954, 0.321575112298483, 0.3040191338090844, 0.2171616154112881, 0.24502769918580092, 0.37720554839486453, 0.357539625734728, 0.2733862667515906, 0.25975258683581415, 0.2469801182146305, 0.20214711088382675, 0.2274342769559684, 0.24523480847748602, 0.1596698815198866, 0.24979976042491303, 0.26546893275801764, 0.2582222439333115, 0.21146445418467275, 0.21166621460427415, 0.14367434176853167, 0.2502891113170007, 0.216733064453823, 0.21383994741071144, 0.23546172902593165, 0.2109133807385346, 0.19340288201989064, 0.20992731130249498, 0.18875589966928774, 0.22816355069259298, 0.21711393886884167, 0.18996477378113474, 0.20301319944030094, 0.22697280364343186, 0.20319184703185766, 0.19346170780225402, 0.19337674245709224, 0.2537577337972776, 0.12576431595788218, 0.15482805979949332, 0.9245685849921835, 0.21981499455514109, 0.19937038145936425, 0.14301243095978866, 0.14002154741109385, 0.938581527325839, 0.5639870713321572, 0.2143343831181279, 0.07358009709450564, 0.49008814840909676, 0.16903480893684586, 0.3096454429174179, 0.10418779422572166, 0.73193765720782, 0.26440525670174897, 0.19031381783047996, 0.1860229754861462, 0.1786222430406964, 0.19328801706287124, 0.19131282640178238, 0.17442039088207673, 0.2039725664496692, 0.19437779897085394, 0.22403280471272624, 0.1044984381017261, 0.10062014973823474, 0.08648825821119555, 0.06332024668010239, 0.09295491463952543, 0.07890462334722392, 0.09380611054994425, 0.0844299458179194, 0.08814520134235626]}, "mutation_prompt": null}
{"id": "6359609a-a4b3-4c8b-9df0-08563b7b5fde", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with chaotic factor\n            chaotic_factor = 0.5 * (1 - np.cos(2 * np.pi * self.evaluations / self.budget))\n            w = 0.9 - (0.8 * chaotic_factor)  # Modified line with chaotic factor\n            \n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a chaotic pseudo-random factor for dynamic inertia weight to enhance exploration and convergence.", "configspace": "", "generation": 47, "fitness": 0.16485977048196648, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.21.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.21791475163411433, 0.1354880995424712, 0.16704605786145243, 0.15589875699424194, 0.1640467283433682, 0.1605826217238433, 0.17995401767127694, 0.1662846358537694, 0.1729760848383215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24009767744158172, 9.999999999998899e-05, 0.06485478326550853, 0.59088990420279, 9.999999999998899e-05, 0.46290634003728603, 0.06018130066618199, 0.06560265513156027, 0.03997404477984068, 0.06366376303707966, 0.06909039971674447, 0.04877530770636862, 0.1266511939973043, 0.04933417685307018, 0.11073799996004874, 0.04233614177089262, 0.04253418975849366, 0.08960689255227139, 0.11247413415852137, 0.03693923425220724, 0.09493029944922782, 0.0723578198909085, 0.03687575439834856, 0.9893265130255534, 0.9859418571022193, 0.9900820204824279, 0.9573834917745796, 0.9855704737631339, 0.9841808910644352, 0.9865547568220175, 0.9902281723891969, 0.9818378392080833, 0.3010308775743562, 0.47545066138192316, 9.999999999998899e-05, 0.14605148838554727, 0.23739444641672103, 0.14155086806570305, 0.08127829707070577, 0.0516608351281298, 0.08176522610867343, 0.16987877004686014, 0.16756485723838255, 0.09852093148730112, 0.19197009145424937, 0.1848162272756131, 0.18814081570676222, 0.12287715748546069, 0.1123984720841138, 0.026523942016353774, 0.21165386009650122, 0.08192808513424965, 0.03690690836301913, 0.08305146825532506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058447646489980576, 0.0820491823752163, 0.11593200000156467, 0.09907609601368073, 0.09618673010336931, 0.11228628564496379, 0.13700926105258204, 0.08972247707438474, 0.029314434275649393, 0.13869425987197304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024758808624028017, 0.037207553871685395, 0.031422925512325284, 0.02410871717653551, 0.04865550804535412, 9.999999999998899e-05, 9.999999999998899e-05, 0.09365737890660153, 0.012578753242020513, 0.033506031246844814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05743122503551146, 9.999999999998899e-05, 0.04825736841863837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008610047810146848, 9.999999999998899e-05, 9.999999999998899e-05, 0.004937571064589474, 9.999999999998899e-05, 0.033947100626964155, 0.043487740641210304, 0.38647557847118397, 0.20066279905696716, 0.44318237326298116, 0.20586581920005675, 0.14934380030862127, 0.1990404832486692, 0.3048822023908162, 0.3461417420900461, 0.47034499000544117, 0.054310412713947875, 0.068662655754679, 0.04741168496703485, 0.0730296683038354, 0.07458642215549005, 0.08310921670164773, 0.060929125095983694, 0.049392165677469846, 0.09679911297820021, 0.14784890700307773, 0.13397216343634477, 0.15523630904842844, 0.2094664535728057, 0.18254997476473256, 0.1576058852127571, 0.14443937374740012, 0.14934071446551822, 0.1264142219511446, 0.17385787588297297, 0.19692111373945242, 0.16661283953030137, 0.16327734258594995, 0.209192601593285, 0.14120856713803498, 0.18493999310817066, 0.24360541570817684, 0.18480150375496174, 0.1653650833294119, 0.17977594613751302, 0.15707532841764116, 0.13424543990906534, 0.1725138841551892, 0.1210054931895973, 0.1237349801461265, 0.2413046308803507, 0.13415357910579773, 0.1769531086312629, 0.1287338727505568, 0.17642871804465754, 0.15725677290345863, 0.1640540313550105, 0.14157727929475095, 0.1571997612660021, 0.16275547644793165, 0.19498155186685617, 0.5998292952464876, 0.1842572272516393, 0.22177036332828648, 0.17808989228037553, 0.6016986830138551, 0.20955636749527495, 0.15312978839309, 0.5912499626913286, 0.19865658713164813, 0.10926930747467178, 0.12878334062212182, 0.12101305082750458, 0.45440860632064006, 0.7515532658707726, 0.1565251492938069, 0.11814517195388996, 0.16168764357173127, 0.15577521057749, 0.2060169265463513, 0.16330128784948572, 0.15580136192584992, 0.10873590371628994, 0.19828641814510606, 0.12371427697482196, 0.18332548693096995, 0.1839995597728925, 0.1792476063913213, 0.16323811541818467, 0.2147896224466428, 0.18756342557319783, 0.17437005101759062, 0.19012213039437342, 0.17655221048367242, 0.179539190027865, 0.20651020314663093, 0.1909162702473296, 0.044521406691778065, 0.02454332834448636, 0.06851216360777379, 0.06660920905097067, 0.056131319890316056, 0.05282791643041307, 0.06208598832116208, 0.07750976131888487, 0.07413567837713331]}, "mutation_prompt": null}
{"id": "33678b14-36e6-41c0-83e6-7754b6ad17f2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            # Dynamic adjustment of swarm size\n            self.swarm_size = min(50, (self.budget - self.evaluations) // self.dim + 1)\n            \n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a dynamic adjustment to the swarm size to improve exploration-exploitation balance.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (41,5) (50,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (41,5) (50,5) ')", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {}, "mutation_prompt": null}
{"id": "654599e9-442a-4a0e-8308-62ae0cd1b4b0", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Introduce random perturbation\n            self.positions += np.random.normal(0, 0.01, self.positions.shape)  # Perturbations to escape local minima\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce random perturbations in positions to escape local minima and enhance diversity.", "configspace": "", "generation": 49, "fitness": 0.2448563900779218, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.6012387437022526, 0.6025066513275942, 0.6111899244391672, 0.6547700476286042, 0.6437791186670463, 0.6182134660854077, 0.5910899252557461, 0.5948330868911116, 0.6068243966957536, 0.09196740446374752, 0.15194690537971034, 0.10944883514727155, 0.07797269330508039, 0.0493383214277936, 0.24291975325184845, 0.05213802137072676, 0.20626500248214485, 0.12284167965953785, 0.12404103846129166, 0.1592643378370432, 0.12767188293565357, 0.10756968550496715, 0.14272042781664096, 0.08555748858724166, 0.1674563296981978, 0.15822359077053805, 0.2032180559808, 0.12573461856296086, 0.11567458532650088, 0.12180312955195727, 0.1594320343888883, 0.11682450595422067, 0.11574628373274576, 0.11025355397011605, 0.071711290769227, 0.12852983894671743, 0.9854042455709567, 0.9692188331828433, 0.9775264104608833, 0.9727105972502101, 0.9772529186220842, 0.9654337164434492, 0.9818910002668592, 0.9882860944848001, 0.9772619005121844, 0.3878483979686651, 0.4305219887474314, 0.2927166366653725, 0.43980658277034934, 0.3796716496991258, 0.43483601107495085, 0.3754060801726026, 0.4315421247122335, 0.4213525945405223, 0.7183596911568104, 0.21627717632052967, 0.9044129360360037, 0.2826098700365104, 0.19499509211678145, 0.27960521718883535, 0.21203410486558838, 0.1785788843957925, 0.12590398163047123, 0.20931724351401781, 0.13063031894262844, 0.19033831423657643, 0.18750920859246223, 0.22473168007078392, 0.12822349912842068, 0.25215352015706527, 0.21938287849183868, 0.18925832426047495, 0.126762954263704, 0.1430271285558854, 0.20261394744443073, 0.19211055492148166, 0.23743491582972942, 0.19873977611747384, 0.22069412636899866, 0.10527251421539208, 0.1339774169933935, 9.999999999998899e-05, 9.999999999998899e-05, 0.030310172341937336, 0.04756349153592476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003443335245923995, 0.06068237303634505, 0.06557936216455851, 0.04754416416485874, 0.06594172744836668, 0.07507739936658708, 0.027935125826463847, 0.02433011534543328, 0.08206541116488808, 0.07736488441822353, 0.04521964518671484, 0.050605903999064505, 0.028904877721658173, 0.055117810953226765, 0.035248450041265866, 0.10066998623523782, 0.07400305343739166, 0.06161159238835057, 0.04468155998297518, 0.05787318188308932, 0.1265221616441491, 0.045687916173536736, 0.1123623021548974, 0.18800027314632783, 0.042403598216385174, 0.04545840590267458, 0.086001618260662, 0.10327779096600131, 0.08550419142545107, 0.5169870981974332, 0.5080092451755254, 0.5201021165718245, 0.5160489609576228, 0.5178512643548975, 0.5197950482477471, 0.5252953489662042, 0.5108161681591975, 0.5130896290079746, 0.051811298615645374, 0.06335385180114039, 0.09716585860958116, 0.11902149193553124, 0.08028551127784689, 0.08570071573898697, 0.14348011005926475, 0.055672329959338684, 0.16007660193153495, 0.20055231903752146, 0.1862891238937825, 0.17818103231727778, 0.26794984138272204, 0.32913049489497104, 0.26384597702536006, 0.2313251508798737, 0.1676170859555226, 0.21357065528754315, 0.3090931213528031, 0.3413620044759732, 0.36838655140243726, 0.2355927727581073, 0.19551486055568335, 0.27176385799626723, 0.2565158703006517, 0.2594858590546273, 0.24223022041015052, 0.24397628055381726, 0.15594605009389761, 0.3248048955012899, 0.20296503174772562, 0.1546428533554408, 0.2823374600470828, 0.22012418805017997, 0.14453236689461368, 0.2498423549190234, 0.20334374130535748, 0.19097318736208502, 0.1879297913614758, 0.20734202519091027, 0.19946792152496595, 0.23286303532637675, 0.21417191285119197, 0.27506881768648705, 0.21598020645674, 0.25169874123443947, 0.2091604398559892, 0.22868020891652652, 0.25697152062761863, 0.18406192911406372, 0.20356318761453163, 0.20247058214934777, 0.18527788051418248, 0.19918266325642686, 0.2000106858358831, 0.16455543747345813, 0.15448484653792893, 0.20076971324165838, 0.20127674778787663, 0.17767573189479657, 0.1429975664230051, 0.16190304756212337, 0.9410223676604988, 0.8969830888670051, 0.2144047710684529, 0.07358255360639776, 0.10502243445416715, 0.16872771982530121, 0.09465995451343856, 0.10522537193265014, 0.20892537106789555, 0.5896142527498065, 0.2026904134523797, 0.17519304225008203, 0.19862896421783882, 0.17648689299974396, 0.17721554753966884, 0.18057524026493155, 0.19820850172385795, 0.19154233186836434, 0.1806336356200865, 0.09092840425605686, 0.09797720045678049, 0.07761529404023726, 0.0822746914227348, 0.08285477219129467, 0.08226040368419796, 0.11334329116716602, 0.08260559324928052, 0.0870030568326029]}, "mutation_prompt": null}
{"id": "8b96a380-5dd2-45b3-b764-0cbfdb8417ab", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (0.95 * w * self.velocities +  # Introduce damping factor to velocity update\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce damping to velocity to prevent overshooting and improve convergence stability in AdaptivePSO.", "configspace": "", "generation": 50, "fitness": 0.2733228510631351, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9356812850027476, 0.9345843977328836, 0.9414975926644592, 0.9443335391904345, 0.9379003029796397, 0.1909627024623073, 0.92979710157964, 0.9337319074255657, 0.9157191352721819, 0.4601143148453122, 0.2428932402984969, 0.33526640706191524, 0.06978538169697512, 0.30993913077325175, 0.8397353221297326, 0.3196709851290047, 0.8359376187398877, 9.999999999998899e-05, 0.18317072853016647, 0.16598853970114347, 0.14483958312809042, 0.1274703028926275, 0.15255999397891395, 0.17559780183922158, 0.12129420929536716, 0.17930538440132804, 0.14423242516355816, 0.11531048986486458, 0.11266196705578024, 0.15735732714703987, 0.11494775791727774, 0.14776095154505908, 0.1326545275525437, 0.14233196783408475, 0.07264933162275866, 0.1517966210576529, 0.9864038922077696, 0.9817004349952582, 0.9819667533492767, 0.979206939646111, 0.9645014816066964, 0.9730589507146189, 0.9838320734951206, 0.9825879465444628, 0.9818152448960331, 0.4641523803046519, 0.660952185080598, 0.6713937441318192, 0.47100608912840547, 0.14717635878870405, 0.17918300613694083, 0.12679195953262556, 0.4021884371582223, 0.22717544607526496, 0.37765235952821063, 0.21842464433639297, 0.16139213670056274, 0.2153047996418206, 0.2832370297175093, 0.19613656460440554, 0.1731246462107192, 0.1377726715389943, 0.17504752346853236, 0.155385396850502, 0.10656946885815666, 0.16461866818380222, 0.20989580579065426, 0.15664224141143257, 0.1485462930284449, 0.32032218233532106, 0.2590433501106215, 0.13052452493520372, 0.1337349871776733, 0.13702813520416568, 0.15051235799069218, 0.20518772025593635, 0.1348320899040093, 0.3042185206421938, 0.1365394920404729, 9.999999999998899e-05, 0.22175875587640093, 9.999999999998899e-05, 0.008559399578306093, 9.999999999998899e-05, 0.05259251065690185, 9.999999999998899e-05, 0.01591248227287212, 0.05805678569058925, 9.999999999998899e-05, 0.009785735921506222, 0.0837714928889578, 0.030705989187048144, 0.09649272307621926, 0.08701048325355787, 0.00679842699902633, 0.03073157185933828, 0.0751851147285999, 0.07954446973128759, 0.0658213596242947, 0.15717532555664526, 0.03854309480484497, 0.10437748481007747, 0.11152214978201647, 0.31940360912137256, 0.20282862916519706, 0.1083477988502145, 0.08588217787711894, 0.12977997832550026, 0.12245201974632569, 0.18638073454579063, 0.11277626085935366, 0.3737032235675639, 0.0728185091511705, 0.16570785798055254, 0.10965214286224878, 0.08277977736801045, 0.08575308031536477, 0.5630094786960705, 0.546373011346643, 0.5586381580423748, 0.5694276647493443, 0.566608846884099, 0.5296348558039821, 0.5823708244300783, 0.5800747023712401, 0.5649273523246943, 0.11571436436524796, 0.07258973161778426, 0.08360849348182653, 0.144570499736823, 0.06609013709974787, 0.09840413633429723, 0.10998417556298845, 0.18446087017712787, 0.14175059698335568, 0.27594921586007537, 0.19268472479088705, 0.17669060655010782, 0.2129173943460736, 0.26254051797970823, 0.2192235510332301, 0.3469869980459628, 0.18768438758095285, 0.3199551489816065, 0.39802442533805327, 0.32071956940699087, 0.3656218120553606, 0.23387419565101708, 0.2274173402576144, 0.19549037738847597, 0.24809040836867657, 0.546785605459902, 0.2057822694185979, 0.16673918356943684, 0.1988867296304585, 0.24921564478563873, 0.2280574428871034, 0.22805206978826054, 0.3029693816635922, 0.224691685486056, 0.22121589535959296, 0.2006382596333356, 0.19921288414205818, 0.16516354022142654, 0.19529437452115828, 0.2644502604863014, 0.223615547019982, 0.1746118698263368, 0.23050689685142456, 0.1947137866902623, 0.20096650298071905, 0.19767819376223073, 0.20035999595644738, 0.20473685400450292, 0.20980594380516482, 0.19103133913782777, 0.22707311705928146, 0.22533170728095808, 0.1963558423136823, 0.22656821113846526, 0.17622412924745534, 0.12640817331511645, 0.15480657772072282, 0.8945079926899069, 0.2216701066378597, 0.11999659554430542, 0.1428596989162113, 0.14655931240280495, 0.9447720608505372, 0.5579720747030995, 0.21414453235534647, 0.07358819508046877, 0.3969565333650611, 0.16907805506922247, 0.26594810356203735, 0.10419486291495128, 0.702656589321587, 0.3787923782166711, 0.1944296986453472, 0.1835785436166416, 0.19201295182892086, 0.18657454576888954, 0.187770709737478, 0.17606694281967816, 0.1831067440444052, 0.1736594766939915, 0.1817501750674818, 0.09885990106945952, 0.08035127091469862, 0.10593911050571003, 0.08501477406460112, 0.10081976672664839, 0.07455611364199499, 0.08050924644735769, 0.06465017363553394, 0.06485173816705103]}, "mutation_prompt": null}
{"id": "1181f5da-73a9-4709-9349-933cdd0a8de2", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "8ac85910-65f6-4da6-a80e-5449dc79d336", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (0.5 * w * self.velocities +  # Dynamic reduction factor introduced here\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance the convergence by introducing a dynamic reduction factor in velocity updates to better manage exploration and exploitation.", "configspace": "", "generation": 52, "fitness": 0.2735709343722632, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9479867562001953, 0.9277681575615654, 0.9277021479586103, 0.9386647910253042, 0.9417725480189465, 0.19090773247743908, 0.9359968797181136, 0.9407081115339837, 0.9362349409793023, 0.4606128464515389, 9.999999999998899e-05, 0.8674050689326112, 0.33596572324400265, 0.516711200002318, 0.6287451613716248, 0.2877222860194101, 0.054130442618282704, 0.21372904924529235, 0.16332605136935763, 0.17948569830725514, 0.742156328580988, 0.1007719215159304, 0.6566807847595586, 0.16127790789831464, 0.13635821387841096, 0.1481164956063683, 0.1503058809298573, 0.13493185912618522, 0.11169896784012201, 0.11944392824835481, 0.11843842173599806, 0.15148276517582415, 0.13950077760670954, 0.1604763201630942, 0.10270546072354592, 0.1437082925535551, 0.9863372857236844, 0.9816987989713618, 0.9816583870973453, 0.9740450401895621, 0.9643822640586723, 0.9716822999801861, 0.9828480670951846, 0.9845137254278422, 0.9818193168355887, 0.5848575291547162, 0.6993649600817688, 0.05919756912313112, 0.654072958329337, 0.6140923043529842, 0.4169881078018085, 0.1264814771144993, 0.08827903515386493, 0.47646131635493294, 0.16721126684585508, 0.22749274616059767, 0.2513914873592523, 0.21579609113138454, 0.2823580164307449, 0.2811542539535069, 0.1425939204594504, 0.1650522126927363, 0.13076367425760838, 0.2702666648626949, 0.1073516531182015, 0.1306543228384287, 0.15271917314350214, 0.15589041384984448, 0.1699136050493555, 0.32062125727697066, 0.4004487568753202, 0.17829517668448658, 0.13271083765073222, 0.160585310521402, 0.15569309091049965, 0.18446790645878908, 0.1348244990722406, 0.14643153485818516, 0.13644490127190312, 9.999999999998899e-05, 0.19704305978074665, 9.999999999998899e-05, 0.0002162528255784668, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025801021863172124, 0.011561197243279309, 0.009101877195354935, 9.999999999998899e-05, 0.1295550995820799, 0.03767193536211455, 0.06564368061594783, 0.07978799776875134, 0.08541247825329412, 0.03059937204208074, 0.025206113274075292, 0.1048861522751755, 0.07227390697545033, 0.05441800009749409, 0.18836274601324965, 0.03298604028826535, 0.16728739201364062, 0.11450277345180826, 0.21056839042414144, 0.13677212594085963, 0.10719941968497348, 0.09504066157794533, 0.16552910864134285, 0.18220049866467003, 0.16779336296516434, 0.13129778699196126, 0.00775813650235091, 0.03958416560564004, 0.17339736622869917, 0.2029896485754642, 0.08641939018409361, 0.08607600095906387, 0.5701287015465817, 0.5983185746726126, 0.6077630199489819, 0.5194817371819762, 0.5696678706130094, 0.5419983214486623, 0.5305459955639089, 0.5543907887797854, 0.5853294068241862, 0.06833141469398307, 0.07217973233681163, 0.10124626473274512, 0.0861851124061912, 0.0344737272010911, 0.12099165317611182, 0.08411231296686528, 0.08959505237611409, 0.09214173941643078, 0.18668012227220931, 0.19223721445348674, 0.1744953319301742, 0.288017875490031, 0.4350074104309014, 0.20978082992684344, 0.21674324468809314, 0.1742361405998084, 0.23280393521858456, 0.2677988950803224, 0.430892018668784, 0.3371623613393484, 0.35330810389903633, 0.26072733142179505, 0.3492660582968551, 0.2663695374983679, 0.3565768874791614, 0.25734912498247264, 0.20080421528473458, 0.20012128496434667, 0.17282227231551484, 0.22570305539257285, 0.15698817637999496, 0.26638749751996815, 0.20363479409846352, 0.21280513676355073, 0.14598497521212483, 0.24634336006337476, 0.13625207410465334, 0.19607716642876927, 0.24621790587953296, 0.21102547630773627, 0.2310783803017269, 0.27738925461362496, 0.18617405945776822, 0.23613366992345652, 0.18300885386539334, 0.19877194690144417, 0.1960628083688306, 0.2055944747670585, 0.19353690453676886, 0.20524084698710598, 0.19341725339246307, 0.2500079170567767, 0.18369369689799908, 0.17786636649242205, 0.12596519878865475, 0.15481720654028863, 0.8830498764495716, 0.20143952843088542, 0.1648300609871749, 0.1590034240783067, 0.14484800397350373, 0.7240564575773247, 0.4447112471757868, 0.21461021425829374, 0.07358844254326302, 0.104902231557079, 0.16901237182997464, 0.15587140157685175, 0.10419532670847875, 0.45825919359120804, 0.450954098411224, 0.1902802650203712, 0.18866353547555492, 0.22600110823687924, 0.19509116855122555, 0.17387489775695208, 0.181789151978353, 0.18724697084415576, 0.2517866957317503, 0.2219078036400074, 0.08196033463190489, 0.08323154192243598, 0.06904388165347342, 0.081921533147982, 0.1012338037709456, 0.07675128512748997, 0.1220017176461291, 0.0801871612267665, 0.08289163357889595]}, "mutation_prompt": null}
{"id": "1d4193ba-7827-40b5-bc69-ba4724dfb0ea", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Use a cosine function for inertia weight adaptation to enhance the convergence behavior in AdaptivePSO.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9420961062510792, 0.9347763062735095, 0.9243784413272564, 0.9427031052078162, 0.938580700199431, 0.19096728357791037, 0.9389859864099697, 0.9296858748272817, 0.9079491909152246, 0.5163659013574335, 0.6348580718326167, 9.999999999998899e-05, 0.8525556501529069, 0.40654585044948854, 0.8608756786617956, 0.05521861193255029, 0.8649985676348406, 9.999999999998899e-05, 0.15050293146372973, 0.1013393049589536, 0.16007345308201382, 0.1832914710041339, 0.13812818200696186, 0.12970683957288198, 0.12191294200425706, 0.6979334117141688, 0.18569847841053155, 0.14241973414159004, 0.11660117353112687, 0.11324305178590965, 0.09867355742456019, 0.08758862620827934, 0.18143757835234997, 0.15011703390781805, 0.12518540998240513, 0.12896686372179067, 0.9864133980849369, 0.9816999576893998, 0.981968181333423, 0.9792171106466234, 0.9645506341890642, 0.9730750259810346, 0.9838146076341676, 0.982631484573348, 0.9818152544373884, 0.7040603438810021, 0.6259313296153016, 0.3796426813947039, 0.7662849070717457, 0.15068854619293137, 0.47711183733600315, 0.6382004121716252, 0.5952988123074849, 0.08905186933181464, 0.24838418950657093, 0.2179032981380813, 0.16134726717804992, 0.21596065393255726, 0.2806624093771879, 0.21036540880271526, 0.1478244806399831, 0.13969292170450465, 0.1514562936978462, 0.16237469573182772, 0.10798839963186035, 0.16537982339374613, 0.13107902910699953, 0.13027358609404904, 0.12601471780016293, 0.4670095661349625, 0.5075467625943757, 0.13033073581611732, 0.13394259299444855, 0.21012361950624237, 0.15494434008954672, 0.2122899142226764, 0.246584136095648, 0.31402075567369725, 0.13556177350702525, 9.999999999998899e-05, 0.1954040464018557, 9.999999999998899e-05, 0.012101359436240466, 0.003117493700522389, 0.036010804430140375, 9.999999999998899e-05, 9.999999999998899e-05, 0.06918353623944073, 9.999999999998899e-05, 0.007489320536017252, 0.04240079355341553, 0.1109808294333281, 0.07593474682164181, 0.05396559709463822, 0.007473149883416186, 0.020070052337714195, 0.08935403784575369, 0.0710482959506229, 0.03579205194973856, 0.1240657328493251, 9.999999999998899e-05, 0.10746125359078396, 0.1128058150430632, 0.10388845544516478, 0.19938447643100898, 0.10634851906477072, 0.09278050385562542, 0.12235627296742546, 0.10384277350634308, 0.23264403934237, 0.11662873881604174, 0.24723408975335692, 0.07235575951077555, 0.2043671127214629, 0.11139670713864613, 0.08525935011600272, 0.08572890711729886, 0.6003660013190324, 0.5060941926144663, 0.5768823191233694, 0.5668970763231465, 0.5971319750368977, 0.5430557336072074, 0.600939962474027, 0.5847696405096652, 0.6290775405913746, 0.11550483810554746, 0.0719551371733993, 0.08372384958546697, 0.0897753121434951, 0.115090315285022, 0.1345446706805946, 0.14597548540310068, 0.12218527148517555, 0.06606406616462568, 0.24469101286694706, 0.19401989410032627, 0.1786047127909487, 0.25659872676085804, 0.1999206180311166, 0.18208054822354702, 0.22840767290581998, 0.22866386634576952, 0.2426772035160396, 0.2647538969656299, 0.3558348198964886, 0.2856541024408319, 0.2207539411744759, 0.24703635976219385, 0.280166126704527, 0.2724346513285413, 0.34715696591942635, 0.3022358750739189, 0.16477767736550408, 0.31665440315901916, 0.22530261077351588, 0.1807763128324814, 0.18761872455963502, 0.32056645162448205, 0.2933835179442149, 0.2568504061484559, 0.2361520836156844, 0.253903786991746, 0.16197675811994083, 0.23343482972603702, 0.22243068160383395, 0.21398138507479858, 0.19708275440629763, 0.22574539712748953, 0.19395634733841594, 0.23430714543006947, 0.19942816782038064, 0.21776229587203733, 0.18751047178014635, 0.22745961380994317, 0.19743301870322116, 0.22619853006236146, 0.20894808332873316, 0.190222164998037, 0.20041773790754358, 0.23049929463600793, 0.12664465705119876, 0.15479700732709023, 0.8931927675851385, 0.22023759169260437, 0.11999921100698685, 0.48653601334988705, 0.14286422176572255, 0.935358900132602, 0.6208576494807789, 0.21432031112838135, 0.07358865408412496, 0.28174534544384655, 0.16899371277651898, 0.09389256483213992, 0.10419281854245, 0.5489655230072139, 0.4458092269508406, 0.2177018205279998, 0.19375111723343363, 0.1870520755542061, 0.19044692239274563, 0.1821902172947505, 0.17846076405001987, 0.2323700337834722, 0.1874683864281783, 0.18674697289132092, 0.06350964030301764, 0.10203405137152766, 0.08471812241964904, 0.08532549352056318, 0.1107707440549357, 0.09789481635602626, 0.07963844532296516, 0.08609304301868215, 0.07731463359999491]}, "mutation_prompt": null}
{"id": "77032499-a1e9-449c-b1b2-9f150c20153b", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget)  # Changed from static to dynamic based on evaluations\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            constriction_factor = 0.5 + 0.5 * (1 / (1 + np.exp(-10 * (self.evaluations / self.budget - 0.5))))  # Sigmoid\n            self.velocities = (constriction_factor * (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions)))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance convergence by introducing a sigmoid function to dynamically adjust the constriction factor in velocity updates.", "configspace": "", "generation": 54, "fitness": 0.12895250524058532, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.2560111821174378, 0.23520025814013568, 0.25879459625445533, 0.14290261928865278, 0.1875566286589737, 0.28208019273835927, 0.23046247161774325, 0.1849978027274788, 0.1175513187946633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030810118389990593, 9.999999999998899e-05, 9.999999999998899e-05, 0.015721246280896217, 9.999999999998899e-05, 0.06556826030906282, 0.12147894859102903, 0.09396882484553426, 0.09370136889150904, 0.0901944962238902, 0.09401365512157611, 0.08236895810882794, 0.0984591909922996, 0.09501649979471272, 0.06657805519971971, 0.09557157986841558, 0.07219081628763357, 0.10827278191753864, 0.07606700711349801, 0.09170675215455193, 0.09735071691400277, 0.08807781007017201, 0.035208088542192706, 0.06921007546215774, 0.05770087203927865, 0.05232552192470974, 0.06051177386868034, 0.052320012655406534, 0.04966535420353413, 0.07140538198056878, 0.05599844588807934, 0.0596347066717926, 0.0643080423892155, 0.09101603470601671, 0.04903226112286352, 0.08939351554501374, 0.11503023025938108, 0.05234544582486378, 9.999999999998899e-05, 0.08870208611796282, 0.1990113974926192, 0.17663143094937317, 0.1899888853632813, 0.21672385444840925, 0.37052262197607166, 0.2810492611239497, 0.1781735651040144, 0.12179273160390036, 0.1794379060775052, 0.09657005065745894, 0.2312040747046844, 0.1353817784239667, 9.999999999998899e-05, 0.09706191088881844, 0.056728253164642806, 9.999999999998899e-05, 0.28989100681869195, 0.027562696433723666, 0.1366116741844673, 0.1277393137219055, 0.012709739862768021, 0.0731121134393381, 0.10800606385106382, 0.008572221684538972, 0.1409190019120058, 0.13065838351362002, 9.999999999998899e-05, 0.017604340113313577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010887309977112847, 9.999999999998899e-05, 9.999999999998899e-05, 0.08538839212944638, 0.0396562194274358, 0.11063942526076465, 0.06622823229309038, 0.0042048781527531665, 0.01687807113328421, 0.053163338640953905, 0.08440948130591786, 0.07702524583759296, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009419699756316402, 0.04300177684033302, 0.011210748468334919, 9.999999999998899e-05, 9.999999999998899e-05, 0.046323023069363756, 0.001185324272302224, 0.004333045455912399, 0.02512226254058403, 0.2712188327183448, 0.26167226947068334, 0.24172574821868298, 0.3580988576587463, 0.17601165865186164, 0.20826317208087575, 0.40768863675868494, 0.2708683307607862, 0.3993190065009419, 0.10447468510898417, 0.07295279539363542, 0.058602712362213594, 0.11961821284255425, 0.07208151217382386, 0.15926277116460008, 0.13032822949740386, 0.0729863340314687, 0.080278724063793, 0.13415811981948877, 0.20036565021759944, 0.16919802913127735, 0.20332043975515157, 0.20682921504554763, 0.1434030494014642, 0.1675662564577669, 0.1832851074218591, 0.17521521926081096, 0.18892129517208756, 0.2537149660671807, 0.24945753515555524, 0.25767228231684913, 0.21930745532940532, 0.2280410668040752, 0.21360689179325942, 0.22182659552704098, 0.2450155926697084, 0.20906643135683178, 0.08921145388747787, 0.19770844795817588, 0.1678141962426125, 0.18121328835712536, 0.17947598354620664, 0.22737761368932696, 0.24309446969905124, 0.16710598425986645, 0.24746811536766355, 0.17457374679475723, 0.22783083782314117, 0.22320886746450874, 0.263789289019397, 0.2074692398705772, 0.2698001631702359, 0.23736174200877302, 0.18607123065922837, 0.15655456344742325, 0.18015460689331064, 0.18652664532906094, 0.1810710241515393, 0.1846437257777762, 0.18293700171134064, 0.19795098559384938, 0.18315428498442743, 0.16815496103387084, 0.48384181369568824, 0.12502517546875547, 0.11310431549036115, 0.6200971988566643, 0.18840593542429018, 0.1738005485344627, 0.13831782373208312, 0.14466543822592826, 0.3290702690326278, 0.2371689821165397, 0.36211266975777057, 0.07355780112196375, 0.22745878949912324, 0.15712577582022147, 0.14103432742675537, 0.10260493397795267, 0.15974383692311422, 0.21719536647384763, 0.20550172190717886, 0.19073384282370487, 0.20179254451692763, 0.1845698468408895, 0.19030054802171448, 0.21680642055420962, 0.1769098915433739, 0.18577779419698726, 0.2124907348156645, 0.11063692841765638, 0.08463279520768918, 0.06564797837572789, 0.09386902687909993, 0.08830496930982623, 0.07641037683998964, 0.05910457477556519, 0.08001215335249379, 0.10653906641770716]}, "mutation_prompt": null}
{"id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 55, "fitness": 0.28767879226164755, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "d8a3d019-c04f-47ca-a0f9-144a7dc1bfb8", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "f1264087-0e43-471f-9ca6-6e72c9176b5f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "53211dd1-d490-4918-8870-7c1320e730f9", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "6800f986-c9aa-469a-85ca-a03d6928eedd", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with quadratic scaling factor\n            c1 = 1.5 + 0.5 * ((self.evaluations / self.budget) ** 2) * 1.2  # Quadratic scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a quadratic dynamic scaling factor for c1 to enhance adaptive learning in PSO.", "configspace": "", "generation": 58, "fitness": 0.28361349996670837, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.946850104652639, 0.9359494718216698, 0.9207688056422472, 0.9395450722053128, 0.9381403165425628, 0.19096728246520456, 0.9407853726231462, 0.9311853574450837, 0.9269000642453055, 0.5209585254608188, 0.28446713765745546, 9.999999999998899e-05, 0.8351277357895917, 0.26651961084231024, 0.6242867608325473, 0.361500153408444, 0.8538443255489968, 9.999999999998899e-05, 0.1452887738691927, 0.10264854704317872, 0.13724669846668835, 0.18021724966000452, 0.13508677976165817, 0.14024296622900367, 0.11465438665780225, 0.15938403244882626, 0.13432841531514372, 0.11678093274676504, 0.0976838221863654, 0.12997580823569876, 0.16952890328221326, 0.15195974282837088, 0.1209879222293504, 0.14557380650132656, 0.1063753690399939, 0.15575506712673037, 0.9864133980849369, 0.9816990085273116, 0.981968181333423, 0.9792171106466234, 0.9645354350064039, 0.9730751131611719, 0.9838146076341676, 0.982631484573348, 0.9818142760184632, 0.6642274132973721, 0.7340987550068921, 0.37993146487912666, 0.7730688592492896, 0.15177137590841627, 0.5234410129500138, 0.6401468092290518, 0.5898111365635679, 0.14099277621111905, 0.2253151167495313, 0.2179032981380813, 0.16133943627688296, 0.21596129567166267, 0.28030459372642313, 0.2142193415629604, 0.14816663890079873, 0.13001151511771292, 0.16729516530702548, 0.15927946844003582, 0.10559181152635067, 0.1592170984739707, 0.1341957732500323, 0.1658227704447025, 0.19403282274261924, 0.4668592572513377, 0.4656904269243233, 0.1500495935934978, 0.1338206120953035, 0.1975642741062582, 0.159238945008908, 0.21325015578821804, 0.13428919017363172, 0.3011914405692958, 0.13576093247188803, 9.999999999998899e-05, 0.2087016893416742, 9.999999999998899e-05, 0.004864640298485989, 9.999999999998899e-05, 0.038063048192355176, 9.999999999998899e-05, 9.999999999998899e-05, 0.07234231667657987, 9.999999999998899e-05, 0.006527638242406986, 0.04162193997905905, 0.047868236337663794, 0.062155737529259736, 0.06476968800246485, 0.0040194736041204715, 0.026983519128027322, 0.07386900160950116, 0.08977208581706131, 0.03836395738442466, 0.12205231321861998, 0.03731756305864398, 0.11174792780591436, 0.11471791589887104, 0.10412349132840648, 0.20066213922115161, 0.1065474491602163, 0.08582585480333293, 0.1213290273071278, 0.10359502599746351, 0.21077100075118005, 0.11664871225655171, 0.24764727966707645, 0.07272589566657062, 0.20464058866019452, 0.1118172272143978, 0.08522449307278879, 0.0857093664847014, 0.5172351461604743, 0.4886879306219526, 0.5509092515839398, 0.5462769011859537, 0.5825661489120288, 0.5794889512671071, 0.5729221698676112, 0.6001354630388267, 0.6017056519010779, 0.0813938590459855, 0.07198886209005162, 0.08361954684436501, 0.09738951484044323, 0.12379676679004425, 0.11192291278842914, 0.1133470946498848, 0.12094151445958046, 0.07442356278757034, 0.32747831692434226, 0.19060870889291248, 0.18111891858369789, 0.2743172822846818, 0.27547504049160343, 0.20603652343461232, 0.23474543054976837, 0.18551515668128116, 0.20578503252524638, 0.24545190803364847, 0.3189909697432437, 0.33210960344130125, 0.2225304465229475, 0.2503987249542492, 0.32183960689886637, 0.31014035664099915, 0.26388075320396553, 0.2632976808022227, 0.39082821881789065, 0.2198651220414598, 0.19877742142139765, 0.1912067143833276, 0.17259747418123228, 0.3223230974737321, 0.25881197468942185, 0.279587172158148, 0.25154913505230436, 0.20502342027636966, 0.20756021320604712, 0.21839819889684753, 0.2376031694178835, 0.19866758353832614, 0.19153080182093374, 0.2087318486987374, 0.18389110710702306, 0.24482229261021493, 0.1809630340467162, 0.21776106733723122, 0.18749986917251804, 0.22733513448826637, 0.19749622686671042, 0.20047798681589468, 0.19649052836013725, 0.7662775160571244, 0.2004154078834406, 0.1764043124956437, 0.12664860877689976, 0.15479902123781664, 0.8926407536302106, 0.21401908026216088, 0.12000747436795267, 0.41279878830487715, 0.15726003740207706, 0.9324669977714665, 0.4407439944924033, 0.21432086872831202, 0.07358874879607391, 0.4158795678545253, 0.16899629572190078, 0.37169301617528094, 0.10419284594775013, 0.7366581529215295, 0.6063195286675438, 0.21815820499456062, 0.18277099683744003, 0.20515968805081952, 0.18919493883790806, 0.18376931746473246, 0.19046503852559948, 0.18138677213757015, 0.18261921039129814, 0.2008879149308601, 0.07616479044071656, 0.08257186843728326, 0.08904372780518466, 0.08814823406862649, 0.10776845760666964, 0.07229522067531235, 0.10479345281011354, 0.07163501282062712, 0.0949108490349081]}, "mutation_prompt": null}
{"id": "063c4f76-0b39-4d15-a80b-0fcc7bcbcc2c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)**2))  # Modified cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "AdaptivePSO with a dynamic inertia weight scaling using a cosine function to enhance convergence rates.", "configspace": "", "generation": 59, "fitness": 0.2795279703725121, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9400526800634342, 0.9191594527095667, 0.9349991051715497, 0.9479697419383295, 0.9388336129974374, 0.1909673396472421, 0.9451646063333744, 0.934158592279585, 0.9109068504542599, 0.3766288094311353, 0.3038778328175401, 9.999999999998899e-05, 0.4254000697970499, 0.4530862563377407, 0.8453779102504958, 0.4131294226382072, 0.87575326716161, 9.999999999998899e-05, 0.14141371845046746, 0.1371678031124316, 0.14412582118768713, 0.11044538282749194, 0.1392890110637709, 0.1291567749761371, 0.12371109276068182, 0.1878209474537491, 0.17810095500664025, 0.1223115219164731, 0.10928751492353295, 0.10288678353983183, 0.1678440039326421, 0.15043444816992357, 0.13268958511187467, 0.11783105096028834, 0.12848898056984304, 0.12447508930953533, 0.9864132131548183, 0.9817001247898597, 0.9819681154513157, 0.9792167108510434, 0.964549852663741, 0.9730738732495516, 0.9838149144358715, 0.9826293123481636, 0.9818154303729872, 0.6450678934156853, 0.7271449936737822, 0.46083703326815884, 0.7017393228714499, 0.15093289147562794, 0.5822534018465202, 0.2573731890389591, 0.4628968099115528, 0.08905441122542213, 0.36270853250563573, 0.2179032981380813, 0.16135982564786677, 0.21481609831676707, 0.27868745758734037, 0.20941711102837557, 0.13636041132830723, 0.12995962095251712, 0.2136467746265438, 0.14992112458274054, 0.10482283570319328, 0.15855481907795965, 0.13115604500821942, 0.12993228760060538, 0.15004763699294965, 0.4786750456229818, 0.5060086543770775, 0.17218586113471324, 0.13422655975758502, 0.194247487915845, 0.14994813010237285, 0.2162499378635363, 0.20322847713766057, 0.30893948031881724, 0.13572577475575986, 9.999999999998899e-05, 0.19380567346589161, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018393190738019705, 0.03125775303687972, 9.999999999998899e-05, 9.999999999998899e-05, 0.05267027121982337, 9.999999999998899e-05, 0.0013078407307620665, 0.021015016725421276, 0.038299826097602074, 0.08161267074243939, 0.06420139178239592, 0.028459745856055818, 0.030940791046611404, 0.07408840271727002, 0.07720952237513379, 0.05091298509552966, 0.1229435789639638, 9.999999999998899e-05, 0.10589877063868824, 0.11264036792481003, 0.10372046612007635, 0.1987075038265944, 0.10761338937702691, 0.09270771238630693, 0.12260518204873028, 0.10286461003451619, 0.23377218798100707, 0.11506430606332974, 0.23985327000777357, 0.07396637131904593, 0.19876078002523268, 0.11173141950376919, 0.085267241527483, 0.08574787555929109, 0.5498093131871408, 0.4915379791270267, 0.5894889769679671, 0.5479370957737395, 0.5467133167613418, 0.5988102237804874, 0.5798283562795441, 0.5924816345563333, 0.629514902707828, 0.11532302970752184, 0.07206858132959337, 0.08373529406940683, 0.08989943022692715, 0.12438266479912397, 0.14340005472681827, 0.14545829054962345, 0.11405180218591171, 0.0784834365938406, 0.329408419269686, 0.19055547271369966, 0.17437952313139227, 0.2552291388418543, 0.19655367031791826, 0.17494945347263458, 0.2360925474198985, 0.23121129871834745, 0.2368066487862579, 0.22748968723015572, 0.37095050898045534, 0.3277353877007022, 0.1912849757686086, 0.24252349538008633, 0.32294244289965834, 0.2992676035317451, 0.41387307503637405, 0.505045956479873, 0.3246645330698752, 0.3064344058407745, 0.25900515366627197, 0.24865701664829976, 0.19198570801250092, 0.37292727196330855, 0.212930355760656, 0.260716812665736, 0.19125509955102937, 0.22838917617076326, 0.20487258450939727, 0.2078248648879648, 0.22738287454141104, 0.1928447529958549, 0.2158101096303342, 0.21042989820121372, 0.20715410722628402, 0.2342971398223641, 0.1990911120111003, 0.2177846151071665, 0.1875065746915422, 0.22724402815409206, 0.20990034527986534, 0.22001733355193387, 0.24932628985047345, 0.22677611455179936, 0.20846987416238283, 0.17568475727301536, 0.1266290048801415, 0.15479633227962386, 0.6968159846428793, 0.20127797903967126, 0.12000976712197187, 0.14286259665320666, 0.15827097369975285, 0.9271491531307828, 0.5894917736960612, 0.21432047893394424, 0.0735886313287839, 0.2889226006061232, 0.1689961666925186, 0.43024622961741343, 0.10419278974321111, 0.6137406379850792, 0.5195089733414915, 0.2145033161096822, 0.18532566447677878, 0.1964421531971976, 0.17730550569121462, 0.18292699201413765, 0.1833365654281991, 0.1848566264057837, 0.1827276557467573, 0.20533771618572438, 0.0746121368566579, 0.09666778378277052, 0.0855200611688477, 0.07978528326645806, 0.09482158149958264, 0.10364378642941041, 0.08860766987571078, 0.08221060816834347, 0.08344076125697408]}, "mutation_prompt": null}
{"id": "d4cc36de-ff09-42b8-a952-e26f91b4eb6a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "0a010ab9-2d11-49d7-a316-8522211e8827", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) * (1 + 0.1 * np.sin(2 * np.pi * self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introducing a sinusoidal modulation in inertia weight to further enhance exploration-exploitation trade-off.", "configspace": "", "generation": 61, "fitness": 0.28525428941704645, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9462613251859316, 0.9375635092743785, 0.9393648800341563, 0.9457569725947823, 0.9346090575344992, 0.19096557425123406, 0.9345881158984423, 0.9326881845333006, 0.9170349293315273, 0.7399387707780998, 0.23339824105070528, 0.4184457506936915, 0.5215740661723784, 0.8655843621246788, 0.7962666803499369, 0.37473037780549323, 0.7115568546403275, 0.40215850622145277, 0.15783259449577458, 0.16230483138386664, 0.17679697620941293, 0.1493680581331298, 0.14888740094314323, 0.1659119311799856, 0.1288798960853459, 0.835986150867281, 0.15088248807019733, 0.15486457788288444, 0.11235279054942171, 0.14501802945386078, 0.12009526084870226, 0.06397812455088459, 0.16851969833149838, 0.14440822337170867, 0.06798656635564604, 0.14463841635486463, 0.9864041228941631, 0.981699741781005, 0.9819657907733778, 0.9776943850904637, 0.9644677677014345, 0.9730443471160468, 0.9838317186289548, 0.9825695083812045, 0.9818143424430672, 0.6014086462422793, 0.6001471041166124, 0.07194507346015122, 0.31204947330901533, 0.15066243297106652, 0.37304386293303726, 0.48863723782098367, 0.5530667428763663, 0.4185999560515231, 0.2514987795229686, 0.21625332509611317, 0.22365180157440778, 0.2159206216693761, 0.2764651837332244, 0.20299365001911673, 0.1756531621846682, 0.15082978174236816, 0.16459279603979937, 0.1701422874470332, 0.10789811704185026, 0.171175901506896, 0.23291178314360672, 0.1519030833001097, 0.16677700657977768, 0.28986542351431877, 0.2600087678246953, 0.16376370377939198, 0.19186960969435107, 0.1391029983744374, 0.1568246703296029, 0.20870123960978204, 0.13434115474356623, 0.4086628592455084, 0.13673322007460542, 0.04773697268840771, 0.2068425661025789, 9.999999999998899e-05, 0.010530137618225521, 9.999999999998899e-05, 0.047029931114222934, 9.999999999998899e-05, 9.999999999998899e-05, 0.06292564214150476, 9.999999999998899e-05, 0.010323265942882576, 0.0311335306581777, 0.0507501165607116, 0.08376637654819385, 0.08659862031131293, 0.04390292272863372, 0.030041225341741806, 0.06972502543473824, 0.08515320574129615, 0.03288397110373664, 0.14760779664627532, 9.999999999998899e-05, 0.13190059453845837, 0.11207588090168397, 0.22615376886148564, 0.19038555030901316, 0.10778514367068004, 0.09470622861573263, 0.1192130326875942, 0.11013631234681887, 0.19533056465040965, 0.11923136874402063, 0.3000360023698351, 0.07328010050666323, 0.16207501345181696, 0.14317146352582533, 0.0839802986926168, 0.08587889354007983, 0.545246784200187, 0.5332603737048145, 0.4967183792444112, 0.5517810082523538, 0.617287568805311, 0.5862574044667364, 0.5964191505254883, 0.5841863659385915, 0.5445252012619122, 0.1432988165601693, 0.07264596745647345, 0.08344601011231823, 0.11833735963920988, 0.09619771242503772, 0.098467464931838, 0.1869086093694371, 0.10402270876730857, 0.07236349782454854, 0.26270026816467007, 0.1831392564026323, 0.17445072058230693, 0.42076401889254655, 0.26329955634883373, 0.23796653627459452, 0.23811310037729472, 0.1720736487734792, 0.281107481621374, 0.232116160179466, 0.4272579608645457, 0.3196273359660613, 0.20390482370236807, 0.22517884325592208, 0.2105377866283048, 0.2159384935557448, 0.36541008648622086, 0.24422702916935024, 0.23940036328343162, 0.2848098853423827, 0.26310897925499643, 0.18615963585354844, 0.18977629415171926, 0.33019932139482655, 0.22877132236029785, 0.1901535394934526, 0.25916422223393265, 0.2467459222256294, 0.17281036614089296, 0.18072210208049544, 0.2689738129556637, 0.19791030378744712, 0.1493999343787047, 0.2577740582063256, 0.1827781358548911, 0.2324250072127627, 0.17683892598194595, 0.2532674261145983, 0.2048410233715564, 0.20329904756654582, 0.20197859851978395, 0.2129947224861457, 0.230881861437498, 0.20012993898215736, 0.22587591917060168, 0.17547993411949991, 0.12654054379387958, 0.15482156377691314, 0.9157485384295893, 0.20140069214621048, 0.11999886529660542, 0.4166661398565976, 0.15118969854410047, 0.927343466679156, 0.5224854691336615, 0.2139497315731813, 0.0735882354005768, 0.37715204351792186, 0.16908545753599502, 0.15630090092969184, 0.10523350237755025, 0.563008044854074, 0.3879257035108511, 0.20381556988977756, 0.2015063189091315, 0.18802728309701644, 0.19504283160022207, 0.18185699078857787, 0.1909223949023401, 0.1904544113006943, 0.19811626520146297, 0.18435226103160685, 0.09722849826743929, 0.09748477492174301, 0.10359063119836809, 0.10428375499971265, 0.09461534602348565, 0.09761944969366765, 0.07273655787619593, 0.09178704196686649, 0.08751056034324589]}, "mutation_prompt": null}
{"id": "f792c7dd-e2fe-483c-9962-085b573f8752", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "e4f55145-fb8b-4b36-a66c-6de1c1436694", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "3bdf9fc1-f28c-465f-8fff-628db5020ba5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.sin((np.pi / 2) * (self.evaluations / self.budget)))  # Sine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance exploration by modifying the inertia weight adaptation to a sine function.", "configspace": "", "generation": 64, "fitness": 0.15574113155552397, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.21846088318013157, 0.13723281571227985, 0.16709769393192475, 0.15352521925328988, 0.16304726214126442, 0.18934293537110702, 0.1393667234185204, 0.16610002858803197, 0.17307305447118704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01634307624271436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.40907691628249354, 0.034142569894851316, 0.06076679151629505, 0.051472153715309665, 0.05709242245668866, 0.045815746276572256, 0.0685075285204797, 0.04731888532840023, 0.15168373170596572, 0.1165512723426807, 0.08753851924715184, 0.04401989660179584, 0.03880201423698759, 0.15913460957891257, 0.0030796801436941967, 0.036619772191884836, 0.13353325859513843, 0.12624345882505972, 0.03481392891650825, 0.9893268097251401, 0.9859413917075425, 0.990082076127222, 0.9596123423953444, 0.9855691091107972, 0.9841814198225192, 0.98655113764986, 0.9902278959864171, 0.9818087984256401, 0.20482406454684665, 0.40144308566497044, 9.999999999998899e-05, 0.1295354813465125, 0.2635005879179685, 0.13384605387448534, 0.08055162321097908, 0.05129463989958072, 0.08151560510323874, 0.16893706057605484, 0.16958707493519254, 0.15756803183903434, 0.19211055866550752, 0.18699008472304923, 0.18123914388394646, 0.12075236193682559, 0.12444140267920067, 0.026523942016353774, 0.14607641126698967, 0.09458111615482134, 0.07542653396086385, 0.07840804767944387, 9.999999999998899e-05, 9.999999999998899e-05, 0.09832281961449552, 9.999999999998899e-05, 0.052019343853034083, 0.06713001308021704, 0.13858261336003597, 0.025115084293848677, 0.10195443764775425, 0.10744338347719062, 0.16245397370248627, 0.15308343367971244, 9.999999999998899e-05, 0.24130333655945913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021905562982191817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026723996105039838, 0.01310927843779719, 0.032978114235024614, 0.07032836726257208, 9.999999999998899e-05, 9.999999999998899e-05, 0.09149323604056059, 0.058689572190296024, 0.03597450109642508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04395798090389502, 9.999999999998899e-05, 0.04394280702843956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007324292391884923, 9.999999999998899e-05, 0.007538896711144272, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037855476863727366, 9.999999999998899e-05, 9.999999999998899e-05, 0.05587771217702431, 0.43213612793371836, 0.4079023755071527, 0.24650495577110743, 0.20648696466360938, 0.14941386956181635, 0.20205354533187003, 0.2619954640088644, 0.37645058749935445, 0.3028604187752574, 0.060355385110959614, 0.058957303157853524, 0.04984435363003015, 0.12717432359274494, 0.03952567539147678, 0.11305071900746022, 0.08211559200070029, 0.05120066728238637, 0.07459577514997329, 0.09805202405509406, 0.1526529934369062, 0.14893623484237928, 0.20181389188302357, 0.1609327037339352, 0.2334112798864465, 0.1766806779749872, 0.15140876727237096, 0.12264243091722637, 0.2485978255324932, 0.2130497167504527, 0.16800147067121285, 0.17337539797319546, 0.20655313228219296, 0.1794487008370328, 0.15515956248974394, 0.2596901226995556, 0.19253512907813697, 0.1474123717808663, 0.11193845782427747, 0.1634982550580415, 0.1282505350670028, 0.1546185917728099, 0.2389850430882079, 0.21279709917380507, 0.21505829138782273, 0.13051062386775936, 0.19406032636475912, 0.15303461720991962, 0.19425222026043754, 0.18245343513191403, 0.1498345072631353, 0.1833855853695, 0.15909723116148833, 0.18340620825282816, 0.19267050966294041, 0.16698660617643313, 0.18493588868989985, 0.21206877818923575, 0.21904404548288936, 0.1589597649572937, 0.17642853898409794, 0.18176141751207464, 0.19641586704842295, 0.19894523338136172, 0.10983865972252338, 0.17382625248002437, 0.12124461531317499, 0.15503888674231892, 0.6832750350241725, 0.1615325996680309, 0.11851083205916113, 0.15640587016697116, 0.16117715948052813, 0.3694735533160468, 0.1645871929384235, 0.10725362261891236, 0.10160499944152868, 0.19526920407119452, 0.09640097375639411, 0.18012311584383423, 0.1837355734988464, 0.1665299503682265, 0.17583823929171327, 0.19216115370283793, 0.17928634443896496, 0.16442200981012134, 0.16440895394934685, 0.18705203567672402, 0.17822038346364844, 0.19637875888213074, 0.19623014947527084, 0.06344961310920538, 0.04500057482055908, 0.07944485058907724, 0.06440577173544748, 0.06831622254841618, 0.07225026094584142, 0.03852495734312211, 0.06592574327213185, 0.02958404126376557]}, "mutation_prompt": null}
{"id": "7e1bf251-9b23-47b5-9688-34427f6fa968", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "251ebb2c-a251-41ad-a8e4-9dc4f83ec4d3", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.exp(-5 * (self.evaluations / self.budget)))  # Exponential decay for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Utilize a time-varying adaptation for the inertia weight to enhance exploration in the early stages and exploitation in later stages.", "configspace": "", "generation": 66, "fitness": 0.2574352730658931, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9056037095089213, 0.9100510237672761, 0.8145954705075451, 0.8882372031143092, 0.7947657442400342, 0.8550674645468239, 0.4542497993316109, 0.7458042666657396, 0.4890861222847732, 9.999999999998899e-05, 9.999999999998899e-05, 0.26126045699817924, 0.4400075580065561, 0.40384432539508774, 0.3368452736510531, 0.05185418145708354, 0.4885347550939575, 9.999999999998899e-05, 0.1180519985896975, 0.13751846179136995, 0.15174868006755737, 0.09025630577359056, 0.14559128085502326, 0.09937654322528666, 0.1060914384096241, 0.14901471305801317, 0.09715319898356645, 0.08894267219359098, 0.1056188794066184, 0.1182889124390476, 0.1672184929803947, 0.11418247046359886, 0.10978551000351111, 0.16780564690580557, 0.11214466563952652, 0.13510734423337656, 0.9865141808067135, 0.9817028257939296, 0.9772394599912182, 0.9774973302762412, 0.977073871245424, 0.9764691972818066, 0.9822881112635251, 0.9858092120779797, 0.9818187938290722, 0.3895151824900177, 0.419966552491406, 0.26144085285805596, 0.43787259769415043, 0.1501318438250251, 0.1538135100151654, 0.12673980441199584, 0.39493969516785987, 0.08904548564265746, 0.34897912606737513, 0.7064058027720013, 0.22887528294991988, 0.21584203545788816, 0.2913588647638924, 0.19397255516694356, 0.6652876887031858, 0.16036478183705216, 0.2244216885597512, 0.2136872784752245, 0.08958657586485241, 0.13747797750976498, 0.15746805779572315, 0.13329095907217947, 0.16540359844797203, 0.13630608134262423, 0.1842342789380067, 0.13209334446649368, 0.23361716176463354, 0.1906195222149285, 0.24497489553207974, 0.13503550121058705, 0.27609109858056347, 0.18419220073296227, 0.13578887597244105, 9.999999999998899e-05, 0.24581247064297262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01665588712637145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012942768495752488, 0.0169616596545471, 0.021963208460716088, 0.03337557618410081, 0.059032637532702714, 0.0819601040153689, 0.024014094025427757, 0.01320865639135227, 0.040885969050521775, 0.08662905894561446, 0.0868391821519876, 0.13412842253448054, 0.03805251363973294, 0.04912382756571865, 0.08184042844467931, 0.09984222911965135, 0.2192214757537898, 0.10552162902282147, 0.06117085340494488, 0.13143900932261365, 0.08850482026169537, 0.23470038294698925, 0.11411189421868417, 0.24870739169320166, 0.06793199189735732, 0.12410795533222863, 0.08369364888477171, 0.08418903134814193, 0.085576030638993, 0.5595021363075758, 0.6292898483052377, 0.544107838198454, 0.5170496842721894, 0.5270014373299841, 0.5257508540299906, 0.5497830816161335, 0.5210171423071137, 0.5290839315066969, 0.12127665946334287, 0.11611180567698642, 0.11115995345900864, 0.11926787251773419, 0.08291488065072194, 0.13082178260331478, 0.09307123292847941, 0.08239467195816763, 0.10877238218901386, 0.14772187673050508, 0.18371576833714953, 0.18895891947796228, 0.2560518435729974, 0.38252476512970923, 0.2627838987773058, 0.26091393272257535, 0.21173441719871922, 0.3107327596786592, 0.3201232773583004, 0.3080557754279095, 0.30867595888946875, 0.2586577377957979, 0.21129547009854055, 0.25995355017005317, 0.3584535992650454, 0.40471131871893706, 0.23853116514346062, 0.16307699000899212, 0.22238444153378567, 0.2618539346469322, 0.18447368348795024, 0.2798038112061094, 0.2772433013077997, 0.19647353419176672, 0.24785368865895274, 0.14914510658847213, 0.1914441610859412, 0.1513659285845168, 0.19038051938057055, 0.19670372960962568, 0.18821121467729618, 0.2136416698966267, 0.19229752765365982, 0.19658142010192392, 0.21449086615532365, 0.2134971371459221, 0.18514093376100293, 0.18485644796305023, 0.2523522729216984, 0.19381515681249917, 0.22689538620486205, 0.2330731291924888, 0.22471735065859166, 0.20952177064802613, 0.17501361993608822, 0.1461702148841274, 0.15486593335784615, 0.93752628654758, 0.20141671821614593, 0.15089915708411372, 0.7912661505223338, 0.16300711669612633, 0.940890679891636, 0.5020292084504023, 0.21384250635622715, 0.07357021370026673, 0.323414692401931, 0.16877362712619925, 0.16774655322180476, 0.10512885062497157, 0.24669382028039233, 0.48168659460068297, 0.17839152849575457, 0.19932491825727294, 0.18495719646141984, 0.19799146553429658, 0.18312935455294888, 0.18945359553287155, 0.18421803452397045, 0.1722052524539598, 0.18237916651401187, 0.07859559150311202, 0.08307370792724178, 0.09181116414759927, 0.0827014766891836, 0.07736307983801549, 0.09438149835332099, 0.06688987958278225, 0.07787736714783311, 0.07196129726344136]}, "mutation_prompt": null}
{"id": "b095d705-1835-4865-905b-f5e29c862e3d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.4 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Adjusted cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Fine-tune the inertia weight adaptation for enhanced convergence balance.", "configspace": "", "generation": 67, "fitness": 0.22371431098381833, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.7672312359783022, 0.605518778739712, 0.8294743504243574, 0.8018122507088894, 0.8017826463137414, 0.6980733697366117, 0.7164655522306402, 0.3072038241949827, 0.5881134799111111, 0.3192335639496914, 9.999999999998899e-05, 9.999999999998899e-05, 0.05494393351321847, 0.3391922598559638, 0.21594760013174163, 9.999999999998899e-05, 9.999999999998899e-05, 0.47183455799341567, 0.06803392784896145, 0.09735872470499252, 0.04445007602349993, 0.12031890204479534, 0.10833434644072326, 0.06223293986834344, 0.05347783899110947, 0.11349370074571763, 0.05533692644574517, 0.10417356645361797, 0.07003432987603098, 0.1116215295871964, 0.1297803011144073, 0.014843990951475483, 0.1167595274522919, 0.11617648676993775, 0.0871444749870598, 0.1371861979309722, 0.9893577715966202, 0.9858424621859481, 0.9862270611440345, 0.9815449245097454, 0.9818583727124889, 0.9776180874850332, 0.986275454864126, 0.9862197208824645, 0.9849753469087033, 0.19996392176727507, 0.4490185711379763, 0.3239311462352784, 0.1506153552263051, 0.15250969369884915, 0.22095010509028656, 0.0880413411910087, 0.3759406240110479, 0.38868383907205584, 0.27925864697333513, 0.1687329915466158, 0.17100763768713168, 0.1863068683949658, 0.18093993030255195, 0.21120239276864328, 0.16856047919078032, 0.12664949184723173, 0.22699325755552557, 0.20939180458086648, 0.0617908798923652, 0.2042851630149921, 0.09776997443250435, 0.11963550707058879, 9.999999999998899e-05, 0.18143229513875503, 0.20024371265160068, 0.18325600194181302, 0.1279704412421575, 0.18669824702753068, 0.21494239060471887, 0.1384553773698015, 0.22000581628862992, 0.19274566218523892, 0.19821521372414952, 0.11395447323326058, 0.19149678150160898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007926069563846228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0542549592952879, 9.999999999998899e-05, 0.059275464797978517, 0.04367277745824538, 0.1278969339359899, 0.11323580044149517, 0.03923059028813569, 0.01948291264397939, 0.034254932718999376, 0.07128235223266677, 0.028483953871417, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653490585387275, 0.021147757698018688, 0.07914041353235735, 0.0681388208624154, 9.999999999998899e-05, 0.06648666795987279, 0.08036895091498808, 0.14708905243944004, 9.999999999998899e-05, 0.04241733876913678, 0.0932105977783847, 0.03749980934580066, 0.1601822061457704, 0.12947910047456956, 0.04490542224489147, 0.07033956191178914, 0.49719411481347975, 0.5130324523384369, 0.28487437877051014, 0.20792865564177498, 0.20902449733349338, 0.4780207332857005, 0.4930106492379358, 0.4404077777223623, 0.49183677698858486, 0.041070090880160004, 0.06195257867160575, 0.0758256472311476, 0.09563156839985731, 0.08731267300781254, 0.11816212537664172, 0.10785501111439355, 0.1390107173550379, 0.07728003617410273, 0.1464348454132991, 0.15181713584376522, 0.19209222041925977, 0.26435197699237445, 0.43530667536937395, 0.31131424641744454, 0.21705299809665424, 0.15990108198282138, 0.18275256785132477, 0.30622944644741024, 0.28678595128067497, 0.4127377676578018, 0.2580464148517184, 0.1914862811317284, 0.26063082065843257, 0.26159549781508784, 0.4262825742834103, 0.3803471390634371, 0.10401298302225259, 0.14655623578951216, 0.19104224887116295, 0.23522332541176272, 0.1851312850551693, 0.1990201351530183, 0.22605107516949308, 0.2827737971650688, 0.13538900574584534, 0.19458592635631433, 0.13525363521272316, 0.196865377508871, 0.18212917048703536, 0.2079208679637774, 0.18716918680264572, 0.18866318074741661, 0.20417798998805492, 0.19124973310990345, 0.198957863312771, 0.24250105128486943, 0.2319714167359611, 0.19035410070543446, 0.25843199647994874, 0.2504190960071232, 0.21744878979523052, 0.17979907064842204, 0.18452489072123457, 0.8822956871088227, 0.16741585621863286, 0.14784676303734579, 0.4263750901084563, 0.7465886064337742, 0.16382378026751354, 0.14269236458525425, 0.16108839711863332, 0.2113145606985143, 0.4430909577183051, 0.21307317025191097, 0.19478604667294908, 0.1029252864225566, 0.22388014113936194, 0.10577920267855712, 0.10397608344331188, 0.10464257645794006, 0.10468080469129348, 0.1918470900363366, 0.19148097631621264, 0.18484922671647463, 0.1724225813863699, 0.19906814209449752, 0.18740502732153952, 0.1854970432087324, 0.18008177494637312, 0.1894631075995985, 0.07633000077681062, 0.06628322069221648, 0.08302598171777886, 0.042310339469509906, 0.08201396472637246, 0.09244804555193442, 0.08023680910444786, 0.07669536051147152, 0.07688560843480863]}, "mutation_prompt": null}
{"id": "7ce64826-6158-46e7-ab16-5817e85d987d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            perturbation = np.random.uniform(-0.1, 0.1, (self.swarm_size, self.dim))  # Add perturbation\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions) +\n                               perturbation)\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance exploration by modifying the velocity update equation to include a random perturbation term.", "configspace": "", "generation": 68, "fitness": 0.2263115163936016, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.4803445636620447, 0.4816490141820162, 0.48432268512348753, 0.5040993704435497, 0.4873739948273662, 0.4915773234867742, 0.4534926953197449, 0.47946677841097174, 0.45750678489304397, 0.010764966268609344, 0.05960384954076581, 0.024935449829748157, 0.030357797659855357, 0.06444028480929787, 0.02853977092938187, 0.04453669099061042, 0.03942609806769126, 0.04251990475239453, 0.1076139986861896, 0.14970312030667354, 0.12860071314102772, 0.11479461949514358, 0.1343546502881221, 0.12649268188782825, 0.11458096691100272, 0.1333043556320661, 0.132244425088352, 0.10169911829266653, 0.11174482136506181, 0.10860563723358396, 0.12486729895668336, 0.08936824399901067, 0.10611795040647898, 0.12309826012741854, 0.13125230020623113, 0.12253083281099042, 0.985847700057448, 0.9861134715977683, 0.9818710478267344, 0.972040027639062, 0.9679246900135783, 0.9736866274556634, 0.9753981195138282, 0.9841931353827199, 0.9686226161197166, 0.32557145800208953, 0.338568206524099, 0.279798205497661, 0.3362910996368299, 0.31120134588978643, 0.309985011774373, 0.3122347139459546, 0.29707330831069134, 0.3115762163031047, 0.6078885293392087, 0.5753917275573489, 0.17301864268351963, 0.21533713537054633, 0.21362987075456807, 0.9287293801311118, 0.737631601982027, 0.1270601542957216, 0.23568578178111066, 0.1602057316559602, 0.10170499178609083, 0.22320447561429158, 0.16482374854214776, 0.1544124996933791, 0.1688387975409118, 0.15681702596100677, 0.17071325132119397, 0.15635412359400092, 0.1188080537841395, 0.19621371849651736, 0.17258059667593495, 0.15152713896324244, 0.16320070970742584, 0.17964611831656185, 0.13252766912767, 9.999999999998899e-05, 0.1956501543903043, 9.999999999998899e-05, 0.0004281697832462239, 9.999999999998899e-05, 0.009699439392901854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08979409271595162, 0.034685978785844784, 0.14584481552345696, 0.08303592996851772, 0.09456837583959254, 0.004388211909972406, 0.055625853638062495, 0.05235610615282804, 0.057617811434148125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12520491131620037, 0.05018202168284647, 0.1363013958651509, 0.09378095404801423, 0.07131305920367792, 0.10345619089279134, 0.07699762467297133, 0.08014671233635562, 0.08793056025211532, 0.4449493348700927, 0.4372439708305217, 0.4314879140439858, 0.41064933431177586, 0.4349910593112597, 0.416201155252681, 0.4351695369246722, 0.44145212066234185, 0.4269466328084255, 0.07565404529309039, 0.11258721022269913, 0.07546627726811606, 0.08884984950353825, 0.10691267830615758, 0.13149147793680438, 0.07178188579836808, 0.10224061440835941, 0.11129368804945494, 0.17970212905948135, 0.18138283746909878, 0.18814423268710656, 0.2562609949337068, 0.3099514149028021, 0.2637631686611541, 0.31776215418064013, 0.2320006485017363, 0.2559800581018996, 0.2689405786872938, 0.31812254684249797, 0.32862202392158235, 0.22862638885504838, 0.20600700503968505, 0.301044895584737, 0.23084870294031556, 0.31607958411168624, 0.2132510081956298, 0.22179104544828687, 0.2226627978085206, 0.2583154621399316, 0.16983965493194464, 0.16925775856068503, 0.2470870594186455, 0.14452592900726358, 0.22202983298927526, 0.25624519025287296, 0.22035448724952234, 0.19475589249922487, 0.21832002642800485, 0.21705371354813086, 0.21967512977407744, 0.2173371174133858, 0.2224920846365147, 0.18751059033346706, 0.19709858947811698, 0.1921385093755522, 0.22392099011874556, 0.2131945558011843, 0.22880323639697986, 0.21674179190607978, 0.2531361741192928, 0.20724556198451283, 0.1974237585901324, 0.20832494659562395, 0.1774033463162208, 0.17544100246114014, 0.1546743175327132, 0.7128160528855894, 0.25597427634058845, 0.16759632045200834, 0.1776696340292392, 0.1651699858790744, 0.7005100403741509, 0.4637942254009503, 0.21420631784188415, 0.07358277799502233, 0.46307815312092293, 0.1684418705962758, 0.09448793364677255, 0.1052133029837371, 0.10495718758089734, 0.4496220876776431, 0.17710811612063793, 0.1877463741841331, 0.21261980542299486, 0.19043718848840452, 0.19345495812309021, 0.17665971315002083, 0.19566240263399726, 0.2012857857359185, 0.19731573702971283, 0.07918840157815699, 0.07896005943981077, 0.08414696114073072, 0.06531552462242307, 0.08118759682587551, 0.08557742473587937, 0.11356271508728455, 0.07459142566678889, 0.08409860862925866]}, "mutation_prompt": null}
{"id": "053b1241-bd6b-410a-ae7d-0438ca40ea81", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "52d33d46-f43c-4a89-88c9-88982a1487f5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.exp(-5 * (self.evaluations / self.budget)))  # Exponential decay for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Tune dynamic inertia weight using an exponential decay to improve convergence speed.", "configspace": "", "generation": 70, "fitness": 0.2574352730658931, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9056037095089213, 0.9100510237672761, 0.8145954705075451, 0.8882372031143092, 0.7947657442400342, 0.8550674645468239, 0.4542497993316109, 0.7458042666657396, 0.4890861222847732, 9.999999999998899e-05, 9.999999999998899e-05, 0.26126045699817924, 0.4400075580065561, 0.40384432539508774, 0.3368452736510531, 0.05185418145708354, 0.4885347550939575, 9.999999999998899e-05, 0.1180519985896975, 0.13751846179136995, 0.15174868006755737, 0.09025630577359056, 0.14559128085502326, 0.09937654322528666, 0.1060914384096241, 0.14901471305801317, 0.09715319898356645, 0.08894267219359098, 0.1056188794066184, 0.1182889124390476, 0.1672184929803947, 0.11418247046359886, 0.10978551000351111, 0.16780564690580557, 0.11214466563952652, 0.13510734423337656, 0.9865141808067135, 0.9817028257939296, 0.9772394599912182, 0.9774973302762412, 0.977073871245424, 0.9764691972818066, 0.9822881112635251, 0.9858092120779797, 0.9818187938290722, 0.3895151824900177, 0.419966552491406, 0.26144085285805596, 0.43787259769415043, 0.1501318438250251, 0.1538135100151654, 0.12673980441199584, 0.39493969516785987, 0.08904548564265746, 0.34897912606737513, 0.7064058027720013, 0.22887528294991988, 0.21584203545788816, 0.2913588647638924, 0.19397255516694356, 0.6652876887031858, 0.16036478183705216, 0.2244216885597512, 0.2136872784752245, 0.08958657586485241, 0.13747797750976498, 0.15746805779572315, 0.13329095907217947, 0.16540359844797203, 0.13630608134262423, 0.1842342789380067, 0.13209334446649368, 0.23361716176463354, 0.1906195222149285, 0.24497489553207974, 0.13503550121058705, 0.27609109858056347, 0.18419220073296227, 0.13578887597244105, 9.999999999998899e-05, 0.24581247064297262, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01665588712637145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012942768495752488, 0.0169616596545471, 0.021963208460716088, 0.03337557618410081, 0.059032637532702714, 0.0819601040153689, 0.024014094025427757, 0.01320865639135227, 0.040885969050521775, 0.08662905894561446, 0.0868391821519876, 0.13412842253448054, 0.03805251363973294, 0.04912382756571865, 0.08184042844467931, 0.09984222911965135, 0.2192214757537898, 0.10552162902282147, 0.06117085340494488, 0.13143900932261365, 0.08850482026169537, 0.23470038294698925, 0.11411189421868417, 0.24870739169320166, 0.06793199189735732, 0.12410795533222863, 0.08369364888477171, 0.08418903134814193, 0.085576030638993, 0.5595021363075758, 0.6292898483052377, 0.544107838198454, 0.5170496842721894, 0.5270014373299841, 0.5257508540299906, 0.5497830816161335, 0.5210171423071137, 0.5290839315066969, 0.12127665946334287, 0.11611180567698642, 0.11115995345900864, 0.11926787251773419, 0.08291488065072194, 0.13082178260331478, 0.09307123292847941, 0.08239467195816763, 0.10877238218901386, 0.14772187673050508, 0.18371576833714953, 0.18895891947796228, 0.2560518435729974, 0.38252476512970923, 0.2627838987773058, 0.26091393272257535, 0.21173441719871922, 0.3107327596786592, 0.3201232773583004, 0.3080557754279095, 0.30867595888946875, 0.2586577377957979, 0.21129547009854055, 0.25995355017005317, 0.3584535992650454, 0.40471131871893706, 0.23853116514346062, 0.16307699000899212, 0.22238444153378567, 0.2618539346469322, 0.18447368348795024, 0.2798038112061094, 0.2772433013077997, 0.19647353419176672, 0.24785368865895274, 0.14914510658847213, 0.1914441610859412, 0.1513659285845168, 0.19038051938057055, 0.19670372960962568, 0.18821121467729618, 0.2136416698966267, 0.19229752765365982, 0.19658142010192392, 0.21449086615532365, 0.2134971371459221, 0.18514093376100293, 0.18485644796305023, 0.2523522729216984, 0.19381515681249917, 0.22689538620486205, 0.2330731291924888, 0.22471735065859166, 0.20952177064802613, 0.17501361993608822, 0.1461702148841274, 0.15486593335784615, 0.93752628654758, 0.20141671821614593, 0.15089915708411372, 0.7912661505223338, 0.16300711669612633, 0.940890679891636, 0.5020292084504023, 0.21384250635622715, 0.07357021370026673, 0.323414692401931, 0.16877362712619925, 0.16774655322180476, 0.10512885062497157, 0.24669382028039233, 0.48168659460068297, 0.17839152849575457, 0.19932491825727294, 0.18495719646141984, 0.19799146553429658, 0.18312935455294888, 0.18945359553287155, 0.18421803452397045, 0.1722052524539598, 0.18237916651401187, 0.07859559150311202, 0.08307370792724178, 0.09181116414759927, 0.0827014766891836, 0.07736307983801549, 0.09438149835332099, 0.06688987958278225, 0.07787736714783311, 0.07196129726344136]}, "mutation_prompt": null}
{"id": "61cefb4d-a83f-49c3-abdf-6c8ea359f6cb", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "f6bffe66-0e3e-4369-9d8d-5ccef1cbdfee", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "de9f47f1-6228-4d92-8e47-0cc816fb5465", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "57238b1a-f12f-4a29-9ace-0fc7458cfb86", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "9dcb0260-dbee-4b07-8aff-d8cf1aefe695", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.4 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Adjusted decay factor\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance convergence by optimizing inertia weight decay to improve balance between exploration and exploitation.", "configspace": "", "generation": 75, "fitness": 0.22371431098381833, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.7672312359783022, 0.605518778739712, 0.8294743504243574, 0.8018122507088894, 0.8017826463137414, 0.6980733697366117, 0.7164655522306402, 0.3072038241949827, 0.5881134799111111, 0.3192335639496914, 9.999999999998899e-05, 9.999999999998899e-05, 0.05494393351321847, 0.3391922598559638, 0.21594760013174163, 9.999999999998899e-05, 9.999999999998899e-05, 0.47183455799341567, 0.06803392784896145, 0.09735872470499252, 0.04445007602349993, 0.12031890204479534, 0.10833434644072326, 0.06223293986834344, 0.05347783899110947, 0.11349370074571763, 0.05533692644574517, 0.10417356645361797, 0.07003432987603098, 0.1116215295871964, 0.1297803011144073, 0.014843990951475483, 0.1167595274522919, 0.11617648676993775, 0.0871444749870598, 0.1371861979309722, 0.9893577715966202, 0.9858424621859481, 0.9862270611440345, 0.9815449245097454, 0.9818583727124889, 0.9776180874850332, 0.986275454864126, 0.9862197208824645, 0.9849753469087033, 0.19996392176727507, 0.4490185711379763, 0.3239311462352784, 0.1506153552263051, 0.15250969369884915, 0.22095010509028656, 0.0880413411910087, 0.3759406240110479, 0.38868383907205584, 0.27925864697333513, 0.1687329915466158, 0.17100763768713168, 0.1863068683949658, 0.18093993030255195, 0.21120239276864328, 0.16856047919078032, 0.12664949184723173, 0.22699325755552557, 0.20939180458086648, 0.0617908798923652, 0.2042851630149921, 0.09776997443250435, 0.11963550707058879, 9.999999999998899e-05, 0.18143229513875503, 0.20024371265160068, 0.18325600194181302, 0.1279704412421575, 0.18669824702753068, 0.21494239060471887, 0.1384553773698015, 0.22000581628862992, 0.19274566218523892, 0.19821521372414952, 0.11395447323326058, 0.19149678150160898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007926069563846228, 9.999999999998899e-05, 9.999999999998899e-05, 0.0542549592952879, 9.999999999998899e-05, 0.059275464797978517, 0.04367277745824538, 0.1278969339359899, 0.11323580044149517, 0.03923059028813569, 0.01948291264397939, 0.034254932718999376, 0.07128235223266677, 0.028483953871417, 9.999999999998899e-05, 9.999999999998899e-05, 0.1653490585387275, 0.021147757698018688, 0.07914041353235735, 0.0681388208624154, 9.999999999998899e-05, 0.06648666795987279, 0.08036895091498808, 0.14708905243944004, 9.999999999998899e-05, 0.04241733876913678, 0.0932105977783847, 0.03749980934580066, 0.1601822061457704, 0.12947910047456956, 0.04490542224489147, 0.07033956191178914, 0.49719411481347975, 0.5130324523384369, 0.28487437877051014, 0.20792865564177498, 0.20902449733349338, 0.4780207332857005, 0.4930106492379358, 0.4404077777223623, 0.49183677698858486, 0.041070090880160004, 0.06195257867160575, 0.0758256472311476, 0.09563156839985731, 0.08731267300781254, 0.11816212537664172, 0.10785501111439355, 0.1390107173550379, 0.07728003617410273, 0.1464348454132991, 0.15181713584376522, 0.19209222041925977, 0.26435197699237445, 0.43530667536937395, 0.31131424641744454, 0.21705299809665424, 0.15990108198282138, 0.18275256785132477, 0.30622944644741024, 0.28678595128067497, 0.4127377676578018, 0.2580464148517184, 0.1914862811317284, 0.26063082065843257, 0.26159549781508784, 0.4262825742834103, 0.3803471390634371, 0.10401298302225259, 0.14655623578951216, 0.19104224887116295, 0.23522332541176272, 0.1851312850551693, 0.1990201351530183, 0.22605107516949308, 0.2827737971650688, 0.13538900574584534, 0.19458592635631433, 0.13525363521272316, 0.196865377508871, 0.18212917048703536, 0.2079208679637774, 0.18716918680264572, 0.18866318074741661, 0.20417798998805492, 0.19124973310990345, 0.198957863312771, 0.24250105128486943, 0.2319714167359611, 0.19035410070543446, 0.25843199647994874, 0.2504190960071232, 0.21744878979523052, 0.17979907064842204, 0.18452489072123457, 0.8822956871088227, 0.16741585621863286, 0.14784676303734579, 0.4263750901084563, 0.7465886064337742, 0.16382378026751354, 0.14269236458525425, 0.16108839711863332, 0.2113145606985143, 0.4430909577183051, 0.21307317025191097, 0.19478604667294908, 0.1029252864225566, 0.22388014113936194, 0.10577920267855712, 0.10397608344331188, 0.10464257645794006, 0.10468080469129348, 0.1918470900363366, 0.19148097631621264, 0.18484922671647463, 0.1724225813863699, 0.19906814209449752, 0.18740502732153952, 0.1854970432087324, 0.18008177494637312, 0.1894631075995985, 0.07633000077681062, 0.06628322069221648, 0.08302598171777886, 0.042310339469509906, 0.08201396472637246, 0.09244804555193442, 0.08023680910444786, 0.07669536051147152, 0.07688560843480863]}, "mutation_prompt": null}
{"id": "eb48f4d9-77e0-43b8-845c-a52ed27eb54e", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * np.tanh((self.evaluations / self.budget))  # Hyperbolic tangent for non-linear scaling\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a non-linear scaling factor using a hyperbolic tangent function to dynamically adjust the social component c2.", "configspace": "", "generation": 76, "fitness": 0.287395783651695, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9358864833767588, 0.9366831193070059, 0.924901440160393, 0.9415312270061758, 0.9397008161334315, 0.19096728352911818, 0.9395718992458026, 0.9348686739293022, 0.9122371564045128, 0.32097593204302, 0.5617758784337827, 9.999999999998899e-05, 0.8187134576290279, 0.5185303935103813, 0.8684527470619556, 0.05520830342784977, 0.8690011613719237, 9.999999999998899e-05, 0.15413300898996407, 0.11877049393119066, 0.14384964431871672, 0.18016430624403823, 0.1477030681380327, 0.12912228928640068, 0.12574984145072454, 0.6025083275987912, 0.18533359322581533, 0.1539557830416003, 0.11097777629174654, 0.11007904178079919, 0.09868819444191557, 0.09079034276836595, 0.13282032190600113, 0.15624645212056076, 0.13018361371959564, 0.1265370558200446, 0.9864133980955594, 0.9817001567574165, 0.9819681817453453, 0.9792171124232181, 0.9645539816825542, 0.9730750099907156, 0.9838146081268314, 0.9826314845108485, 0.9818154531659818, 0.7134640839256153, 0.642260044832657, 0.4056283548932439, 0.7513997165654152, 0.15110946017634053, 0.41885063029006575, 0.5767851929689536, 0.5387335950696827, 0.089052935269618, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2045389244172423, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16422806058268558, 0.10832593125582457, 0.16233101211839418, 0.13116446483689836, 0.17417456860744773, 0.16443569169805072, 0.48244638928818573, 0.491771467050086, 0.14496414615680409, 0.13393741962068872, 0.20746907096007794, 0.16360912369494018, 0.24024206907544077, 0.22781618130186476, 0.3096628676428089, 0.13572172133904115, 9.999999999998899e-05, 0.20231957597651484, 9.999999999998899e-05, 0.005092519708557841, 9.999999999998899e-05, 0.03687435921191062, 9.999999999998899e-05, 9.999999999998899e-05, 0.0677480867163891, 9.999999999998899e-05, 0.009018118919742468, 0.03041780579588682, 0.04860643805582954, 0.08571553472819049, 0.08606912892604357, 0.00535356237776996, 0.012355599537448692, 0.10686593030475056, 0.07596262320742753, 0.034551258256753536, 0.12375317305691447, 9.999999999998899e-05, 0.11557030494525022, 0.11282053105702705, 0.10378827551916425, 0.19860536101660453, 0.10628599466004884, 0.09294207354861139, 0.12228313253793044, 0.10378249234496284, 0.24645221630319591, 0.11661261991477856, 0.2471844397723969, 0.07285989905885815, 0.2183338796473232, 0.11060911596676581, 0.08520666747859651, 0.08571908732640132, 0.5335248517794362, 0.53501209536603, 0.5834676877091808, 0.5488633285983138, 0.5574165613988511, 0.5640062423541731, 0.5986632453889187, 0.5951233957875254, 0.6258942288171624, 0.12206001093618901, 0.06807060318340752, 0.08374899059448693, 0.08984195070671575, 0.11511261021531483, 0.13435768577423457, 0.14602595341100133, 0.10658219539161962, 0.06605597002896924, 0.270470095849921, 0.19254953331065428, 0.17678642067323413, 0.24859969530723414, 0.19818848886472262, 0.24572008085453412, 0.2298576435530053, 0.21811317785011475, 0.23593860736564198, 0.2847956442078563, 0.41857698649026953, 0.299679605899694, 0.21289962134210794, 0.21383177741982895, 0.25600237893892086, 0.25694860701075795, 0.38747013654282636, 0.2832212647494592, 0.28207343924410533, 0.27661444239427735, 0.22403074250006794, 0.17796333907416007, 0.22227782078896996, 0.3368106039893022, 0.21375259321561357, 0.2540872883112748, 0.18678293839481075, 0.21358211133775928, 0.16016007090118312, 0.19347304441633928, 0.24113055909117787, 0.20874367342007716, 0.19680991730533715, 0.20316734253575985, 0.21443340557188617, 0.23771814231124666, 0.19898192351809108, 0.21774910600360453, 0.18751067236951702, 0.2274629023259951, 0.19751114769404576, 0.22619537648664367, 0.24506477555305994, 0.21505144874479543, 0.21116279386946024, 0.2510553589766005, 0.12663463972754052, 0.15479656637842887, 0.879114080517999, 0.20865625966768842, 0.11999856107088325, 0.3334730435635065, 0.1533754851594673, 0.9360232357962819, 0.5682815310520497, 0.21431968695984382, 0.0735886345279323, 0.2775978521326511, 0.1689936275840297, 0.40258522471322333, 0.10419281248699175, 0.7357901333048533, 0.5843534091865856, 0.20845324059667147, 0.1944957617811086, 0.17711420691862967, 0.19540515464021202, 0.18671391076518162, 0.2081183626051788, 0.22238696625189636, 0.18261934242709044, 0.2120707122128701, 0.07610873105851934, 0.09157734915229354, 0.08817123361792367, 0.07548493447233717, 0.0979564764671782, 0.09640170428765338, 0.0859328154758201, 0.08223334520186398, 0.07829574236272097]}, "mutation_prompt": null}
{"id": "f8b9b30e-3da9-499f-9a74-5b87f6083161", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "616a692f-5bd4-4a09-884a-fe00d19c9cef", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget)))  # Cosine function for w\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a scaling factor to dynamic cognitive parameters to balance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9359699259373491, 0.9366816806135445, 0.9249064295100191, 0.9415188605042385, 0.9396634591473908, 0.19096728373937222, 0.9395495861844628, 0.9347961689605107, 0.9122379141249946, 0.2808802175927232, 0.7281794844494472, 9.999999999998899e-05, 0.823016454529409, 0.5532577753882526, 0.8598660048945805, 0.0552081641819695, 0.8694258773955175, 9.999999999998899e-05, 0.15438796464234295, 0.11876489905158927, 0.14383969100450644, 0.1801451810393423, 0.14817675352295423, 0.12912793661997168, 0.1330535680515934, 0.4879503385996631, 0.18533990350212892, 0.15520270450388163, 0.11466995427904425, 0.10799512260484134, 0.09868712267042412, 0.09078607012173456, 0.13323699400461175, 0.1561190606779046, 0.13009734571565024, 0.12604951542198783, 0.9864133980849369, 0.9817001566267671, 0.981968181333423, 0.9792171106466234, 0.9645539399831917, 0.9730750083552985, 0.9838146076341676, 0.982631484573348, 0.9818154530905231, 0.6884902545720883, 0.6043278355085633, 0.4605861577827641, 0.7495673388450719, 0.1508729794088376, 0.4940345885022167, 0.6278319308395832, 0.46130059157420733, 0.0890529703029933, 0.8075192075626683, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.2799929254548138, 0.2048229556706167, 0.135970192124791, 0.13649096228934976, 0.20984463451829283, 0.16423794654210466, 0.10781269933874138, 0.1632694981455446, 0.13113472250097002, 0.1888893443477201, 0.15770038540386921, 0.47042828708926754, 0.4913681444024248, 0.16246977503534932, 0.13393765602680308, 0.20747563077152786, 0.16344015855570782, 0.22122182904291698, 0.22689291136141088, 0.3092014065496165, 0.1359753939351418, 9.999999999998899e-05, 0.20212350834028525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03860679695707936, 9.999999999998899e-05, 9.999999999998899e-05, 0.06753643940292897, 9.999999999998899e-05, 0.007148704366868319, 0.04920513162359408, 0.049301213818744305, 0.07393729971816831, 0.07825011241891067, 0.00810155412741298, 0.009097449392555967, 0.09168621488981521, 0.07192922357377685, 0.041377391820233256, 0.12375361555788622, 9.999999999998899e-05, 0.11557054329639826, 0.11279763986675095, 0.10379822125819504, 0.1986073078067676, 0.10628610971705965, 0.09294280910902741, 0.12227872905551662, 0.10378676698127476, 0.24641035342568507, 0.1166162283632095, 0.24721296266681847, 0.07285977352646933, 0.2183070968458496, 0.11060971253945662, 0.0852067491878864, 0.08571726939756552, 0.5370362643159826, 0.5306856365935907, 0.579104127061896, 0.5723455290706737, 0.5309010101244421, 0.5731513002043513, 0.5705137576455311, 0.5928004185157683, 0.6199516727295282, 0.12205893327961348, 0.0680705943485278, 0.08374899314270279, 0.08983150023848996, 0.11511287845010665, 0.13435731769035297, 0.1460259054981654, 0.1065811229810979, 0.06605599065670864, 0.2843265837779716, 0.19218590073672592, 0.17132496800912178, 0.2474323268519223, 0.20068119488675717, 0.2343131350788742, 0.22705859949028595, 0.21884566013444673, 0.23218230952485497, 0.2923905576851362, 0.38923074843583416, 0.29765639817272505, 0.21247402829853723, 0.21382012888086332, 0.2548676812777261, 0.2566798566996523, 0.3877076603448194, 0.27579094308568397, 0.28098753305981083, 0.27847692251004275, 0.22470243744722396, 0.17791254600560968, 0.21743071295350402, 0.3336384945568187, 0.21376707808224116, 0.2551928816492055, 0.18675194114958504, 0.209623160023523, 0.14967519095328574, 0.2212863546031495, 0.23811279658921547, 0.20781933260719654, 0.18615971077602866, 0.20476604335674742, 0.211974825255421, 0.2370075657152413, 0.19898158881907735, 0.21774922312573564, 0.1875106765102964, 0.2274629621580353, 0.19751113186074432, 0.2261952648973422, 0.24506968848540778, 0.28107025766073146, 0.2111569672444502, 0.176209915735409, 0.1266356729381789, 0.15479656694609933, 0.884376749949257, 0.2012759980958021, 0.11999856191285196, 0.4221069764842956, 0.15366154228560258, 0.936022629164843, 0.6020041085690943, 0.21431968830085846, 0.07358863455312914, 0.27945762470200664, 0.16899362645389193, 0.41071084364175225, 0.10419281245935985, 0.7679497293467394, 0.608102589268048, 0.20473139225900472, 0.18664044879270814, 0.2001565276155296, 0.17647760800073609, 0.18156593104664476, 0.2000355579565971, 0.18496339046136678, 0.18261921039129814, 0.1943773027476715, 0.07395382254227845, 0.09441753659683072, 0.0883074602487719, 0.07541462223043272, 0.09813326940452372, 0.08327969029130033, 0.07500470874550957, 0.08270759771103675, 0.07803408710258342]}, "mutation_prompt": null}
{"id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 79, "fitness": 0.29447659321822145, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "95fedd7a-1d20-4d98-8ee4-47f385e4a259", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "c19dc91c-ba9a-4334-87cb-5c70a04f938a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component and exponential decay\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget)) * np.exp(-0.1 * self.evaluations / self.budget)\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Integrate an exponential decay factor into the inertia weight to enhance convergence speed.", "configspace": "", "generation": 80, "fitness": 0.2919934442666914, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9426151400965388, 0.9409599143233054, 0.9312559685292257, 0.9201295183155703, 0.9304711942888133, 0.1909701948827497, 0.9482157911237933, 0.929715144309363, 0.9226954784328046, 0.8329949791340098, 0.04338637165535675, 0.6254195386160437, 0.8570581164099005, 0.7303716866705381, 0.8770417195882098, 0.004982323263677091, 0.8454463835111277, 9.999999999998899e-05, 0.18728456337731647, 0.16582340710099253, 0.1469016847959771, 0.18292080745422645, 0.15005496760717418, 0.0724805491223931, 0.15122044688053105, 0.15646936811739265, 0.1336056055764926, 0.16257963762215566, 0.1263366457959637, 0.1268929294372243, 0.15107987464279982, 0.06723958787724427, 0.17087826100848558, 0.15751242836270107, 0.11132767166685664, 0.13495579348523157, 0.9864258182751489, 0.9817006809130593, 0.981971407668507, 0.9792422258467346, 0.9771116347792955, 0.9731143603430519, 0.9837961782930338, 0.9827681960745944, 0.9818156923840824, 0.5782884695805994, 0.6550550339090675, 0.5474371639398696, 0.7162973773771428, 0.7359443358567244, 0.39859351653235264, 0.6512318158812832, 0.656318396620533, 0.08905315797882463, 0.17744486436456208, 0.21529204697062698, 0.1678899017083908, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22247957869038715, 0.19068327956543252, 0.1076166353496355, 0.17591719676414308, 0.20454460467287672, 0.1968594386661724, 0.17802188942502128, 0.13560044345833522, 0.5195174556260962, 0.16587903784362112, 0.13177889901890827, 0.2143333935373949, 0.21229688737917563, 0.21314539807979116, 0.25592406230321485, 0.20959392999846593, 0.1340536181812858, 9.999999999998899e-05, 0.2506466339555755, 9.999999999998899e-05, 0.0054898020366829225, 9.999999999998899e-05, 0.0032276688474764947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11216452580124137, 0.049133664972138336, 0.04585353087106048, 0.13689358831485565, 0.06623899540001998, 0.011651297778157432, 0.031723994866107774, 0.07090728294973048, 0.10368386075481162, 0.05150992268735022, 0.16729100365637173, 0.036847768835296835, 0.08519477997919389, 0.11038752461629409, 0.10171575105217268, 0.21470876187358423, 0.10802240451507439, 0.0792226898105155, 0.1520290245875543, 0.10830541964427065, 0.14229645798073198, 0.11184518431914003, 0.23321958642524432, 0.07762059893588413, 0.14547410118906734, 0.10594679767484827, 0.0850661393162998, 0.08562192003021007, 0.5358609545622344, 0.5714294190918607, 0.5254240309611337, 0.5508993295308839, 0.5628992896911289, 0.5734320611201288, 0.5687733080313366, 0.5920261619199279, 0.5831376157144927, 0.09306651090160123, 0.0908048328183706, 0.09319933155793969, 0.10137751485132407, 0.09210181362637426, 0.14683287239866694, 0.14113452619638234, 0.06997254018388643, 0.062279126708810195, 0.23879657834795942, 0.18198671154311952, 0.1990348918786422, 0.22795597790629896, 0.4392278365694692, 0.2376593778591397, 0.4105261105182709, 0.19076631765835517, 0.3425905202627306, 0.37210095295542767, 0.41742641624086163, 0.40972092123919135, 0.30723875511547993, 0.24140877129444216, 0.32268262877399034, 0.3099539074651042, 0.2925491486765427, 0.5882795449978075, 0.14295273835528333, 0.37469644425249904, 0.18298918498451944, 0.2678192162812789, 0.21875878248662306, 0.27979102639177167, 0.16525637472858012, 0.19841193669608725, 0.2359341451410557, 0.2354763045480328, 0.1958313788142949, 0.1969497680712342, 0.2068038722647989, 0.23913517571045673, 0.19023881660059183, 0.2212639081160661, 0.21770887186632726, 0.18675972657692075, 0.21021772643788628, 0.22389769799185422, 0.18752523312817515, 0.22855817414910207, 0.18220534179829506, 0.2266975115121317, 0.20490932637387238, 0.23036835091862062, 0.20030973352687986, 0.17570251550097216, 0.12646044065923268, 0.15483724467976134, 0.9355932037549369, 0.20124662671645488, 0.19961050890573495, 0.14297360014574678, 0.16098115584743666, 0.9277991833815743, 0.6775025952108421, 0.21434536262175274, 0.07358884369610952, 0.32417048521002534, 0.16900439738998507, 0.12868831127857916, 0.10419034311225028, 0.667175720046431, 0.7107445379807681, 0.1772222941359205, 0.1880415899896679, 0.1768983264882652, 0.20123850984036207, 0.18769829782056635, 0.19488738413243845, 0.18922772934343013, 0.18449964753823134, 0.22357585588188023, 0.08681349477383715, 0.09397916957991326, 0.0803332621191748, 0.08290782489800108, 0.06865957500633935, 0.08272024574184289, 0.07565515636636733, 0.09723180387741182, 0.09227530683526397]}, "mutation_prompt": null}
{"id": "99447735-e5b1-43aa-9849-8569e192c047", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "7fead082-5ab5-4b0f-b710-eb82c72e0b82", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Random mutation for diversification\n            mutation_prob = 0.05\n            mutation_mask = np.random.rand(self.swarm_size, self.dim) < mutation_prob\n            self.positions += mutation_mask * np.random.uniform(-0.1, 0.1, (self.swarm_size, self.dim))\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a random mutation step to diversify swarm exploration.", "configspace": "", "generation": 82, "fitness": 0.27618700579436045, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.6813741659629962, 0.7449680150672553, 0.8715662127427604, 0.8098134133512709, 0.6414552740057913, 0.7931495068002806, 0.859741572098129, 0.6494660660643399, 0.8544587961033405, 0.2558206666777544, 0.39152270371761566, 0.4820583603574248, 0.531491814140598, 0.5514321136952172, 0.47303950017990626, 0.26106974143180883, 0.5716717019050881, 0.541484664597356, 0.18462282129024554, 0.1759019199305667, 0.1615065819104109, 0.1553528029280069, 0.15321721108880115, 0.15806374813152668, 0.11870135903290047, 0.16216167738747844, 0.11868564176413987, 0.1299140704781374, 0.11373651162172171, 0.1164082125403284, 0.13947749583174407, 0.07173372803572697, 0.1339100941522362, 0.15760760463024015, 0.10208807649365104, 0.16040644874339793, 0.9852646039088603, 0.980631630932061, 0.9809705581328453, 0.9814047057383641, 0.9720508759649023, 0.9756423998428534, 0.9820037051864648, 0.9864072571392162, 0.9780349614319434, 0.44204446020039934, 0.44442558491298223, 0.3767263692348962, 0.4589093850101852, 0.3833062331443837, 0.47295427448656036, 0.42338562520401934, 0.3846172593558502, 0.45273958208370646, 0.22643792864732804, 0.9079684913980522, 0.2296662280796763, 0.21335542837302124, 0.21448455851325798, 0.7743346248368647, 0.17362133482354747, 0.12523889095708962, 0.12055927363589547, 0.1922301687928678, 0.10933712579504795, 0.19012696599630874, 0.16441055365707746, 0.1969491652966926, 0.18320627718309035, 0.12965080901258919, 0.2309220873963087, 0.19303542285788933, 0.13141800242636348, 0.1780762102928959, 0.12979084985552236, 0.1330223767898513, 0.15701600711254704, 0.21821667678068712, 0.1362390492560438, 0.09292178057953315, 0.1257761856966173, 0.007335426419416757, 0.007055109284978989, 9.999999999998899e-05, 0.04922727039867858, 0.013095233184196475, 9.999999999998899e-05, 9.999999999998899e-05, 0.017876964644187643, 0.014920159848661574, 0.03144495923946067, 0.08216926641590472, 0.07771663858022004, 0.06969733249835552, 0.0168937946011416, 0.025035929525968226, 0.06517094285723612, 0.060323028308930216, 0.059810729968272414, 0.21532163376957258, 0.038287249807759105, 0.15515124539208014, 0.08444178255764567, 0.20331171268968073, 0.12884132421414085, 0.10576331732272226, 0.07204009368380226, 0.20407456227266352, 0.2034771713551511, 0.042552055466753114, 0.1507491961169526, 0.22668063786660209, 0.11683490272903363, 0.13967380650718586, 0.08507408985129927, 0.0853525939036246, 0.0973168702369579, 0.4956986547979644, 0.5600943581846086, 0.5577102742119527, 0.518939181365745, 0.5310729239511682, 0.5359473226114535, 0.5000659708309025, 0.536003745212924, 0.566165799001874, 0.09247460378176342, 0.11004166422108497, 0.14277636680265837, 0.08377280202149251, 0.04968874378115251, 0.1114667319246675, 0.15546013982684048, 0.0662944467421428, 0.07522960663773703, 0.22956130674617004, 0.18663944730487125, 0.18255479664355012, 0.28749699335720535, 0.5053702668072513, 0.20470080130711066, 0.2332847959997828, 0.3807385540450583, 0.2252663118401329, 0.25611391914738013, 0.4383246397924454, 0.2238596693732059, 0.18786939375705447, 0.24538193532869834, 0.2590323854311659, 0.3087305920463732, 0.26419586554190355, 0.23083293413068118, 0.13870515193417354, 0.24277033326776687, 0.15967784152723563, 0.28748861365369793, 0.2415621507853749, 0.2679691909220121, 0.14748574911061751, 0.31679846566968095, 0.14983310355204627, 0.21373659312678006, 0.18221860972319348, 0.1840871775815731, 0.20873723231062402, 0.19543619059951012, 0.19700249863409414, 0.20133397777851036, 0.18990557992582813, 0.2248431765429768, 0.18124057272152283, 0.1875145212785465, 0.18718475975318438, 0.19798173935212215, 0.25374733542735517, 0.20817690125204003, 0.2261873315556906, 0.1955956154726748, 0.16750021081246835, 0.17903768314868906, 0.1770334230582592, 0.15490960325040692, 0.9213231563842359, 0.20150055870871442, 0.16597207778681955, 0.14287626492030636, 0.15978138986181167, 0.9466333331599026, 0.5731028936343101, 0.21425809651013383, 0.07353722807800755, 0.5723683085940048, 0.635921871136383, 0.15350238204414968, 0.10535619545234509, 0.1051427412388426, 0.6447630487280953, 0.18782565165417708, 0.18086023156341513, 0.20343004674128473, 0.22489560225461724, 0.1901891264903366, 0.17973069400761577, 0.18095317234588337, 0.1827621107286571, 0.1774334591747433, 0.09168313363173586, 0.09282911279532813, 0.07812728911010614, 0.09203251006669289, 0.07923264141715503, 0.09502341093875999, 0.08079392699995736, 0.07137656098493117, 0.07498647383897583]}, "mutation_prompt": null}
{"id": "488c81ec-90d8-4d38-a7ca-ad29b8971f35", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "7dc0f09b-696b-4d7f-b44c-4c766ffb12e6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "7408af8f-d6e8-4a84-8ce6-8de9ba88f422", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance convergence speed by dynamically adjusting the swarm size based on budget utilization.", "configspace": "", "generation": 85, "fitness": 0.29447659321822145, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "10d37b81-f4ac-4dc8-85f2-648f4ab2cbe5", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget)) * np.tanh(0.1 * self.evaluations / self.budget)\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce non-linear damping in inertia weight adaptation to enhance convergence in later stages.", "configspace": "", "generation": 86, "fitness": 0.2845423723483366, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9406064474349046, 0.935952511582214, 0.9236191739057309, 0.9394390668524479, 0.936850015007767, 0.19096727985423545, 0.9379946134687162, 0.9361697896396217, 0.9096339370799859, 0.39796700982722144, 0.3335348121367131, 9.999999999998899e-05, 0.7441385231147208, 0.4574690576950393, 0.8685057337825387, 0.05520531195963918, 0.8686618106126713, 9.999999999998899e-05, 0.1550438184278239, 0.12153504712099017, 0.14382066041138675, 0.18003419089978456, 0.11535681412301035, 0.12914418595770982, 0.12224077337458183, 0.7647690989444078, 0.1851632832307618, 0.15399331373612224, 0.11031154595555259, 0.11106340717162166, 0.0980253358755857, 0.09136845055272935, 0.13319394501400106, 0.15626193785513243, 0.12938123113215405, 0.1276625990096505, 0.9864134098591592, 0.9817001586506944, 0.9819681855280575, 0.9792171361799917, 0.9645542019611022, 0.9730750806482633, 0.9838145881372204, 0.9826316236072791, 0.9818154545363326, 0.5993870919298763, 0.6610779935637563, 0.4894102716754123, 0.7169988521321797, 0.15086894419165142, 0.6654685268843454, 0.6413164433371923, 0.4561822044172412, 0.0890528239725491, 0.3730303676420773, 0.2179032981380813, 0.16134726717804992, 0.21568020969816193, 0.280658729393088, 0.21036722395970753, 0.13864669728931311, 0.13649096228934976, 0.1679908444780236, 0.16349508092400933, 0.10550131109742655, 0.18188050011286228, 0.13118153336113392, 0.17607941808947292, 0.17531804350157332, 0.47807308624034817, 0.4958774855533089, 0.134449432682885, 0.13394515291497133, 0.20150669735548365, 0.1633644479055254, 0.2134433817417567, 0.22536283615114672, 0.2815868235393374, 0.13559150019540844, 9.999999999998899e-05, 0.1940142787440845, 9.999999999998899e-05, 0.04279569958500995, 9.999999999998899e-05, 0.027652491976871696, 9.999999999998899e-05, 9.999999999998899e-05, 0.07083355061736984, 9.999999999998899e-05, 0.00851248018812023, 0.028528776429377234, 0.04427142257240413, 0.07619263153772737, 0.046084816530000405, 0.01557768051241093, 0.016942765723589548, 0.08697360107334118, 0.08381605493740041, 0.069137459534377, 0.1237642804306246, 9.999999999998899e-05, 0.11513685307236787, 0.11278973976494433, 0.1038292765644494, 0.1986003138188014, 0.10672669888749065, 0.09297307685099332, 0.12225195455483773, 0.10272587425682556, 0.2413887156386152, 0.11663273402224061, 0.2469859768007585, 0.07287760014824474, 0.21843799501725547, 0.11162748055465599, 0.0852073051981137, 0.08571779499191601, 0.5294448028159924, 0.5166112211441365, 0.5805655527958116, 0.5585988895162872, 0.5848233586230364, 0.6093140978144178, 0.6140388121339817, 0.5765776804270594, 0.606956640194559, 0.12202031421824289, 0.06807085449142158, 0.08374910500512323, 0.08983596039177988, 0.11512017386200535, 0.1343406496707883, 0.1460037602286286, 0.08870625105021934, 0.06962565772167639, 0.21806248851111065, 0.19152549613056102, 0.17416121882777225, 0.2463341178198435, 0.20107641992751124, 0.18706615118119108, 0.23597654109569632, 0.22104161279478063, 0.22646718747050187, 0.27924444231732237, 0.5476404455602966, 0.29825429969294004, 0.21553309556911915, 0.21337752429040457, 0.25725068349624636, 0.2577953017405068, 0.38699931242284746, 0.27760748546710545, 0.28463662127157296, 0.2307509238465444, 0.2248684302450944, 0.1781150481990007, 0.2251392049854417, 0.29462110104416395, 0.21491026820080572, 0.25742883754984225, 0.18735080913511704, 0.20761088816289697, 0.18432016020325215, 0.22376340281234441, 0.20882108043396108, 0.20325434441187618, 0.19746662663432724, 0.20214523557556863, 0.18622513349807035, 0.2409508803809307, 0.17865632036575385, 0.21774937491756707, 0.18751094191314022, 0.22746405642884315, 0.19751095131415786, 0.22619357422169162, 0.21325263146265094, 0.29584997306836536, 0.21112480752281848, 0.17620669408910983, 0.12663195544484263, 0.15479658038463184, 0.8891906034770258, 0.20127687494315483, 0.11999865217486472, 0.411893814861234, 0.15407243960009487, 0.9361633058399127, 0.5759861018466692, 0.21431999241889232, 0.07358863515558534, 0.27766529080462377, 0.1689934610907451, 0.22662253327580306, 0.10419281314333184, 0.7833395652629322, 0.5955173941984231, 0.20619271696311792, 0.18594036526891855, 0.17950010798616445, 0.18761844369083458, 0.18346820955899745, 0.20778230507745699, 0.22904131932439142, 0.22138334777793556, 0.22072439495458585, 0.06734388135382019, 0.09334634527396068, 0.09023476520942508, 0.07388831178425681, 0.09951722985980527, 0.08735075467180009, 0.07947447302959876, 0.0824389602346699, 0.07922311705516172]}, "mutation_prompt": null}
{"id": "9a1ac6c1-95dd-408d-902e-bc48c3011071", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "d2cf0099-4b5c-4e50-82c8-356768ca3d8a", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (0.5 * w * self.velocities +  # Change: Reduced factor on w to enhance diversity\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Improving convergence by dynamically adjusting velocity scaling factor to encourage diversity.", "configspace": "", "generation": 88, "fitness": 0.280128726719173, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.945307954933044, 0.9203718946451637, 0.9332724687861936, 0.9329176784407405, 0.9439943616246417, 0.9264447617375864, 0.9468424013215435, 0.9409380278066598, 0.937596793161737, 0.3634790073161793, 9.999999999998899e-05, 0.41037533623321776, 0.2614682063288799, 0.7381346082806888, 0.29762125291116526, 0.3168405953681722, 0.054418697640996494, 0.3699904437469893, 0.15152666078064425, 0.16277565367487967, 0.6735592333908522, 0.14063903966771252, 0.1584067832191357, 0.08787439327468693, 0.15106209956219863, 0.18580949728332352, 0.19010644528888665, 0.13358441589388637, 0.113971375366268, 0.17214615203404116, 0.11780201777510302, 0.07179915780093415, 0.17506383285793525, 0.5805458066732999, 0.0929807588279975, 0.1116137707442525, 0.9863410023367577, 0.981700189179747, 0.981656084081589, 0.9740974522248221, 0.964372235746272, 0.9717417937583492, 0.9828072981952563, 0.9845125653959953, 0.9818187671508207, 0.6448404027134118, 0.7192737944199705, 0.05923553517258717, 0.36794887537907295, 0.3753923519806841, 0.35261764136876406, 0.12689539321466314, 0.6021826432371082, 0.3490341760071304, 0.2170532500061606, 0.23083583220810677, 0.3574918735954832, 0.2814970134442535, 0.2825756525389468, 0.3834760011994143, 0.13951216757532325, 0.20967939986365447, 0.15221396451036384, 0.25345849880000615, 0.1062147162756093, 0.18024877559225683, 0.14914786751179798, 0.15183534594494652, 0.1571306662334293, 0.3305804590549214, 0.33111491928907777, 0.1750434741689414, 0.1320572157722758, 0.15407156864142724, 0.14977165201016907, 0.15741205346214449, 0.14655650662082076, 0.1321252136550225, 0.13597433375216172, 0.07932169357733487, 0.19749328207976746, 9.999999999998899e-05, 0.00010248411901025989, 0.02530524661310496, 0.018829158416783898, 0.0054493471360956836, 9.999999999998899e-05, 0.07818078186075239, 9.999999999998899e-05, 0.05465407586894111, 0.05437889098334159, 0.0456643800694021, 0.08669647741229058, 0.08704144592883478, 0.020192945030571896, 0.014127764454469394, 0.09182943421056167, 0.10509141550255663, 0.038897114700227164, 0.17067630431102077, 0.036956097596898885, 0.18571300650631395, 0.1164876382582063, 0.23598453183909518, 0.1349876132001262, 0.10789280359265196, 0.09923836843801914, 0.16715072874765824, 0.18757367187973817, 0.15118806300869925, 0.13775244135352582, 0.00665493394245209, 0.03888937116822366, 0.18702895592800417, 0.12279258850654184, 0.0863624461645861, 0.08590035777644356, 0.6306492742280305, 0.5056812248979525, 0.5834205868337661, 0.5630324499302792, 0.571885192476197, 0.5389782950110693, 0.5466486059774269, 0.5337382939238307, 0.6048233632689518, 0.07766763022704604, 0.08667369697544569, 0.06683843229739073, 0.08114607457867518, 0.14444284142426245, 0.09863612800081867, 0.0839466570673254, 0.09571838262642196, 0.12561104153754643, 0.1893608153166696, 0.19445120156424056, 0.19484297760963487, 0.21468137412253796, 0.2697319963130561, 0.19924443562141914, 0.4379612922357572, 0.20179251568216683, 0.22031904370860156, 0.25548704959940727, 0.3044979238792457, 0.37717300548007204, 0.4192752265237908, 0.226577227247324, 0.3785559520616961, 0.21624325136358846, 0.2931000276093587, 0.24129391040449855, 0.19384843202568136, 0.3218445066773614, 0.24172151661703745, 0.24948922691283082, 0.1765142009111449, 0.2998301998507742, 0.16991153045343566, 0.21133601374991662, 0.2610072450108011, 0.22040728070267201, 0.16175928211417212, 0.19098671394005762, 0.2220417989073894, 0.3093760418903797, 0.18749313161250158, 0.24684171661894871, 0.22308338657848048, 0.21834006848906984, 0.1861845374236567, 0.5649624572101934, 0.21391214196406227, 0.2241916605139529, 0.21936364918232854, 0.20920998554417547, 0.18950092072761826, 0.18587032697372174, 0.2072544108269916, 0.1812137389244296, 0.12638590836526986, 0.15483370489526083, 0.9214709645161075, 0.2014635114721527, 0.12001955783364449, 0.14304986847598833, 0.14689232420047793, 0.8531371588432385, 0.5697959868727173, 0.21455876319616896, 0.07358830621680668, 0.25123266483455586, 0.16906446559101296, 0.12602780401954827, 0.10527127985451568, 0.45920368341377193, 0.5770109406008689, 0.2309092843799544, 0.19969188870414412, 0.1924301713320571, 0.19252789964374128, 0.17028268836800475, 0.187048801122344, 0.19225602226915772, 0.19449949292349, 0.18623078001361548, 0.10248096521578431, 0.07475827080898567, 0.07757955531496263, 0.08390868866281687, 0.0902662390676735, 0.09694394353593694, 0.10631113318938568, 0.08637717354849594, 0.09095749218781146]}, "mutation_prompt": null}
{"id": "15d98e7a-3b35-4922-bfa4-060d6ef00233", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with adjusted sinusoidal component frequency\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(4 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Adjust the inertia weight's sinusoidal component frequency to better balance exploration and exploitation.", "configspace": "", "generation": 89, "fitness": 0.2863616113295066, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.938242243363627, 0.9263510918971752, 0.9265370264838332, 0.9272029754727508, 0.9244633851029936, 0.19096719083021796, 0.934417727270768, 0.934147645084515, 0.9118682573897066, 0.4219354453844354, 0.6268567724792015, 0.7538589230937331, 0.047486435805695115, 0.8284877056674727, 0.8342424568473068, 0.05480265467966661, 0.5701556775133858, 9.999999999998899e-05, 0.15966099073917994, 0.18025805763417502, 0.1597295054557628, 0.15730327524197962, 0.1413027651733506, 0.08925199152522678, 0.10871552507178728, 0.16122310917057237, 0.13423180421190517, 0.1543296427508587, 0.10853474974165889, 0.11832993759267352, 0.12305638480766101, 0.09549295347451858, 0.16855671485115542, 0.13815944961855853, 0.07767423023491615, 0.11156933504384758, 0.9864392930776164, 0.9817012638120566, 0.9819749052624395, 0.9792514288394454, 0.9771042799345916, 0.9731682629406331, 0.983784162349412, 0.985516221509239, 0.9818156750215034, 0.5377701749315225, 0.44653753415627595, 0.3629305224515674, 0.6514787283950599, 0.6520931418878166, 0.15371925250309326, 0.7256191909888685, 0.7105988202211001, 0.33176192134180693, 0.2526299326595479, 0.8862103238623084, 0.1711414707235397, 0.21596473592634968, 0.36099283460135234, 0.20708209270647338, 0.16595077382992096, 0.14955351495634495, 0.15031759387463484, 0.16587919447754518, 0.13092853331758725, 0.1785696531140547, 0.13342348722010533, 0.1335419929359083, 0.16645894782116755, 0.1364548790237301, 0.4366677987280543, 0.1312879654369683, 0.1727748922533121, 0.2309175152888212, 0.17343786856843346, 0.1854371301951877, 0.21699895506240374, 0.23227947392638437, 0.13547784789395045, 9.999999999998899e-05, 0.21003034172862445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04769300420834843, 0.014396857250639772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009248763579591812, 0.02651644016904242, 0.06385158802644797, 0.06773725423812571, 0.06977738229585562, 0.0016684606728349927, 0.03564421611829771, 0.08921432299726961, 0.05961762308594276, 0.04039055787384094, 0.17288027071024314, 0.04838652463414328, 0.12123520049688741, 0.10770569472848779, 0.0991551618637595, 0.20663438015926527, 0.1084794362092607, 0.0828715457883431, 0.10525283345214376, 0.11381210000653286, 0.13108420782413777, 0.1096736848350156, 0.2640259217982993, 0.0729639151159941, 0.1606844061803031, 0.151488906805469, 0.0852617108496122, 0.08572523551908762, 0.5586131239534181, 0.5236569889549312, 0.5135003479803323, 0.5467539876353371, 0.551539825814986, 0.5376227737942352, 0.6127661835041454, 0.5698272400321653, 0.615020216220391, 0.08034083917183177, 0.08267249577183577, 0.08470979299809556, 0.11212247935106057, 0.07925927635306185, 0.08317398189794478, 0.0733266329599166, 0.11122715290417418, 0.1074355273994555, 0.30146717057775096, 0.18498541438033633, 0.18060163952234765, 0.26604035441290874, 0.25983718674146505, 0.41815678377181653, 0.25990685236450783, 0.1798825622862752, 0.3620900390339026, 0.38623978577917795, 0.37113665600446766, 0.3405014302435633, 0.2499977765598519, 0.23829606396258107, 0.1959948917973634, 0.23760619822043805, 0.3713069796193902, 0.45878454372877076, 0.16056927122005493, 0.24771434410560278, 0.1945392086957708, 0.22044028532915727, 0.21311590309857686, 0.33394158495037063, 0.17505546230972435, 0.2567938585778503, 0.22651992313576896, 0.20867967745884575, 0.1422480269642945, 0.1905355887349095, 0.2664040878434739, 0.2255242159804376, 0.1768028558334538, 0.2274670798589582, 0.18586957200022003, 0.23593406541544248, 0.21174149954006005, 0.21131332261673175, 0.1993025967374461, 0.22030216511967682, 0.19191114888027028, 0.19574282243251828, 0.19679331785552268, 0.18728443082469992, 0.22502129902136925, 0.18708753304198167, 0.12589486473484301, 0.15485138089685146, 0.9386530497311038, 0.20118679817074148, 0.1998804986749676, 0.16824381090659302, 0.16156034605329317, 0.9449230393742445, 0.8055520462373033, 0.21441219657253352, 0.0735890155234501, 0.5057555465672666, 0.16901722246140893, 0.16282035420662744, 0.10419391455059246, 0.8014466263407516, 0.5934125542706626, 0.19125314361838508, 0.19083685119193228, 0.19346946273536247, 0.18532515133749616, 0.18028465764732993, 0.20650986442137098, 0.20815444559704221, 0.1827402013662588, 0.18169827476537925, 0.08701129028107224, 0.07319860971796677, 0.08304370570096797, 0.09559133578932066, 0.0915218177824263, 0.08678835923245298, 0.07530663429128293, 0.06849989009989876, 0.09946856908056323]}, "mutation_prompt": null}
{"id": "72b58934-6871-42f4-b358-d8646be40f9d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "cf73fc82-6072-4532-bf9b-4a1e48a60ccc", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "229254cb-e7a5-4dfc-b9d4-6ab7925617cd", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.8 * (self.evaluations / self.budget) * 1.2  # Adjusted scaling factor for better local search\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Improve performance by adjusting the cognitive component scaling factor for better local search.", "configspace": "", "generation": 92, "fitness": 0.2866890421554142, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9470931064434974, 0.9372473315897214, 0.9301397889532873, 0.9227141561101441, 0.9338522766128801, 0.19097019433406393, 0.9478550125911509, 0.9331879421308525, 0.9183666211269947, 0.8188699461224308, 0.043522758461400524, 0.409375452553844, 0.8662167071526774, 0.7082177384462327, 0.8670198650231786, 0.004981996949101064, 0.4900078374999939, 9.999999999998899e-05, 0.1588035091749903, 0.773446491248142, 0.16271756513430247, 0.1398084513475033, 0.08389672946555715, 0.07392429765958808, 0.11639821428201025, 0.29975483979329265, 0.13472118946645972, 0.16166510094385378, 0.15409120965577872, 0.14361637791210147, 0.11532934558840768, 0.06438555651685396, 0.18359714875546929, 0.15882471718232594, 0.07402366989366216, 0.1376684447670934, 0.9864258310244975, 0.9817014568738475, 0.9819714122434279, 0.9792422685823843, 0.9771116256060056, 0.9731143643500673, 0.9837961652432639, 0.9827685020134752, 0.981816409349132, 0.7000862527275404, 0.5745107236256985, 0.44164105493127626, 0.6372011928590657, 0.4716324913153366, 0.5191515580444457, 0.6668456455789269, 0.5545156526438213, 0.08905371815330232, 0.24151413749253492, 0.2173496735066629, 0.1674808375337461, 0.21536879874052262, 0.21504968773173616, 0.21104030358490822, 0.17551028261658863, 0.13523939727110534, 0.15112762581185757, 0.15797531001728382, 0.10877759575315815, 0.1725624980472128, 0.18155771939869247, 0.19251954251791392, 0.1422027343092621, 0.3435221265144085, 0.42039791895894896, 0.1756784257477002, 0.13188160175448482, 0.2189975342936823, 0.16766333649827925, 0.21482910512729747, 0.2190923600721506, 0.2540311167814746, 0.13384877835748032, 9.999999999998899e-05, 0.21111443632255034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003329979304272479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1139875164211851, 0.05092566245269303, 0.04599595912892329, 0.12857465974281945, 0.07510516105223541, 0.044576972042296825, 0.042241077133493454, 0.06588891787023388, 0.0777708498931794, 0.062033634952400996, 0.16453599396522256, 0.03703835368368347, 0.08533957042959062, 0.1101280205876436, 0.1016248150004927, 0.2147050657031906, 0.10806502230883341, 0.0809562677440665, 0.14920638232434102, 0.10851319524353165, 0.14683399111096862, 0.11179366496771692, 0.23412422820711132, 0.0771843433748789, 0.16390670726186418, 0.10463334891339693, 0.08495578872552201, 0.08565285169966064, 0.5376769913767645, 0.5714457658787396, 0.5126473671727985, 0.6046899913202799, 0.5643739756669487, 0.5664640217474614, 0.5694776020093698, 0.5656976781471255, 0.5801146963441506, 0.07898064541586158, 0.05054026746619533, 0.09315186125724739, 0.10118539526987647, 0.09372057591846328, 0.14694253674200441, 0.09266314772287565, 0.06936080561685287, 0.06211614646483865, 0.32251672329096814, 0.1811502399806736, 0.1816938874947046, 0.31099242249412484, 0.22932167821837468, 0.21958193605795162, 0.2430006236554041, 0.21065935284156034, 0.38393114358962344, 0.33148886316896153, 0.4292502964661098, 0.3067841893038381, 0.2809568607063262, 0.227191642945894, 0.23801031742081658, 0.30872249064696344, 0.33390461291830786, 0.4389661279821563, 0.14279506970167188, 0.24959802395705055, 0.18745722638121287, 0.22720151613584216, 0.2343414591416204, 0.29724926982531386, 0.16345465824923344, 0.24221337709619084, 0.1886890133805621, 0.2133927801882114, 0.1415314522762352, 0.20363986799669265, 0.19129881021306194, 0.19446685220464066, 0.18913864055980933, 0.21886675262037902, 0.2016337153766371, 0.21248258116551155, 0.17904318193536617, 0.22381524355360105, 0.18752190194528218, 0.2285603572318211, 0.188580015322954, 0.22619070060892887, 0.20493760416991458, 0.23023399694072533, 0.20030583462974727, 0.17636402757169745, 0.12655600659742972, 0.1548371641369959, 0.9022455547621292, 0.20124995631911835, 0.1996190928529301, 0.1429736179996336, 0.1610526749191835, 0.936123547033852, 0.6137417645988368, 0.21434418151704993, 0.07358880523467104, 0.5234388166384347, 0.16899984307485505, 0.13871415723643565, 0.1041946996187324, 0.6740140595797995, 0.7354327286064972, 0.19533544513105172, 0.17648894661113523, 0.18878040009940056, 0.20206838239934932, 0.19649744071297293, 0.1861061756548802, 0.17646478698991708, 0.1841326554508561, 0.24127011604782034, 0.0961624540945577, 0.08444826406816663, 0.09483911481364138, 0.08730344598256956, 0.08310561537461658, 0.08470721133600567, 0.06537549250646302, 0.08537212425935559, 0.09511275014815379]}, "mutation_prompt": null}
{"id": "502ebcd5-f576-4cd5-83a0-497e5be28506", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "f07c3da7-1c2d-46b4-a098-1925474ec300", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "44cd3a86-5ef9-49d2-89de-86f6f16a0b35", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with new cosine component\n            c1 = 1.5 + 0.5 * np.cos(2 * np.pi * (self.evaluations / self.budget))  # Added cosine component\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Introduce a cosine component to dynamically adjust the cognitive coefficient `c1`.", "configspace": "", "generation": 95, "fitness": 0.27581354411430437, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9387291253171193, 0.9300109419995781, 0.9331627214457332, 0.9274992106560562, 0.9344669616446226, 0.19097012296686278, 0.93408165348144, 0.9110824729169912, 0.9103165249978401, 0.8073236669878069, 0.043485964922492015, 0.5483017168095708, 0.06985167926644009, 0.821018817091254, 0.8575016385944947, 0.8154648712713537, 0.8600586224696327, 0.7823351961387672, 0.12542550857410495, 0.12687242062551796, 0.16194659069686856, 0.17299823343852838, 0.14913938341171507, 0.1384147398178991, 0.13935510233682613, 0.1837067344389891, 0.14672456650217247, 0.152870969024538, 0.11687530180563133, 0.11044242720940933, 0.17180491600520686, 0.10588188875442117, 0.17154098744585589, 0.14362301404868427, 0.09839943784487537, 0.32427895275385, 0.9864258310244975, 0.9818781484187825, 0.9819714122434279, 0.9792422685823843, 0.97711168538861, 0.9731016838514587, 0.9837961652432639, 0.9827685020134752, 0.9821438694348913, 0.5980474154108982, 0.6980641605672995, 0.05935515048678808, 0.5427875612589212, 0.15057670166931547, 0.26154076643547375, 0.12658442262576342, 0.08853737567346542, 0.0890533518644182, 0.24405061712303389, 0.21203280966886962, 0.16229199066652145, 0.2154645938622377, 0.2794522628633387, 0.21371498119457055, 0.221604215212318, 0.1680535049703611, 0.16432589040666412, 0.18349896598239468, 0.10629888106182428, 0.17553270971600576, 0.1723488333881189, 0.17375551630728536, 0.1609698681602294, 0.40211740850668654, 0.3347096016059129, 0.1895447448010893, 0.16847374112067848, 0.13137544394394263, 0.16943782618044811, 0.2465503418567765, 0.2190195997806461, 0.14780095062757992, 0.1344087688850033, 9.999999999998899e-05, 0.2047770788937895, 9.999999999998899e-05, 0.007137071757431168, 9.999999999998899e-05, 0.0017345644274723293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00019385583675757267, 0.0735897240938801, 0.04658644646694032, 0.07762892216054829, 0.08863786118147532, 0.014213280781926962, 0.08288839269265702, 0.08686915154770414, 0.07039346905642518, 0.05957846960970181, 0.15229453551042038, 0.03766806526294619, 0.05420933920203175, 0.10981659672744026, 0.10135568657168992, 0.2247208977763897, 0.1067189650736915, 0.0815204405308716, 0.10593478176734317, 0.09915947636784472, 0.30459920881370106, 0.11691904395452346, 0.24251319232768176, 0.08228746000490506, 0.16118212268449772, 0.08463053239322871, 0.08531542357463062, 0.08520413117331771, 0.6347075606774635, 0.5492460351902183, 0.5407349885302764, 0.6034699481850014, 0.5760955221558116, 0.5461959905260847, 0.5751530649990471, 0.5197874620459388, 0.582718119751199, 0.08799355680738608, 0.09655482931337522, 0.07083250319273704, 0.1740789011042143, 0.07435169674273112, 0.10698962089572073, 0.11717901100978545, 0.06918743960410523, 0.10750063406607702, 0.18384906589031347, 0.1898133363343908, 0.23576103719370722, 0.1943940999913082, 0.3167783991422266, 0.2147926705267369, 0.25767081030479544, 0.18934474903333676, 0.1813946502460997, 0.230652508491058, 0.2911614829554886, 0.3041389612876567, 0.2780283010893021, 0.2589765660868235, 0.19517410584061212, 0.37513480110235964, 0.2667860851872619, 0.35862709144429394, 0.1600237291297283, 0.22803985505174118, 0.20147844831350414, 0.21537609437269578, 0.15425781291910412, 0.22623459091748788, 0.18872462227739273, 0.25416871757132076, 0.2627370594920413, 0.2232060148760987, 0.2201676604721834, 0.20527197614933423, 0.21379920203776348, 0.2435296698815892, 0.20686837920243994, 0.20689648749186784, 0.20078200652460865, 0.21342951078504124, 0.22380254899115515, 0.19994431531646906, 0.2062283139852671, 0.21123557113748015, 0.22591690686841515, 0.22661565089443847, 0.20517393821093421, 0.19805154055107388, 0.20026781931752013, 0.17752656063595718, 0.1261203999523972, 0.15487629719117013, 0.9113829803262599, 0.20126120845454964, 0.19957463924679164, 0.14296969813495541, 0.16232886310679984, 0.9330210419297723, 0.5432788601158898, 0.21438852580591594, 0.07358474094306244, 0.2879501229607755, 0.16891424170881275, 0.14536054344039262, 0.10419801874727641, 0.1050370999108231, 0.6907419094607774, 0.20135208633520696, 0.19414850336725786, 0.17446352330850567, 0.18028866253333675, 0.17976880701067222, 0.20551268479636897, 0.194325474204753, 0.1941209575079601, 0.19259161504015365, 0.08860529661586625, 0.09260362773647901, 0.09100194833936204, 0.09111762820000091, 0.08249360418945284, 0.09382873253663604, 0.07583058332237147, 0.09430928795024751, 0.08260089191640252]}, "mutation_prompt": null}
{"id": "bf096d24-96db-411c-a6dc-8beef08dcc8f", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.3  # Adjusted scaling factor to 1.3\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Refine the balance between exploration and exploitation by adjusting the scaling factor in the velocity update.", "configspace": "", "generation": 96, "fitness": 0.292752867178472, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9422595308284584, 0.9388275338735765, 0.9326068427410399, 0.9180532267321778, 0.9296729035553697, 0.19097019158362283, 0.9466935208880104, 0.9359121374646984, 0.9237672488981088, 0.8092546669838909, 0.043391215617410106, 0.4861369036408817, 0.8650835188308109, 0.8067512118678941, 0.8512439780193355, 0.004982365250029375, 0.8442230394644314, 9.999999999998899e-05, 0.15400134197346238, 0.15408589723953448, 0.1467261569513214, 0.15555165524734982, 0.10985650044866357, 0.05752381012901164, 0.12593312919683863, 0.1592691165985789, 0.1539350438200925, 0.16253701589588287, 0.11161522254371825, 0.14443354526773688, 0.11543577883041034, 0.09821205146518419, 0.15828584111623567, 0.15984382843165257, 0.07383016786660734, 0.11496432843743476, 0.9864258310244975, 0.9817007882845877, 0.9819714122434279, 0.9792422685823843, 0.9771116252278063, 0.9731144339398213, 0.9837961652432639, 0.9827685020134752, 0.9818157933000278, 0.5889786581310361, 0.7027556174982038, 0.5651323303073001, 0.7084780915700088, 0.725058261699036, 0.5879438474599664, 0.6510090866089862, 0.5234352831635927, 0.08905417158551265, 0.17745203361780737, 0.21738125246864326, 0.16793901686770374, 0.215393946515261, 0.2152373304462093, 0.21003238570461413, 0.1724725109989611, 0.13791974758298753, 0.22254580719098083, 0.14996170633541517, 0.10764658795369109, 0.17159235820471985, 0.20126918703664975, 0.1957799799493759, 0.20115687137483795, 0.13552000941696207, 0.4377378574117652, 0.14570474005251344, 0.13178692670753134, 0.22976679039648418, 0.16910624251327988, 0.2206958990156781, 0.24725342955124374, 0.2969681177874094, 0.1328667272485229, 9.999999999998899e-05, 0.2143364072604632, 9.999999999998899e-05, 0.007246831729497583, 9.999999999998899e-05, 0.0019301249401365572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11152153652785401, 0.05772730219585409, 0.03197091840134725, 0.08871101748843879, 0.08441410547733408, 0.006768529969285342, 0.02439137735991226, 0.05642943982072901, 0.09098903017483062, 0.047785447792792146, 0.16695116406123978, 0.0369463824367684, 0.08556762810878715, 0.11039181337601855, 0.10162030671670419, 0.2137860190427755, 0.10666955935993805, 0.07972717412502084, 0.15230829912385013, 0.10826378415673099, 0.14523135352068328, 0.11180977624122646, 0.23309457001251144, 0.077422834921544, 0.14598724980467392, 0.10565261559660777, 0.08506791436199967, 0.08564651903115317, 0.5905137875906892, 0.5416981005091607, 0.5304394573747753, 0.5667517228488356, 0.5624536842928798, 0.5609977460784066, 0.6013573856642593, 0.6667468096056279, 0.5696978880866148, 0.08761090551366546, 0.10001687908648949, 0.0931993406730307, 0.10231404063875982, 0.09212061499468416, 0.14682841710135563, 0.14261025430682295, 0.06760786238104777, 0.06227478891253091, 0.2431973618916382, 0.18926125966514906, 0.20433235181377718, 0.22888316735778402, 0.29784627680091935, 0.2242602436070773, 0.41814266684620305, 0.21830970059103416, 0.29083525470910554, 0.4508845595621105, 0.3414433611203339, 0.6021362058321267, 0.30194492095890757, 0.2314923316999754, 0.3822561601759885, 0.3098451180863635, 0.27308588158567104, 0.6629844799246516, 0.1430157123129524, 0.40291849403617064, 0.18862959896243114, 0.22473749027994527, 0.23517859036734168, 0.24626169307138557, 0.16885219806279406, 0.19757785171857445, 0.2539009668982267, 0.23873338668337796, 0.17835581190423688, 0.19218039787486274, 0.23048927068703706, 0.22789216885117236, 0.19429746214365973, 0.22765027279004302, 0.21114969661677296, 0.18326637842673144, 0.21019265966598033, 0.22392469443138696, 0.1882288722700607, 0.22855797576656556, 0.18221219693153057, 0.22669331132857284, 0.2049042105814095, 0.23036415488420847, 0.2003093690059633, 0.17599992706338996, 0.12645981649870353, 0.15483717706848732, 0.9356807288873792, 0.20124601079260307, 0.19961231261109935, 0.14297359952555833, 0.16130872699689536, 0.9289267309713518, 0.7440749719057863, 0.21434491572741987, 0.07358883207634936, 0.48749857073616865, 0.16900388206239547, 0.12228475055102284, 0.10419471642350486, 0.7547111382026488, 0.7290814654068702, 0.17910768394844834, 0.18622388680358049, 0.17586582008664686, 0.2004366672219412, 0.1989034688660003, 0.19315732494913573, 0.18055048161204956, 0.2129387373173809, 0.18313817119508313, 0.07828765720301822, 0.09724027078861786, 0.08035092557052725, 0.06903901112032529, 0.06861555111342077, 0.07309629142085727, 0.071533387657716, 0.10002120650339985, 0.07941148815396248]}, "mutation_prompt": null}
{"id": "3d9686fd-36c3-4716-b048-f5ca811f5097", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)\n\n            k = np.abs(np.cos((np.pi * self.evaluations) / (2 * self.budget)))  # Adaptive constriction factor\n\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (k * (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions)))\n            \n            self.positions += self.velocities\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance diversity by introducing adaptive constriction factor in velocity update.", "configspace": "", "generation": 97, "fitness": 0.27889568726224506, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9389876845730569, 0.9394155539528017, 0.9371656063044823, 0.9360365645555335, 0.9332987900815762, 0.19097034415268233, 0.9458857817312475, 0.9298689737885906, 0.921225904250232, 0.35241601948168655, 0.04302838276669918, 0.40514145349643016, 0.8541862556551812, 0.36944208997614314, 0.8660415124807673, 0.004979310585473962, 0.42969166187902263, 9.999999999998899e-05, 0.16177185790124637, 0.1271025780087902, 0.1469642184744071, 0.17434683984746258, 0.141344236427569, 0.07416416393565561, 0.10318003068162596, 0.1589387600564809, 0.1460626379555322, 0.1602230625809662, 0.10605876289133087, 0.0939228970454069, 0.15112832928281494, 0.11791646892892438, 0.1166116496191516, 0.1356563391056267, 0.09296941808175985, 0.13587371713503105, 0.9864257610288929, 0.9817005234466483, 0.9819708563110205, 0.9792401401772676, 0.9771112253623686, 0.973112932532211, 0.983795570164734, 0.9827676820932019, 0.9818155542500666, 0.7057184177478659, 0.5793957152085567, 0.3305354021432768, 0.743140206497336, 0.4664646494142215, 0.6239251449966725, 0.48969342810777894, 0.4715087133244058, 0.08905343895466888, 0.3831589917779502, 0.21149981119206052, 0.1680282660246537, 0.21495707142203824, 0.21494639660173565, 0.2100311790082242, 0.1792791430562677, 0.1375634324365852, 0.39600391900159526, 0.14902553356804926, 0.10644953026522908, 0.18223709443722869, 0.13092483567757063, 0.1889745951399433, 0.16273851323359834, 0.13524587590808623, 0.4345571704724811, 0.1325629718178014, 0.13138983835284035, 0.18088803847580448, 0.15907896548777212, 0.21310463289612125, 0.2080380734747166, 0.17002141016737837, 0.13280176849509662, 9.999999999998899e-05, 0.20086650643291615, 9.999999999998899e-05, 0.004740574931405117, 9.999999999998899e-05, 0.046958942005011384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06488070500985521, 0.05340707955830837, 0.06612383929078403, 0.11359402182614486, 0.0826832394534247, 0.0016435867471834564, 0.0420023567096407, 0.0620238793119412, 0.08093046614032029, 0.06305485726476434, 0.16705138863564184, 0.03752189919472293, 0.07793971163814162, 0.11061244083756061, 0.16658443762380104, 0.2211687541190881, 0.10689035899720434, 0.08082680116389618, 0.15269856930399694, 0.1087638961346864, 0.14291171706043604, 0.11267421123700683, 0.25919307469968866, 0.07734481360217527, 0.1456133233496939, 0.1045881675361483, 0.08501940483119685, 0.08561404751653423, 0.5237337262570914, 0.507175797632021, 0.5120686972806552, 0.5856456698657351, 0.5461057190919864, 0.5193905853507823, 0.6195937274172565, 0.5364078941333139, 0.5846231085653462, 0.09924869455205065, 0.06390061702061955, 0.09311394352632707, 0.10130701450187629, 0.09215977758032223, 0.14761048248429287, 0.1419274161609363, 0.07027237063430691, 0.06581360209415821, 0.2500647663629715, 0.1867219799932408, 0.2093533562172477, 0.22940831632395853, 0.1733977268929886, 0.3094216708668086, 0.3108061713924386, 0.22674365568797383, 0.24138432808514776, 0.36964356291906175, 0.2686694246486375, 0.28309062029487264, 0.29192034998672456, 0.23532226954651236, 0.25880822038091544, 0.34703268258685405, 0.2896060450988487, 0.4088338415882381, 0.20206977385145652, 0.29414740112111226, 0.18734970873922463, 0.22704190863887108, 0.22562807053490708, 0.35031269371506024, 0.16509933561451484, 0.2833570097039796, 0.24322139349983452, 0.23462189104638886, 0.1561912856599138, 0.2072007370050668, 0.21436401453802623, 0.2107166570875787, 0.20436310619917897, 0.23579965504310374, 0.25401264743137164, 0.21805566465886272, 0.21024061182640918, 0.22453473410411928, 0.18752475422805714, 0.22855649058233185, 0.18791255130568107, 0.2266986835920577, 0.20487539741757577, 0.6502735723139252, 0.20032637855024815, 0.17564383757512858, 0.12645959605574042, 0.15483724993870307, 0.9272989706665669, 0.20124672227511253, 0.19957579162980643, 0.1429728358764938, 0.16266369699701588, 0.9440391898784263, 0.5151198049552226, 0.21434126784682062, 0.07358887993488983, 0.32103852958053647, 0.1690056676577537, 0.09449539775875349, 0.1041947211391312, 0.619676183298911, 0.6737303064317991, 0.1797157365241886, 0.18161393269382786, 0.197654571661264, 0.19401609692138222, 0.18674052603448132, 0.18591403481675572, 0.24533936606137807, 0.16896561236244068, 0.22675618645488127, 0.08619167788470061, 0.08292807389889334, 0.07634416222967666, 0.09759976136285353, 0.10174046329557973, 0.0872395137969455, 0.08879533409683482, 0.08067727670873415, 0.0888561613251968]}, "mutation_prompt": null}
{"id": "cd057bfa-2492-45f8-b673-05cfd977b9b7", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
{"id": "e74c813b-8036-4c8a-ba1d-57ad4a5dd3b6", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = min(50, budget // dim)  # Adjust swarm size based on the budget and dimension\n        self.positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.swarm_size, dim))\n        self.personal_best_positions = np.copy(self.positions)\n        self.personal_best_values = np.full(self.swarm_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evaluations = 0\n    \n    def __call__(self, func):\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Evaluate fitness\n                fitness = func(self.positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if fitness < self.personal_best_values[i]:\n                    self.personal_best_values[i] = fitness\n                    self.personal_best_positions[i] = self.positions[i]\n                \n                # Update global best\n                if fitness < self.global_best_value:\n                    self.global_best_value = fitness\n                    self.global_best_position = self.positions[i]\n            \n            # Inertia weight adaptation with sinusoidal component\n            w = 0.9 - (0.8 * np.cos((np.pi / 2) * (self.evaluations / self.budget))) + 0.1 * np.sin(2 * np.pi * (self.evaluations / self.budget))\n            # Dynamic c1 and c2 with scaling factor\n            c1 = 1.5 + 0.5 * (self.evaluations / self.budget) * 1.2  # Introduce scaling factor 1.2\n            c2 = 2.0 - 0.5 * (self.evaluations / self.budget)  # As above, complementing c1\n            \n            # Update velocities and positions\n            r1, r2 = np.random.random((2, self.swarm_size, self.dim))\n            self.velocities = (w * self.velocities +\n                               c1 * r1 * (self.personal_best_positions - self.positions) +\n                               c2 * r2 * (self.global_best_position - self.positions))\n            \n            self.positions += self.velocities\n            \n            # Boundary handling\n            self.positions = np.clip(self.positions, self.lower_bound, self.upper_bound)\n        \n        # Return the best found solution\n        return self.global_best_position, self.global_best_value", "name": "AdaptivePSO", "description": "Enhance global exploration by adjusting the inertia weight function to include a sinusoidal component.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b3eba4b3-4d6d-496d-9701-ccdee1e803f8", "metadata": {"aucs": [0.9428268020757892, 0.9413272930681462, 0.9325985644019881, 0.9199513950097973, 0.9303760192928481, 0.1909701927961902, 0.9471987481680777, 0.9285528104636449, 0.9202935794115149, 0.832561334291116, 0.043389556520931016, 0.5438713114953531, 0.8466676504454903, 0.578098532348952, 0.8702915094148402, 0.004982407335331063, 0.8189391853263314, 9.999999999998899e-05, 0.18718585120537767, 0.12545553851690305, 0.14691632322770198, 0.1828970519272728, 0.14152800693992829, 0.07212228513814645, 0.15943871269801935, 0.14255912118437442, 0.13363883130592435, 0.162494808585271, 0.16401655708477925, 0.11549063490336853, 0.14862843279489968, 0.11881704126844195, 0.15731299383741604, 0.175688600503077, 0.0740444361124657, 0.13292382474234166, 0.9864258310244975, 0.9817006830546796, 0.9819714122434279, 0.9792422685823843, 0.9771116251668068, 0.9731144451715292, 0.9837961652432639, 0.9827685020134752, 0.9818156941151756, 0.6327650639756841, 0.7254571875472595, 0.5376092464002837, 0.7520472316145768, 0.7787959894574786, 0.6525810558354226, 0.7010959395035368, 0.627696101172589, 0.08905347289773635, 0.32587316833621016, 0.2157951062454, 0.16793931250557603, 0.21535808270039392, 0.21522683608673865, 0.20999902594951492, 0.1724725109989611, 0.13795117785307998, 0.22243944368642277, 0.1505172217834122, 0.10723718436828367, 0.1815363514071735, 0.224474805364548, 0.20976301493199145, 0.1985804511487398, 0.13552252340459858, 0.4449871408073647, 0.1830577502874401, 0.13179391670230745, 0.22717225343834024, 0.20870318548378186, 0.24806774285721045, 0.24512772070330524, 0.1838080451241466, 0.13310388543340013, 9.999999999998899e-05, 0.23872952020756022, 9.999999999998899e-05, 0.008774840856230925, 9.999999999998899e-05, 0.005118551219895351, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07386470847498172, 0.06988422918589954, 0.03269628087939069, 0.12865948805357874, 0.07062930732068073, 0.012060496924105824, 0.024038894705104563, 0.07687786291728893, 0.09019780818579548, 0.05197097391087757, 0.1673132793802009, 0.036857420991969425, 0.08539193779966603, 0.11041802513895416, 0.10161735284308293, 0.21473156290224404, 0.1066689489141921, 0.07981941368718204, 0.15195100239994241, 0.10849192129338792, 0.14349309255199283, 0.11181115164387101, 0.23332387846709313, 0.0773802679210952, 0.14545435304542298, 0.10630878209154804, 0.08506537191849473, 0.08564134184473515, 0.606135911296658, 0.5435191895728042, 0.5410673391559673, 0.5549619103148327, 0.5514458941651044, 0.5526935197698597, 0.5991396860755854, 0.6194706251796347, 0.6009469346358853, 0.09276065239622167, 0.09090071804257494, 0.09312061926078208, 0.10137869573408242, 0.09210634353859037, 0.14683154914745122, 0.1406111321011978, 0.06764853101349311, 0.06227395472318875, 0.265422269331529, 0.1823076539832187, 0.20153535914675236, 0.2277739289277111, 0.5681541390850025, 0.23510808673478867, 0.3973446661590573, 0.19779910698166492, 0.3118097028864182, 0.37817141566519197, 0.3428547452208348, 0.49862279424900047, 0.29627342366593556, 0.2388537701863167, 0.326382741846588, 0.31064902191953647, 0.2889698644877874, 0.4871119451929796, 0.14264603405363685, 0.28760691962833185, 0.18999793577000823, 0.27487689986192476, 0.24129464515629484, 0.28099851804867426, 0.16453367654025386, 0.19816603615738848, 0.2314360394311833, 0.21741873214153107, 0.21576686943244117, 0.2002297840332613, 0.20390623123858853, 0.2226365624202944, 0.1844300181401477, 0.22399458896481772, 0.2056680839164141, 0.21195290639530873, 0.21013350677888953, 0.22388194266884442, 0.18752496246856298, 0.22855781673037334, 0.18362215805575455, 0.22669548228678416, 0.2049036564027058, 0.2303635740665938, 0.20030987303511272, 0.1757233323713957, 0.12645978540296332, 0.15483723302085273, 0.9356597510277329, 0.20124668875096763, 0.19961052668178547, 0.14297359429670997, 0.16208860020419003, 0.9283033955100394, 0.6942491081516067, 0.21434532818887486, 0.07358884382443431, 0.44507518446205663, 0.1690043979836624, 0.1286712876998114, 0.10419034264387683, 0.7345100386908346, 0.7364218271180717, 0.1823494469647582, 0.19176023592094338, 0.1905423873939045, 0.20720690181934642, 0.18918089172007235, 0.18414452283159066, 0.1809758054306465, 0.19580676303276967, 0.18442224494720527, 0.10002098219124478, 0.09565389849248807, 0.08033758638592459, 0.08110128100594505, 0.06864906290151396, 0.0869174187338978, 0.06783421408612034, 0.09775149112078252, 0.09796465436180513]}, "mutation_prompt": null}
